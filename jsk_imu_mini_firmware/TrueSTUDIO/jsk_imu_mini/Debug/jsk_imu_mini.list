
jsk_imu_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009648  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000018c  0800a780  0800a780  0001a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000003b8  0800a90c  0800a90c  0001a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000018  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000051c  20000000  0800ace0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003a30  20000520  0800b1fc  00020520  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20003f50  0800b1fc  00023f50  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000a40c  00000000  00000000  0002054c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0003dce5  00000000  00000000  0002a958  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005852  00000000  00000000  0006863d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  0006de90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c8  00000000  00000000  0006ef48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000a192  00000000  00000000  00070910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00015824  00000000  00000000  0007aaa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fa  00000000  00000000  000902c6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c760  00000000  00000000  000903c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000030  00000000  00000000  0009cd10  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001ed  00000000  00000000  0009cb20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000520 	.word	0x20000520
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080097f8 	.word	0x080097f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000524 	.word	0x20000524
 8000204:	080097f8 	.word	0x080097f8

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_drsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000230:	e002      	b.n	8000238 <__adddf3>
 8000232:	bf00      	nop

08000234 <__aeabi_dsub>:
 8000234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000238 <__adddf3>:
 8000238:	b530      	push	{r4, r5, lr}
 800023a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000242:	ea94 0f05 	teq	r4, r5
 8000246:	bf08      	it	eq
 8000248:	ea90 0f02 	teqeq	r0, r2
 800024c:	bf1f      	itttt	ne
 800024e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000252:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025e:	f000 80e2 	beq.w	8000426 <__adddf3+0x1ee>
 8000262:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026a:	bfb8      	it	lt
 800026c:	426d      	neglt	r5, r5
 800026e:	dd0c      	ble.n	800028a <__adddf3+0x52>
 8000270:	442c      	add	r4, r5
 8000272:	ea80 0202 	eor.w	r2, r0, r2
 8000276:	ea81 0303 	eor.w	r3, r1, r3
 800027a:	ea82 0000 	eor.w	r0, r2, r0
 800027e:	ea83 0101 	eor.w	r1, r3, r1
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	2d36      	cmp	r5, #54	; 0x36
 800028c:	bf88      	it	hi
 800028e:	bd30      	pophi	{r4, r5, pc}
 8000290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000294:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800029c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x70>
 80002a2:	4240      	negs	r0, r0
 80002a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x84>
 80002b6:	4252      	negs	r2, r2
 80002b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002bc:	ea94 0f05 	teq	r4, r5
 80002c0:	f000 80a7 	beq.w	8000412 <__adddf3+0x1da>
 80002c4:	f1a4 0401 	sub.w	r4, r4, #1
 80002c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002cc:	db0d      	blt.n	80002ea <__adddf3+0xb2>
 80002ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d2:	fa22 f205 	lsr.w	r2, r2, r5
 80002d6:	1880      	adds	r0, r0, r2
 80002d8:	f141 0100 	adc.w	r1, r1, #0
 80002dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e0:	1880      	adds	r0, r0, r2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	4159      	adcs	r1, r3
 80002e8:	e00e      	b.n	8000308 <__adddf3+0xd0>
 80002ea:	f1a5 0520 	sub.w	r5, r5, #32
 80002ee:	f10e 0e20 	add.w	lr, lr, #32
 80002f2:	2a01      	cmp	r2, #1
 80002f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f8:	bf28      	it	cs
 80002fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	18c0      	adds	r0, r0, r3
 8000304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800030c:	d507      	bpl.n	800031e <__adddf3+0xe6>
 800030e:	f04f 0e00 	mov.w	lr, #0
 8000312:	f1dc 0c00 	rsbs	ip, ip, #0
 8000316:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031a:	eb6e 0101 	sbc.w	r1, lr, r1
 800031e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000322:	d31b      	bcc.n	800035c <__adddf3+0x124>
 8000324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000328:	d30c      	bcc.n	8000344 <__adddf3+0x10c>
 800032a:	0849      	lsrs	r1, r1, #1
 800032c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000330:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000334:	f104 0401 	add.w	r4, r4, #1
 8000338:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800033c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000340:	f080 809a 	bcs.w	8000478 <__adddf3+0x240>
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	bf08      	it	eq
 800034a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034e:	f150 0000 	adcs.w	r0, r0, #0
 8000352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000356:	ea41 0105 	orr.w	r1, r1, r5
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000360:	4140      	adcs	r0, r0
 8000362:	eb41 0101 	adc.w	r1, r1, r1
 8000366:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036a:	f1a4 0401 	sub.w	r4, r4, #1
 800036e:	d1e9      	bne.n	8000344 <__adddf3+0x10c>
 8000370:	f091 0f00 	teq	r1, #0
 8000374:	bf04      	itt	eq
 8000376:	4601      	moveq	r1, r0
 8000378:	2000      	moveq	r0, #0
 800037a:	fab1 f381 	clz	r3, r1
 800037e:	bf08      	it	eq
 8000380:	3320      	addeq	r3, #32
 8000382:	f1a3 030b 	sub.w	r3, r3, #11
 8000386:	f1b3 0220 	subs.w	r2, r3, #32
 800038a:	da0c      	bge.n	80003a6 <__adddf3+0x16e>
 800038c:	320c      	adds	r2, #12
 800038e:	dd08      	ble.n	80003a2 <__adddf3+0x16a>
 8000390:	f102 0c14 	add.w	ip, r2, #20
 8000394:	f1c2 020c 	rsb	r2, r2, #12
 8000398:	fa01 f00c 	lsl.w	r0, r1, ip
 800039c:	fa21 f102 	lsr.w	r1, r1, r2
 80003a0:	e00c      	b.n	80003bc <__adddf3+0x184>
 80003a2:	f102 0214 	add.w	r2, r2, #20
 80003a6:	bfd8      	it	le
 80003a8:	f1c2 0c20 	rsble	ip, r2, #32
 80003ac:	fa01 f102 	lsl.w	r1, r1, r2
 80003b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b4:	bfdc      	itt	le
 80003b6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ba:	4090      	lslle	r0, r2
 80003bc:	1ae4      	subs	r4, r4, r3
 80003be:	bfa2      	ittt	ge
 80003c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c4:	4329      	orrge	r1, r5
 80003c6:	bd30      	popge	{r4, r5, pc}
 80003c8:	ea6f 0404 	mvn.w	r4, r4
 80003cc:	3c1f      	subs	r4, #31
 80003ce:	da1c      	bge.n	800040a <__adddf3+0x1d2>
 80003d0:	340c      	adds	r4, #12
 80003d2:	dc0e      	bgt.n	80003f2 <__adddf3+0x1ba>
 80003d4:	f104 0414 	add.w	r4, r4, #20
 80003d8:	f1c4 0220 	rsb	r2, r4, #32
 80003dc:	fa20 f004 	lsr.w	r0, r0, r4
 80003e0:	fa01 f302 	lsl.w	r3, r1, r2
 80003e4:	ea40 0003 	orr.w	r0, r0, r3
 80003e8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ec:	ea45 0103 	orr.w	r1, r5, r3
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	f1c4 040c 	rsb	r4, r4, #12
 80003f6:	f1c4 0220 	rsb	r2, r4, #32
 80003fa:	fa20 f002 	lsr.w	r0, r0, r2
 80003fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000402:	ea40 0003 	orr.w	r0, r0, r3
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	fa21 f004 	lsr.w	r0, r1, r4
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f094 0f00 	teq	r4, #0
 8000416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041a:	bf06      	itte	eq
 800041c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000420:	3401      	addeq	r4, #1
 8000422:	3d01      	subne	r5, #1
 8000424:	e74e      	b.n	80002c4 <__adddf3+0x8c>
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf18      	it	ne
 800042c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000430:	d029      	beq.n	8000486 <__adddf3+0x24e>
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	d005      	beq.n	800044a <__adddf3+0x212>
 800043e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000442:	bf04      	itt	eq
 8000444:	4619      	moveq	r1, r3
 8000446:	4610      	moveq	r0, r2
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea91 0f03 	teq	r1, r3
 800044e:	bf1e      	ittt	ne
 8000450:	2100      	movne	r1, #0
 8000452:	2000      	movne	r0, #0
 8000454:	bd30      	popne	{r4, r5, pc}
 8000456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045a:	d105      	bne.n	8000468 <__adddf3+0x230>
 800045c:	0040      	lsls	r0, r0, #1
 800045e:	4149      	adcs	r1, r1
 8000460:	bf28      	it	cs
 8000462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800046c:	bf3c      	itt	cc
 800046e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000472:	bd30      	popcc	{r4, r5, pc}
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800047c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048a:	bf1a      	itte	ne
 800048c:	4619      	movne	r1, r3
 800048e:	4610      	movne	r0, r2
 8000490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000494:	bf1c      	itt	ne
 8000496:	460b      	movne	r3, r1
 8000498:	4602      	movne	r2, r0
 800049a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049e:	bf06      	itte	eq
 80004a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a4:	ea91 0f03 	teqeq	r1, r3
 80004a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	bf00      	nop

080004b0 <__aeabi_ui2d>:
 80004b0:	f090 0f00 	teq	r0, #0
 80004b4:	bf04      	itt	eq
 80004b6:	2100      	moveq	r1, #0
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c4:	f04f 0500 	mov.w	r5, #0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e750      	b.n	8000370 <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_i2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e8:	bf48      	it	mi
 80004ea:	4240      	negmi	r0, r0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e73e      	b.n	8000370 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_f2d>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000502:	bf1f      	itttt	ne
 8000504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800050c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000510:	4770      	bxne	lr
 8000512:	f092 0f00 	teq	r2, #0
 8000516:	bf14      	ite	ne
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e720      	b.n	8000370 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aedc 	beq.w	800031e <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6c1      	b.n	800031e <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_dmul>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005aa:	bf1d      	ittte	ne
 80005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b0:	ea94 0f0c 	teqne	r4, ip
 80005b4:	ea95 0f0c 	teqne	r5, ip
 80005b8:	f000 f8de 	bleq	8000778 <__aeabi_dmul+0x1dc>
 80005bc:	442c      	add	r4, r5
 80005be:	ea81 0603 	eor.w	r6, r1, r3
 80005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ce:	bf18      	it	ne
 80005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	d038      	beq.n	8000650 <__aeabi_dmul+0xb4>
 80005de:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f2:	f04f 0600 	mov.w	r6, #0
 80005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fa:	f09c 0f00 	teq	ip, #0
 80005fe:	bf18      	it	ne
 8000600:	f04e 0e01 	orrne.w	lr, lr, #1
 8000604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000610:	d204      	bcs.n	800061c <__aeabi_dmul+0x80>
 8000612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000616:	416d      	adcs	r5, r5
 8000618:	eb46 0606 	adc.w	r6, r6, r6
 800061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000634:	bf88      	it	hi
 8000636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063a:	d81e      	bhi.n	800067a <__aeabi_dmul+0xde>
 800063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000654:	ea46 0101 	orr.w	r1, r6, r1
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	ea81 0103 	eor.w	r1, r1, r3
 8000660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000664:	bfc2      	ittt	gt
 8000666:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066e:	bd70      	popgt	{r4, r5, r6, pc}
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f04f 0e00 	mov.w	lr, #0
 8000678:	3c01      	subs	r4, #1
 800067a:	f300 80ab 	bgt.w	80007d4 <__aeabi_dmul+0x238>
 800067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000682:	bfde      	ittt	le
 8000684:	2000      	movle	r0, #0
 8000686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd70      	pople	{r4, r5, r6, pc}
 800068c:	f1c4 0400 	rsb	r4, r4, #0
 8000690:	3c20      	subs	r4, #32
 8000692:	da35      	bge.n	8000700 <__aeabi_dmul+0x164>
 8000694:	340c      	adds	r4, #12
 8000696:	dc1b      	bgt.n	80006d0 <__aeabi_dmul+0x134>
 8000698:	f104 0414 	add.w	r4, r4, #20
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f305 	lsl.w	r3, r0, r5
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	fa21 f604 	lsr.w	r6, r1, r4
 80006c0:	eb42 0106 	adc.w	r1, r2, r6
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 040c 	rsb	r4, r4, #12
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f304 	lsl.w	r3, r0, r4
 80006dc:	fa20 f005 	lsr.w	r0, r0, r5
 80006e0:	fa01 f204 	lsl.w	r2, r1, r4
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	f141 0100 	adc.w	r1, r1, #0
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f205 	lsl.w	r2, r0, r5
 8000708:	ea4e 0e02 	orr.w	lr, lr, r2
 800070c:	fa20 f304 	lsr.w	r3, r0, r4
 8000710:	fa01 f205 	lsl.w	r2, r1, r5
 8000714:	ea43 0302 	orr.w	r3, r3, r2
 8000718:	fa21 f004 	lsr.w	r0, r1, r4
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	fa21 f204 	lsr.w	r2, r1, r4
 8000724:	ea20 0002 	bic.w	r0, r0, r2
 8000728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f094 0f00 	teq	r4, #0
 800073c:	d10f      	bne.n	800075e <__aeabi_dmul+0x1c2>
 800073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	eb41 0101 	adc.w	r1, r1, r1
 8000748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3c01      	subeq	r4, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1a6>
 8000752:	ea41 0106 	orr.w	r1, r1, r6
 8000756:	f095 0f00 	teq	r5, #0
 800075a:	bf18      	it	ne
 800075c:	4770      	bxne	lr
 800075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	eb43 0303 	adc.w	r3, r3, r3
 8000768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3d01      	subeq	r5, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1c6>
 8000772:	ea43 0306 	orr.w	r3, r3, r6
 8000776:	4770      	bx	lr
 8000778:	ea94 0f0c 	teq	r4, ip
 800077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000780:	bf18      	it	ne
 8000782:	ea95 0f0c 	teqne	r5, ip
 8000786:	d00c      	beq.n	80007a2 <__aeabi_dmul+0x206>
 8000788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078c:	bf18      	it	ne
 800078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000792:	d1d1      	bne.n	8000738 <__aeabi_dmul+0x19c>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a6:	bf06      	itte	eq
 80007a8:	4610      	moveq	r0, r2
 80007aa:	4619      	moveq	r1, r3
 80007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b0:	d019      	beq.n	80007e6 <__aeabi_dmul+0x24a>
 80007b2:	ea94 0f0c 	teq	r4, ip
 80007b6:	d102      	bne.n	80007be <__aeabi_dmul+0x222>
 80007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007bc:	d113      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007be:	ea95 0f0c 	teq	r5, ip
 80007c2:	d105      	bne.n	80007d0 <__aeabi_dmul+0x234>
 80007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c8:	bf1c      	itt	ne
 80007ca:	4610      	movne	r0, r2
 80007cc:	4619      	movne	r1, r3
 80007ce:	d10a      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <__aeabi_ddiv>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8a7 	bleq	800095e <__aeabi_ddiv+0x16e>
 8000810:	eba4 0405 	sub.w	r4, r4, r5
 8000814:	ea81 0e03 	eor.w	lr, r1, r3
 8000818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f000 8088 	beq.w	8000934 <__aeabi_ddiv+0x144>
 8000824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000834:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000840:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000848:	429d      	cmp	r5, r3
 800084a:	bf08      	it	eq
 800084c:	4296      	cmpeq	r6, r2
 800084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000852:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000856:	d202      	bcs.n	800085e <__aeabi_ddiv+0x6e>
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	1ab6      	subs	r6, r6, r2
 8000860:	eb65 0503 	sbc.w	r5, r5, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 000c 	orrcs.w	r0, r0, ip
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d0:	d018      	beq.n	8000904 <__aeabi_ddiv+0x114>
 80008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ee:	d1c0      	bne.n	8000872 <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	d10b      	bne.n	800090e <__aeabi_ddiv+0x11e>
 80008f6:	ea41 0100 	orr.w	r1, r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000902:	e7b6      	b.n	8000872 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	bf04      	itt	eq
 800090a:	4301      	orreq	r1, r0
 800090c:	2000      	moveq	r0, #0
 800090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000912:	bf88      	it	hi
 8000914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000918:	f63f aeaf 	bhi.w	800067a <__aeabi_dmul+0xde>
 800091c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000920:	bf04      	itt	eq
 8000922:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092a:	f150 0000 	adcs.w	r0, r0, #0
 800092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	e690      	b.n	800067a <__aeabi_dmul+0xde>
 8000958:	ea45 0e06 	orr.w	lr, r5, r6
 800095c:	e68d      	b.n	800067a <__aeabi_dmul+0xde>
 800095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000962:	ea94 0f0c 	teq	r4, ip
 8000966:	bf08      	it	eq
 8000968:	ea95 0f0c 	teqeq	r5, ip
 800096c:	f43f af3b 	beq.w	80007e6 <__aeabi_dmul+0x24a>
 8000970:	ea94 0f0c 	teq	r4, ip
 8000974:	d10a      	bne.n	800098c <__aeabi_ddiv+0x19c>
 8000976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097a:	f47f af34 	bne.w	80007e6 <__aeabi_dmul+0x24a>
 800097e:	ea95 0f0c 	teq	r5, ip
 8000982:	f47f af25 	bne.w	80007d0 <__aeabi_dmul+0x234>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e72c      	b.n	80007e6 <__aeabi_dmul+0x24a>
 800098c:	ea95 0f0c 	teq	r5, ip
 8000990:	d106      	bne.n	80009a0 <__aeabi_ddiv+0x1b0>
 8000992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000996:	f43f aefd 	beq.w	8000794 <__aeabi_dmul+0x1f8>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e722      	b.n	80007e6 <__aeabi_dmul+0x24a>
 80009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009aa:	f47f aec5 	bne.w	8000738 <__aeabi_dmul+0x19c>
 80009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b2:	f47f af0d 	bne.w	80007d0 <__aeabi_dmul+0x234>
 80009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ba:	f47f aeeb 	bne.w	8000794 <__aeabi_dmul+0x1f8>
 80009be:	e712      	b.n	80007e6 <__aeabi_dmul+0x24a>

080009c0 <__aeabi_d2f>:
 80009c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c8:	bf24      	itt	cs
 80009ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d2:	d90d      	bls.n	80009f0 <__aeabi_d2f+0x30>
 80009d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e8:	bf08      	it	eq
 80009ea:	f020 0001 	biceq.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f4:	d121      	bne.n	8000a3a <__aeabi_d2f+0x7a>
 80009f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fa:	bfbc      	itt	lt
 80009fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	4770      	bxlt	lr
 8000a02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0a:	f1c2 0218 	rsb	r2, r2, #24
 8000a0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a16:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1a:	bf18      	it	ne
 8000a1c:	f040 0001 	orrne.w	r0, r0, #1
 8000a20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a2c:	ea40 000c 	orr.w	r0, r0, ip
 8000a30:	fa23 f302 	lsr.w	r3, r3, r2
 8000a34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a38:	e7cc      	b.n	80009d4 <__aeabi_d2f+0x14>
 8000a3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3e:	d107      	bne.n	8000a50 <__aeabi_d2f+0x90>
 8000a40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a44:	bf1e      	ittt	ne
 8000a46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4e:	4770      	bxne	lr
 8000a50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_uldivmod>:
 8000a60:	b953      	cbnz	r3, 8000a78 <__aeabi_uldivmod+0x18>
 8000a62:	b94a      	cbnz	r2, 8000a78 <__aeabi_uldivmod+0x18>
 8000a64:	2900      	cmp	r1, #0
 8000a66:	bf08      	it	eq
 8000a68:	2800      	cmpeq	r0, #0
 8000a6a:	bf1c      	itt	ne
 8000a6c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a74:	f001 b8f6 	b.w	8001c64 <__aeabi_idiv0>
 8000a78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a80:	f000 f806 	bl	8000a90 <__udivmoddi4>
 8000a84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8c:	b004      	add	sp, #16
 8000a8e:	4770      	bx	lr

08000a90 <__udivmoddi4>:
 8000a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a94:	468c      	mov	ip, r1
 8000a96:	460d      	mov	r5, r1
 8000a98:	4604      	mov	r4, r0
 8000a9a:	9e08      	ldr	r6, [sp, #32]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d151      	bne.n	8000b44 <__udivmoddi4+0xb4>
 8000aa0:	428a      	cmp	r2, r1
 8000aa2:	4617      	mov	r7, r2
 8000aa4:	d96d      	bls.n	8000b82 <__udivmoddi4+0xf2>
 8000aa6:	fab2 fe82 	clz	lr, r2
 8000aaa:	f1be 0f00 	cmp.w	lr, #0
 8000aae:	d00b      	beq.n	8000ac8 <__udivmoddi4+0x38>
 8000ab0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ab4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ab8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000abc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ac0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ac4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ac8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000acc:	0c25      	lsrs	r5, r4, #16
 8000ace:	fbbc f8fa 	udiv	r8, ip, sl
 8000ad2:	fa1f f987 	uxth.w	r9, r7
 8000ad6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ada:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ade:	fb08 f309 	mul.w	r3, r8, r9
 8000ae2:	42ab      	cmp	r3, r5
 8000ae4:	d90a      	bls.n	8000afc <__udivmoddi4+0x6c>
 8000ae6:	19ed      	adds	r5, r5, r7
 8000ae8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000aec:	f080 8123 	bcs.w	8000d36 <__udivmoddi4+0x2a6>
 8000af0:	42ab      	cmp	r3, r5
 8000af2:	f240 8120 	bls.w	8000d36 <__udivmoddi4+0x2a6>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	443d      	add	r5, r7
 8000afc:	1aed      	subs	r5, r5, r3
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b04:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b0c:	fb00 f909 	mul.w	r9, r0, r9
 8000b10:	45a1      	cmp	r9, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x98>
 8000b14:	19e4      	adds	r4, r4, r7
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 810a 	bcs.w	8000d32 <__udivmoddi4+0x2a2>
 8000b1e:	45a1      	cmp	r9, r4
 8000b20:	f240 8107 	bls.w	8000d32 <__udivmoddi4+0x2a2>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	eba4 0409 	sub.w	r4, r4, r9
 8000b2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b30:	2100      	movs	r1, #0
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d061      	beq.n	8000bfa <__udivmoddi4+0x16a>
 8000b36:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	6034      	str	r4, [r6, #0]
 8000b3e:	6073      	str	r3, [r6, #4]
 8000b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0xc8>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d054      	beq.n	8000bf6 <__udivmoddi4+0x166>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	f040 808e 	bne.w	8000c7e <__udivmoddi4+0x1ee>
 8000b62:	42ab      	cmp	r3, r5
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xdc>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2d0>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb65 0503 	sbc.w	r5, r5, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	46ac      	mov	ip, r5
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d03f      	beq.n	8000bfa <__udivmoddi4+0x16a>
 8000b7a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b912      	cbnz	r2, 8000b8a <__udivmoddi4+0xfa>
 8000b84:	2701      	movs	r7, #1
 8000b86:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b8a:	fab7 fe87 	clz	lr, r7
 8000b8e:	f1be 0f00 	cmp.w	lr, #0
 8000b92:	d134      	bne.n	8000bfe <__udivmoddi4+0x16e>
 8000b94:	1beb      	subs	r3, r5, r7
 8000b96:	0c3a      	lsrs	r2, r7, #16
 8000b98:	fa1f fc87 	uxth.w	ip, r7
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ba2:	0c25      	lsrs	r5, r4, #16
 8000ba4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ba8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bac:	fb0c f308 	mul.w	r3, ip, r8
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d907      	bls.n	8000bc4 <__udivmoddi4+0x134>
 8000bb4:	19ed      	adds	r5, r5, r7
 8000bb6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000bba:	d202      	bcs.n	8000bc2 <__udivmoddi4+0x132>
 8000bbc:	42ab      	cmp	r3, r5
 8000bbe:	f200 80d1 	bhi.w	8000d64 <__udivmoddi4+0x2d4>
 8000bc2:	4680      	mov	r8, r0
 8000bc4:	1aed      	subs	r5, r5, r3
 8000bc6:	b2a3      	uxth	r3, r4
 8000bc8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bcc:	fb02 5510 	mls	r5, r2, r0, r5
 8000bd0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bd4:	fb0c fc00 	mul.w	ip, ip, r0
 8000bd8:	45a4      	cmp	ip, r4
 8000bda:	d907      	bls.n	8000bec <__udivmoddi4+0x15c>
 8000bdc:	19e4      	adds	r4, r4, r7
 8000bde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000be2:	d202      	bcs.n	8000bea <__udivmoddi4+0x15a>
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	f200 80b8 	bhi.w	8000d5a <__udivmoddi4+0x2ca>
 8000bea:	4618      	mov	r0, r3
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf4:	e79d      	b.n	8000b32 <__udivmoddi4+0xa2>
 8000bf6:	4631      	mov	r1, r6
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1ce 0420 	rsb	r4, lr, #32
 8000c02:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c06:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c0a:	fa20 f804 	lsr.w	r8, r0, r4
 8000c0e:	0c3a      	lsrs	r2, r7, #16
 8000c10:	fa25 f404 	lsr.w	r4, r5, r4
 8000c14:	ea48 0803 	orr.w	r8, r8, r3
 8000c18:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c1c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c20:	fb02 4411 	mls	r4, r2, r1, r4
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c2c:	fb01 f30c 	mul.w	r3, r1, ip
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1bc>
 8000c38:	19ed      	adds	r5, r5, r7
 8000c3a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000c3e:	f080 808a 	bcs.w	8000d56 <__udivmoddi4+0x2c6>
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	f240 8087 	bls.w	8000d56 <__udivmoddi4+0x2c6>
 8000c48:	3902      	subs	r1, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aeb      	subs	r3, r5, r3
 8000c4e:	fa1f f588 	uxth.w	r5, r8
 8000c52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c56:	fb02 3310 	mls	r3, r2, r0, r3
 8000c5a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c5e:	fb00 f30c 	mul.w	r3, r0, ip
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0x1e6>
 8000c66:	19ed      	adds	r5, r5, r7
 8000c68:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c6c:	d26f      	bcs.n	8000d4e <__udivmoddi4+0x2be>
 8000c6e:	42ab      	cmp	r3, r5
 8000c70:	d96d      	bls.n	8000d4e <__udivmoddi4+0x2be>
 8000c72:	3802      	subs	r0, #2
 8000c74:	443d      	add	r5, r7
 8000c76:	1aeb      	subs	r3, r5, r3
 8000c78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c7c:	e78f      	b.n	8000b9e <__udivmoddi4+0x10e>
 8000c7e:	f1c1 0720 	rsb	r7, r1, #32
 8000c82:	fa22 f807 	lsr.w	r8, r2, r7
 8000c86:	408b      	lsls	r3, r1
 8000c88:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8c:	ea48 0303 	orr.w	r3, r8, r3
 8000c90:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c98:	40fd      	lsrs	r5, r7
 8000c9a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c9e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ca2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ca6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000caa:	fa1f f883 	uxth.w	r8, r3
 8000cae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cb2:	fb09 f408 	mul.w	r4, r9, r8
 8000cb6:	42ac      	cmp	r4, r5
 8000cb8:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x244>
 8000cc2:	18ed      	adds	r5, r5, r3
 8000cc4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cc8:	d243      	bcs.n	8000d52 <__udivmoddi4+0x2c2>
 8000cca:	42ac      	cmp	r4, r5
 8000ccc:	d941      	bls.n	8000d52 <__udivmoddi4+0x2c2>
 8000cce:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd2:	441d      	add	r5, r3
 8000cd4:	1b2d      	subs	r5, r5, r4
 8000cd6:	fa1f fe8e 	uxth.w	lr, lr
 8000cda:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cde:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ce2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ce6:	fb00 f808 	mul.w	r8, r0, r8
 8000cea:	45a0      	cmp	r8, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x26e>
 8000cee:	18e4      	adds	r4, r4, r3
 8000cf0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000cf4:	d229      	bcs.n	8000d4a <__udivmoddi4+0x2ba>
 8000cf6:	45a0      	cmp	r8, r4
 8000cf8:	d927      	bls.n	8000d4a <__udivmoddi4+0x2ba>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	441c      	add	r4, r3
 8000cfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d02:	eba4 0408 	sub.w	r4, r4, r8
 8000d06:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0a:	454c      	cmp	r4, r9
 8000d0c:	46c6      	mov	lr, r8
 8000d0e:	464d      	mov	r5, r9
 8000d10:	d315      	bcc.n	8000d3e <__udivmoddi4+0x2ae>
 8000d12:	d012      	beq.n	8000d3a <__udivmoddi4+0x2aa>
 8000d14:	b156      	cbz	r6, 8000d2c <__udivmoddi4+0x29c>
 8000d16:	ebba 030e 	subs.w	r3, sl, lr
 8000d1a:	eb64 0405 	sbc.w	r4, r4, r5
 8000d1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431f      	orrs	r7, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	6037      	str	r7, [r6, #0]
 8000d2a:	6074      	str	r4, [r6, #4]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	4618      	mov	r0, r3
 8000d34:	e6f8      	b.n	8000b28 <__udivmoddi4+0x98>
 8000d36:	4690      	mov	r8, r2
 8000d38:	e6e0      	b.n	8000afc <__udivmoddi4+0x6c>
 8000d3a:	45c2      	cmp	sl, r8
 8000d3c:	d2ea      	bcs.n	8000d14 <__udivmoddi4+0x284>
 8000d3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d42:	eb69 0503 	sbc.w	r5, r9, r3
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7e4      	b.n	8000d14 <__udivmoddi4+0x284>
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	e7d7      	b.n	8000cfe <__udivmoddi4+0x26e>
 8000d4e:	4640      	mov	r0, r8
 8000d50:	e791      	b.n	8000c76 <__udivmoddi4+0x1e6>
 8000d52:	4681      	mov	r9, r0
 8000d54:	e7be      	b.n	8000cd4 <__udivmoddi4+0x244>
 8000d56:	4601      	mov	r1, r0
 8000d58:	e778      	b.n	8000c4c <__udivmoddi4+0x1bc>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	e745      	b.n	8000bec <__udivmoddi4+0x15c>
 8000d60:	4608      	mov	r0, r1
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xe6>
 8000d64:	f1a8 0802 	sub.w	r8, r8, #2
 8000d68:	443d      	add	r5, r7
 8000d6a:	e72b      	b.n	8000bc4 <__udivmoddi4+0x134>

08000d6c <selfrel_offset31>:
 8000d6c:	6803      	ldr	r3, [r0, #0]
 8000d6e:	005a      	lsls	r2, r3, #1
 8000d70:	bf4c      	ite	mi
 8000d72:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000d76:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000d7a:	4418      	add	r0, r3
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <search_EIT_table>:
 8000d80:	b361      	cbz	r1, 8000ddc <search_EIT_table+0x5c>
 8000d82:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d86:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8000d8a:	4690      	mov	r8, r2
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	46d1      	mov	r9, sl
 8000d90:	2700      	movs	r7, #0
 8000d92:	eb07 0409 	add.w	r4, r7, r9
 8000d96:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000d9a:	1064      	asrs	r4, r4, #1
 8000d9c:	00e5      	lsls	r5, r4, #3
 8000d9e:	1971      	adds	r1, r6, r5
 8000da0:	4608      	mov	r0, r1
 8000da2:	f7ff ffe3 	bl	8000d6c <selfrel_offset31>
 8000da6:	45a2      	cmp	sl, r4
 8000da8:	4683      	mov	fp, r0
 8000daa:	f105 0008 	add.w	r0, r5, #8
 8000dae:	4430      	add	r0, r6
 8000db0:	d009      	beq.n	8000dc6 <search_EIT_table+0x46>
 8000db2:	f7ff ffdb 	bl	8000d6c <selfrel_offset31>
 8000db6:	45c3      	cmp	fp, r8
 8000db8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000dbc:	d805      	bhi.n	8000dca <search_EIT_table+0x4a>
 8000dbe:	4540      	cmp	r0, r8
 8000dc0:	d209      	bcs.n	8000dd6 <search_EIT_table+0x56>
 8000dc2:	1c67      	adds	r7, r4, #1
 8000dc4:	e7e5      	b.n	8000d92 <search_EIT_table+0x12>
 8000dc6:	45c3      	cmp	fp, r8
 8000dc8:	d905      	bls.n	8000dd6 <search_EIT_table+0x56>
 8000dca:	42a7      	cmp	r7, r4
 8000dcc:	d002      	beq.n	8000dd4 <search_EIT_table+0x54>
 8000dce:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8000dd2:	e7de      	b.n	8000d92 <search_EIT_table+0x12>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4770      	bx	lr

08000de0 <__gnu_unwind_get_pr_addr>:
 8000de0:	2801      	cmp	r0, #1
 8000de2:	d007      	beq.n	8000df4 <__gnu_unwind_get_pr_addr+0x14>
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d007      	beq.n	8000df8 <__gnu_unwind_get_pr_addr+0x18>
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__gnu_unwind_get_pr_addr+0x1c>)
 8000dea:	2800      	cmp	r0, #0
 8000dec:	bf0c      	ite	eq
 8000dee:	4618      	moveq	r0, r3
 8000df0:	2000      	movne	r0, #0
 8000df2:	4770      	bx	lr
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <__gnu_unwind_get_pr_addr+0x20>)
 8000df6:	4770      	bx	lr
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <__gnu_unwind_get_pr_addr+0x24>)
 8000dfa:	4770      	bx	lr
 8000dfc:	080014e5 	.word	0x080014e5
 8000e00:	080014e9 	.word	0x080014e9
 8000e04:	080014ed 	.word	0x080014ed

08000e08 <get_eit_entry>:
 8000e08:	b530      	push	{r4, r5, lr}
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <get_eit_entry+0x94>)
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	4604      	mov	r4, r0
 8000e10:	1e8d      	subs	r5, r1, #2
 8000e12:	b37b      	cbz	r3, 8000e74 <get_eit_entry+0x6c>
 8000e14:	a901      	add	r1, sp, #4
 8000e16:	4628      	mov	r0, r5
 8000e18:	f3af 8000 	nop.w
 8000e1c:	b320      	cbz	r0, 8000e68 <get_eit_entry+0x60>
 8000e1e:	9901      	ldr	r1, [sp, #4]
 8000e20:	462a      	mov	r2, r5
 8000e22:	f7ff ffad 	bl	8000d80 <search_EIT_table>
 8000e26:	4601      	mov	r1, r0
 8000e28:	b1f0      	cbz	r0, 8000e68 <get_eit_entry+0x60>
 8000e2a:	f7ff ff9f 	bl	8000d6c <selfrel_offset31>
 8000e2e:	684b      	ldr	r3, [r1, #4]
 8000e30:	64a0      	str	r0, [r4, #72]	; 0x48
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d012      	beq.n	8000e5c <get_eit_entry+0x54>
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f101 0004 	add.w	r0, r1, #4
 8000e3c:	db20      	blt.n	8000e80 <get_eit_entry+0x78>
 8000e3e:	f7ff ff95 	bl	8000d6c <selfrel_offset31>
 8000e42:	2300      	movs	r3, #0
 8000e44:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000e46:	6523      	str	r3, [r4, #80]	; 0x50
 8000e48:	6803      	ldr	r3, [r0, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db1c      	blt.n	8000e88 <get_eit_entry+0x80>
 8000e4e:	f7ff ff8d 	bl	8000d6c <selfrel_offset31>
 8000e52:	2300      	movs	r3, #0
 8000e54:	6120      	str	r0, [r4, #16]
 8000e56:	4618      	mov	r0, r3
 8000e58:	b003      	add	sp, #12
 8000e5a:	bd30      	pop	{r4, r5, pc}
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	6123      	str	r3, [r4, #16]
 8000e60:	2305      	movs	r3, #5
 8000e62:	4618      	mov	r0, r3
 8000e64:	b003      	add	sp, #12
 8000e66:	bd30      	pop	{r4, r5, pc}
 8000e68:	2300      	movs	r3, #0
 8000e6a:	6123      	str	r3, [r4, #16]
 8000e6c:	2309      	movs	r3, #9
 8000e6e:	4618      	mov	r0, r3
 8000e70:	b003      	add	sp, #12
 8000e72:	bd30      	pop	{r4, r5, pc}
 8000e74:	490a      	ldr	r1, [pc, #40]	; (8000ea0 <get_eit_entry+0x98>)
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <get_eit_entry+0x9c>)
 8000e78:	1a09      	subs	r1, r1, r0
 8000e7a:	10c9      	asrs	r1, r1, #3
 8000e7c:	9101      	str	r1, [sp, #4]
 8000e7e:	e7cf      	b.n	8000e20 <get_eit_entry+0x18>
 8000e80:	2301      	movs	r3, #1
 8000e82:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000e84:	6523      	str	r3, [r4, #80]	; 0x50
 8000e86:	e7df      	b.n	8000e48 <get_eit_entry+0x40>
 8000e88:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000e8c:	f7ff ffa8 	bl	8000de0 <__gnu_unwind_get_pr_addr>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	6120      	str	r0, [r4, #16]
 8000e94:	bf14      	ite	ne
 8000e96:	2300      	movne	r3, #0
 8000e98:	2309      	moveq	r3, #9
 8000e9a:	e7dc      	b.n	8000e56 <get_eit_entry+0x4e>
 8000e9c:	00000000 	.word	0x00000000
 8000ea0:	0800acc4 	.word	0x0800acc4
 8000ea4:	0800a90c 	.word	0x0800a90c

08000ea8 <restore_non_core_regs>:
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	07da      	lsls	r2, r3, #31
 8000eac:	b510      	push	{r4, lr}
 8000eae:	4604      	mov	r4, r0
 8000eb0:	d406      	bmi.n	8000ec0 <restore_non_core_regs+0x18>
 8000eb2:	079b      	lsls	r3, r3, #30
 8000eb4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000eb8:	d509      	bpl.n	8000ece <restore_non_core_regs+0x26>
 8000eba:	f000 fc51 	bl	8001760 <__gnu_Unwind_Restore_VFP_D>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	0759      	lsls	r1, r3, #29
 8000ec2:	d509      	bpl.n	8000ed8 <restore_non_core_regs+0x30>
 8000ec4:	071a      	lsls	r2, r3, #28
 8000ec6:	d50e      	bpl.n	8000ee6 <restore_non_core_regs+0x3e>
 8000ec8:	06db      	lsls	r3, r3, #27
 8000eca:	d513      	bpl.n	8000ef4 <restore_non_core_regs+0x4c>
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	f000 fc3f 	bl	8001750 <__gnu_Unwind_Restore_VFP>
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	0759      	lsls	r1, r3, #29
 8000ed6:	d4f5      	bmi.n	8000ec4 <restore_non_core_regs+0x1c>
 8000ed8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000edc:	f000 fc48 	bl	8001770 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	071a      	lsls	r2, r3, #28
 8000ee4:	d4f0      	bmi.n	8000ec8 <restore_non_core_regs+0x20>
 8000ee6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000eea:	f000 fc49 	bl	8001780 <__gnu_Unwind_Restore_WMMXD>
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	06db      	lsls	r3, r3, #27
 8000ef2:	d4eb      	bmi.n	8000ecc <restore_non_core_regs+0x24>
 8000ef4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000efc:	f000 bc84 	b.w	8001808 <__gnu_Unwind_Restore_WMMXC>

08000f00 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000f00:	6803      	ldr	r3, [r0, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000f04:	4403      	add	r3, r0
 8000f06:	4618      	mov	r0, r3
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__gnu_unwind_24bit.isra.1>:
 8000f0c:	2009      	movs	r0, #9
 8000f0e:	4770      	bx	lr

08000f10 <_Unwind_DebugHook>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <unwind_phase2>:
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	4604      	mov	r4, r0
 8000f18:	460d      	mov	r5, r1
 8000f1a:	e008      	b.n	8000f2e <unwind_phase2+0x1a>
 8000f1c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000f1e:	6163      	str	r3, [r4, #20]
 8000f20:	462a      	mov	r2, r5
 8000f22:	6923      	ldr	r3, [r4, #16]
 8000f24:	4621      	mov	r1, r4
 8000f26:	2001      	movs	r0, #1
 8000f28:	4798      	blx	r3
 8000f2a:	2808      	cmp	r0, #8
 8000f2c:	d108      	bne.n	8000f40 <unwind_phase2+0x2c>
 8000f2e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff ff69 	bl	8000e08 <get_eit_entry>
 8000f36:	4606      	mov	r6, r0
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d0ef      	beq.n	8000f1c <unwind_phase2+0x8>
 8000f3c:	f007 fe4c 	bl	8008bd8 <abort>
 8000f40:	2807      	cmp	r0, #7
 8000f42:	d1fb      	bne.n	8000f3c <unwind_phase2+0x28>
 8000f44:	4630      	mov	r0, r6
 8000f46:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f48:	f7ff ffe2 	bl	8000f10 <_Unwind_DebugHook>
 8000f4c:	1d28      	adds	r0, r5, #4
 8000f4e:	f000 fbf3 	bl	8001738 <__restore_core_regs>
 8000f52:	bf00      	nop

08000f54 <unwind_phase2_forced>:
 8000f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f58:	1d0c      	adds	r4, r1, #4
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	4692      	mov	sl, r2
 8000f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f60:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000f64:	ae03      	add	r6, sp, #12
 8000f66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f74:	ac02      	add	r4, sp, #8
 8000f76:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000f7a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000f7e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000f82:	2300      	movs	r3, #0
 8000f84:	4628      	mov	r0, r5
 8000f86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	f7ff ff3d 	bl	8000e08 <get_eit_entry>
 8000f8e:	f1ba 0f00 	cmp.w	sl, #0
 8000f92:	4607      	mov	r7, r0
 8000f94:	bf14      	ite	ne
 8000f96:	260a      	movne	r6, #10
 8000f98:	2609      	moveq	r6, #9
 8000f9a:	b17f      	cbz	r7, 8000fbc <unwind_phase2_forced+0x68>
 8000f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f9e:	f046 0110 	orr.w	r1, r6, #16
 8000fa2:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000fa6:	462a      	mov	r2, r5
 8000fa8:	6463      	str	r3, [r4, #68]	; 0x44
 8000faa:	2001      	movs	r0, #1
 8000fac:	462b      	mov	r3, r5
 8000fae:	47c0      	blx	r8
 8000fb0:	bb78      	cbnz	r0, 8001012 <unwind_phase2_forced+0xbe>
 8000fb2:	4638      	mov	r0, r7
 8000fb4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fbe:	616b      	str	r3, [r5, #20]
 8000fc0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	a87a      	add	r0, sp, #488	; 0x1e8
 8000fc8:	f008 f972 	bl	80092b0 <memcpy>
 8000fcc:	692b      	ldr	r3, [r5, #16]
 8000fce:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	4798      	blx	r3
 8000fd6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000fd8:	4682      	mov	sl, r0
 8000fda:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000fde:	4631      	mov	r1, r6
 8000fe0:	6463      	str	r3, [r4, #68]	; 0x44
 8000fe2:	462a      	mov	r2, r5
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	47c0      	blx	r8
 8000fea:	b990      	cbnz	r0, 8001012 <unwind_phase2_forced+0xbe>
 8000fec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ff0:	a97a      	add	r1, sp, #488	; 0x1e8
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f008 f95c 	bl	80092b0 <memcpy>
 8000ff8:	f1ba 0f08 	cmp.w	sl, #8
 8000ffc:	d106      	bne.n	800100c <unwind_phase2_forced+0xb8>
 8000ffe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001000:	4628      	mov	r0, r5
 8001002:	f7ff ff01 	bl	8000e08 <get_eit_entry>
 8001006:	2609      	movs	r6, #9
 8001008:	4607      	mov	r7, r0
 800100a:	e7c6      	b.n	8000f9a <unwind_phase2_forced+0x46>
 800100c:	f1ba 0f07 	cmp.w	sl, #7
 8001010:	d005      	beq.n	800101e <unwind_phase2_forced+0xca>
 8001012:	2709      	movs	r7, #9
 8001014:	4638      	mov	r0, r7
 8001016:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	4638      	mov	r0, r7
 8001020:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001022:	f7ff ff75 	bl	8000f10 <_Unwind_DebugHook>
 8001026:	a803      	add	r0, sp, #12
 8001028:	f000 fb86 	bl	8001738 <__restore_core_regs>

0800102c <_Unwind_GetCFA>:
 800102c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800102e:	4770      	bx	lr

08001030 <__gnu_Unwind_RaiseException>:
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001034:	640b      	str	r3, [r1, #64]	; 0x40
 8001036:	1d0e      	adds	r6, r1, #4
 8001038:	460f      	mov	r7, r1
 800103a:	4604      	mov	r4, r0
 800103c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800103e:	b0f9      	sub	sp, #484	; 0x1e4
 8001040:	ad01      	add	r5, sp, #4
 8001042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001044:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001050:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001054:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001058:	9600      	str	r6, [sp, #0]
 800105a:	e006      	b.n	800106a <__gnu_Unwind_RaiseException+0x3a>
 800105c:	6923      	ldr	r3, [r4, #16]
 800105e:	466a      	mov	r2, sp
 8001060:	4621      	mov	r1, r4
 8001062:	4798      	blx	r3
 8001064:	2808      	cmp	r0, #8
 8001066:	4605      	mov	r5, r0
 8001068:	d108      	bne.n	800107c <__gnu_Unwind_RaiseException+0x4c>
 800106a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff fecb 	bl	8000e08 <get_eit_entry>
 8001072:	2800      	cmp	r0, #0
 8001074:	d0f2      	beq.n	800105c <__gnu_Unwind_RaiseException+0x2c>
 8001076:	2009      	movs	r0, #9
 8001078:	b079      	add	sp, #484	; 0x1e4
 800107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107c:	4668      	mov	r0, sp
 800107e:	f7ff ff13 	bl	8000ea8 <restore_non_core_regs>
 8001082:	2d06      	cmp	r5, #6
 8001084:	d1f7      	bne.n	8001076 <__gnu_Unwind_RaiseException+0x46>
 8001086:	4639      	mov	r1, r7
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff ff43 	bl	8000f14 <unwind_phase2>
 800108e:	bf00      	nop

08001090 <__gnu_Unwind_ForcedUnwind>:
 8001090:	b430      	push	{r4, r5}
 8001092:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001094:	60c1      	str	r1, [r0, #12]
 8001096:	6182      	str	r2, [r0, #24]
 8001098:	4619      	mov	r1, r3
 800109a:	641d      	str	r5, [r3, #64]	; 0x40
 800109c:	2200      	movs	r2, #0
 800109e:	bc30      	pop	{r4, r5}
 80010a0:	e758      	b.n	8000f54 <unwind_phase2_forced>
 80010a2:	bf00      	nop

080010a4 <__gnu_Unwind_Resume>:
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	68c6      	ldr	r6, [r0, #12]
 80010a8:	6943      	ldr	r3, [r0, #20]
 80010aa:	640b      	str	r3, [r1, #64]	; 0x40
 80010ac:	b126      	cbz	r6, 80010b8 <__gnu_Unwind_Resume+0x14>
 80010ae:	2201      	movs	r2, #1
 80010b0:	f7ff ff50 	bl	8000f54 <unwind_phase2_forced>
 80010b4:	f007 fd90 	bl	8008bd8 <abort>
 80010b8:	6903      	ldr	r3, [r0, #16]
 80010ba:	460a      	mov	r2, r1
 80010bc:	4604      	mov	r4, r0
 80010be:	460d      	mov	r5, r1
 80010c0:	4601      	mov	r1, r0
 80010c2:	2002      	movs	r0, #2
 80010c4:	4798      	blx	r3
 80010c6:	2807      	cmp	r0, #7
 80010c8:	d007      	beq.n	80010da <__gnu_Unwind_Resume+0x36>
 80010ca:	2808      	cmp	r0, #8
 80010cc:	d103      	bne.n	80010d6 <__gnu_Unwind_Resume+0x32>
 80010ce:	4629      	mov	r1, r5
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ff1f 	bl	8000f14 <unwind_phase2>
 80010d6:	f007 fd7f 	bl	8008bd8 <abort>
 80010da:	4630      	mov	r0, r6
 80010dc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010de:	f7ff ff17 	bl	8000f10 <_Unwind_DebugHook>
 80010e2:	1d28      	adds	r0, r5, #4
 80010e4:	f000 fb28 	bl	8001738 <__restore_core_regs>

080010e8 <__gnu_Unwind_Resume_or_Rethrow>:
 80010e8:	68c2      	ldr	r2, [r0, #12]
 80010ea:	b11a      	cbz	r2, 80010f4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80010ec:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80010ee:	640a      	str	r2, [r1, #64]	; 0x40
 80010f0:	2200      	movs	r2, #0
 80010f2:	e72f      	b.n	8000f54 <unwind_phase2_forced>
 80010f4:	e79c      	b.n	8001030 <__gnu_Unwind_RaiseException>
 80010f6:	bf00      	nop

080010f8 <_Unwind_Complete>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <_Unwind_DeleteException>:
 80010fc:	6883      	ldr	r3, [r0, #8]
 80010fe:	b113      	cbz	r3, 8001106 <_Unwind_DeleteException+0xa>
 8001100:	4601      	mov	r1, r0
 8001102:	2001      	movs	r0, #1
 8001104:	4718      	bx	r3
 8001106:	4770      	bx	lr

08001108 <_Unwind_VRS_Get>:
 8001108:	b500      	push	{lr}
 800110a:	2904      	cmp	r1, #4
 800110c:	d807      	bhi.n	800111e <_Unwind_VRS_Get+0x16>
 800110e:	e8df f001 	tbb	[pc, r1]
 8001112:	0903      	.short	0x0903
 8001114:	0906      	.short	0x0906
 8001116:	09          	.byte	0x09
 8001117:	00          	.byte	0x00
 8001118:	b90b      	cbnz	r3, 800111e <_Unwind_VRS_Get+0x16>
 800111a:	2a0f      	cmp	r2, #15
 800111c:	d905      	bls.n	800112a <_Unwind_VRS_Get+0x22>
 800111e:	2002      	movs	r0, #2
 8001120:	f85d fb04 	ldr.w	pc, [sp], #4
 8001124:	2001      	movs	r0, #1
 8001126:	f85d fb04 	ldr.w	pc, [sp], #4
 800112a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800112e:	4618      	mov	r0, r3
 8001130:	6853      	ldr	r3, [r2, #4]
 8001132:	9a01      	ldr	r2, [sp, #4]
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetGR>:
 800113c:	b510      	push	{r4, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	2300      	movs	r3, #0
 8001142:	ac03      	add	r4, sp, #12
 8001144:	460a      	mov	r2, r1
 8001146:	9400      	str	r4, [sp, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff ffdd 	bl	8001108 <_Unwind_VRS_Get>
 800114e:	9803      	ldr	r0, [sp, #12]
 8001150:	b004      	add	sp, #16
 8001152:	bd10      	pop	{r4, pc}

08001154 <_Unwind_VRS_Set>:
 8001154:	b500      	push	{lr}
 8001156:	2904      	cmp	r1, #4
 8001158:	d807      	bhi.n	800116a <_Unwind_VRS_Set+0x16>
 800115a:	e8df f001 	tbb	[pc, r1]
 800115e:	0903      	.short	0x0903
 8001160:	0906      	.short	0x0906
 8001162:	09          	.byte	0x09
 8001163:	00          	.byte	0x00
 8001164:	b90b      	cbnz	r3, 800116a <_Unwind_VRS_Set+0x16>
 8001166:	2a0f      	cmp	r2, #15
 8001168:	d905      	bls.n	8001176 <_Unwind_VRS_Set+0x22>
 800116a:	2002      	movs	r0, #2
 800116c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001170:	2001      	movs	r0, #1
 8001172:	f85d fb04 	ldr.w	pc, [sp], #4
 8001176:	9901      	ldr	r1, [sp, #4]
 8001178:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800117c:	6809      	ldr	r1, [r1, #0]
 800117e:	6051      	str	r1, [r2, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f85d fb04 	ldr.w	pc, [sp], #4
 8001186:	bf00      	nop

08001188 <_Unwind_SetGR>:
 8001188:	b510      	push	{r4, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	ac04      	add	r4, sp, #16
 800118e:	2300      	movs	r3, #0
 8001190:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001194:	460a      	mov	r2, r1
 8001196:	9400      	str	r4, [sp, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff ffdb 	bl	8001154 <_Unwind_VRS_Set>
 800119e:	b004      	add	sp, #16
 80011a0:	bd10      	pop	{r4, pc}
 80011a2:	bf00      	nop

080011a4 <__gnu_Unwind_Backtrace>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	1d15      	adds	r5, r2, #4
 80011ac:	4607      	mov	r7, r0
 80011ae:	460e      	mov	r6, r1
 80011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80011b6:	ac17      	add	r4, sp, #92	; 0x5c
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80011ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011ce:	9516      	str	r5, [sp, #88]	; 0x58
 80011d0:	e010      	b.n	80011f4 <__gnu_Unwind_Backtrace+0x50>
 80011d2:	a816      	add	r0, sp, #88	; 0x58
 80011d4:	f7ff ffd8 	bl	8001188 <_Unwind_SetGR>
 80011d8:	4631      	mov	r1, r6
 80011da:	a816      	add	r0, sp, #88	; 0x58
 80011dc:	47b8      	blx	r7
 80011de:	aa16      	add	r2, sp, #88	; 0x58
 80011e0:	4669      	mov	r1, sp
 80011e2:	b978      	cbnz	r0, 8001204 <__gnu_Unwind_Backtrace+0x60>
 80011e4:	9b04      	ldr	r3, [sp, #16]
 80011e6:	2008      	movs	r0, #8
 80011e8:	4798      	blx	r3
 80011ea:	2805      	cmp	r0, #5
 80011ec:	4604      	mov	r4, r0
 80011ee:	d00a      	beq.n	8001206 <__gnu_Unwind_Backtrace+0x62>
 80011f0:	2809      	cmp	r0, #9
 80011f2:	d007      	beq.n	8001204 <__gnu_Unwind_Backtrace+0x60>
 80011f4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80011f6:	4668      	mov	r0, sp
 80011f8:	f7ff fe06 	bl	8000e08 <get_eit_entry>
 80011fc:	466a      	mov	r2, sp
 80011fe:	210c      	movs	r1, #12
 8001200:	2800      	cmp	r0, #0
 8001202:	d0e6      	beq.n	80011d2 <__gnu_Unwind_Backtrace+0x2e>
 8001204:	2409      	movs	r4, #9
 8001206:	a816      	add	r0, sp, #88	; 0x58
 8001208:	f7ff fe4e 	bl	8000ea8 <restore_non_core_regs>
 800120c:	4620      	mov	r0, r4
 800120e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001214 <__gnu_unwind_pr_common>:
 8001214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001218:	460d      	mov	r5, r1
 800121a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800121c:	b08b      	sub	sp, #44	; 0x2c
 800121e:	1d0c      	adds	r4, r1, #4
 8001220:	6809      	ldr	r1, [r1, #0]
 8001222:	9107      	str	r1, [sp, #28]
 8001224:	4691      	mov	r9, r2
 8001226:	9408      	str	r4, [sp, #32]
 8001228:	f000 0b03 	and.w	fp, r0, #3
 800122c:	461e      	mov	r6, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d160      	bne.n	80012f4 <__gnu_unwind_pr_common+0xe0>
 8001232:	0209      	lsls	r1, r1, #8
 8001234:	2303      	movs	r3, #3
 8001236:	9107      	str	r1, [sp, #28]
 8001238:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800123c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001240:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001242:	f1bb 0f02 	cmp.w	fp, #2
 8001246:	bf08      	it	eq
 8001248:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800124a:	f013 0301 	ands.w	r3, r3, #1
 800124e:	d140      	bne.n	80012d2 <__gnu_unwind_pr_common+0xbe>
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f000 0308 	and.w	r3, r0, #8
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	f8d4 8000 	ldr.w	r8, [r4]
 800125c:	f1b8 0f00 	cmp.w	r8, #0
 8001260:	d039      	beq.n	80012d6 <__gnu_unwind_pr_common+0xc2>
 8001262:	2e02      	cmp	r6, #2
 8001264:	d043      	beq.n	80012ee <__gnu_unwind_pr_common+0xda>
 8001266:	f8b4 8000 	ldrh.w	r8, [r4]
 800126a:	8867      	ldrh	r7, [r4, #2]
 800126c:	3404      	adds	r4, #4
 800126e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001270:	f027 0a01 	bic.w	sl, r7, #1
 8001274:	210f      	movs	r1, #15
 8001276:	4648      	mov	r0, r9
 8001278:	449a      	add	sl, r3
 800127a:	f7ff ff5f 	bl	800113c <_Unwind_GetGR>
 800127e:	4582      	cmp	sl, r0
 8001280:	d833      	bhi.n	80012ea <__gnu_unwind_pr_common+0xd6>
 8001282:	f028 0301 	bic.w	r3, r8, #1
 8001286:	449a      	add	sl, r3
 8001288:	4550      	cmp	r0, sl
 800128a:	bf2c      	ite	cs
 800128c:	2000      	movcs	r0, #0
 800128e:	2001      	movcc	r0, #1
 8001290:	007f      	lsls	r7, r7, #1
 8001292:	f007 0702 	and.w	r7, r7, #2
 8001296:	f008 0801 	and.w	r8, r8, #1
 800129a:	ea47 0708 	orr.w	r7, r7, r8
 800129e:	2f01      	cmp	r7, #1
 80012a0:	d03e      	beq.n	8001320 <__gnu_unwind_pr_common+0x10c>
 80012a2:	d335      	bcc.n	8001310 <__gnu_unwind_pr_common+0xfc>
 80012a4:	2f02      	cmp	r7, #2
 80012a6:	d11c      	bne.n	80012e2 <__gnu_unwind_pr_common+0xce>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ae:	9202      	str	r2, [sp, #8]
 80012b0:	f1bb 0f00 	cmp.w	fp, #0
 80012b4:	d176      	bne.n	80013a4 <__gnu_unwind_pr_common+0x190>
 80012b6:	b128      	cbz	r0, 80012c4 <__gnu_unwind_pr_common+0xb0>
 80012b8:	9903      	ldr	r1, [sp, #12]
 80012ba:	2900      	cmp	r1, #0
 80012bc:	d07e      	beq.n	80013bc <__gnu_unwind_pr_common+0x1a8>
 80012be:	2a00      	cmp	r2, #0
 80012c0:	f000 80a6 	beq.w	8001410 <__gnu_unwind_pr_common+0x1fc>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db77      	blt.n	80013b8 <__gnu_unwind_pr_common+0x1a4>
 80012c8:	9b02      	ldr	r3, [sp, #8]
 80012ca:	3301      	adds	r3, #1
 80012cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80012d0:	e7c2      	b.n	8001258 <__gnu_unwind_pr_common+0x44>
 80012d2:	2300      	movs	r3, #0
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	2e02      	cmp	r6, #2
 80012d8:	dd3e      	ble.n	8001358 <__gnu_unwind_pr_common+0x144>
 80012da:	f7ff fe17 	bl	8000f0c <__gnu_unwind_24bit.isra.1>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d040      	beq.n	8001364 <__gnu_unwind_pr_common+0x150>
 80012e2:	2009      	movs	r0, #9
 80012e4:	b00b      	add	sp, #44	; 0x2c
 80012e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ea:	2000      	movs	r0, #0
 80012ec:	e7d0      	b.n	8001290 <__gnu_unwind_pr_common+0x7c>
 80012ee:	6867      	ldr	r7, [r4, #4]
 80012f0:	3408      	adds	r4, #8
 80012f2:	e7bc      	b.n	800126e <__gnu_unwind_pr_common+0x5a>
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	dca3      	bgt.n	8001240 <__gnu_unwind_pr_common+0x2c>
 80012f8:	0c0b      	lsrs	r3, r1, #16
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	0409      	lsls	r1, r1, #16
 80012fe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001302:	2302      	movs	r3, #2
 8001304:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001308:	9107      	str	r1, [sp, #28]
 800130a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800130e:	e797      	b.n	8001240 <__gnu_unwind_pr_common+0x2c>
 8001310:	f1bb 0f00 	cmp.w	fp, #0
 8001314:	d002      	beq.n	800131c <__gnu_unwind_pr_common+0x108>
 8001316:	2800      	cmp	r0, #0
 8001318:	f040 80bd 	bne.w	8001496 <__gnu_unwind_pr_common+0x282>
 800131c:	3404      	adds	r4, #4
 800131e:	e79b      	b.n	8001258 <__gnu_unwind_pr_common+0x44>
 8001320:	f1bb 0f00 	cmp.w	fp, #0
 8001324:	d125      	bne.n	8001372 <__gnu_unwind_pr_common+0x15e>
 8001326:	b1a8      	cbz	r0, 8001354 <__gnu_unwind_pr_common+0x140>
 8001328:	e894 000c 	ldmia.w	r4, {r2, r3}
 800132c:	1c99      	adds	r1, r3, #2
 800132e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001332:	d0d6      	beq.n	80012e2 <__gnu_unwind_pr_common+0xce>
 8001334:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001338:	3301      	adds	r3, #1
 800133a:	9106      	str	r1, [sp, #24]
 800133c:	f000 80a3 	beq.w	8001486 <__gnu_unwind_pr_common+0x272>
 8001340:	1d20      	adds	r0, r4, #4
 8001342:	f7ff fddd 	bl	8000f00 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001346:	ab06      	add	r3, sp, #24
 8001348:	4601      	mov	r1, r0
 800134a:	4628      	mov	r0, r5
 800134c:	f006 f854 	bl	80073f8 <__cxa_type_match>
 8001350:	2800      	cmp	r0, #0
 8001352:	d177      	bne.n	8001444 <__gnu_unwind_pr_common+0x230>
 8001354:	3408      	adds	r4, #8
 8001356:	e77f      	b.n	8001258 <__gnu_unwind_pr_common+0x44>
 8001358:	a907      	add	r1, sp, #28
 800135a:	4648      	mov	r0, r9
 800135c:	f000 faee 	bl	800193c <__gnu_unwind_execute>
 8001360:	2800      	cmp	r0, #0
 8001362:	d1be      	bne.n	80012e2 <__gnu_unwind_pr_common+0xce>
 8001364:	9b01      	ldr	r3, [sp, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d15c      	bne.n	8001424 <__gnu_unwind_pr_common+0x210>
 800136a:	2008      	movs	r0, #8
 800136c:	b00b      	add	sp, #44	; 0x2c
 800136e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001372:	210d      	movs	r1, #13
 8001374:	4648      	mov	r0, r9
 8001376:	6a2f      	ldr	r7, [r5, #32]
 8001378:	f7ff fee0 	bl	800113c <_Unwind_GetGR>
 800137c:	4287      	cmp	r7, r0
 800137e:	d1e9      	bne.n	8001354 <__gnu_unwind_pr_common+0x140>
 8001380:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001382:	429c      	cmp	r4, r3
 8001384:	d1e6      	bne.n	8001354 <__gnu_unwind_pr_common+0x140>
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff fcf0 	bl	8000d6c <selfrel_offset31>
 800138c:	210f      	movs	r1, #15
 800138e:	4602      	mov	r2, r0
 8001390:	4648      	mov	r0, r9
 8001392:	f7ff fef9 	bl	8001188 <_Unwind_SetGR>
 8001396:	4648      	mov	r0, r9
 8001398:	462a      	mov	r2, r5
 800139a:	2100      	movs	r1, #0
 800139c:	f7ff fef4 	bl	8001188 <_Unwind_SetGR>
 80013a0:	2007      	movs	r0, #7
 80013a2:	e79f      	b.n	80012e4 <__gnu_unwind_pr_common+0xd0>
 80013a4:	210d      	movs	r1, #13
 80013a6:	4648      	mov	r0, r9
 80013a8:	6a2f      	ldr	r7, [r5, #32]
 80013aa:	f7ff fec7 	bl	800113c <_Unwind_GetGR>
 80013ae:	4287      	cmp	r7, r0
 80013b0:	d058      	beq.n	8001464 <__gnu_unwind_pr_common+0x250>
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da87      	bge.n	80012c8 <__gnu_unwind_pr_common+0xb4>
 80013b8:	3404      	adds	r4, #4
 80013ba:	e785      	b.n	80012c8 <__gnu_unwind_pr_common+0xb4>
 80013bc:	9b02      	ldr	r3, [sp, #8]
 80013be:	b33b      	cbz	r3, 8001410 <__gnu_unwind_pr_common+0x1fc>
 80013c0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80013c4:	1d27      	adds	r7, r4, #4
 80013c6:	f8cd b010 	str.w	fp, [sp, #16]
 80013ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80013ce:	f8dd a008 	ldr.w	sl, [sp, #8]
 80013d2:	9605      	str	r6, [sp, #20]
 80013d4:	46a3      	mov	fp, r4
 80013d6:	461c      	mov	r4, r3
 80013d8:	e002      	b.n	80013e0 <__gnu_unwind_pr_common+0x1cc>
 80013da:	45b2      	cmp	sl, r6
 80013dc:	46b0      	mov	r8, r6
 80013de:	d016      	beq.n	800140e <__gnu_unwind_pr_common+0x1fa>
 80013e0:	4638      	mov	r0, r7
 80013e2:	9406      	str	r4, [sp, #24]
 80013e4:	f7ff fd8c 	bl	8000f00 <_Unwind_decode_typeinfo_ptr.isra.0>
 80013e8:	ab06      	add	r3, sp, #24
 80013ea:	4601      	mov	r1, r0
 80013ec:	2200      	movs	r2, #0
 80013ee:	4628      	mov	r0, r5
 80013f0:	f006 f802 	bl	80073f8 <__cxa_type_match>
 80013f4:	f108 0601 	add.w	r6, r8, #1
 80013f8:	3704      	adds	r7, #4
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d0ed      	beq.n	80013da <__gnu_unwind_pr_common+0x1c6>
 80013fe:	9b02      	ldr	r3, [sp, #8]
 8001400:	9e05      	ldr	r6, [sp, #20]
 8001402:	4543      	cmp	r3, r8
 8001404:	465c      	mov	r4, fp
 8001406:	f8dd b010 	ldr.w	fp, [sp, #16]
 800140a:	d1d2      	bne.n	80013b2 <__gnu_unwind_pr_common+0x19e>
 800140c:	e000      	b.n	8001410 <__gnu_unwind_pr_common+0x1fc>
 800140e:	465c      	mov	r4, fp
 8001410:	4648      	mov	r0, r9
 8001412:	210d      	movs	r1, #13
 8001414:	f7ff fe92 	bl	800113c <_Unwind_GetGR>
 8001418:	9b06      	ldr	r3, [sp, #24]
 800141a:	6228      	str	r0, [r5, #32]
 800141c:	62ac      	str	r4, [r5, #40]	; 0x28
 800141e:	626b      	str	r3, [r5, #36]	; 0x24
 8001420:	2006      	movs	r0, #6
 8001422:	e75f      	b.n	80012e4 <__gnu_unwind_pr_common+0xd0>
 8001424:	210f      	movs	r1, #15
 8001426:	4648      	mov	r0, r9
 8001428:	f7ff fe88 	bl	800113c <_Unwind_GetGR>
 800142c:	210e      	movs	r1, #14
 800142e:	4602      	mov	r2, r0
 8001430:	4648      	mov	r0, r9
 8001432:	f7ff fea9 	bl	8001188 <_Unwind_SetGR>
 8001436:	4648      	mov	r0, r9
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <__gnu_unwind_pr_common+0x2cc>)
 800143a:	210f      	movs	r1, #15
 800143c:	f7ff fea4 	bl	8001188 <_Unwind_SetGR>
 8001440:	2007      	movs	r0, #7
 8001442:	e74f      	b.n	80012e4 <__gnu_unwind_pr_common+0xd0>
 8001444:	4607      	mov	r7, r0
 8001446:	210d      	movs	r1, #13
 8001448:	4648      	mov	r0, r9
 800144a:	f7ff fe77 	bl	800113c <_Unwind_GetGR>
 800144e:	2f02      	cmp	r7, #2
 8001450:	6228      	str	r0, [r5, #32]
 8001452:	d11d      	bne.n	8001490 <__gnu_unwind_pr_common+0x27c>
 8001454:	462b      	mov	r3, r5
 8001456:	9a06      	ldr	r2, [sp, #24]
 8001458:	f843 2f2c 	str.w	r2, [r3, #44]!
 800145c:	626b      	str	r3, [r5, #36]	; 0x24
 800145e:	62ac      	str	r4, [r5, #40]	; 0x28
 8001460:	2006      	movs	r0, #6
 8001462:	e73f      	b.n	80012e4 <__gnu_unwind_pr_common+0xd0>
 8001464:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001466:	429c      	cmp	r4, r3
 8001468:	d1a3      	bne.n	80013b2 <__gnu_unwind_pr_common+0x19e>
 800146a:	2204      	movs	r2, #4
 800146c:	2700      	movs	r7, #0
 800146e:	18a3      	adds	r3, r4, r2
 8001470:	9902      	ldr	r1, [sp, #8]
 8001472:	62a9      	str	r1, [r5, #40]	; 0x28
 8001474:	62ef      	str	r7, [r5, #44]	; 0x2c
 8001476:	632a      	str	r2, [r5, #48]	; 0x30
 8001478:	636b      	str	r3, [r5, #52]	; 0x34
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	42bb      	cmp	r3, r7
 800147e:	db1d      	blt.n	80014bc <__gnu_unwind_pr_common+0x2a8>
 8001480:	2301      	movs	r3, #1
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	e720      	b.n	80012c8 <__gnu_unwind_pr_common+0xb4>
 8001486:	4648      	mov	r0, r9
 8001488:	210d      	movs	r1, #13
 800148a:	f7ff fe57 	bl	800113c <_Unwind_GetGR>
 800148e:	6228      	str	r0, [r5, #32]
 8001490:	9b06      	ldr	r3, [sp, #24]
 8001492:	626b      	str	r3, [r5, #36]	; 0x24
 8001494:	e7e3      	b.n	800145e <__gnu_unwind_pr_common+0x24a>
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff fc68 	bl	8000d6c <selfrel_offset31>
 800149c:	3404      	adds	r4, #4
 800149e:	4606      	mov	r6, r0
 80014a0:	63ac      	str	r4, [r5, #56]	; 0x38
 80014a2:	4628      	mov	r0, r5
 80014a4:	f006 f806 	bl	80074b4 <__cxa_begin_cleanup>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	f43f af1a 	beq.w	80012e2 <__gnu_unwind_pr_common+0xce>
 80014ae:	4648      	mov	r0, r9
 80014b0:	4632      	mov	r2, r6
 80014b2:	210f      	movs	r1, #15
 80014b4:	f7ff fe68 	bl	8001188 <_Unwind_SetGR>
 80014b8:	2007      	movs	r0, #7
 80014ba:	e713      	b.n	80012e4 <__gnu_unwind_pr_common+0xd0>
 80014bc:	4608      	mov	r0, r1
 80014be:	3001      	adds	r0, #1
 80014c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80014c4:	f7ff fc52 	bl	8000d6c <selfrel_offset31>
 80014c8:	210f      	movs	r1, #15
 80014ca:	4602      	mov	r2, r0
 80014cc:	4648      	mov	r0, r9
 80014ce:	f7ff fe5b 	bl	8001188 <_Unwind_SetGR>
 80014d2:	4648      	mov	r0, r9
 80014d4:	462a      	mov	r2, r5
 80014d6:	4639      	mov	r1, r7
 80014d8:	f7ff fe56 	bl	8001188 <_Unwind_SetGR>
 80014dc:	2007      	movs	r0, #7
 80014de:	e701      	b.n	80012e4 <__gnu_unwind_pr_common+0xd0>
 80014e0:	08007c3d 	.word	0x08007c3d

080014e4 <__aeabi_unwind_cpp_pr0>:
 80014e4:	2300      	movs	r3, #0
 80014e6:	e695      	b.n	8001214 <__gnu_unwind_pr_common>

080014e8 <__aeabi_unwind_cpp_pr1>:
 80014e8:	2301      	movs	r3, #1
 80014ea:	e693      	b.n	8001214 <__gnu_unwind_pr_common>

080014ec <__aeabi_unwind_cpp_pr2>:
 80014ec:	2302      	movs	r3, #2
 80014ee:	e691      	b.n	8001214 <__gnu_unwind_pr_common>

080014f0 <_Unwind_VRS_Pop>:
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	4604      	mov	r4, r0
 80014f4:	b0c5      	sub	sp, #276	; 0x114
 80014f6:	2904      	cmp	r1, #4
 80014f8:	d80d      	bhi.n	8001516 <_Unwind_VRS_Pop+0x26>
 80014fa:	e8df f001 	tbb	[pc, r1]
 80014fe:	0353      	.short	0x0353
 8001500:	310c      	.short	0x310c
 8001502:	0f          	.byte	0x0f
 8001503:	00          	.byte	0x00
 8001504:	2b01      	cmp	r3, #1
 8001506:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800150a:	b295      	uxth	r5, r2
 800150c:	d162      	bne.n	80015d4 <_Unwind_VRS_Pop+0xe4>
 800150e:	1972      	adds	r2, r6, r5
 8001510:	2a10      	cmp	r2, #16
 8001512:	f240 809b 	bls.w	800164c <_Unwind_VRS_Pop+0x15c>
 8001516:	2002      	movs	r0, #2
 8001518:	b045      	add	sp, #276	; 0x114
 800151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1fa      	bne.n	8001516 <_Unwind_VRS_Pop+0x26>
 8001520:	2a10      	cmp	r2, #16
 8001522:	d8f8      	bhi.n	8001516 <_Unwind_VRS_Pop+0x26>
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	06d8      	lsls	r0, r3, #27
 8001528:	f100 80c6 	bmi.w	80016b8 <_Unwind_VRS_Pop+0x1c8>
 800152c:	ae22      	add	r6, sp, #136	; 0x88
 800152e:	4630      	mov	r0, r6
 8001530:	9201      	str	r2, [sp, #4]
 8001532:	f000 f973 	bl	800181c <__gnu_Unwind_Save_WMMXC>
 8001536:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001538:	9a01      	ldr	r2, [sp, #4]
 800153a:	2300      	movs	r3, #0
 800153c:	2501      	movs	r5, #1
 800153e:	fa05 f103 	lsl.w	r1, r5, r3
 8001542:	4211      	tst	r1, r2
 8001544:	d003      	beq.n	800154e <_Unwind_VRS_Pop+0x5e>
 8001546:	6801      	ldr	r1, [r0, #0]
 8001548:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800154c:	3004      	adds	r0, #4
 800154e:	3301      	adds	r3, #1
 8001550:	2b04      	cmp	r3, #4
 8001552:	d1f4      	bne.n	800153e <_Unwind_VRS_Pop+0x4e>
 8001554:	63a0      	str	r0, [r4, #56]	; 0x38
 8001556:	4630      	mov	r0, r6
 8001558:	f000 f956 	bl	8001808 <__gnu_Unwind_Restore_WMMXC>
 800155c:	2000      	movs	r0, #0
 800155e:	e7db      	b.n	8001518 <_Unwind_VRS_Pop+0x28>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d1d8      	bne.n	8001516 <_Unwind_VRS_Pop+0x26>
 8001564:	0c15      	lsrs	r5, r2, #16
 8001566:	b297      	uxth	r7, r2
 8001568:	19eb      	adds	r3, r5, r7
 800156a:	2b10      	cmp	r3, #16
 800156c:	d8d3      	bhi.n	8001516 <_Unwind_VRS_Pop+0x26>
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	071e      	lsls	r6, r3, #28
 8001572:	f100 80b5 	bmi.w	80016e0 <_Unwind_VRS_Pop+0x1f0>
 8001576:	ae22      	add	r6, sp, #136	; 0x88
 8001578:	4630      	mov	r0, r6
 800157a:	f000 f923 	bl	80017c4 <__gnu_Unwind_Save_WMMXD>
 800157e:	00ed      	lsls	r5, r5, #3
 8001580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001582:	b14f      	cbz	r7, 8001598 <_Unwind_VRS_Pop+0xa8>
 8001584:	3d04      	subs	r5, #4
 8001586:	1971      	adds	r1, r6, r5
 8001588:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 800158c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001590:	f841 2f04 	str.w	r2, [r1, #4]!
 8001594:	4283      	cmp	r3, r0
 8001596:	d1f9      	bne.n	800158c <_Unwind_VRS_Pop+0x9c>
 8001598:	4630      	mov	r0, r6
 800159a:	63a3      	str	r3, [r4, #56]	; 0x38
 800159c:	f000 f8f0 	bl	8001780 <__gnu_Unwind_Restore_WMMXD>
 80015a0:	2000      	movs	r0, #0
 80015a2:	e7b9      	b.n	8001518 <_Unwind_VRS_Pop+0x28>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1b6      	bne.n	8001516 <_Unwind_VRS_Pop+0x26>
 80015a8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80015aa:	b297      	uxth	r7, r2
 80015ac:	1d20      	adds	r0, r4, #4
 80015ae:	2601      	movs	r6, #1
 80015b0:	fa06 f103 	lsl.w	r1, r6, r3
 80015b4:	4239      	tst	r1, r7
 80015b6:	f103 0301 	add.w	r3, r3, #1
 80015ba:	d002      	beq.n	80015c2 <_Unwind_VRS_Pop+0xd2>
 80015bc:	6829      	ldr	r1, [r5, #0]
 80015be:	6001      	str	r1, [r0, #0]
 80015c0:	3504      	adds	r5, #4
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	f100 0004 	add.w	r0, r0, #4
 80015c8:	d1f2      	bne.n	80015b0 <_Unwind_VRS_Pop+0xc0>
 80015ca:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80015ce:	d13b      	bne.n	8001648 <_Unwind_VRS_Pop+0x158>
 80015d0:	63a5      	str	r5, [r4, #56]	; 0x38
 80015d2:	e7a1      	b.n	8001518 <_Unwind_VRS_Pop+0x28>
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d19e      	bne.n	8001516 <_Unwind_VRS_Pop+0x26>
 80015d8:	1977      	adds	r7, r6, r5
 80015da:	2f20      	cmp	r7, #32
 80015dc:	d89b      	bhi.n	8001516 <_Unwind_VRS_Pop+0x26>
 80015de:	2e0f      	cmp	r6, #15
 80015e0:	d966      	bls.n	80016b0 <_Unwind_VRS_Pop+0x1c0>
 80015e2:	462f      	mov	r7, r5
 80015e4:	2d00      	cmp	r5, #0
 80015e6:	d13a      	bne.n	800165e <_Unwind_VRS_Pop+0x16e>
 80015e8:	462a      	mov	r2, r5
 80015ea:	2700      	movs	r7, #0
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015f0:	dd72      	ble.n	80016d8 <_Unwind_VRS_Pop+0x1e8>
 80015f2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80015f6:	4601      	mov	r1, r0
 80015f8:	a844      	add	r0, sp, #272	; 0x110
 80015fa:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80015fe:	388c      	subs	r0, #140	; 0x8c
 8001600:	f851 5b04 	ldr.w	r5, [r1], #4
 8001604:	f840 5f04 	str.w	r5, [r0, #4]!
 8001608:	4291      	cmp	r1, r2
 800160a:	d1f9      	bne.n	8001600 <_Unwind_VRS_Pop+0x110>
 800160c:	4608      	mov	r0, r1
 800160e:	b197      	cbz	r7, 8001636 <_Unwind_VRS_Pop+0x146>
 8001610:	2e10      	cmp	r6, #16
 8001612:	4632      	mov	r2, r6
 8001614:	a944      	add	r1, sp, #272	; 0x110
 8001616:	bf38      	it	cc
 8001618:	2210      	movcc	r2, #16
 800161a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800161e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001622:	0079      	lsls	r1, r7, #1
 8001624:	3a04      	subs	r2, #4
 8001626:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800162a:	f850 5b04 	ldr.w	r5, [r0], #4
 800162e:	f842 5f04 	str.w	r5, [r2, #4]!
 8001632:	4288      	cmp	r0, r1
 8001634:	d1f9      	bne.n	800162a <_Unwind_VRS_Pop+0x13a>
 8001636:	2b01      	cmp	r3, #1
 8001638:	d048      	beq.n	80016cc <_Unwind_VRS_Pop+0x1dc>
 800163a:	2e0f      	cmp	r6, #15
 800163c:	63a1      	str	r1, [r4, #56]	; 0x38
 800163e:	d933      	bls.n	80016a8 <_Unwind_VRS_Pop+0x1b8>
 8001640:	b117      	cbz	r7, 8001648 <_Unwind_VRS_Pop+0x158>
 8001642:	a802      	add	r0, sp, #8
 8001644:	f000 f894 	bl	8001770 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001648:	2000      	movs	r0, #0
 800164a:	e765      	b.n	8001518 <_Unwind_VRS_Pop+0x28>
 800164c:	2e0f      	cmp	r6, #15
 800164e:	f63f af62 	bhi.w	8001516 <_Unwind_VRS_Pop+0x26>
 8001652:	2700      	movs	r7, #0
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	07d1      	lsls	r1, r2, #31
 8001658:	d417      	bmi.n	800168a <_Unwind_VRS_Pop+0x19a>
 800165a:	2f00      	cmp	r7, #0
 800165c:	d060      	beq.n	8001720 <_Unwind_VRS_Pop+0x230>
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	0751      	lsls	r1, r2, #29
 8001662:	d445      	bmi.n	80016f0 <_Unwind_VRS_Pop+0x200>
 8001664:	2b01      	cmp	r3, #1
 8001666:	d04d      	beq.n	8001704 <_Unwind_VRS_Pop+0x214>
 8001668:	2e0f      	cmp	r6, #15
 800166a:	d806      	bhi.n	800167a <_Unwind_VRS_Pop+0x18a>
 800166c:	a822      	add	r0, sp, #136	; 0x88
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f000 f87a 	bl	8001768 <__gnu_Unwind_Save_VFP_D>
 8001674:	9b01      	ldr	r3, [sp, #4]
 8001676:	2f00      	cmp	r7, #0
 8001678:	d0b6      	beq.n	80015e8 <_Unwind_VRS_Pop+0xf8>
 800167a:	a802      	add	r0, sp, #8
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	f000 f87b 	bl	8001778 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	f1c6 0210 	rsb	r2, r6, #16
 8001688:	e7b0      	b.n	80015ec <_Unwind_VRS_Pop+0xfc>
 800168a:	f022 0101 	bic.w	r1, r2, #1
 800168e:	2b05      	cmp	r3, #5
 8001690:	6021      	str	r1, [r4, #0]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	4620      	mov	r0, r4
 8001696:	d03b      	beq.n	8001710 <_Unwind_VRS_Pop+0x220>
 8001698:	f022 0203 	bic.w	r2, r2, #3
 800169c:	f840 2b48 	str.w	r2, [r0], #72
 80016a0:	f000 f85a 	bl	8001758 <__gnu_Unwind_Save_VFP>
 80016a4:	9b01      	ldr	r3, [sp, #4]
 80016a6:	e7d8      	b.n	800165a <_Unwind_VRS_Pop+0x16a>
 80016a8:	a822      	add	r0, sp, #136	; 0x88
 80016aa:	f000 f859 	bl	8001760 <__gnu_Unwind_Restore_VFP_D>
 80016ae:	e7c7      	b.n	8001640 <_Unwind_VRS_Pop+0x150>
 80016b0:	2f10      	cmp	r7, #16
 80016b2:	d9ce      	bls.n	8001652 <_Unwind_VRS_Pop+0x162>
 80016b4:	3f10      	subs	r7, #16
 80016b6:	e7cd      	b.n	8001654 <_Unwind_VRS_Pop+0x164>
 80016b8:	f023 0310 	bic.w	r3, r3, #16
 80016bc:	6023      	str	r3, [r4, #0]
 80016be:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80016c2:	9201      	str	r2, [sp, #4]
 80016c4:	f000 f8aa 	bl	800181c <__gnu_Unwind_Save_WMMXC>
 80016c8:	9a01      	ldr	r2, [sp, #4]
 80016ca:	e72f      	b.n	800152c <_Unwind_VRS_Pop+0x3c>
 80016cc:	3104      	adds	r1, #4
 80016ce:	63a1      	str	r1, [r4, #56]	; 0x38
 80016d0:	a822      	add	r0, sp, #136	; 0x88
 80016d2:	f000 f83d 	bl	8001750 <__gnu_Unwind_Restore_VFP>
 80016d6:	e7b7      	b.n	8001648 <_Unwind_VRS_Pop+0x158>
 80016d8:	2f00      	cmp	r7, #0
 80016da:	d199      	bne.n	8001610 <_Unwind_VRS_Pop+0x120>
 80016dc:	4601      	mov	r1, r0
 80016de:	e7aa      	b.n	8001636 <_Unwind_VRS_Pop+0x146>
 80016e0:	f023 0308 	bic.w	r3, r3, #8
 80016e4:	6023      	str	r3, [r4, #0]
 80016e6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80016ea:	f000 f86b 	bl	80017c4 <__gnu_Unwind_Save_WMMXD>
 80016ee:	e742      	b.n	8001576 <_Unwind_VRS_Pop+0x86>
 80016f0:	4620      	mov	r0, r4
 80016f2:	f022 0204 	bic.w	r2, r2, #4
 80016f6:	f840 2bd0 	str.w	r2, [r0], #208
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f000 f83c 	bl	8001778 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	e7af      	b.n	8001664 <_Unwind_VRS_Pop+0x174>
 8001704:	a822      	add	r0, sp, #136	; 0x88
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	f000 f826 	bl	8001758 <__gnu_Unwind_Save_VFP>
 800170c:	9b01      	ldr	r3, [sp, #4]
 800170e:	e7b9      	b.n	8001684 <_Unwind_VRS_Pop+0x194>
 8001710:	f041 0102 	orr.w	r1, r1, #2
 8001714:	f840 1b48 	str.w	r1, [r0], #72
 8001718:	f000 f826 	bl	8001768 <__gnu_Unwind_Save_VFP_D>
 800171c:	9b01      	ldr	r3, [sp, #4]
 800171e:	e79c      	b.n	800165a <_Unwind_VRS_Pop+0x16a>
 8001720:	2b01      	cmp	r3, #1
 8001722:	d003      	beq.n	800172c <_Unwind_VRS_Pop+0x23c>
 8001724:	2e0f      	cmp	r6, #15
 8001726:	f63f af5f 	bhi.w	80015e8 <_Unwind_VRS_Pop+0xf8>
 800172a:	e79f      	b.n	800166c <_Unwind_VRS_Pop+0x17c>
 800172c:	a822      	add	r0, sp, #136	; 0x88
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	f000 f812 	bl	8001758 <__gnu_Unwind_Save_VFP>
 8001734:	9b01      	ldr	r3, [sp, #4]
 8001736:	e757      	b.n	80015e8 <_Unwind_VRS_Pop+0xf8>

08001738 <__restore_core_regs>:
 8001738:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800173c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001740:	469c      	mov	ip, r3
 8001742:	46a6      	mov	lr, r4
 8001744:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001748:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800174c:	46e5      	mov	sp, ip
 800174e:	bd00      	pop	{pc}

08001750 <__gnu_Unwind_Restore_VFP>:
 8001750:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop

08001758 <__gnu_Unwind_Save_VFP>:
 8001758:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <__gnu_Unwind_Restore_VFP_D>:
 8001760:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop

08001768 <__gnu_Unwind_Save_VFP_D>:
 8001768:	ec80 0b20 	vstmia	r0, {d0-d15}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop

08001770 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001770:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001778:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop

08001780 <__gnu_Unwind_Restore_WMMXD>:
 8001780:	ecf0 0102 	ldfe	f0, [r0], #8
 8001784:	ecf0 1102 	ldfe	f1, [r0], #8
 8001788:	ecf0 2102 	ldfe	f2, [r0], #8
 800178c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001790:	ecf0 4102 	ldfe	f4, [r0], #8
 8001794:	ecf0 5102 	ldfe	f5, [r0], #8
 8001798:	ecf0 6102 	ldfe	f6, [r0], #8
 800179c:	ecf0 7102 	ldfe	f7, [r0], #8
 80017a0:	ecf0 8102 	ldfp	f0, [r0], #8
 80017a4:	ecf0 9102 	ldfp	f1, [r0], #8
 80017a8:	ecf0 a102 	ldfp	f2, [r0], #8
 80017ac:	ecf0 b102 	ldfp	f3, [r0], #8
 80017b0:	ecf0 c102 	ldfp	f4, [r0], #8
 80017b4:	ecf0 d102 	ldfp	f5, [r0], #8
 80017b8:	ecf0 e102 	ldfp	f6, [r0], #8
 80017bc:	ecf0 f102 	ldfp	f7, [r0], #8
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <__gnu_Unwind_Save_WMMXD>:
 80017c4:	ece0 0102 	stfe	f0, [r0], #8
 80017c8:	ece0 1102 	stfe	f1, [r0], #8
 80017cc:	ece0 2102 	stfe	f2, [r0], #8
 80017d0:	ece0 3102 	stfe	f3, [r0], #8
 80017d4:	ece0 4102 	stfe	f4, [r0], #8
 80017d8:	ece0 5102 	stfe	f5, [r0], #8
 80017dc:	ece0 6102 	stfe	f6, [r0], #8
 80017e0:	ece0 7102 	stfe	f7, [r0], #8
 80017e4:	ece0 8102 	stfp	f0, [r0], #8
 80017e8:	ece0 9102 	stfp	f1, [r0], #8
 80017ec:	ece0 a102 	stfp	f2, [r0], #8
 80017f0:	ece0 b102 	stfp	f3, [r0], #8
 80017f4:	ece0 c102 	stfp	f4, [r0], #8
 80017f8:	ece0 d102 	stfp	f5, [r0], #8
 80017fc:	ece0 e102 	stfp	f6, [r0], #8
 8001800:	ece0 f102 	stfp	f7, [r0], #8
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <__gnu_Unwind_Restore_WMMXC>:
 8001808:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800180c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001810:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001814:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop

0800181c <__gnu_Unwind_Save_WMMXC>:
 800181c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001820:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001824:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001828:	fca0 b101 	stc2	1, cr11, [r0], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <_Unwind_RaiseException>:
 8001830:	46ec      	mov	ip, sp
 8001832:	b500      	push	{lr}
 8001834:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001838:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001844:	a901      	add	r1, sp, #4
 8001846:	f7ff fbf3 	bl	8001030 <__gnu_Unwind_RaiseException>
 800184a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800184e:	b012      	add	sp, #72	; 0x48
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <_Unwind_Resume>:
 8001854:	46ec      	mov	ip, sp
 8001856:	b500      	push	{lr}
 8001858:	e92d 5000 	stmdb	sp!, {ip, lr}
 800185c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001868:	a901      	add	r1, sp, #4
 800186a:	f7ff fc1b 	bl	80010a4 <__gnu_Unwind_Resume>
 800186e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001872:	b012      	add	sp, #72	; 0x48
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <_Unwind_Resume_or_Rethrow>:
 8001878:	46ec      	mov	ip, sp
 800187a:	b500      	push	{lr}
 800187c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001880:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e92d 000c 	stmdb	sp!, {r2, r3}
 800188c:	a901      	add	r1, sp, #4
 800188e:	f7ff fc2b 	bl	80010e8 <__gnu_Unwind_Resume_or_Rethrow>
 8001892:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001896:	b012      	add	sp, #72	; 0x48
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <_Unwind_ForcedUnwind>:
 800189c:	46ec      	mov	ip, sp
 800189e:	b500      	push	{lr}
 80018a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018b0:	ab01      	add	r3, sp, #4
 80018b2:	f7ff fbed 	bl	8001090 <__gnu_Unwind_ForcedUnwind>
 80018b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018ba:	b012      	add	sp, #72	; 0x48
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <_Unwind_Backtrace>:
 80018c0:	46ec      	mov	ip, sp
 80018c2:	b500      	push	{lr}
 80018c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018d4:	aa01      	add	r2, sp, #4
 80018d6:	f7ff fc65 	bl	80011a4 <__gnu_Unwind_Backtrace>
 80018da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018de:	b012      	add	sp, #72	; 0x48
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <next_unwind_byte>:
 80018e4:	7a02      	ldrb	r2, [r0, #8]
 80018e6:	b91a      	cbnz	r2, 80018f0 <next_unwind_byte+0xc>
 80018e8:	7a43      	ldrb	r3, [r0, #9]
 80018ea:	b943      	cbnz	r3, 80018fe <next_unwind_byte+0x1a>
 80018ec:	20b0      	movs	r0, #176	; 0xb0
 80018ee:	4770      	bx	lr
 80018f0:	6803      	ldr	r3, [r0, #0]
 80018f2:	3a01      	subs	r2, #1
 80018f4:	7202      	strb	r2, [r0, #8]
 80018f6:	021a      	lsls	r2, r3, #8
 80018f8:	6002      	str	r2, [r0, #0]
 80018fa:	0e18      	lsrs	r0, r3, #24
 80018fc:	4770      	bx	lr
 80018fe:	6842      	ldr	r2, [r0, #4]
 8001900:	3b01      	subs	r3, #1
 8001902:	b410      	push	{r4}
 8001904:	7243      	strb	r3, [r0, #9]
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	2103      	movs	r1, #3
 800190a:	1d14      	adds	r4, r2, #4
 800190c:	7201      	strb	r1, [r0, #8]
 800190e:	021a      	lsls	r2, r3, #8
 8001910:	6044      	str	r4, [r0, #4]
 8001912:	6002      	str	r2, [r0, #0]
 8001914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001918:	0e18      	lsrs	r0, r3, #24
 800191a:	4770      	bx	lr

0800191c <_Unwind_GetGR.constprop.0>:
 800191c:	b500      	push	{lr}
 800191e:	b085      	sub	sp, #20
 8001920:	aa03      	add	r2, sp, #12
 8001922:	2300      	movs	r3, #0
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	220c      	movs	r2, #12
 800192a:	f7ff fbed 	bl	8001108 <_Unwind_VRS_Get>
 800192e:	9803      	ldr	r0, [sp, #12]
 8001930:	b005      	add	sp, #20
 8001932:	f85d fb04 	ldr.w	pc, [sp], #4
 8001936:	bf00      	nop

08001938 <unwind_UCB_from_context>:
 8001938:	e7f0      	b.n	800191c <_Unwind_GetGR.constprop.0>
 800193a:	bf00      	nop

0800193c <__gnu_unwind_execute>:
 800193c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001940:	4606      	mov	r6, r0
 8001942:	b085      	sub	sp, #20
 8001944:	460f      	mov	r7, r1
 8001946:	f04f 0800 	mov.w	r8, #0
 800194a:	4638      	mov	r0, r7
 800194c:	f7ff ffca 	bl	80018e4 <next_unwind_byte>
 8001950:	28b0      	cmp	r0, #176	; 0xb0
 8001952:	4604      	mov	r4, r0
 8001954:	d023      	beq.n	800199e <__gnu_unwind_execute+0x62>
 8001956:	0605      	lsls	r5, r0, #24
 8001958:	d427      	bmi.n	80019aa <__gnu_unwind_execute+0x6e>
 800195a:	2300      	movs	r3, #0
 800195c:	f10d 090c 	add.w	r9, sp, #12
 8001960:	4619      	mov	r1, r3
 8001962:	0085      	lsls	r5, r0, #2
 8001964:	220d      	movs	r2, #13
 8001966:	f8cd 9000 	str.w	r9, [sp]
 800196a:	4630      	mov	r0, r6
 800196c:	f7ff fbcc 	bl	8001108 <_Unwind_VRS_Get>
 8001970:	b2ed      	uxtb	r5, r5
 8001972:	9b03      	ldr	r3, [sp, #12]
 8001974:	f8cd 9000 	str.w	r9, [sp]
 8001978:	0660      	lsls	r0, r4, #25
 800197a:	f105 0504 	add.w	r5, r5, #4
 800197e:	bf4c      	ite	mi
 8001980:	1b5d      	submi	r5, r3, r5
 8001982:	18ed      	addpl	r5, r5, r3
 8001984:	2300      	movs	r3, #0
 8001986:	4619      	mov	r1, r3
 8001988:	220d      	movs	r2, #13
 800198a:	4630      	mov	r0, r6
 800198c:	9503      	str	r5, [sp, #12]
 800198e:	f7ff fbe1 	bl	8001154 <_Unwind_VRS_Set>
 8001992:	4638      	mov	r0, r7
 8001994:	f7ff ffa6 	bl	80018e4 <next_unwind_byte>
 8001998:	28b0      	cmp	r0, #176	; 0xb0
 800199a:	4604      	mov	r4, r0
 800199c:	d1db      	bne.n	8001956 <__gnu_unwind_execute+0x1a>
 800199e:	f1b8 0f00 	cmp.w	r8, #0
 80019a2:	f000 8095 	beq.w	8001ad0 <__gnu_unwind_execute+0x194>
 80019a6:	2000      	movs	r0, #0
 80019a8:	e01c      	b.n	80019e4 <__gnu_unwind_execute+0xa8>
 80019aa:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80019ae:	2b80      	cmp	r3, #128	; 0x80
 80019b0:	d05d      	beq.n	8001a6e <__gnu_unwind_execute+0x132>
 80019b2:	2b90      	cmp	r3, #144	; 0x90
 80019b4:	d019      	beq.n	80019ea <__gnu_unwind_execute+0xae>
 80019b6:	2ba0      	cmp	r3, #160	; 0xa0
 80019b8:	d02c      	beq.n	8001a14 <__gnu_unwind_execute+0xd8>
 80019ba:	2bb0      	cmp	r3, #176	; 0xb0
 80019bc:	d03f      	beq.n	8001a3e <__gnu_unwind_execute+0x102>
 80019be:	2bc0      	cmp	r3, #192	; 0xc0
 80019c0:	d06c      	beq.n	8001a9c <__gnu_unwind_execute+0x160>
 80019c2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80019c6:	2bd0      	cmp	r3, #208	; 0xd0
 80019c8:	d10b      	bne.n	80019e2 <__gnu_unwind_execute+0xa6>
 80019ca:	f000 0207 	and.w	r2, r0, #7
 80019ce:	3201      	adds	r2, #1
 80019d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019d4:	2305      	movs	r3, #5
 80019d6:	2101      	movs	r1, #1
 80019d8:	4630      	mov	r0, r6
 80019da:	f7ff fd89 	bl	80014f0 <_Unwind_VRS_Pop>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d0b3      	beq.n	800194a <__gnu_unwind_execute+0xe>
 80019e2:	2009      	movs	r0, #9
 80019e4:	b005      	add	sp, #20
 80019e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019ea:	f000 030d 	and.w	r3, r0, #13
 80019ee:	2b0d      	cmp	r3, #13
 80019f0:	d0f7      	beq.n	80019e2 <__gnu_unwind_execute+0xa6>
 80019f2:	ad03      	add	r5, sp, #12
 80019f4:	2300      	movs	r3, #0
 80019f6:	f000 020f 	and.w	r2, r0, #15
 80019fa:	4619      	mov	r1, r3
 80019fc:	9500      	str	r5, [sp, #0]
 80019fe:	4630      	mov	r0, r6
 8001a00:	f7ff fb82 	bl	8001108 <_Unwind_VRS_Get>
 8001a04:	2300      	movs	r3, #0
 8001a06:	9500      	str	r5, [sp, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	220d      	movs	r2, #13
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f7ff fba1 	bl	8001154 <_Unwind_VRS_Set>
 8001a12:	e79a      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001a14:	43c2      	mvns	r2, r0
 8001a16:	f002 0307 	and.w	r3, r2, #7
 8001a1a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001a1e:	411a      	asrs	r2, r3
 8001a20:	0701      	lsls	r1, r0, #28
 8001a22:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	bf48      	it	mi
 8001a2c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001a30:	4619      	mov	r1, r3
 8001a32:	4630      	mov	r0, r6
 8001a34:	f7ff fd5c 	bl	80014f0 <_Unwind_VRS_Pop>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d1d2      	bne.n	80019e2 <__gnu_unwind_execute+0xa6>
 8001a3c:	e785      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001a3e:	28b1      	cmp	r0, #177	; 0xb1
 8001a40:	d057      	beq.n	8001af2 <__gnu_unwind_execute+0x1b6>
 8001a42:	28b2      	cmp	r0, #178	; 0xb2
 8001a44:	d068      	beq.n	8001b18 <__gnu_unwind_execute+0x1dc>
 8001a46:	28b3      	cmp	r0, #179	; 0xb3
 8001a48:	f000 8095 	beq.w	8001b76 <__gnu_unwind_execute+0x23a>
 8001a4c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001a50:	2bb4      	cmp	r3, #180	; 0xb4
 8001a52:	d0c6      	beq.n	80019e2 <__gnu_unwind_execute+0xa6>
 8001a54:	f000 0207 	and.w	r2, r0, #7
 8001a58:	3201      	adds	r2, #1
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a60:	4619      	mov	r1, r3
 8001a62:	4630      	mov	r0, r6
 8001a64:	f7ff fd44 	bl	80014f0 <_Unwind_VRS_Pop>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d1ba      	bne.n	80019e2 <__gnu_unwind_execute+0xa6>
 8001a6c:	e76d      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001a6e:	4638      	mov	r0, r7
 8001a70:	f7ff ff38 	bl	80018e4 <next_unwind_byte>
 8001a74:	0224      	lsls	r4, r4, #8
 8001a76:	4304      	orrs	r4, r0
 8001a78:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001a7c:	d0b1      	beq.n	80019e2 <__gnu_unwind_execute+0xa6>
 8001a7e:	0124      	lsls	r4, r4, #4
 8001a80:	2300      	movs	r3, #0
 8001a82:	b2a2      	uxth	r2, r4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4630      	mov	r0, r6
 8001a88:	f7ff fd32 	bl	80014f0 <_Unwind_VRS_Pop>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d1a8      	bne.n	80019e2 <__gnu_unwind_execute+0xa6>
 8001a90:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001a94:	bf18      	it	ne
 8001a96:	f04f 0801 	movne.w	r8, #1
 8001a9a:	e756      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001a9c:	28c6      	cmp	r0, #198	; 0xc6
 8001a9e:	d07d      	beq.n	8001b9c <__gnu_unwind_execute+0x260>
 8001aa0:	28c7      	cmp	r0, #199	; 0xc7
 8001aa2:	f000 8086 	beq.w	8001bb2 <__gnu_unwind_execute+0x276>
 8001aa6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8001aac:	f000 8094 	beq.w	8001bd8 <__gnu_unwind_execute+0x29c>
 8001ab0:	28c8      	cmp	r0, #200	; 0xc8
 8001ab2:	f000 809f 	beq.w	8001bf4 <__gnu_unwind_execute+0x2b8>
 8001ab6:	28c9      	cmp	r0, #201	; 0xc9
 8001ab8:	d193      	bne.n	80019e2 <__gnu_unwind_execute+0xa6>
 8001aba:	4638      	mov	r0, r7
 8001abc:	f7ff ff12 	bl	80018e4 <next_unwind_byte>
 8001ac0:	0302      	lsls	r2, r0, #12
 8001ac2:	f000 000f 	and.w	r0, r0, #15
 8001ac6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001aca:	3001      	adds	r0, #1
 8001acc:	4302      	orrs	r2, r0
 8001ace:	e781      	b.n	80019d4 <__gnu_unwind_execute+0x98>
 8001ad0:	ac03      	add	r4, sp, #12
 8001ad2:	4643      	mov	r3, r8
 8001ad4:	220e      	movs	r2, #14
 8001ad6:	4641      	mov	r1, r8
 8001ad8:	9400      	str	r4, [sp, #0]
 8001ada:	4630      	mov	r0, r6
 8001adc:	f7ff fb14 	bl	8001108 <_Unwind_VRS_Get>
 8001ae0:	9400      	str	r4, [sp, #0]
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	4643      	mov	r3, r8
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	4641      	mov	r1, r8
 8001aea:	f7ff fb33 	bl	8001154 <_Unwind_VRS_Set>
 8001aee:	4640      	mov	r0, r8
 8001af0:	e778      	b.n	80019e4 <__gnu_unwind_execute+0xa8>
 8001af2:	4638      	mov	r0, r7
 8001af4:	f7ff fef6 	bl	80018e4 <next_unwind_byte>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	f43f af72 	beq.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001afe:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001b02:	f47f af6e 	bne.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f7ff fcf0 	bl	80014f0 <_Unwind_VRS_Pop>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	f47f af66 	bne.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001b16:	e718      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f10d 090c 	add.w	r9, sp, #12
 8001b1e:	220d      	movs	r2, #13
 8001b20:	4619      	mov	r1, r3
 8001b22:	f8cd 9000 	str.w	r9, [sp]
 8001b26:	4630      	mov	r0, r6
 8001b28:	f7ff faee 	bl	8001108 <_Unwind_VRS_Get>
 8001b2c:	4638      	mov	r0, r7
 8001b2e:	f7ff fed9 	bl	80018e4 <next_unwind_byte>
 8001b32:	0602      	lsls	r2, r0, #24
 8001b34:	f04f 0402 	mov.w	r4, #2
 8001b38:	d50c      	bpl.n	8001b54 <__gnu_unwind_execute+0x218>
 8001b3a:	9b03      	ldr	r3, [sp, #12]
 8001b3c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001b40:	40a0      	lsls	r0, r4
 8001b42:	4403      	add	r3, r0
 8001b44:	4638      	mov	r0, r7
 8001b46:	9303      	str	r3, [sp, #12]
 8001b48:	f7ff fecc 	bl	80018e4 <next_unwind_byte>
 8001b4c:	0603      	lsls	r3, r0, #24
 8001b4e:	f104 0407 	add.w	r4, r4, #7
 8001b52:	d4f2      	bmi.n	8001b3a <__gnu_unwind_execute+0x1fe>
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	f8cd 9000 	str.w	r9, [sp]
 8001b5a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001b5e:	40a2      	lsls	r2, r4
 8001b60:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001b64:	2300      	movs	r3, #0
 8001b66:	4414      	add	r4, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	220d      	movs	r2, #13
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	9403      	str	r4, [sp, #12]
 8001b70:	f7ff faf0 	bl	8001154 <_Unwind_VRS_Set>
 8001b74:	e6e9      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001b76:	4638      	mov	r0, r7
 8001b78:	f7ff feb4 	bl	80018e4 <next_unwind_byte>
 8001b7c:	0301      	lsls	r1, r0, #12
 8001b7e:	f000 000f 	and.w	r0, r0, #15
 8001b82:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001b86:	1c42      	adds	r2, r0, #1
 8001b88:	2301      	movs	r3, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff fcae 	bl	80014f0 <_Unwind_VRS_Pop>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	f47f af24 	bne.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001b9a:	e6d6      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	f7ff fea1 	bl	80018e4 <next_unwind_byte>
 8001ba2:	0301      	lsls	r1, r0, #12
 8001ba4:	f000 000f 	and.w	r0, r0, #15
 8001ba8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001bac:	1c42      	adds	r2, r0, #1
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e7eb      	b.n	8001b8a <__gnu_unwind_execute+0x24e>
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	f7ff fe96 	bl	80018e4 <next_unwind_byte>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	f43f af12 	beq.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001bbe:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001bc2:	f47f af0e 	bne.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f7ff fc90 	bl	80014f0 <_Unwind_VRS_Pop>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	f47f af06 	bne.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001bd6:	e6b8      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001bd8:	f000 020f 	and.w	r2, r0, #15
 8001bdc:	3201      	adds	r2, #1
 8001bde:	2303      	movs	r3, #3
 8001be0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001be4:	4619      	mov	r1, r3
 8001be6:	4630      	mov	r0, r6
 8001be8:	f7ff fc82 	bl	80014f0 <_Unwind_VRS_Pop>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	f47f aef8 	bne.w	80019e2 <__gnu_unwind_execute+0xa6>
 8001bf2:	e6aa      	b.n	800194a <__gnu_unwind_execute+0xe>
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	f7ff fe75 	bl	80018e4 <next_unwind_byte>
 8001bfa:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001bfe:	f000 030f 	and.w	r3, r0, #15
 8001c02:	3210      	adds	r2, #16
 8001c04:	3301      	adds	r3, #1
 8001c06:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001c0a:	e6e3      	b.n	80019d4 <__gnu_unwind_execute+0x98>

08001c0c <__gnu_unwind_frame>:
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001c10:	b084      	sub	sp, #16
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2003      	movs	r0, #3
 8001c16:	f88d 000c 	strb.w	r0, [sp, #12]
 8001c1a:	79dc      	ldrb	r4, [r3, #7]
 8001c1c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001c20:	0212      	lsls	r2, r2, #8
 8001c22:	3308      	adds	r3, #8
 8001c24:	4608      	mov	r0, r1
 8001c26:	a901      	add	r1, sp, #4
 8001c28:	9201      	str	r2, [sp, #4]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	f7ff fe86 	bl	800193c <__gnu_unwind_execute>
 8001c30:	b004      	add	sp, #16
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <_Unwind_GetRegionStart>:
 8001c34:	b508      	push	{r3, lr}
 8001c36:	f7ff fe7f 	bl	8001938 <unwind_UCB_from_context>
 8001c3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001c3c:	bd08      	pop	{r3, pc}
 8001c3e:	bf00      	nop

08001c40 <_Unwind_GetLanguageSpecificData>:
 8001c40:	b508      	push	{r3, lr}
 8001c42:	f7ff fe79 	bl	8001938 <unwind_UCB_from_context>
 8001c46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001c48:	79c3      	ldrb	r3, [r0, #7]
 8001c4a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001c4e:	3008      	adds	r0, #8
 8001c50:	bd08      	pop	{r3, pc}
 8001c52:	bf00      	nop

08001c54 <_Unwind_GetTextRelBase>:
 8001c54:	b508      	push	{r3, lr}
 8001c56:	f006 ffbf 	bl	8008bd8 <abort>
 8001c5a:	bf00      	nop

08001c5c <_Unwind_GetDataRelBase>:
 8001c5c:	b508      	push	{r3, lr}
 8001c5e:	f7ff fff9 	bl	8001c54 <_Unwind_GetTextRelBase>
 8001c62:	bf00      	nop

08001c64 <__aeabi_idiv0>:
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c6e:	e003      	b.n	8001c78 <LoopCopyDataInit>

08001c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c76:	3104      	adds	r1, #4

08001c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c80:	d3f6      	bcc.n	8001c70 <CopyDataInit>
  ldr  r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c84:	e002      	b.n	8001c8c <LoopFillZerobss>

08001c86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c88:	f842 3b04 	str.w	r3, [r2], #4

08001c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c90:	d3f9      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c92:	f002 ff91 	bl	8004bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f007 f8c5 	bl	8008e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f001 fa21 	bl	80030e0 <main>
  bx  lr    
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ca0:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 8001ca4:	0800ace0 	.word	0x0800ace0
  ldr  r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cac:	2000051c 	.word	0x2000051c
  ldr  r2, =_sbss
 8001cb0:	20000520 	.word	0x20000520
  ldr  r3, = _ebss
 8001cb4:	20003f50 	.word	0x20003f50

08001cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC_IRQHandler>
	...

08001cbc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8001cbe:	4826      	ldr	r0, [pc, #152]	; (8001d58 <MX_ADC1_Init+0x9c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <MX_ADC1_Init+0xa0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cc2:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <MX_ADC1_Init+0xa4>)
 8001cc4:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cc6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8001cca:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8001cce:	2204      	movs	r2, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cd0:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 8001cd2:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cd4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001cd6:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cd8:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cda:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cdc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cde:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001ce0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ce2:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ce4:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce6:	f002 ffd9 	bl	8004c9c <HAL_ADC_Init>
 8001cea:	b118      	cbz	r0, 8001cf4 <MX_ADC1_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001cec:	2148      	movs	r1, #72	; 0x48
 8001cee:	481d      	ldr	r0, [pc, #116]	; (8001d64 <MX_ADC1_Init+0xa8>)
 8001cf0:	f001 f96c 	bl	8002fcc <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cf4:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 8001cf6:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf8:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001cfa:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cfc:	4816      	ldr	r0, [pc, #88]	; (8001d58 <MX_ADC1_Init+0x9c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001cfe:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d00:	f003 f940 	bl	8004f84 <HAL_ADC_ConfigChannel>
 8001d04:	b118      	cbz	r0, 8001d0e <MX_ADC1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d06:	2152      	movs	r1, #82	; 0x52
 8001d08:	4816      	ldr	r0, [pc, #88]	; (8001d64 <MX_ADC1_Init+0xa8>)
 8001d0a:	f001 f95f 	bl	8002fcc <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0e:	4669      	mov	r1, sp
 8001d10:	4811      	ldr	r0, [pc, #68]	; (8001d58 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_2;
 8001d12:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 2;
 8001d14:	9401      	str	r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d16:	f003 f935 	bl	8004f84 <HAL_ADC_ConfigChannel>
 8001d1a:	b118      	cbz	r0, 8001d24 <MX_ADC1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d1c:	215b      	movs	r1, #91	; 0x5b
 8001d1e:	4811      	ldr	r0, [pc, #68]	; (8001d64 <MX_ADC1_Init+0xa8>)
 8001d20:	f001 f954 	bl	8002fcc <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d24:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d26:	4669      	mov	r1, sp
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_3;
 8001d2a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8001d2c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d2e:	f003 f929 	bl	8004f84 <HAL_ADC_ConfigChannel>
 8001d32:	b118      	cbz	r0, 8001d3c <MX_ADC1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d34:	2164      	movs	r1, #100	; 0x64
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <MX_ADC1_Init+0xa8>)
 8001d38:	f001 f948 	bl	8002fcc <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d3c:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3e:	4669      	mov	r1, sp
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_4;
 8001d42:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8001d44:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d46:	f003 f91d 	bl	8004f84 <HAL_ADC_ConfigChannel>
 8001d4a:	b118      	cbz	r0, 8001d54 <MX_ADC1_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d4c:	216d      	movs	r1, #109	; 0x6d
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_ADC1_Init+0xa8>)
 8001d50:	f001 f93c 	bl	8002fcc <_Error_Handler>
  }

}
 8001d54:	b004      	add	sp, #16
 8001d56:	bd10      	pop	{r4, pc}
 8001d58:	20000a74 	.word	0x20000a74
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	0f000001 	.word	0x0f000001
 8001d64:	0800982c 	.word	0x0800982c

08001d68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001d6a:	6802      	ldr	r2, [r0, #0]
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_ADC_MspInit+0x3c>)
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d114      	bne.n	8001d9c <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d72:	2100      	movs	r1, #0
 8001d74:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001d78:	9100      	str	r1, [sp, #0]
 8001d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	480a      	ldr	r0, [pc, #40]	; (8001da8 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001d8e:	231e      	movs	r3, #30
 8001d90:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d94:	2303      	movs	r3, #3
 8001d96:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f003 fd5c 	bl	8005854 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d9c:	b007      	add	sp, #28
 8001d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da2:	bf00      	nop
 8001da4:	40012000 	.word	0x40012000
 8001da8:	40020000 	.word	0x40020000

08001dac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001dac:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_DMA_Init+0x40>)
 8001db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001dbe:	2201      	movs	r2, #1
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dc8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001dca:	f003 f981 	bl	80050d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dce:	203a      	movs	r0, #58	; 0x3a
 8001dd0:	f003 f9b2 	bl	8005138 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 1);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	2046      	movs	r0, #70	; 0x46
 8001dda:	f003 f979 	bl	80050d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001dde:	2046      	movs	r0, #70	; 0x46
 8001de0:	f003 f9aa 	bl	8005138 <HAL_NVIC_EnableIRQ>

}
 8001de4:	b003      	add	sp, #12
 8001de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001df6:	4f26      	ldr	r7, [pc, #152]	; (8001e90 <MX_GPIO_Init+0xa0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001df8:	4e26      	ldr	r6, [pc, #152]	; (8001e94 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	9401      	str	r4, [sp, #4]
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e00:	f042 0204 	orr.w	r2, r2, #4
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
 8001e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e08:	f002 0204 	and.w	r2, r2, #4
 8001e0c:	9201      	str	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0e:	9402      	str	r4, [sp, #8]
 8001e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
 8001e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001e1e:	9202      	str	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	9403      	str	r4, [sp, #12]
 8001e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2c:	f002 0201 	and.w	r2, r2, #1
 8001e30:	9203      	str	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	9404      	str	r4, [sp, #16]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	f042 0202 	orr.w	r2, r2, #2
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001e3e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e40:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001e44:	4638      	mov	r0, r7
 8001e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001e4c:	f003 fdbc 	bl	80059c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e50:	4622      	mov	r2, r4
 8001e52:	4630      	mov	r0, r6
 8001e54:	2140      	movs	r1, #64	; 0x40
 8001e56:	f003 fdb7 	bl	80059c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 8001e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 8001e60:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 8001e62:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e64:	2311      	movs	r3, #17
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 8001e66:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e68:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f003 fcf1 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001e72:	2340      	movs	r3, #64	; 0x40
 8001e74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e76:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e78:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e80:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f003 fce7 	bl	8005854 <HAL_GPIO_Init>

}
 8001e86:	b00b      	add	sp, #44	; 0x2c
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020400 	.word	0x40020400

08001e98 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e98:	6843      	ldr	r3, [r0, #4]
 8001e9a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e9c:	6843      	ldr	r3, [r0, #4]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001ea2:	88c3      	ldrh	r3, [r0, #6]
 8001ea4:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001ea6:	79c3      	ldrb	r3, [r0, #7]
 8001ea8:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001eaa:	6883      	ldr	r3, [r0, #8]
 8001eac:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001eae:	6883      	ldr	r3, [r0, #8]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001eb4:	8943      	ldrh	r3, [r0, #10]
 8001eb6:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001eb8:	7ac3      	ldrb	r3, [r0, #11]
 8001eba:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8001ebc:	2008      	movs	r0, #8
 8001ebe:	4770      	bx	lr

08001ec0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001ec0:	780b      	ldrb	r3, [r1, #0]
 8001ec2:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ec4:	784a      	ldrb	r2, [r1, #1]
 8001ec6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001eca:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ecc:	788a      	ldrb	r2, [r1, #2]
 8001ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ed2:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ed4:	78ca      	ldrb	r2, [r1, #3]
 8001ed6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001eda:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001edc:	790b      	ldrb	r3, [r1, #4]
 8001ede:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ee0:	794a      	ldrb	r2, [r1, #5]
 8001ee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ee6:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ee8:	798a      	ldrb	r2, [r1, #6]
 8001eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001eee:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ef0:	79ca      	ldrb	r2, [r1, #7]
 8001ef2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ef6:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8001ef8:	2008      	movs	r0, #8
 8001efa:	4770      	bx	lr

08001efc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001efc:	4800      	ldr	r0, [pc, #0]	; (8001f00 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8001efe:	4770      	bx	lr
 8001f00:	08009f19 	.word	0x08009f19

08001f04 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001f04:	4800      	ldr	r0, [pc, #0]	; (8001f08 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8001f06:	4770      	bx	lr
 8001f08:	08009ef8 	.word	0x08009ef8

08001f0c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8001f0c:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f0e:	780b      	ldrb	r3, [r1, #0]
 8001f10:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f12:	784a      	ldrb	r2, [r1, #1]
 8001f14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f18:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 8001f1a:	f8d1 2002 	ldr.w	r2, [r1, #2]
 8001f1e:	1d8b      	adds	r3, r1, #6
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f20:	1d94      	adds	r4, r2, #6
 8001f22:	1a5d      	subs	r5, r3, r1
 8001f24:	42ac      	cmp	r4, r5
 8001f26:	d904      	bls.n	8001f32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x26>
          inbuffer[k-1]=inbuffer[k];
 8001f28:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001f2c:	f803 5c02 	strb.w	r5, [r3, #-2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f30:	e7f7      	b.n	8001f22 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x16>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f32:	188b      	adds	r3, r1, r2
 8001f34:	2500      	movs	r5, #0
 8001f36:	715d      	strb	r5, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f38:	1d4b      	adds	r3, r1, #5
 8001f3a:	6083      	str	r3, [r0, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 8001f3c:	590b      	ldr	r3, [r1, r4]
      offset += 4;
 8001f3e:	320a      	adds	r2, #10
 8001f40:	188c      	adds	r4, r1, r2
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f42:	4413      	add	r3, r2
 8001f44:	1a65      	subs	r5, r4, r1
 8001f46:	42ab      	cmp	r3, r5
 8001f48:	d904      	bls.n	8001f54 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x48>
          inbuffer[k-1]=inbuffer[k];
 8001f4a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001f4e:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f52:	e7f7      	b.n	8001f44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x38>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001f54:	18cc      	adds	r4, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 8001f56:	3a01      	subs	r2, #1
 8001f58:	440a      	add	r2, r1
      inbuffer[offset+length_message_type-1]=0;
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 8001f60:	60c2      	str	r2, [r0, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 8001f62:	58ca      	ldr	r2, [r1, r3]
      offset += 4;
 8001f64:	3304      	adds	r3, #4
 8001f66:	18cc      	adds	r4, r1, r3
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f68:	441a      	add	r2, r3
 8001f6a:	1a65      	subs	r5, r4, r1
 8001f6c:	42aa      	cmp	r2, r5
 8001f6e:	d904      	bls.n	8001f7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x6e>
          inbuffer[k-1]=inbuffer[k];
 8001f70:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001f74:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f78:	e7f7      	b.n	8001f6a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001f7a:	188c      	adds	r4, r1, r2
      this->md5sum = (char *)(inbuffer + offset-1);
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	440b      	add	r3, r1
      inbuffer[offset+length_md5sum-1]=0;
 8001f80:	2500      	movs	r5, #0
 8001f82:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001f86:	6103      	str	r3, [r0, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f88:	78a3      	ldrb	r3, [r4, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f8a:	7865      	ldrb	r5, [r4, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f8c:	5c89      	ldrb	r1, [r1, r2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f8e:	041b      	lsls	r3, r3, #16
 8001f90:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001f94:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f96:	78e1      	ldrb	r1, [r4, #3]
 8001f98:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->buffer_size = u_buffer_size.real;
 8001f9c:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8001f9e:	1d10      	adds	r0, r2, #4
 8001fa0:	bd30      	pop	{r4, r5, pc}
	...

08001fa4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001fa4:	4800      	ldr	r0, [pc, #0]	; (8001fa8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8001fa6:	4770      	bx	lr
 8001fa8:	08009d30 	.word	0x08009d30

08001fac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001fac:	4800      	ldr	r0, [pc, #0]	; (8001fb0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8001fae:	4770      	bx	lr
 8001fb0:	08009d0f 	.word	0x08009d0f

08001fb4 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8001fb4:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001fb6:	780b      	ldrb	r3, [r1, #0]
 8001fb8:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 8001fba:	f8d1 3001 	ldr.w	r3, [r1, #1]
    virtual int deserialize(unsigned char *inbuffer)
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	1d4a      	adds	r2, r1, #5
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001fc2:	1d58      	adds	r0, r3, #5
 8001fc4:	1a55      	subs	r5, r2, r1
 8001fc6:	42a8      	cmp	r0, r5
 8001fc8:	d904      	bls.n	8001fd4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
          inbuffer[k-1]=inbuffer[k];
 8001fca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001fce:	f802 5c02 	strb.w	r5, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001fd2:	e7f7      	b.n	8001fc4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x10>
      }
      inbuffer[offset+length_msg-1]=0;
 8001fd4:	440b      	add	r3, r1
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 8001fda:	3104      	adds	r1, #4
 8001fdc:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 8001fde:	bd30      	pop	{r4, r5, pc}

08001fe0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001fe0:	4800      	ldr	r0, [pc, #0]	; (8001fe4 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8001fe2:	4770      	bx	lr
 8001fe4:	08009cfc 	.word	0x08009cfc

08001fe8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001fe8:	4800      	ldr	r0, [pc, #0]	; (8001fec <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8001fea:	4770      	bx	lr
 8001fec:	08009cdb 	.word	0x08009cdb

08001ff0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8001ff0:	4800      	ldr	r0, [pc, #0]	; (8001ff4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8001ff2:	4770      	bx	lr
 8001ff4:	08009810 	.word	0x08009810

08001ff8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001ff8:	4800      	ldr	r0, [pc, #0]	; (8001ffc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8001ffa:	4770      	bx	lr
 8001ffc:	08009cba 	.word	0x08009cba

08002000 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002000:	6882      	ldr	r2, [r0, #8]
 8002002:	68c3      	ldr	r3, [r0, #12]
 8002004:	700a      	strb	r2, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 8002006:	b510      	push	{r4, lr}
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002008:	0a14      	lsrs	r4, r2, #8
 800200a:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800200c:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800200e:	0e12      	lsrs	r2, r2, #24
 8002010:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002012:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002014:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002016:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002018:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800201a:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800201c:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800201e:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002020:	71cb      	strb	r3, [r1, #7]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002022:	6902      	ldr	r2, [r0, #16]
 8002024:	6943      	ldr	r3, [r0, #20]
 8002026:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002028:	0a14      	lsrs	r4, r2, #8
 800202a:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800202c:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800202e:	0e12      	lsrs	r2, r2, #24
 8002030:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002032:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002034:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002036:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002038:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800203a:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800203c:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800203e:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002040:	73cb      	strb	r3, [r1, #15]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002042:	6982      	ldr	r2, [r0, #24]
 8002044:	69c3      	ldr	r3, [r0, #28]
 8002046:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002048:	0a14      	lsrs	r4, r2, #8
 800204a:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800204c:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800204e:	0e12      	lsrs	r2, r2, #24
 8002050:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002052:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002054:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002056:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002058:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800205a:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800205c:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800205e:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002060:	75cb      	strb	r3, [r1, #23]
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8002062:	6a02      	ldr	r2, [r0, #32]
 8002064:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002066:	760a      	strb	r2, [r1, #24]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002068:	0a10      	lsrs	r0, r2, #8
 800206a:	7648      	strb	r0, [r1, #25]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 800206c:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 800206e:	0e12      	lsrs	r2, r2, #24
 8002070:	76ca      	strb	r2, [r1, #27]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8002072:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8002074:	770b      	strb	r3, [r1, #28]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8002076:	774a      	strb	r2, [r1, #29]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8002078:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 800207a:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 800207c:	7688      	strb	r0, [r1, #26]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 800207e:	778a      	strb	r2, [r1, #30]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8002080:	77cb      	strb	r3, [r1, #31]
      offset += sizeof(this->w);
      return offset;
    }
 8002082:	2020      	movs	r0, #32
 8002084:	bd10      	pop	{r4, pc}

08002086 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002086:	680a      	ldr	r2, [r1, #0]
 8002088:	684b      	ldr	r3, [r1, #4]
      this->x = u_x.real;
 800208a:	e9c0 2302 	strd	r2, r3, [r0, #8]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800208e:	688a      	ldr	r2, [r1, #8]
 8002090:	68cb      	ldr	r3, [r1, #12]
      this->y = u_y.real;
 8002092:	e9c0 2304 	strd	r2, r3, [r0, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002096:	690a      	ldr	r2, [r1, #16]
 8002098:	694b      	ldr	r3, [r1, #20]
      this->z = u_z.real;
 800209a:	e9c0 2306 	strd	r2, r3, [r0, #24]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800209e:	698a      	ldr	r2, [r1, #24]
 80020a0:	69cb      	ldr	r3, [r1, #28]
      this->w = u_w.real;
 80020a2:	e9c0 2308 	strd	r2, r3, [r0, #32]
      offset += sizeof(this->w);
     return offset;
    }
 80020a6:	2020      	movs	r0, #32
 80020a8:	4770      	bx	lr
	...

080020ac <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 80020ac:	4800      	ldr	r0, [pc, #0]	; (80020b0 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x4>)
 80020ae:	4770      	bx	lr
 80020b0:	08009ca1 	.word	0x08009ca1

080020b4 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 80020b4:	4800      	ldr	r0, [pc, #0]	; (80020b8 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x4>)
 80020b6:	4770      	bx	lr
 80020b8:	08009c80 	.word	0x08009c80

080020bc <_ZNK17jsk_imu_mini_msgs8Potentio9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80020bc:	6843      	ldr	r3, [r0, #4]
 80020be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80020c0:	6843      	ldr	r3, [r0, #4]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80020c6:	88c3      	ldrh	r3, [r0, #6]
 80020c8:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80020ca:	79c3      	ldrb	r3, [r0, #7]
 80020cc:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80020ce:	6883      	ldr	r3, [r0, #8]
 80020d0:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80020d2:	6883      	ldr	r3, [r0, #8]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	714b      	strb	r3, [r1, #5]
    virtual int serialize(unsigned char *outbuffer) const
 80020d8:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80020da:	8943      	ldrh	r3, [r0, #10]
 80020dc:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80020de:	7ac3      	ldrb	r3, [r0, #11]
 80020e0:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.nsec);
      *(outbuffer + offset++) = potentio_length;
 80020e2:	7b03      	ldrb	r3, [r0, #12]
 80020e4:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset++) = 0;
 80020e6:	2300      	movs	r3, #0
    virtual int serialize(unsigned char *outbuffer) const
 80020e8:	4602      	mov	r2, r0
      *(outbuffer + offset++) = 0;
 80020ea:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset++) = 0;
 80020ec:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset++) = 0;
 80020ee:	72cb      	strb	r3, [r1, #11]
 80020f0:	f101 040c 	add.w	r4, r1, #12
      for( uint8_t i = 0; i < potentio_length; i++){
 80020f4:	7b16      	ldrb	r6, [r2, #12]
 80020f6:	1c5d      	adds	r5, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	42b3      	cmp	r3, r6
 80020fc:	eba4 0001 	sub.w	r0, r4, r1
 8002100:	f104 0402 	add.w	r4, r4, #2
 8002104:	da0c      	bge.n	8002120 <_ZNK17jsk_imu_mini_msgs8Potentio9serializeEPh+0x64>
      *(outbuffer + offset + 0) = (this->potentio[i] >> (8 * 0)) & 0xFF;
 8002106:	6910      	ldr	r0, [r2, #16]
 8002108:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800210c:	f804 0c02 	strb.w	r0, [r4, #-2]
      *(outbuffer + offset + 1) = (this->potentio[i] >> (8 * 1)) & 0xFF;
 8002110:	6910      	ldr	r0, [r2, #16]
 8002112:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f804 3c01 	strb.w	r3, [r4, #-1]
      for( uint8_t i = 0; i < potentio_length; i++){
 800211c:	462b      	mov	r3, r5
 800211e:	e7e9      	b.n	80020f4 <_ZNK17jsk_imu_mini_msgs8Potentio9serializeEPh+0x38>
      offset += sizeof(this->potentio[i]);
      }
      return offset;
    }
 8002120:	bd70      	pop	{r4, r5, r6, pc}
	...

08002124 <_ZN17jsk_imu_mini_msgs8Potentio7getTypeEv>:
        memcpy( &(this->potentio[i]), &(this->st_potentio), sizeof(uint16_t));
      }
     return offset;
    }

    const char * getType(){ return "jsk_imu_mini_msgs/Potentio"; };
 8002124:	4800      	ldr	r0, [pc, #0]	; (8002128 <_ZN17jsk_imu_mini_msgs8Potentio7getTypeEv+0x4>)
 8002126:	4770      	bx	lr
 8002128:	08009ea4 	.word	0x08009ea4

0800212c <_ZN17jsk_imu_mini_msgs8Potentio6getMD5Ev>:
    const char * getMD5(){ return "3c38bfc62efc8af1fef221b81830300a"; };
 800212c:	4800      	ldr	r0, [pc, #0]	; (8002130 <_ZN17jsk_imu_mini_msgs8Potentio6getMD5Ev+0x4>)
 800212e:	4770      	bx	lr
 8002130:	08009e83 	.word	0x08009e83

08002134 <_ZN17jsk_imu_mini_msgs5Debug11deserializeEPh>:
      memcpy(outbuffer + offset, this->data, length_data);
      offset += length_data;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8002134:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002136:	780b      	ldrb	r3, [r1, #0]
 8002138:	6043      	str	r3, [r0, #4]
    virtual int deserialize(unsigned char *inbuffer)
 800213a:	4602      	mov	r2, r0
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800213c:	7848      	ldrb	r0, [r1, #1]
 800213e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002142:	6053      	str	r3, [r2, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002144:	7888      	ldrb	r0, [r1, #2]
 8002146:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800214a:	6053      	str	r3, [r2, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800214c:	78c8      	ldrb	r0, [r1, #3]
 800214e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002152:	6053      	str	r3, [r2, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002154:	790b      	ldrb	r3, [r1, #4]
 8002156:	6093      	str	r3, [r2, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002158:	7948      	ldrb	r0, [r1, #5]
 800215a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800215e:	6093      	str	r3, [r2, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002160:	7988      	ldrb	r0, [r1, #6]
 8002162:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002166:	6093      	str	r3, [r2, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002168:	79c8      	ldrb	r0, [r1, #7]
 800216a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800216e:	6093      	str	r3, [r2, #8]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_data;
      memcpy(&length_data, (inbuffer + offset), sizeof(uint32_t));
 8002170:	688b      	ldr	r3, [r1, #8]
 8002172:	f101 040c 	add.w	r4, r1, #12
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002176:	f103 000c 	add.w	r0, r3, #12
 800217a:	1a65      	subs	r5, r4, r1
 800217c:	42a8      	cmp	r0, r5
 800217e:	d904      	bls.n	800218a <_ZN17jsk_imu_mini_msgs5Debug11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002180:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002184:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002188:	e7f7      	b.n	800217a <_ZN17jsk_imu_mini_msgs5Debug11deserializeEPh+0x46>
      }
      inbuffer[offset+length_data-1]=0;
 800218a:	440b      	add	r3, r1
 800218c:	2400      	movs	r4, #0
 800218e:	72dc      	strb	r4, [r3, #11]
      this->data = (char *)(inbuffer + offset-1);
 8002190:	310b      	adds	r1, #11
 8002192:	60d1      	str	r1, [r2, #12]
      offset += length_data;
     return offset;
    }
 8002194:	bd30      	pop	{r4, r5, pc}
	...

08002198 <_ZN17jsk_imu_mini_msgs5Debug7getTypeEv>:

    const char * getType(){ return "jsk_imu_mini_msgs/Debug"; };
 8002198:	4800      	ldr	r0, [pc, #0]	; (800219c <_ZN17jsk_imu_mini_msgs5Debug7getTypeEv+0x4>)
 800219a:	4770      	bx	lr
 800219c:	08009e6b 	.word	0x08009e6b

080021a0 <_ZN17jsk_imu_mini_msgs5Debug6getMD5Ev>:
    const char * getMD5(){ return "37670eed6af64f24a40b9b9fc1cb861e"; };
 80021a0:	4800      	ldr	r0, [pc, #0]	; (80021a4 <_ZN17jsk_imu_mini_msgs5Debug6getMD5Ev+0x4>)
 80021a2:	4770      	bx	lr
 80021a4:	08009e4a 	.word	0x08009e4a

080021a8 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh>:
      gyro_data(),
      mag_data()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80021aa:	6843      	ldr	r3, [r0, #4]
 80021ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80021ae:	6843      	ldr	r3, [r0, #4]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80021b4:	88c3      	ldrh	r3, [r0, #6]
 80021b6:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80021b8:	79c3      	ldrb	r3, [r0, #7]
 80021ba:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80021bc:	6883      	ldr	r3, [r0, #8]
 80021be:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80021c0:	6883      	ldr	r3, [r0, #8]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80021c6:	8943      	ldrh	r3, [r0, #10]
 80021c8:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80021ca:	7ac3      	ldrb	r3, [r0, #11]
 80021cc:	71cb      	strb	r3, [r1, #7]
    virtual int serialize(unsigned char *outbuffer) const
 80021ce:	4604      	mov	r4, r0
 80021d0:	460d      	mov	r5, r1
      offset += sizeof(this->stamp.nsec);
      offset += this->orientation.serialize(outbuffer + offset);
 80021d2:	3010      	adds	r0, #16
 80021d4:	3108      	adds	r1, #8
 80021d6:	f7ff ff13 	bl	8002000 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80021da:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80021de:	f100 0308 	add.w	r3, r0, #8
 80021e2:	1829      	adds	r1, r5, r0
 80021e4:	3014      	adds	r0, #20
      for( uint8_t i = 0; i < 3; i++){
 80021e6:	4283      	cmp	r3, r0
 80021e8:	f101 0104 	add.w	r1, r1, #4
 80021ec:	d00a      	beq.n	8002204 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x5c>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.real = this->acc_data[i];
 80021ee:	f856 2b04 	ldr.w	r2, [r6], #4
      *(outbuffer + offset + 0) = (u_acc_datai.base >> (8 * 0)) & 0xFF;
 80021f2:	710a      	strb	r2, [r1, #4]
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
 80021f4:	0a17      	lsrs	r7, r2, #8
 80021f6:	714f      	strb	r7, [r1, #5]
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 80021f8:	0c17      	lsrs	r7, r2, #16
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 80021fa:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 80021fc:	718f      	strb	r7, [r1, #6]
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 80021fe:	71ca      	strb	r2, [r1, #7]
 8002200:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8002202:	e7f0      	b.n	80021e6 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x3e>
 8002204:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8002208:	442b      	add	r3, r5
 800220a:	f104 0650 	add.w	r6, r4, #80	; 0x50
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800220e:	42b1      	cmp	r1, r6
 8002210:	eba3 0205 	sub.w	r2, r3, r5
 8002214:	f103 0304 	add.w	r3, r3, #4
 8002218:	d00d      	beq.n	8002236 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x8e>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.real = this->gyro_data[i];
 800221a:	f851 2b04 	ldr.w	r2, [r1], #4
      *(outbuffer + offset + 0) = (u_gyro_datai.base >> (8 * 0)) & 0xFF;
 800221e:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
 8002222:	0a10      	lsrs	r0, r2, #8
 8002224:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 8002228:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 800222a:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 800222c:	f803 0c02 	strb.w	r0, [r3, #-2]
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 8002230:	f803 2c01 	strb.w	r2, [r3, #-1]
      for( uint8_t i = 0; i < 3; i++){
 8002234:	e7eb      	b.n	800220e <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x66>
 8002236:	18ab      	adds	r3, r5, r2
 8002238:	345c      	adds	r4, #92	; 0x5c
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800223a:	42a1      	cmp	r1, r4
 800223c:	eba3 0005 	sub.w	r0, r3, r5
 8002240:	f103 0304 	add.w	r3, r3, #4
 8002244:	d00d      	beq.n	8002262 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0xba>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.real = this->mag_data[i];
 8002246:	f851 2b04 	ldr.w	r2, [r1], #4
      *(outbuffer + offset + 0) = (u_mag_datai.base >> (8 * 0)) & 0xFF;
 800224a:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
 800224e:	0a10      	lsrs	r0, r2, #8
 8002250:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 8002254:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 8002256:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 8002258:	f803 0c02 	strb.w	r0, [r3, #-2]
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 800225c:	f803 2c01 	strb.w	r2, [r3, #-1]
      for( uint8_t i = 0; i < 3; i++){
 8002260:	e7eb      	b.n	800223a <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x92>
      offset += sizeof(this->mag_data[i]);
      }
      return offset;
    }
 8002262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002264 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002266:	780b      	ldrb	r3, [r1, #0]
 8002268:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800226a:	784a      	ldrb	r2, [r1, #1]
 800226c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002270:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002272:	788a      	ldrb	r2, [r1, #2]
 8002274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002278:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800227a:	78ca      	ldrb	r2, [r1, #3]
 800227c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002280:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002282:	790b      	ldrb	r3, [r1, #4]
 8002284:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002286:	794a      	ldrb	r2, [r1, #5]
 8002288:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800228c:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800228e:	798a      	ldrb	r2, [r1, #6]
 8002290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002294:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002296:	79ca      	ldrb	r2, [r1, #7]
 8002298:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800229c:	6083      	str	r3, [r0, #8]
    virtual int deserialize(unsigned char *inbuffer)
 800229e:	4605      	mov	r5, r0
 80022a0:	460c      	mov	r4, r1
      offset += sizeof(this->stamp.nsec);
      offset += this->orientation.deserialize(inbuffer + offset);
 80022a2:	3010      	adds	r0, #16
 80022a4:	3108      	adds	r1, #8
 80022a6:	f7ff feee 	bl	8002086 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80022aa:	f105 0638 	add.w	r6, r5, #56	; 0x38
 80022ae:	f100 0308 	add.w	r3, r0, #8
 80022b2:	1821      	adds	r1, r4, r0
 80022b4:	3014      	adds	r0, #20
      for( uint8_t i = 0; i < 3; i++){
 80022b6:	4283      	cmp	r3, r0
 80022b8:	f101 0104 	add.w	r1, r1, #4
 80022bc:	d00d      	beq.n	80022da <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x76>
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.base = 0;
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022be:	798a      	ldrb	r2, [r1, #6]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022c0:	794f      	ldrb	r7, [r1, #5]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022c2:	0412      	lsls	r2, r2, #16
 80022c4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022c8:	790f      	ldrb	r7, [r1, #4]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022ca:	433a      	orrs	r2, r7
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022cc:	79cf      	ldrb	r7, [r1, #7]
      this->acc_data[i] = u_acc_datai.real;
 80022ce:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 80022d2:	f846 2b04 	str.w	r2, [r6], #4
 80022d6:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 80022d8:	e7ed      	b.n	80022b6 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x52>
 80022da:	18e1      	adds	r1, r4, r3
 80022dc:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80022e0:	f103 070c 	add.w	r7, r3, #12
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 80022e4:	42bb      	cmp	r3, r7
 80022e6:	f101 0104 	add.w	r1, r1, #4
 80022ea:	d011      	beq.n	8002310 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xac>
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.base = 0;
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022ec:	f811 2c02 	ldrb.w	r2, [r1, #-2]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022f0:	f811 6c03 	ldrb.w	r6, [r1, #-3]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022f4:	0412      	lsls	r2, r2, #16
 80022f6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022fa:	f811 6c04 	ldrb.w	r6, [r1, #-4]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022fe:	4332      	orrs	r2, r6
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002300:	f811 6c01 	ldrb.w	r6, [r1, #-1]
      this->gyro_data[i] = u_gyro_datai.real;
 8002304:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8002308:	f840 2b04 	str.w	r2, [r0], #4
 800230c:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 800230e:	e7e9      	b.n	80022e4 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x80>
 8002310:	441c      	add	r4, r3
 8002312:	3550      	adds	r5, #80	; 0x50
 8002314:	f103 000c 	add.w	r0, r3, #12
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 8002318:	4283      	cmp	r3, r0
 800231a:	f104 0404 	add.w	r4, r4, #4
 800231e:	d011      	beq.n	8002344 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xe0>
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.base = 0;
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002320:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002324:	f814 1c03 	ldrb.w	r1, [r4, #-3]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002328:	0412      	lsls	r2, r2, #16
 800232a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800232e:	f814 1c04 	ldrb.w	r1, [r4, #-4]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002332:	430a      	orrs	r2, r1
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002334:	f814 1c01 	ldrb.w	r1, [r4, #-1]
      this->mag_data[i] = u_mag_datai.real;
 8002338:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800233c:	f845 2b04 	str.w	r2, [r5], #4
 8002340:	3304      	adds	r3, #4
      for( uint8_t i = 0; i < 3; i++){
 8002342:	e7e9      	b.n	8002318 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xb4>
      offset += sizeof(this->mag_data[i]);
      }
     return offset;
    }
 8002344:	4618      	mov	r0, r3
 8002346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002348 <_ZN17jsk_imu_mini_msgs3Imu7getTypeEv>:

    const char * getType(){ return "jsk_imu_mini_msgs/Imu"; };
 8002348:	4800      	ldr	r0, [pc, #0]	; (800234c <_ZN17jsk_imu_mini_msgs3Imu7getTypeEv+0x4>)
 800234a:	4770      	bx	lr
 800234c:	08009e34 	.word	0x08009e34

08002350 <_ZN17jsk_imu_mini_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "1487150e66cb92794e797359541ff5d6"; };
 8002350:	4800      	ldr	r0, [pc, #0]	; (8002354 <_ZN17jsk_imu_mini_msgs3Imu6getMD5Ev+0x4>)
 8002352:	4770      	bx	lr
 8002354:	08009e13 	.word	0x08009e13

08002358 <_ZNK17jsk_imu_mini_msgs11DesireCoord9serializeEPh>:
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8002358:	6843      	ldr	r3, [r0, #4]
 800235a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 800235c:	0a1a      	lsrs	r2, r3, #8
 800235e:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8002360:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8002362:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8002364:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8002366:	70cb      	strb	r3, [r1, #3]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 8002368:	6883      	ldr	r3, [r0, #8]
 800236a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 800236c:	0a1a      	lsrs	r2, r3, #8
 800236e:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8002370:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8002372:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8002374:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8002376:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 8002378:	68c3      	ldr	r3, [r0, #12]
 800237a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 800237c:	0a1a      	lsrs	r2, r3, #8
 800237e:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8002380:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8002382:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8002384:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8002386:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->yaw);
      *(outbuffer + offset + 0) = (this->coord_type >> (8 * 0)) & 0xFF;
 8002388:	7c03      	ldrb	r3, [r0, #16]
 800238a:	730b      	strb	r3, [r1, #12]
      offset += sizeof(this->coord_type);
      return offset;
    }
 800238c:	200d      	movs	r0, #13
 800238e:	4770      	bx	lr

08002390 <_ZN17jsk_imu_mini_msgs11DesireCoord11deserializeEPh>:
      u_roll.base = 0;
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->roll = u_roll.real;
 8002390:	680b      	ldr	r3, [r1, #0]
 8002392:	6043      	str	r3, [r0, #4]
      u_pitch.base = 0;
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->pitch = u_pitch.real;
 8002394:	684b      	ldr	r3, [r1, #4]
 8002396:	6083      	str	r3, [r0, #8]
      u_yaw.base = 0;
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->yaw = u_yaw.real;
 8002398:	688b      	ldr	r3, [r1, #8]
 800239a:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->yaw);
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 800239c:	7b0b      	ldrb	r3, [r1, #12]
 800239e:	7403      	strb	r3, [r0, #16]
      offset += sizeof(this->coord_type);
     return offset;
    }
 80023a0:	200d      	movs	r0, #13
 80023a2:	4770      	bx	lr

080023a4 <_ZN17jsk_imu_mini_msgs11DesireCoord7getTypeEv>:

    const char * getType(){ return "jsk_imu_mini_msgs/DesireCoord"; };
 80023a4:	4800      	ldr	r0, [pc, #0]	; (80023a8 <_ZN17jsk_imu_mini_msgs11DesireCoord7getTypeEv+0x4>)
 80023a6:	4770      	bx	lr
 80023a8:	08009df5 	.word	0x08009df5

080023ac <_ZN17jsk_imu_mini_msgs11DesireCoord6getMD5Ev>:
    const char * getMD5(){ return "6ccf1a68453182818d4a1d0d5013bd0d"; };
 80023ac:	4800      	ldr	r0, [pc, #0]	; (80023b0 <_ZN17jsk_imu_mini_msgs11DesireCoord6getMD5Ev+0x4>)
 80023ae:	4770      	bx	lr
 80023b0:	08009dd4 	.word	0x08009dd4

080023b4 <_ZNK17aerial_robot_msgs9Barometer9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80023b4:	6843      	ldr	r3, [r0, #4]
 80023b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80023b8:	6843      	ldr	r3, [r0, #4]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80023be:	88c3      	ldrh	r3, [r0, #6]
 80023c0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80023c2:	79c3      	ldrb	r3, [r0, #7]
 80023c4:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80023c6:	6883      	ldr	r3, [r0, #8]
 80023c8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80023ca:	6883      	ldr	r3, [r0, #8]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80023d0:	8943      	ldrh	r3, [r0, #10]
 80023d2:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80023d4:	7ac3      	ldrb	r3, [r0, #11]
 80023d6:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.real = this->altitude;
      *(outbuffer + offset + 0) = (u_altitude.base >> (8 * 0)) & 0xFF;
 80023d8:	68c3      	ldr	r3, [r0, #12]
 80023da:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_altitude.base >> (8 * 1)) & 0xFF;
 80023dc:	0a1a      	lsrs	r2, r3, #8
 80023de:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 80023e0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 80023e2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 80023e4:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 80023e6:	72cb      	strb	r3, [r1, #11]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.real = this->pressure;
      *(outbuffer + offset + 0) = (u_pressure.base >> (8 * 0)) & 0xFF;
 80023e8:	6903      	ldr	r3, [r0, #16]
 80023ea:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_pressure.base >> (8 * 1)) & 0xFF;
 80023ec:	0a1a      	lsrs	r2, r3, #8
 80023ee:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 80023f0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 80023f2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 80023f4:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 80023f6:	73cb      	strb	r3, [r1, #15]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 80023f8:	6943      	ldr	r3, [r0, #20]
 80023fa:	740b      	strb	r3, [r1, #16]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 80023fc:	0a1a      	lsrs	r2, r3, #8
 80023fe:	744a      	strb	r2, [r1, #17]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8002400:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8002402:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8002404:	748a      	strb	r2, [r1, #18]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8002406:	74cb      	strb	r3, [r1, #19]
      offset += sizeof(this->temperature);
      return offset;
    }
 8002408:	2014      	movs	r0, #20
 800240a:	4770      	bx	lr

0800240c <_ZN17aerial_robot_msgs9Barometer11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800240c:	780b      	ldrb	r3, [r1, #0]
 800240e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002410:	784a      	ldrb	r2, [r1, #1]
 8002412:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002416:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002418:	788a      	ldrb	r2, [r1, #2]
 800241a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800241e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002420:	78ca      	ldrb	r2, [r1, #3]
 8002422:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002426:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002428:	790b      	ldrb	r3, [r1, #4]
 800242a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800242c:	794a      	ldrb	r2, [r1, #5]
 800242e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002432:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002434:	798a      	ldrb	r2, [r1, #6]
 8002436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800243a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800243c:	79ca      	ldrb	r2, [r1, #7]
 800243e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002442:	6083      	str	r3, [r0, #8]
      u_altitude.base = 0;
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->altitude = u_altitude.real;
 8002444:	688b      	ldr	r3, [r1, #8]
 8002446:	60c3      	str	r3, [r0, #12]
      u_pressure.base = 0;
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->pressure = u_pressure.real;
 8002448:	68cb      	ldr	r3, [r1, #12]
 800244a:	6103      	str	r3, [r0, #16]
      u_temperature.base = 0;
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->temperature = u_temperature.real;
 800244c:	690b      	ldr	r3, [r1, #16]
 800244e:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->temperature);
     return offset;
    }
 8002450:	2014      	movs	r0, #20
 8002452:	4770      	bx	lr

08002454 <_ZN17aerial_robot_msgs9Barometer7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Barometer"; };
 8002454:	4800      	ldr	r0, [pc, #0]	; (8002458 <_ZN17aerial_robot_msgs9Barometer7getTypeEv+0x4>)
 8002456:	4770      	bx	lr
 8002458:	08009db8 	.word	0x08009db8

0800245c <_ZN17aerial_robot_msgs9Barometer6getMD5Ev>:
    const char * getMD5(){ return "b732c389660333d48fe976feb5768402"; };
 800245c:	4800      	ldr	r0, [pc, #0]	; (8002460 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev+0x4>)
 800245e:	4770      	bx	lr
 8002460:	08009d97 	.word	0x08009d97

08002464 <_ZNK17aerial_robot_msgs3Gps9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002464:	6843      	ldr	r3, [r0, #4]
 8002466:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002468:	6843      	ldr	r3, [r0, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800246e:	88c3      	ldrh	r3, [r0, #6]
 8002470:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002472:	79c3      	ldrb	r3, [r0, #7]
 8002474:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002476:	6883      	ldr	r3, [r0, #8]
 8002478:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800247a:	6883      	ldr	r3, [r0, #8]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002480:	8943      	ldrh	r3, [r0, #10]
 8002482:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002484:	7ac3      	ldrb	r3, [r0, #11]
 8002486:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.real = this->location[i];
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 8002488:	68c3      	ldr	r3, [r0, #12]
 800248a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 800248c:	0a1a      	lsrs	r2, r3, #8
 800248e:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8002490:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8002492:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8002494:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8002496:	72cb      	strb	r3, [r1, #11]
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 8002498:	6903      	ldr	r3, [r0, #16]
 800249a:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 800249c:	0a1a      	lsrs	r2, r3, #8
 800249e:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 80024a0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 80024a2:	0e1b      	lsrs	r3, r3, #24
    virtual int serialize(unsigned char *outbuffer) const
 80024a4:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 80024a6:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 80024a8:	73cb      	strb	r3, [r1, #15]
 80024aa:	f100 0514 	add.w	r5, r0, #20
 80024ae:	f101 0210 	add.w	r2, r1, #16
 80024b2:	2410      	movs	r4, #16
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 80024b4:	2c18      	cmp	r4, #24
 80024b6:	f102 0204 	add.w	r2, r2, #4
 80024ba:	d00e      	beq.n	80024da <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x76>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 80024bc:	f855 3b04 	ldr.w	r3, [r5], #4
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 80024c0:	f802 3c04 	strb.w	r3, [r2, #-4]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 80024c4:	0a1e      	lsrs	r6, r3, #8
 80024c6:	f802 6c03 	strb.w	r6, [r2, #-3]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 80024ca:	0c1e      	lsrs	r6, r3, #16
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 80024cc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 80024ce:	f802 6c02 	strb.w	r6, [r2, #-2]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 80024d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80024d6:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 2; i++){
 80024d8:	e7ec      	b.n	80024b4 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x50>
      offset += sizeof(this->velocity[i]);
      }
      *(outbuffer + offset + 0) = (this->sat_num >> (8 * 0)) & 0xFF;
 80024da:	7f03      	ldrb	r3, [r0, #28]
 80024dc:	760b      	strb	r3, [r1, #24]
      offset += sizeof(this->sat_num);
      return offset;
    }
 80024de:	2019      	movs	r0, #25
 80024e0:	bd70      	pop	{r4, r5, r6, pc}

080024e2 <_ZN17aerial_robot_msgs3Gps11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80024e2:	780b      	ldrb	r3, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer)
 80024e4:	b570      	push	{r4, r5, r6, lr}
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80024e6:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024e8:	784a      	ldrb	r2, [r1, #1]
 80024ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024ee:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024f0:	788a      	ldrb	r2, [r1, #2]
 80024f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024f6:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024f8:	78ca      	ldrb	r2, [r1, #3]
 80024fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024fe:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002500:	790b      	ldrb	r3, [r1, #4]
 8002502:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002504:	794a      	ldrb	r2, [r1, #5]
 8002506:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800250a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800250c:	798a      	ldrb	r2, [r1, #6]
 800250e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002512:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002514:	79ca      	ldrb	r2, [r1, #7]
 8002516:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800251a:	6083      	str	r3, [r0, #8]
        uint32_t base;
      } u_locationi;
      u_locationi.base = 0;
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800251c:	7a8b      	ldrb	r3, [r1, #10]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800251e:	7a4a      	ldrb	r2, [r1, #9]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002526:	7a0a      	ldrb	r2, [r1, #8]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002528:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800252a:	7aca      	ldrb	r2, [r1, #11]
      this->location[i] = u_locationi.real;
 800252c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002530:	60c3      	str	r3, [r0, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002532:	7b8b      	ldrb	r3, [r1, #14]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002534:	7b4a      	ldrb	r2, [r1, #13]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800253c:	7b0a      	ldrb	r2, [r1, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800253e:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002540:	7bca      	ldrb	r2, [r1, #15]
      this->location[i] = u_locationi.real;
 8002542:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002546:	6103      	str	r3, [r0, #16]
 8002548:	f101 0210 	add.w	r2, r1, #16
 800254c:	f100 0514 	add.w	r5, r0, #20
 8002550:	2410      	movs	r4, #16
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 8002552:	2c18      	cmp	r4, #24
 8002554:	f102 0204 	add.w	r2, r2, #4
 8002558:	d011      	beq.n	800257e <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x9c>
        uint32_t base;
      } u_velocityi;
      u_velocityi.base = 0;
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800255a:	f812 3c02 	ldrb.w	r3, [r2, #-2]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800255e:	f812 6c03 	ldrb.w	r6, [r2, #-3]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002568:	f812 6c04 	ldrb.w	r6, [r2, #-4]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800256c:	4333      	orrs	r3, r6
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800256e:	f812 6c01 	ldrb.w	r6, [r2, #-1]
      this->velocity[i] = u_velocityi.real;
 8002572:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002576:	f845 3b04 	str.w	r3, [r5], #4
 800257a:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 2; i++){
 800257c:	e7e9      	b.n	8002552 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x70>
      offset += sizeof(this->velocity[i]);
      }
      this->sat_num =  ((uint8_t) (*(inbuffer + offset)));
 800257e:	7e0b      	ldrb	r3, [r1, #24]
 8002580:	7703      	strb	r3, [r0, #28]
      offset += sizeof(this->sat_num);
     return offset;
    }
 8002582:	2019      	movs	r0, #25
 8002584:	bd70      	pop	{r4, r5, r6, pc}
	...

08002588 <_ZN17aerial_robot_msgs3Gps7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Gps"; };
 8002588:	4800      	ldr	r0, [pc, #0]	; (800258c <_ZN17aerial_robot_msgs3Gps7getTypeEv+0x4>)
 800258a:	4770      	bx	lr
 800258c:	08009d81 	.word	0x08009d81

08002590 <_ZN17aerial_robot_msgs3Gps6getMD5Ev>:
    const char * getMD5(){ return "b9b55701ff5240f76ada29af2827853c"; };
 8002590:	4800      	ldr	r0, [pc, #0]	; (8002594 <_ZN17aerial_robot_msgs3Gps6getMD5Ev+0x4>)
 8002592:	4770      	bx	lr
 8002594:	08009d60 	.word	0x08009d60

08002598 <_ZN13StateEstimateD1Ev>:
{
public:
  StateEstimate()
  {
  }
  ~StateEstimate(){}
 8002598:	4770      	bx	lr

0800259a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9connectedEv>:


    /* Are we connected to the PC? */
    virtual bool connected() {
      return configured_;
    };
 800259a:	f890 02d0 	ldrb.w	r0, [r0, #720]	; 0x2d0
 800259e:	4770      	bx	lr

080025a0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef>:

  static void TransmitCplt(DMA_HandleTypeDef *hdma)
  {
    Hardware* huart = ( Hardware* )(hdma)->Parent;
    /* DMA Normal mode*/
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80025a0:	6803      	ldr	r3, [r0, #0]
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 80025a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	680a      	ldr	r2, [r1, #0]
 80025a8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  static void TransmitCplt(DMA_HandleTypeDef *hdma)
 80025ac:	b530      	push	{r4, r5, lr}
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80025ae:	d109      	bne.n	80025c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x24>
      {
        huart->TxXferCount = 0;
 80025b0:	84cb      	strh	r3, [r1, #38]	; 0x26

        /* Disable the DMA transfer for transmit request by setting the DMAT bit
           in the UART CR3 register */
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80025b2:	6953      	ldr	r3, [r2, #20]
 80025b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b8:	6153      	str	r3, [r2, #20]
 /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025ba:	68d3      	ldr	r3, [r2, #12]
 80025bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
              {
                idle_flag_ = true;
              }

          }
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 80025c0:	60d3      	str	r3, [r2, #12]
 80025c2:	bd30      	pop	{r4, r5, pc}
        if(!idle_flag_)
 80025c4:	4847      	ldr	r0, [pc, #284]	; (80026e4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x144>)
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 80025c6:	6953      	ldr	r3, [r2, #20]
        if(!idle_flag_)
 80025c8:	7805      	ldrb	r5, [r0, #0]
 80025ca:	6b0c      	ldr	r4, [r1, #48]	; 0x30
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 80025cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d0:	6153      	str	r3, [r2, #20]
        if(!idle_flag_)
 80025d2:	bb3d      	cbnz	r5, 8002624 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x84>
            subscript_in_progress_++;
 80025d4:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x148>)
 80025d6:	7819      	ldrb	r1, [r3, #0]
 80025d8:	3101      	adds	r1, #1
 80025da:	b2c9      	uxtb	r1, r1
            if (subscript_in_progress_ == TX_SIZE)
 80025dc:	2932      	cmp	r1, #50	; 0x32
            subscript_in_progress_++;
 80025de:	bf18      	it	ne
 80025e0:	7019      	strbne	r1, [r3, #0]
            if (subscript_in_progress_ != subscript_to_add_)
 80025e2:	4942      	ldr	r1, [pc, #264]	; (80026ec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x14c>)
                subscript_in_progress_ = 0;
 80025e4:	bf08      	it	eq
 80025e6:	701d      	strbeq	r5, [r3, #0]
            if (subscript_in_progress_ != subscript_to_add_)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	7809      	ldrb	r1, [r1, #0]
 80025ec:	4299      	cmp	r1, r3
 80025ee:	d02c      	beq.n	800264a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xaa>
                __HAL_DMA_DISABLE(huart->hdmatx);
 80025f0:	6821      	ldr	r1, [r4, #0]
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 80025f2:	4d3f      	ldr	r5, [pc, #252]	; (80026f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x150>)
                __HAL_DMA_DISABLE(huart->hdmatx);
 80025f4:	6808      	ldr	r0, [r1, #0]
 80025f6:	f020 0001 	bic.w	r0, r0, #1
 80025fa:	6008      	str	r0, [r1, #0]
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 80025fc:	20fb      	movs	r0, #251	; 0xfb
 80025fe:	fb00 5003 	mla	r0, r0, r3, r5
 8002602:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
 8002606:	6048      	str	r0, [r1, #4]
                uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 8002608:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 800260c:	ebc3 0380 	rsb	r3, r3, r0, lsl #2
 8002610:	442b      	add	r3, r5
                huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 8002612:	60cb      	str	r3, [r1, #12]
                huart->Instance->CR3 |= USART_CR3_DMAT; //enable dma request in hsuart side
 8002614:	6953      	ldr	r3, [r2, #20]
 8002616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261a:	6153      	str	r3, [r2, #20]
                __HAL_DMA_ENABLE(huart->hdmatx);
 800261c:	680b      	ldr	r3, [r1, #0]
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	600b      	str	r3, [r1, #0]
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	4a33      	ldr	r2, [pc, #204]	; (80026f4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x154>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d916      	bls.n	800265a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xba>
 800262c:	3218      	adds	r2, #24
 800262e:	4293      	cmp	r3, r2
 8002630:	d00e      	beq.n	8002650 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xb0>
 8002632:	3218      	adds	r2, #24
 8002634:	4293      	cmp	r3, r2
 8002636:	d00d      	beq.n	8002654 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xb4>
 8002638:	3218      	adds	r2, #24
 800263a:	4293      	cmp	r3, r2
 800263c:	bf0c      	ite	eq
 800263e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002642:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x158>)
 8002648:	e7ba      	b.n	80025c0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20>
                idle_flag_ = true;
 800264a:	2301      	movs	r3, #1
 800264c:	7003      	strb	r3, [r0, #0]
 800264e:	e7e9      	b.n	8002624 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x84>
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8002650:	2320      	movs	r3, #32
 8002652:	e7f8      	b.n	8002646 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa6>
 8002654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002658:	e7f5      	b.n	8002646 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa6>
 800265a:	4a28      	ldr	r2, [pc, #160]	; (80026fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x15c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d915      	bls.n	800268c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xec>
 8002660:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002664:	4293      	cmp	r3, r2
 8002666:	d00c      	beq.n	8002682 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xe2>
 8002668:	3218      	adds	r2, #24
 800266a:	4293      	cmp	r3, r2
 800266c:	d00b      	beq.n	8002686 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xe6>
 800266e:	3218      	adds	r2, #24
 8002670:	4293      	cmp	r3, r2
 8002672:	bf0c      	ite	eq
 8002674:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002678:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 800267c:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x158>)
 800267e:	6093      	str	r3, [r2, #8]
 8002680:	bd30      	pop	{r4, r5, pc}
 8002682:	2320      	movs	r3, #32
 8002684:	e7fa      	b.n	800267c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xdc>
 8002686:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800268a:	e7f7      	b.n	800267c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xdc>
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x160>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d913      	bls.n	80026ba <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11a>
 8002692:	3218      	adds	r2, #24
 8002694:	4293      	cmp	r3, r2
 8002696:	d00b      	beq.n	80026b0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x110>
 8002698:	3218      	adds	r2, #24
 800269a:	4293      	cmp	r3, r2
 800269c:	d00a      	beq.n	80026b4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x114>
 800269e:	3218      	adds	r2, #24
 80026a0:	4293      	cmp	r3, r2
 80026a2:	bf0c      	ite	eq
 80026a4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80026a8:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x164>)
 80026ae:	e787      	b.n	80025c0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20>
 80026b0:	2320      	movs	r3, #32
 80026b2:	e7fb      	b.n	80026ac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x10c>
 80026b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026b8:	e7f8      	b.n	80026ac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x10c>
 80026ba:	4a13      	ldr	r2, [pc, #76]	; (8002708 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x168>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00b      	beq.n	80026d8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x138>
 80026c0:	3218      	adds	r2, #24
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00a      	beq.n	80026dc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x13c>
 80026c6:	3218      	adds	r2, #24
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf0c      	ite	eq
 80026cc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80026d0:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x164>)
 80026d6:	e7d2      	b.n	800267e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xde>
 80026d8:	2320      	movs	r3, #32
 80026da:	e7fb      	b.n	80026d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x134>
 80026dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e0:	e7f8      	b.n	80026d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x134>
 80026e2:	bf00      	nop
 80026e4:	20000abc 	.word	0x20000abc
 80026e8:	20000abe 	.word	0x20000abe
 80026ec:	20000abd 	.word	0x20000abd
 80026f0:	20000abf 	.word	0x20000abf
 80026f4:	40026458 	.word	0x40026458
 80026f8:	40026400 	.word	0x40026400
 80026fc:	400260b8 	.word	0x400260b8
 8002700:	40026058 	.word	0x40026058
 8002704:	40026000 	.word	0x40026000
 8002708:	40026010 	.word	0x40026010

0800270c <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef>:
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	f412 7280 	ands.w	r2, r2, #256	; 0x100
  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
 8002714:	b530      	push	{r4, r5, lr}
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002716:	d10e      	bne.n	8002736 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x2a>
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 8002718:	6b83      	ldr	r3, [r0, #56]	; 0x38
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 800271a:	6819      	ldr	r1, [r3, #0]
        huart->RxXferCount = 0;
 800271c:	85da      	strh	r2, [r3, #46]	; 0x2e
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 800271e:	694a      	ldr	r2, [r1, #20]
 8002720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002724:	614a      	str	r2, [r1, #20]
        if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8002726:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800272a:	2a23      	cmp	r2, #35	; 0x23
          huart->gState = HAL_UART_STATE_BUSY_TX;
 800272c:	bf0c      	ite	eq
 800272e:	2221      	moveq	r2, #33	; 0x21
          huart->gState = HAL_UART_STATE_READY;
 8002730:	2220      	movne	r2, #32
 8002732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    ring_buf_->push(rx_value_[i]);
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x54>)
 8002738:	4d0a      	ldr	r5, [pc, #40]	; (8002764 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x58>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	f9b2 3192 	ldrsh.w	r3, [r2, #402]	; 0x192
    if (byte_to_add_ == buffer_length_)
 8002740:	f8b2 0194 	ldrh.w	r0, [r2, #404]	; 0x194
 8002744:	2100      	movs	r1, #0
    buf_[byte_to_add_] = new_value;
 8002746:	5d4c      	ldrb	r4, [r1, r5]
 8002748:	54d4      	strb	r4, [r2, r3]
    byte_to_add_++;
 800274a:	3301      	adds	r3, #1
 800274c:	b21b      	sxth	r3, r3
for(int i = 0; i < RX_BURST_SIZE; i++)
 800274e:	3101      	adds	r1, #1
        byte_to_add_ = 0;
 8002750:	4283      	cmp	r3, r0
 8002752:	bf08      	it	eq
 8002754:	2300      	moveq	r3, #0
for(int i = 0; i < RX_BURST_SIZE; i++)
 8002756:	2908      	cmp	r1, #8
 8002758:	d1f5      	bne.n	8002746 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x3a>
 800275a:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
 800275e:	bd30      	pop	{r4, r5, pc}
 8002760:	20003bd0 	.word	0x20003bd0
 8002764:	20003bc5 	.word	0x20003bc5

08002768 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE15getEndpointTypeEv>:
        this->fun_obj_(obj_, msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 8002768:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800276a:	4770      	bx	lr

0800276c <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 800276c:	4800      	ldr	r0, [pc, #0]	; (8002770 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE10getMsgTypeEv+0x4>)
 800276e:	4770      	bx	lr
 8002770:	08009df5 	.word	0x08009df5

08002774 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8002774:	4800      	ldr	r0, [pc, #0]	; (8002778 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev+0x4>)
 8002776:	4770      	bx	lr
 8002778:	08009dd4 	.word	0x08009dd4

0800277c <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE8callbackEPh>:
      virtual void callback(unsigned char* data){
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4604      	mov	r4, r0
        msg.deserialize(data);
 8002780:	f100 050c 	add.w	r5, r0, #12
 8002784:	4628      	mov	r0, r5
 8002786:	f7ff fe03 	bl	8002390 <_ZN17jsk_imu_mini_msgs11DesireCoord11deserializeEPh>
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
 800278a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        this->fun_obj_(obj_, msg);
 800278c:	6a20      	ldr	r0, [r4, #32]
 800278e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002790:	f012 0f01 	tst.w	r2, #1
 8002794:	ea4f 0262 	mov.w	r2, r2, asr #1
 8002798:	bf18      	it	ne
 800279a:	5881      	ldrne	r1, [r0, r2]
 800279c:	4410      	add	r0, r2
 800279e:	bf18      	it	ne
 80027a0:	58cb      	ldrne	r3, [r1, r3]
 80027a2:	4629      	mov	r1, r5
      }
 80027a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80027a8:	4718      	bx	r3

080027aa <_ZNK17jsk_imu_mini_msgs5Debug9serializeEPh>:
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80027aa:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 80027ac:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80027ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80027b0:	6843      	ldr	r3, [r0, #4]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80027b6:	88c3      	ldrh	r3, [r0, #6]
 80027b8:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80027ba:	79c3      	ldrb	r3, [r0, #7]
 80027bc:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80027be:	6883      	ldr	r3, [r0, #8]
 80027c0:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80027c2:	6883      	ldr	r3, [r0, #8]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80027c8:	8943      	ldrh	r3, [r0, #10]
 80027ca:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80027cc:	7ac3      	ldrb	r3, [r0, #11]
 80027ce:	71cb      	strb	r3, [r1, #7]
    virtual int serialize(unsigned char *outbuffer) const
 80027d0:	4605      	mov	r5, r0
      uint32_t length_data = strlen(this->data);
 80027d2:	68c0      	ldr	r0, [r0, #12]
    virtual int serialize(unsigned char *outbuffer) const
 80027d4:	460c      	mov	r4, r1
      uint32_t length_data = strlen(this->data);
 80027d6:	f7fd fd21 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_data, sizeof(uint32_t));
 80027da:	60a0      	str	r0, [r4, #8]
      uint32_t length_data = strlen(this->data);
 80027dc:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, this->data, length_data);
 80027de:	4602      	mov	r2, r0
 80027e0:	68e9      	ldr	r1, [r5, #12]
 80027e2:	f104 000c 	add.w	r0, r4, #12
 80027e6:	f006 fd63 	bl	80092b0 <memcpy>
    }
 80027ea:	f106 000c 	add.w	r0, r6, #12
 80027ee:	bd70      	pop	{r4, r5, r6, pc}

080027f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80027f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      *(outbuffer + offset++) = ints_length;
 80027f4:	7903      	ldrb	r3, [r0, #4]
 80027f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 80027f8:	2300      	movs	r3, #0
    virtual int serialize(unsigned char *outbuffer) const
 80027fa:	460c      	mov	r4, r1
      *(outbuffer + offset++) = 0;
 80027fc:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 80027fe:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 8002800:	70cb      	strb	r3, [r1, #3]
    virtual int serialize(unsigned char *outbuffer) const
 8002802:	4607      	mov	r7, r0
 8002804:	3104      	adds	r1, #4
      *(outbuffer + offset++) = 0;
 8002806:	461a      	mov	r2, r3
      for( uint8_t i = 0; i < ints_length; i++){
 8002808:	793d      	ldrb	r5, [r7, #4]
 800280a:	1c50      	adds	r0, r2, #1
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	42aa      	cmp	r2, r5
 8002810:	eba1 0304 	sub.w	r3, r1, r4
 8002814:	f101 0104 	add.w	r1, r1, #4
 8002818:	da0f      	bge.n	800283a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x4a>
      u_intsi.real = this->ints[i];
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002820:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002824:	0a1a      	lsrs	r2, r3, #8
 8002826:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800282a:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800282c:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800282e:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002832:	f801 3c01 	strb.w	r3, [r1, #-1]
      for( uint8_t i = 0; i < ints_length; i++){
 8002836:	4602      	mov	r2, r0
 8002838:	e7e6      	b.n	8002808 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x18>
      *(outbuffer + offset++) = floats_length;
 800283a:	7c3a      	ldrb	r2, [r7, #16]
 800283c:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 800283e:	18e1      	adds	r1, r4, r3
 8002840:	2200      	movs	r2, #0
      *(outbuffer + offset++) = 0;
 8002842:	3304      	adds	r3, #4
      *(outbuffer + offset++) = 0;
 8002844:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 8002846:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 8002848:	70ca      	strb	r2, [r1, #3]
 800284a:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 800284c:	7c38      	ldrb	r0, [r7, #16]
 800284e:	1c51      	adds	r1, r2, #1
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	4282      	cmp	r2, r0
 8002854:	eba3 0604 	sub.w	r6, r3, r4
 8002858:	f103 0304 	add.w	r3, r3, #4
 800285c:	da0f      	bge.n	800287e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8e>
      u_floatsi.real = this->floats[i];
 800285e:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002860:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002864:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002868:	0a10      	lsrs	r0, r2, #8
 800286a:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800286e:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002870:	0e12      	lsrs	r2, r2, #24
 8002872:	f803 2c01 	strb.w	r2, [r3, #-1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002876:	f803 0c02 	strb.w	r0, [r3, #-2]
      for( uint8_t i = 0; i < floats_length; i++){
 800287a:	460a      	mov	r2, r1
 800287c:	e7e6      	b.n	800284c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      *(outbuffer + offset++) = strings_length;
 800287e:	7f3b      	ldrb	r3, [r7, #28]
 8002880:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 8002882:	19a2      	adds	r2, r4, r6
 8002884:	2300      	movs	r3, #0
 8002886:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 8002888:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 800288a:	3604      	adds	r6, #4
 800288c:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 800288e:	b2dd      	uxtb	r5, r3
 8002890:	f103 0901 	add.w	r9, r3, #1
 8002894:	7f3b      	ldrb	r3, [r7, #28]
 8002896:	429d      	cmp	r5, r3
 8002898:	da11      	bge.n	80028be <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xce>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80028a0:	f7fd fcbc 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 80028a4:	51a0      	str	r0, [r4, r6]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 80028a8:	3604      	adds	r6, #4
      uint32_t length_stringsi = strlen(this->strings[i]);
 80028aa:	4680      	mov	r8, r0
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028ac:	4602      	mov	r2, r0
 80028ae:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 80028b2:	19a0      	adds	r0, r4, r6
 80028b4:	f006 fcfc 	bl	80092b0 <memcpy>
      offset += length_stringsi;
 80028b8:	4446      	add	r6, r8
      for( uint8_t i = 0; i < strings_length; i++){
 80028ba:	464b      	mov	r3, r9
 80028bc:	e7e7      	b.n	800288e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x9e>
    }
 80028be:	4630      	mov	r0, r6
 80028c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080028c4 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80028c4:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80028c6:	7903      	ldrb	r3, [r0, #4]
 80028c8:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 80028ca:	4606      	mov	r6, r0
      uint32_t length_msg = strlen(this->msg);
 80028cc:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 80028ce:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 80028d0:	f7fd fca4 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 80028d4:	f8c5 0001 	str.w	r0, [r5, #1]
      uint32_t length_msg = strlen(this->msg);
 80028d8:	4604      	mov	r4, r0
      memcpy(outbuffer + offset, this->msg, length_msg);
 80028da:	4602      	mov	r2, r0
 80028dc:	68b1      	ldr	r1, [r6, #8]
 80028de:	1d68      	adds	r0, r5, #5
 80028e0:	f006 fce6 	bl	80092b0 <memcpy>
    }
 80028e4:	1d60      	adds	r0, r4, #5
 80028e6:	bd70      	pop	{r4, r5, r6, pc}

080028e8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80028e8:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 80028ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80028ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80028f0:	8883      	ldrh	r3, [r0, #4]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	704b      	strb	r3, [r1, #1]
    virtual int serialize(unsigned char *outbuffer) const
 80028f6:	4605      	mov	r5, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 80028f8:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 80028fa:	460c      	mov	r4, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 80028fc:	f7fd fc8e 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 8002900:	f8c4 0002 	str.w	r0, [r4, #2]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002904:	4602      	mov	r2, r0
 8002906:	68a9      	ldr	r1, [r5, #8]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002908:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800290a:	1da0      	adds	r0, r4, #6
 800290c:	f006 fcd0 	bl	80092b0 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8002910:	68e8      	ldr	r0, [r5, #12]
 8002912:	f7fd fc83 	bl	800021c <strlen>
      offset += length_topic_name;
 8002916:	f107 0806 	add.w	r8, r7, #6
      offset += 4;
 800291a:	370a      	adds	r7, #10
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800291c:	f844 0008 	str.w	r0, [r4, r8]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002920:	4602      	mov	r2, r0
 8002922:	68e9      	ldr	r1, [r5, #12]
      uint32_t length_message_type = strlen(this->message_type);
 8002924:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002926:	19e0      	adds	r0, r4, r7
 8002928:	f006 fcc2 	bl	80092b0 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 800292c:	6928      	ldr	r0, [r5, #16]
 800292e:	f7fd fc75 	bl	800021c <strlen>
      offset += length_message_type;
 8002932:	443e      	add	r6, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 8002934:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 8002936:	51a0      	str	r0, [r4, r6]
      offset += 4;
 8002938:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800293a:	4602      	mov	r2, r0
 800293c:	6929      	ldr	r1, [r5, #16]
 800293e:	19a0      	adds	r0, r4, r6
      offset += length_md5sum;
 8002940:	443e      	add	r6, r7
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002942:	f006 fcb5 	bl	80092b0 <memcpy>
      u_buffer_size.real = this->buffer_size;
 8002946:	696b      	ldr	r3, [r5, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002948:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800294a:	4434      	add	r4, r6
 800294c:	0a1a      	lsrs	r2, r3, #8
 800294e:	7062      	strb	r2, [r4, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002950:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002952:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002954:	70a2      	strb	r2, [r4, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002956:	70e3      	strb	r3, [r4, #3]
    }
 8002958:	1d30      	adds	r0, r6, #4
 800295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800295e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 800295e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8002960:	780e      	ldrb	r6, [r1, #0]
      if(ints_lengthT > ints_length)
 8002962:	7903      	ldrb	r3, [r0, #4]
 8002964:	429e      	cmp	r6, r3
    virtual int deserialize(unsigned char *inbuffer)
 8002966:	4604      	mov	r4, r0
 8002968:	460d      	mov	r5, r1
      if(ints_lengthT > ints_length)
 800296a:	dd04      	ble.n	8002976 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800296c:	00b1      	lsls	r1, r6, #2
 800296e:	68c0      	ldr	r0, [r0, #12]
 8002970:	f006 fcd0 	bl	8009314 <realloc>
 8002974:	60e0      	str	r0, [r4, #12]
      ints_length = ints_lengthT;
 8002976:	7126      	strb	r6, [r4, #4]
 8002978:	1d2a      	adds	r2, r5, #4
 800297a:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 800297c:	7923      	ldrb	r3, [r4, #4]
 800297e:	1c48      	adds	r0, r1, #1
 8002980:	b2c9      	uxtb	r1, r1
 8002982:	4299      	cmp	r1, r3
 8002984:	eba2 0605 	sub.w	r6, r2, r5
 8002988:	f102 0204 	add.w	r2, r2, #4
 800298c:	da13      	bge.n	80029b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x58>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800298e:	f812 3c02 	ldrb.w	r3, [r2, #-2]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002992:	f812 6c03 	ldrb.w	r6, [r2, #-3]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800299c:	f812 6c04 	ldrb.w	r6, [r2, #-4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029a0:	4333      	orrs	r3, r6
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029a2:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 80029a6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029aa:	68e6      	ldr	r6, [r4, #12]
      this->st_ints = u_st_ints.real;
 80029ac:	60a3      	str	r3, [r4, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029ae:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < ints_length; i++){
 80029b2:	4601      	mov	r1, r0
 80029b4:	e7e2      	b.n	800297c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e>
      uint8_t floats_lengthT = *(inbuffer + offset++);
 80029b6:	5daf      	ldrb	r7, [r5, r6]
      if(floats_lengthT > floats_length)
 80029b8:	7c23      	ldrb	r3, [r4, #16]
 80029ba:	429f      	cmp	r7, r3
 80029bc:	dd04      	ble.n	80029c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x6a>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80029be:	00b9      	lsls	r1, r7, #2
 80029c0:	69a0      	ldr	r0, [r4, #24]
 80029c2:	f006 fca7 	bl	8009314 <realloc>
 80029c6:	61a0      	str	r0, [r4, #24]
      offset += 3;
 80029c8:	1d33      	adds	r3, r6, #4
      floats_length = floats_lengthT;
 80029ca:	7427      	strb	r7, [r4, #16]
 80029cc:	442b      	add	r3, r5
 80029ce:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 80029d0:	b2d1      	uxtb	r1, r2
 80029d2:	1c50      	adds	r0, r2, #1
 80029d4:	7c22      	ldrb	r2, [r4, #16]
 80029d6:	4291      	cmp	r1, r2
 80029d8:	eba3 0605 	sub.w	r6, r3, r5
 80029dc:	f103 0304 	add.w	r3, r3, #4
 80029e0:	da13      	bge.n	8002a0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xac>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029e2:	f813 2c02 	ldrb.w	r2, [r3, #-2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029e6:	f813 6c03 	ldrb.w	r6, [r3, #-3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029ea:	0412      	lsls	r2, r2, #16
 80029ec:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029f0:	f813 6c04 	ldrb.w	r6, [r3, #-4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029f4:	4332      	orrs	r2, r6
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029f6:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 80029fa:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80029fe:	69a6      	ldr	r6, [r4, #24]
      this->st_floats = u_st_floats.real;
 8002a00:	6162      	str	r2, [r4, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002a02:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < floats_length; i++){
 8002a06:	4602      	mov	r2, r0
 8002a08:	e7e2      	b.n	80029d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8002a0a:	5daf      	ldrb	r7, [r5, r6]
      if(strings_lengthT > strings_length)
 8002a0c:	7f23      	ldrb	r3, [r4, #28]
 8002a0e:	429f      	cmp	r7, r3
 8002a10:	dd04      	ble.n	8002a1c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xbe>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002a12:	00b9      	lsls	r1, r7, #2
 8002a14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a16:	f006 fc7d 	bl	8009314 <realloc>
 8002a1a:	6260      	str	r0, [r4, #36]	; 0x24
      strings_length = strings_lengthT;
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	7727      	strb	r7, [r4, #28]
      offset += 3;
 8002a20:	1d30      	adds	r0, r6, #4
      inbuffer[offset+length_st_strings-1]=0;
 8002a22:	460f      	mov	r7, r1
      for( uint8_t i = 0; i < strings_length; i++){
 8002a24:	7f23      	ldrb	r3, [r4, #28]
 8002a26:	b2ce      	uxtb	r6, r1
 8002a28:	429e      	cmp	r6, r3
 8002a2a:	da19      	bge.n	8002a60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x102>
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 8002a2c:	f855 e000 	ldr.w	lr, [r5, r0]
      offset += 4;
 8002a30:	1d03      	adds	r3, r0, #4
 8002a32:	18ea      	adds	r2, r5, r3
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a34:	eb0e 0003 	add.w	r0, lr, r3
 8002a38:	eba2 0e05 	sub.w	lr, r2, r5
 8002a3c:	4570      	cmp	r0, lr
 8002a3e:	d904      	bls.n	8002a4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
          inbuffer[k-1]=inbuffer[k];
 8002a40:	f812 eb01 	ldrb.w	lr, [r2], #1
 8002a44:	f802 ec02 	strb.w	lr, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a48:	e7f6      	b.n	8002a38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xda>
      inbuffer[offset+length_st_strings-1]=0;
 8002a4a:	182a      	adds	r2, r5, r0
      this->st_strings = (char *)(inbuffer + offset-1);
 8002a4c:	3b01      	subs	r3, #1
      inbuffer[offset+length_st_strings-1]=0;
 8002a4e:	f802 7c01 	strb.w	r7, [r2, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 8002a54:	442b      	add	r3, r5
 8002a56:	6223      	str	r3, [r4, #32]
 8002a58:	3101      	adds	r1, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002a5a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      for( uint8_t i = 0; i < strings_length; i++){
 8002a5e:	e7e1      	b.n	8002a24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc6>
    }
 8002a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a62 <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8002a62:	b570      	push	{r4, r5, r6, lr}
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002a64:	780b      	ldrb	r3, [r1, #0]
 8002a66:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a68:	784a      	ldrb	r2, [r1, #1]
 8002a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a6e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a70:	788a      	ldrb	r2, [r1, #2]
 8002a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a76:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a78:	78ca      	ldrb	r2, [r1, #3]
 8002a7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a7e:	6043      	str	r3, [r0, #4]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002a80:	790b      	ldrb	r3, [r1, #4]
 8002a82:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a84:	794a      	ldrb	r2, [r1, #5]
 8002a86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a8a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a8c:	798a      	ldrb	r2, [r1, #6]
 8002a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a92:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a94:	79ca      	ldrb	r2, [r1, #7]
 8002a96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a9a:	6083      	str	r3, [r0, #8]
      uint8_t potentio_lengthT = *(inbuffer + offset++);
 8002a9c:	7a0e      	ldrb	r6, [r1, #8]
      if(potentio_lengthT > potentio_length)
 8002a9e:	7b03      	ldrb	r3, [r0, #12]
 8002aa0:	429e      	cmp	r6, r3
    virtual int deserialize(unsigned char *inbuffer)
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
      if(potentio_lengthT > potentio_length)
 8002aa6:	dd04      	ble.n	8002ab2 <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh+0x50>
        this->potentio = (uint16_t*)realloc(this->potentio, potentio_lengthT * sizeof(uint16_t));
 8002aa8:	0071      	lsls	r1, r6, #1
 8002aaa:	6900      	ldr	r0, [r0, #16]
 8002aac:	f006 fc32 	bl	8009314 <realloc>
 8002ab0:	6120      	str	r0, [r4, #16]
      potentio_length = potentio_lengthT;
 8002ab2:	7326      	strb	r6, [r4, #12]
 8002ab4:	f105 010c 	add.w	r1, r5, #12
 8002ab8:	2300      	movs	r3, #0
      for( uint8_t i = 0; i < potentio_length; i++){
 8002aba:	7b22      	ldrb	r2, [r4, #12]
 8002abc:	1c5e      	adds	r6, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	eba1 0005 	sub.w	r0, r1, r5
 8002ac6:	f101 0102 	add.w	r1, r1, #2
 8002aca:	da0c      	bge.n	8002ae6 <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh+0x84>
      this->st_potentio =  ((uint16_t) (*(inbuffer + offset)));
 8002acc:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 8002ad0:	81e2      	strh	r2, [r4, #14]
      this->st_potentio |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ad2:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8002ad6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
        memcpy( &(this->potentio[i]), &(this->st_potentio), sizeof(uint16_t));
 8002ada:	6920      	ldr	r0, [r4, #16]
      this->st_potentio |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002adc:	81e2      	strh	r2, [r4, #14]
        memcpy( &(this->potentio[i]), &(this->st_potentio), sizeof(uint16_t));
 8002ade:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      for( uint8_t i = 0; i < potentio_length; i++){
 8002ae2:	4633      	mov	r3, r6
 8002ae4:	e7e9      	b.n	8002aba <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh+0x58>
    }
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}

08002ae8 <_ZN16AttitudeEstimate19desireCoordCallbackERKN17jsk_imu_mini_msgs11DesireCoordE>:

  uint32_t last_pub_time_;

  void desireCoordCallback(const jsk_imu_mini_msgs::DesireCoord& coord_msg)
  {
    estimator_->coordinateUpdate(coord_msg.roll, coord_msg.pitch);
 8002ae8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002aea:	ed91 0a01 	vldr	s0, [r1, #4]
 8002aee:	edd1 0a02 	vldr	s1, [r1, #8]
  void coordinateUpdate(float desire_attitude_roll, float desire_attitude_pitch)
  {
    desire_attitude_roll_ = desire_attitude_roll; 
    desire_attitude_pitch_ = desire_attitude_pitch; 

    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 8002af2:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8002b04 <_ZN16AttitudeEstimate19desireCoordCallbackERKN17jsk_imu_mini_msgs11DesireCoordE+0x1c>
    desire_attitude_roll_ = desire_attitude_roll; 
 8002af6:	ed80 0a23 	vstr	s0, [r0, #140]	; 0x8c
    desire_attitude_pitch_ = desire_attitude_pitch; 
 8002afa:	edc0 0a24 	vstr	s1, [r0, #144]	; 0x90
    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 8002afe:	304c      	adds	r0, #76	; 0x4c
 8002b00:	f004 ba50 	b.w	8006fa4 <_ZN7Matrix3IfE10from_eulerEfff>
 8002b04:	00000000 	.word	0x00000000

08002b08 <_ZN3IMUD1Ev>:
class IMU : public SENSOR_<Imugyro>
{
public:
	IMU(SPI_HandleTypeDef* hspi, ros::NodeHandle* nh);
	IMU(){};
	~IMU(){}
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	4604      	mov	r4, r0
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002b0c:	68c0      	ldr	r0, [r0, #12]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8002b0e:	b108      	cbz	r0, 8002b14 <_ZN3IMUD1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8002b10:	f004 fc37 	bl	8007382 <_ZdlPv>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002b14:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8002b16:	b108      	cbz	r0, 8002b1c <_ZN3IMUD1Ev+0x14>
 8002b18:	f004 fc33 	bl	8007382 <_ZdlPv>
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	bd10      	pop	{r4, pc}

08002b20 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 8002b20:	68c3      	ldr	r3, [r0, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	b410      	push	{r4}
 8002b26:	6814      	ldr	r4, [r2, #0]
 8002b28:	460a      	mov	r2, r1
 8002b2a:	6881      	ldr	r1, [r0, #8]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b34:	4718      	bx	r3
	...

08002b38 <_ZN12MadgwickAHRS15accGyroEstimateEffffff>:
    q_[1] *= recipNorm;
    q_[2] *= recipNorm;
    q_[3] *= recipNorm;
  }

  void accGyroEstimate(float gx, float gy, float gz, float ax, float ay, float az)
 8002b38:	b510      	push	{r4, lr}
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    // Rate of change of quaternion from gyroscope
    qDot1 = 0.5f * (-q_[1] * gx - q_[2] * gy - q_[3] * gz);
 8002b3a:	edd0 7a20 	vldr	s15, [r0, #128]	; 0x80
 8002b3e:	edd0 6a21 	vldr	s13, [r0, #132]	; 0x84
    qDot2 = 0.5f * (q_[0] * gx + q_[2] * gz - q_[3] * gy);
 8002b42:	ed90 6a1f 	vldr	s12, [r0, #124]	; 0x7c
    qDot1 = 0.5f * (-q_[1] * gx - q_[2] * gy - q_[3] * gz);
 8002b46:	edd0 5a22 	vldr	s11, [r0, #136]	; 0x88
  void accGyroEstimate(float gx, float gy, float gz, float ax, float ay, float az)
 8002b4a:	ed2d 8b0a 	vpush	{d8-d12}
    qDot1 = 0.5f * (-q_[1] * gx - q_[2] * gy - q_[3] * gz);
 8002b4e:	ee60 bae6 	vnmul.f32	s23, s1, s13
    qDot2 = 0.5f * (q_[0] * gx + q_[2] * gz - q_[3] * gy);
 8002b52:	ee26 ba81 	vmul.f32	s22, s13, s2
    qDot3 = 0.5f * (q_[0] * gy - q_[1] * gz + q_[3] * gx);
 8002b56:	ee61 aa67 	vnmul.f32	s21, s2, s15
    qDot4 = 0.5f * (q_[0] * gz + q_[1] * gy - q_[2] * gx);
 8002b5a:	ee27 9aa0 	vmul.f32	s18, s15, s1
    qDot1 = 0.5f * (-q_[1] * gx - q_[2] * gy - q_[3] * gz);
 8002b5e:	eee7 bac0 	vfms.f32	s23, s15, s0
  void accGyroEstimate(float gx, float gy, float gz, float ax, float ay, float az)
 8002b62:	4604      	mov	r4, r0
    qDot2 = 0.5f * (q_[0] * gx + q_[2] * gz - q_[3] * gy);
 8002b64:	eea0 ba06 	vfma.f32	s22, s0, s12
    qDot3 = 0.5f * (q_[0] * gy - q_[1] * gz + q_[3] * gx);
 8002b68:	eee0 aa86 	vfma.f32	s21, s1, s12
    qDot4 = 0.5f * (q_[0] * gz + q_[1] * gy - q_[2] * gx);
 8002b6c:	eea1 9a06 	vfma.f32	s18, s2, s12
    qDot1 = 0.5f * (-q_[1] * gx - q_[2] * gy - q_[3] * gz);
 8002b70:	eee5 bac1 	vfms.f32	s23, s11, s2
    qDot2 = 0.5f * (q_[0] * gx + q_[2] * gz - q_[3] * gy);
 8002b74:	eea0 bae5 	vfms.f32	s22, s1, s11
    qDot3 = 0.5f * (q_[0] * gy - q_[1] * gz + q_[3] * gx);
 8002b78:	eee0 aa25 	vfma.f32	s21, s0, s11
    qDot4 = 0.5f * (q_[0] * gz + q_[1] * gy - q_[2] * gx);
 8002b7c:	eea0 9a66 	vfms.f32	s18, s0, s13

    // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
    if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002b80:	eef5 1a40 	vcmp.f32	s3, #0.0
    qDot1 = 0.5f * (-q_[1] * gx - q_[2] * gy - q_[3] * gz);
 8002b84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  void accGyroEstimate(float gx, float gy, float gz, float ax, float ay, float az)
 8002b8c:	eef0 9a61 	vmov.f32	s19, s3
 8002b90:	eef0 8a42 	vmov.f32	s17, s4
 8002b94:	eeb0 8a62 	vmov.f32	s16, s5
    qDot1 = 0.5f * (-q_[1] * gx - q_[2] * gy - q_[3] * gz);
 8002b98:	ee6b ba87 	vmul.f32	s23, s23, s14
    qDot2 = 0.5f * (q_[0] * gx + q_[2] * gz - q_[3] * gy);
 8002b9c:	ee2b ba07 	vmul.f32	s22, s22, s14
    qDot3 = 0.5f * (q_[0] * gy - q_[1] * gz + q_[3] * gx);
 8002ba0:	ee6a aa87 	vmul.f32	s21, s21, s14
    qDot4 = 0.5f * (q_[0] * gz + q_[1] * gy - q_[2] * gx);
 8002ba4:	ee29 9a07 	vmul.f32	s18, s18, s14
    if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002ba8:	d10a      	bne.n	8002bc0 <_ZN12MadgwickAHRS15accGyroEstimateEffffff+0x88>
 8002baa:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	d105      	bne.n	8002bc0 <_ZN12MadgwickAHRS15accGyroEstimateEffffff+0x88>
 8002bb4:	eef5 2a40 	vcmp.f32	s5, #0.0
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	f000 8086 	beq.w	8002ccc <_ZN12MadgwickAHRS15accGyroEstimateEffffff+0x194>

      // Normalise accelerometer measurement
      recipNorm = inv_sqrt(ax * ax + ay * ay + az * az);
 8002bc0:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8002bc4:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8002bc8:	eea8 0a08 	vfma.f32	s0, s16, s16
 8002bcc:	f004 fb1a 	bl	8007204 <_Z8inv_sqrtf>

      // Auxiliary variables to avoid repeated arithmetic
      _2q0 = 2.0f * q_[0];
      _2q1 = 2.0f * q_[1];
      _2q2 = 2.0f * q_[2];
      _2q3 = 2.0f * q_[3];
 8002bd0:	edd4 6a22 	vldr	s13, [r4, #136]	; 0x88
      _2q1 = 2.0f * q_[1];
 8002bd4:	edd4 4a20 	vldr	s9, [r4, #128]	; 0x80
      _2q0 = 2.0f * q_[0];
 8002bd8:	ed94 3a1f 	vldr	s6, [r4, #124]	; 0x7c
      _2q2 = 2.0f * q_[2];
 8002bdc:	ed94 ca21 	vldr	s24, [r4, #132]	; 0x84
      ax *= recipNorm;
 8002be0:	ee69 1a80 	vmul.f32	s3, s19, s0
      _2q3 = 2.0f * q_[3];
 8002be4:	ee36 1aa6 	vadd.f32	s2, s13, s13
      _4q0 = 4.0f * q_[0];
 8002be8:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
      az *= recipNorm;   
 8002bec:	ee68 2a00 	vmul.f32	s5, s16, s0
      _8q1 = 8.0f * q_[1];
      _8q2 = 8.0f * q_[2];
      q0q0 = q_[0] * q_[0];
      q1q1 = q_[1] * q_[1];
      q2q2 = q_[2] * q_[2];
      q3q3 = q_[3] * q_[3];
 8002bf0:	ee66 0aa6 	vmul.f32	s1, s13, s13

      // Gradient decent algorithm corrective step
      s0 = _4q0 * q2q2 + _2q2* ax + _4q0 * q1q1 - _2q1 * ay;
 8002bf4:	ee20 0a68 	vnmul.f32	s0, s0, s17
      _4q1 = 4.0f * q_[1];
 8002bf8:	ee24 8aa5 	vmul.f32	s16, s9, s11
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002bfc:	ee61 8a61 	vnmul.f32	s17, s2, s3
      _2q0 = 2.0f * q_[0];
 8002c00:	ee73 7a03 	vadd.f32	s15, s6, s6
      _4q0 = 4.0f * q_[0];
 8002c04:	ee23 2a25 	vmul.f32	s4, s6, s11
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c08:	eee8 8a20 	vfma.f32	s17, s16, s1
      q0q0 = q_[0] * q_[0];
 8002c0c:	ee23 3a03 	vmul.f32	s6, s6, s6
      _8q1 = 8.0f * q_[1];
 8002c10:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c14:	ee23 3a25 	vmul.f32	s6, s6, s11
      q1q1 = q_[1] * q_[1];
 8002c18:	ee24 5aa4 	vmul.f32	s10, s9, s9
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c1c:	eee4 8a83 	vfma.f32	s17, s9, s6
      _8q1 = 8.0f * q_[1];
 8002c20:	ee64 caa3 	vmul.f32	s25, s9, s7
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c24:	eee0 8a27 	vfma.f32	s17, s0, s15
      q2q2 = q_[2] * q_[2];
 8002c28:	ee2c 7a0c 	vmul.f32	s14, s24, s24
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c2c:	ee78 8ac8 	vsub.f32	s17, s17, s16
      _4q2 = 4.0f * q_[2];
 8002c30:	ee2c 4a25 	vmul.f32	s8, s24, s11
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c34:	eeec 8a85 	vfma.f32	s17, s25, s10
      _2q2 = 2.0f * q_[2];
 8002c38:	ee3c 6a0c 	vadd.f32	s12, s24, s24
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c3c:	eeec 8a87 	vfma.f32	s17, s25, s14
      s0 = _4q0 * q2q2 + _2q2* ax + _4q0 * q1q1 - _2q1 * ay;
 8002c40:	ee21 aa86 	vmul.f32	s20, s3, s12
      s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_[1] - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002c44:	eee2 8a88 	vfma.f32	s17, s5, s16
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c48:	ee21 8aa7 	vmul.f32	s16, s3, s15
      s0 = _4q0 * q2q2 + _2q2* ax + _4q0 * q1q1 - _2q1 * ay;
 8002c4c:	eea2 aa07 	vfma.f32	s20, s4, s14
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c50:	eeac 8a03 	vfma.f32	s16, s24, s6
      s0 = _4q0 * q2q2 + _2q2* ax + _4q0 * q1q1 - _2q1 * ay;
 8002c54:	eea2 aa05 	vfma.f32	s20, s4, s10
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c58:	eea4 8a20 	vfma.f32	s16, s8, s1
      _2q1 = 2.0f * q_[1];
 8002c5c:	ee74 9aa4 	vadd.f32	s19, s9, s9
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c60:	eea0 8a01 	vfma.f32	s16, s0, s2
      _8q2 = 8.0f * q_[2];
 8002c64:	ee6c 3a23 	vmul.f32	s7, s24, s7
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c68:	ee38 8a44 	vsub.f32	s16, s16, s8
      s0 = _4q0 * q2q2 + _2q2* ax + _4q0 * q1q1 - _2q1 * ay;
 8002c6c:	eea0 aa29 	vfma.f32	s20, s0, s19
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c70:	eea3 8a85 	vfma.f32	s16, s7, s10
      s3 = 4.0f * q1q1 * q_[3] - _2q1 * ax + 4.0f * q2q2 * q_[3] - _2q2 * ay;
 8002c74:	ee69 9ae1 	vnmul.f32	s19, s19, s3
 8002c78:	ee25 5a25 	vmul.f32	s10, s10, s11
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c7c:	eea3 8a87 	vfma.f32	s16, s7, s14
      s3 = 4.0f * q1q1 * q_[3] - _2q1 * ax + 4.0f * q2q2 * q_[3] - _2q2 * ay;
 8002c80:	eee6 9a85 	vfma.f32	s19, s13, s10
 8002c84:	ee27 7a25 	vmul.f32	s14, s14, s11
      s2 = 4.0f * q0q0 * q_[2] + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002c88:	eea2 8a84 	vfma.f32	s16, s5, s8
      s3 = 4.0f * q1q1 * q_[3] - _2q1 * ax + 4.0f * q2q2 * q_[3] - _2q2 * ay;
 8002c8c:	eee6 9a87 	vfma.f32	s19, s13, s14
 8002c90:	eee0 9a06 	vfma.f32	s19, s0, s12
      recipNorm = inv_sqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002c94:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8002c98:	eeaa 0a0a 	vfma.f32	s0, s20, s20
 8002c9c:	eea8 0a08 	vfma.f32	s0, s16, s16
 8002ca0:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8002ca4:	f004 faae 	bl	8007204 <_Z8inv_sqrtf>
      s1 *= recipNorm;
      s2 *= recipNorm;
      s3 *= recipNorm;

      // Apply feedback step
      qDot1 -= beta * s0;
 8002ca8:	edd4 7a26 	vldr	s15, [r4, #152]	; 0x98
 8002cac:	ee20 aa4a 	vnmul.f32	s20, s0, s20
      qDot2 -= beta * s1;
 8002cb0:	ee60 8a68 	vnmul.f32	s17, s0, s17
      qDot3 -= beta * s2;
 8002cb4:	ee20 8a48 	vnmul.f32	s16, s0, s16
      qDot4 -= beta * s3;
 8002cb8:	ee20 0a69 	vnmul.f32	s0, s0, s19
      qDot1 -= beta * s0;
 8002cbc:	eeea ba27 	vfma.f32	s23, s20, s15
      qDot2 -= beta * s1;
 8002cc0:	eea8 baa7 	vfma.f32	s22, s17, s15
      qDot3 -= beta * s2;
 8002cc4:	eee8 aa27 	vfma.f32	s21, s16, s15
      qDot4 -= beta * s3;
 8002cc8:	eea0 9a27 	vfma.f32	s18, s0, s15
    }

    // Integrate rate of change of quaternion to yield quaternion
    q_[0] += qDot1 * DELTA_T;
 8002ccc:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8002d4c <_ZN12MadgwickAHRS15accGyroEstimateEffffff+0x214>
    q_[1] += qDot2 * DELTA_T;
 8002cd0:	ed94 0a20 	vldr	s0, [r4, #128]	; 0x80
    q_[0] += qDot1 * DELTA_T;
 8002cd4:	edd4 6a1f 	vldr	s13, [r4, #124]	; 0x7c
    q_[2] += qDot3 * DELTA_T;
 8002cd8:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
    q_[3] += qDot4 * DELTA_T;
 8002cdc:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
    q_[1] += qDot2 * DELTA_T;
 8002ce0:	eeab 0a06 	vfma.f32	s0, s22, s12
    q_[0] += qDot1 * DELTA_T;
 8002ce4:	eeeb 6a86 	vfma.f32	s13, s23, s12
    q_[1] += qDot2 * DELTA_T;
 8002ce8:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80

    // Normalise quaternion
    recipNorm = inv_sqrt(q_[0] * q_[0] + q_[1] * q_[1] + q_[2] * q_[2] + q_[3] * q_[3]);
 8002cec:	ee20 0a00 	vmul.f32	s0, s0, s0
    q_[2] += qDot3 * DELTA_T;
 8002cf0:	eeaa 7a86 	vfma.f32	s14, s21, s12
    recipNorm = inv_sqrt(q_[0] * q_[0] + q_[1] * q_[1] + q_[2] * q_[2] + q_[3] * q_[3]);
 8002cf4:	eea6 0aa6 	vfma.f32	s0, s13, s13
    q_[3] += qDot4 * DELTA_T;
 8002cf8:	eee9 7a06 	vfma.f32	s15, s18, s12
    recipNorm = inv_sqrt(q_[0] * q_[0] + q_[1] * q_[1] + q_[2] * q_[2] + q_[3] * q_[3]);
 8002cfc:	eea7 0a07 	vfma.f32	s0, s14, s14
    q_[3] += qDot4 * DELTA_T;
 8002d00:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    recipNorm = inv_sqrt(q_[0] * q_[0] + q_[1] * q_[1] + q_[2] * q_[2] + q_[3] * q_[3]);
 8002d04:	eea7 0aa7 	vfma.f32	s0, s15, s15
    q_[0] += qDot1 * DELTA_T;
 8002d08:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
    q_[2] += qDot3 * DELTA_T;
 8002d0c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
    recipNorm = inv_sqrt(q_[0] * q_[0] + q_[1] * q_[1] + q_[2] * q_[2] + q_[3] * q_[3]);
 8002d10:	f004 fa78 	bl	8007204 <_Z8inv_sqrtf>
    q_[0] *= recipNorm;
 8002d14:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8002d18:	ee67 7a80 	vmul.f32	s15, s15, s0
    q_[1] *= recipNorm;
    q_[2] *= recipNorm;
    q_[3] *= recipNorm;
  }
 8002d1c:	ecbd 8b0a 	vpop	{d8-d12}
    q_[0] *= recipNorm;
 8002d20:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
    q_[1] *= recipNorm;
 8002d24:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 8002d28:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002d2c:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
    q_[2] *= recipNorm;
 8002d30:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
 8002d34:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002d38:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
    q_[3] *= recipNorm;
 8002d3c:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
 8002d40:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d44:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
  }
 8002d48:	bd10      	pop	{r4, pc}
 8002d4a:	bf00      	nop
 8002d4c:	3c23d70a 	.word	0x3c23d70a

08002d50 <_ZN12MadgwickAHRS10estimationEv>:
virtual void  estimation()
 8002d50:	b508      	push	{r3, lr}
accGyroEstimate(gyro_bodyframe_[0], gyro_bodyframe_[1], gyro_bodyframe_[2], acc_bodyframe_[0], acc_bodyframe_[1], acc_bodyframe_[2]);
 8002d52:	edd0 2a03 	vldr	s5, [r0, #12]
 8002d56:	ed90 2a02 	vldr	s4, [r0, #8]
 8002d5a:	edd0 1a01 	vldr	s3, [r0, #4]
 8002d5e:	ed90 1a09 	vldr	s2, [r0, #36]	; 0x24
 8002d62:	edd0 0a08 	vldr	s1, [r0, #32]
 8002d66:	ed90 0a07 	vldr	s0, [r0, #28]
 8002d6a:	f7ff fee5 	bl	8002b38 <_ZN12MadgwickAHRS15accGyroEstimateEffffff>
 8002d6e:	bd08      	pop	{r3, pc}

08002d70 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
  void init(IMU* imu, ros::NodeHandle* nh)
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nh_ = nh;
 8002d72:	4604      	mov	r4, r0
  void init(IMU* imu, ros::NodeHandle* nh)
 8002d74:	4605      	mov	r5, r0
    nh_ = nh;
 8002d76:	f844 2b08 	str.w	r2, [r4], #8
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8002d7a:	2014      	movs	r0, #20
  void init(IMU* imu, ros::NodeHandle* nh)
 8002d7c:	460e      	mov	r6, r1
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8002d7e:	f004 fb07 	bl	8007390 <_Znwj>
        endpoint_(endpoint) {};
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x108>)
    nh_->advertise(*imu_pub_);
 8002d84:	682a      	ldr	r2, [r5, #0]
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8002d86:	6068      	str	r0, [r5, #4]
 8002d88:	e880 0018 	stmia.w	r0, {r3, r4}
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6103      	str	r3, [r0, #16]
 8002d90:	f502 7107 	add.w	r1, r2, #540	; 0x21c

    /* Register a new publisher */
    bool advertise(Publisher & p)
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
        if(publishers[i] == 0){ // empty slot
 8002d94:	f851 4b04 	ldr.w	r4, [r1], #4
 8002d98:	2c00      	cmp	r4, #0
 8002d9a:	d165      	bne.n	8002e68 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xf8>
          publishers[i] = &p;
 8002d9c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8002da0:	3378      	adds	r3, #120	; 0x78
          publishers[i] = &p;
 8002da2:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8002da6:	6083      	str	r3, [r0, #8]
          p.nh_ = this;
 8002da8:	60c2      	str	r2, [r0, #12]
    desire_coord_sub_ = new ros::Subscriber2<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 8002daa:	2030      	movs	r0, #48	; 0x30
 8002dac:	f004 faf0 	bl	8007390 <_Znwj>
      : _M_f(__pf) { }
 8002db0:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x10c>)
 8002db2:	6242      	str	r2, [r0, #36]	; 0x24
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8002db4:	2201      	movs	r2, #1
 8002db6:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x110>)
 8002db8:	62c2      	str	r2, [r0, #44]	; 0x2c
        topic_ = topic_name;
 8002dba:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x114>)
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8002dbc:	6003      	str	r3, [r0, #0]
        topic_ = topic_name;
 8002dbe:	6082      	str	r2, [r0, #8]
      coord_type(0)
 8002dc0:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x118>)
    nh_->subscribe<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate>(*desire_coord_sub_);
 8002dc2:	682a      	ldr	r2, [r5, #0]
 8002dc4:	60c3      	str	r3, [r0, #12]
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6104      	str	r4, [r0, #16]
 8002dcc:	6144      	str	r4, [r0, #20]
 8002dce:	6184      	str	r4, [r0, #24]
 8002dd0:	7703      	strb	r3, [r0, #28]
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8002dd2:	6205      	str	r5, [r0, #32]
 8002dd4:	6283      	str	r3, [r0, #40]	; 0x28
    desire_coord_sub_ = new ros::Subscriber2<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 8002dd6:	66a8      	str	r0, [r5, #104]	; 0x68
 8002dd8:	f502 711b 	add.w	r1, r2, #620	; 0x26c
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
        if(subscribers[i] == 0){ // empty slot
 8002ddc:	f851 7b04 	ldr.w	r7, [r1], #4
 8002de0:	2f00      	cmp	r7, #0
 8002de2:	d145      	bne.n	8002e70 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x100>
          subscribers[i] = (Subscriber_*) &s;
 8002de4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          s.id_ = i+100;
 8002de8:	3364      	adds	r3, #100	; 0x64
          subscribers[i] = (Subscriber_*) &s;
 8002dea:	f8c2 026c 	str.w	r0, [r2, #620]	; 0x26c
          s.id_ = i+100;
 8002dee:	6043      	str	r3, [r0, #4]
    imu_ = imu;
 8002df0:	672e      	str	r6, [r5, #112]	; 0x70
    last_pub_time_ = HAL_GetTick();
 8002df2:	f001 ff3d 	bl	8004c70 <HAL_GetTick>
 8002df6:	6768      	str	r0, [r5, #116]	; 0x74
    estimator_ = new MadgwickAHRS();
 8002df8:	209c      	movs	r0, #156	; 0x9c
 8002dfa:	f004 fac9 	bl	8007390 <_Znwj>
    float        q1, q2, q3, q4;

    // constructor creates a quaternion equivalent
    // to roll=0, pitch=0, yaw=0
    Quaternion() {
        q1 = 1; q2 = q3 = q4 = 0;
 8002dfe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e02:	67c3      	str	r3, [r0, #124]	; 0x7c
public:
    T        x, y, z;

    // trivial ctor
    Vector3<T>() {
        x = y = z = 0;
 8002e04:	60c4      	str	r4, [r0, #12]
 8002e06:	6084      	str	r4, [r0, #8]
 8002e08:	6044      	str	r4, [r0, #4]
 8002e0a:	6184      	str	r4, [r0, #24]
 8002e0c:	6144      	str	r4, [r0, #20]
 8002e0e:	6104      	str	r4, [r0, #16]
 8002e10:	6244      	str	r4, [r0, #36]	; 0x24
 8002e12:	6204      	str	r4, [r0, #32]
 8002e14:	61c4      	str	r4, [r0, #28]
 8002e16:	6304      	str	r4, [r0, #48]	; 0x30
 8002e18:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002e1a:	6284      	str	r4, [r0, #40]	; 0x28
 8002e1c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002e1e:	6384      	str	r4, [r0, #56]	; 0x38
 8002e20:	6344      	str	r4, [r0, #52]	; 0x34
 8002e22:	6484      	str	r4, [r0, #72]	; 0x48
 8002e24:	6444      	str	r4, [r0, #68]	; 0x44
 8002e26:	6404      	str	r4, [r0, #64]	; 0x40
 8002e28:	6544      	str	r4, [r0, #84]	; 0x54
 8002e2a:	6504      	str	r4, [r0, #80]	; 0x50
 8002e2c:	6604      	str	r4, [r0, #96]	; 0x60
 8002e2e:	6584      	str	r4, [r0, #88]	; 0x58
 8002e30:	6684      	str	r4, [r0, #104]	; 0x68
 8002e32:	6644      	str	r4, [r0, #100]	; 0x64
 8002e34:	6784      	str	r4, [r0, #120]	; 0x78
 8002e36:	6744      	str	r4, [r0, #116]	; 0x74
 8002e38:	6704      	str	r4, [r0, #112]	; 0x70
 8002e3a:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
 8002e3e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8002e42:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
    abs_rel_(ABSOLUTE_COORD)
 8002e46:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
    // zero the matrix
    void        zero(void);

    // setup the identity matrix
    void        identity(void) {
        a.x = b.y = c.z = 1;
 8002e50:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002e52:	65c3      	str	r3, [r0, #92]	; 0x5c
 8002e54:	64c3      	str	r3, [r0, #76]	; 0x4c
MadgwickAHRS():EstimatorAlgorithm()
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x11c>)
 8002e58:	6003      	str	r3, [r0, #0]
 8002e5a:	f880 2094 	strb.w	r2, [r0, #148]	; 0x94
beta = betaDef; // 2 * proportional gain (Kp)
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x120>)
 8002e60:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8002e64:	66e8      	str	r0, [r5, #108]	; 0x6c
 8002e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8002e68:	3301      	adds	r3, #1
 8002e6a:	2b14      	cmp	r3, #20
 8002e6c:	d192      	bne.n	8002d94 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x24>
 8002e6e:	e79c      	b.n	8002daa <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x3a>
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8002e70:	3301      	adds	r3, #1
 8002e72:	2b14      	cmp	r3, #20
 8002e74:	d1b2      	bne.n	8002ddc <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x6c>
 8002e76:	e7bb      	b.n	8002df0 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x80>
 8002e78:	08009d49 	.word	0x08009d49
 8002e7c:	08002ae9 	.word	0x08002ae9
 8002e80:	08009c40 	.word	0x08009c40
 8002e84:	08009d4d 	.word	0x08009d4d
 8002e88:	08009c1c 	.word	0x08009c1c
 8002e8c:	08009c34 	.word	0x08009c34
 8002e90:	3dcccccd 	.word	0x3dcccccd

08002e94 <_ZN13StateEstimateC1Ev>:
  StateEstimate()
 8002e94:	b530      	push	{r4, r5, lr}
      mag_data()
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <_ZN13StateEstimateC1Ev+0x78>)
 8002e98:	6182      	str	r2, [r0, #24]
      w(0)
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <_ZN13StateEstimateC1Ev+0x7c>)
 8002ea0:	6282      	str	r2, [r0, #40]	; 0x28
 8002ea2:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
 8002ea6:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
 8002eaa:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
 8002eae:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
      temperature(0)
 8002eb2:	4c18      	ldr	r4, [pc, #96]	; (8002f14 <_ZN13StateEstimateC1Ev+0x80>)
 8002eb4:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
 8002eb8:	2200      	movs	r2, #0
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 8002eba:	2100      	movs	r1, #0
      sat_num(0)
 8002ebc:	4c16      	ldr	r4, [pc, #88]	; (8002f18 <_ZN13StateEstimateC1Ev+0x84>)
 8002ebe:	61c1      	str	r1, [r0, #28]
 8002ec0:	6201      	str	r1, [r0, #32]
 8002ec2:	6502      	str	r2, [r0, #80]	; 0x50
 8002ec4:	6542      	str	r2, [r0, #84]	; 0x54
 8002ec6:	6582      	str	r2, [r0, #88]	; 0x58
 8002ec8:	65c2      	str	r2, [r0, #92]	; 0x5c
 8002eca:	6602      	str	r2, [r0, #96]	; 0x60
 8002ecc:	6642      	str	r2, [r0, #100]	; 0x64
 8002ece:	6682      	str	r2, [r0, #104]	; 0x68
 8002ed0:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002ed2:	6702      	str	r2, [r0, #112]	; 0x70
 8002ed4:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8002ed8:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 8002edc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
 8002ee0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 8002ee4:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 8002ee8:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
 8002eec:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
 8002ef0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 8002ef4:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 8002ef8:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 8002efc:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
 8002f00:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
 8002f04:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
  }
 8002f08:	bd30      	pop	{r4, r5, pc}
 8002f0a:	bf00      	nop
 8002f0c:	08009c04 	.word	0x08009c04
 8002f10:	08009ba8 	.word	0x08009ba8
 8002f14:	08009c58 	.word	0x08009c58
 8002f18:	08009c70 	.word	0x08009c70

08002f1c <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002f1c:	b530      	push	{r4, r5, lr}
 8002f1e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <_Z18SystemClock_Configv+0xa8>)
 8002f22:	2100      	movs	r1, #0
 8002f24:	9100      	str	r1, [sp, #0]
 8002f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <_Z18SystemClock_Configv+0xac>)
 8002f3a:	9101      	str	r1, [sp, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002f4e:	2309      	movs	r3, #9
 8002f50:	9307      	str	r3, [sp, #28]
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f56:	9308      	str	r3, [sp, #32]
   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	930c      	str	r3, [sp, #48]	; 0x30
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f60:	2402      	movs	r4, #2
   RCC_OscInitStruct.PLL.PLLM = 4;
 8002f62:	2504      	movs	r5, #4
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f64:	930e      	str	r3, [sp, #56]	; 0x38
   RCC_OscInitStruct.PLL.PLLN = 100;
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   RCC_OscInitStruct.PLL.PLLQ = 4;
   RCC_OscInitStruct.PLL.PLLR = 2;
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f66:	a807      	add	r0, sp, #28
   RCC_OscInitStruct.PLL.PLLN = 100;
 8002f68:	2364      	movs	r3, #100	; 0x64
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f6a:	940d      	str	r4, [sp, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLM = 4;
 8002f6c:	950f      	str	r5, [sp, #60]	; 0x3c
   RCC_OscInitStruct.PLL.PLLN = 100;
 8002f6e:	9310      	str	r3, [sp, #64]	; 0x40
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f70:	9411      	str	r4, [sp, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f72:	9512      	str	r5, [sp, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLR = 2;
 8002f74:	9413      	str	r4, [sp, #76]	; 0x4c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f76:	f002 fe1f 	bl	8005bb8 <HAL_RCC_OscConfig>
 8002f7a:	b100      	cbz	r0, 8002f7e <_Z18SystemClock_Configv+0x62>
 8002f7c:	e7fe      	b.n	8002f7c <_Z18SystemClock_Configv+0x60>
   }


    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f7e:	230f      	movs	r3, #15
 8002f80:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f82:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f88:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f90:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f92:	f002 fd51 	bl	8005a38 <HAL_RCC_ClockConfig>
 8002f96:	4604      	mov	r4, r0
 8002f98:	b100      	cbz	r0, 8002f9c <_Z18SystemClock_Configv+0x80>
 8002f9a:	e7fe      	b.n	8002f9a <_Z18SystemClock_Configv+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f9c:	f002 fde6 	bl	8005b6c <HAL_RCC_GetHCLKFreq>
 8002fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fa8:	f002 f8d2 	bl	8005150 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002fac:	4628      	mov	r0, r5
 8002fae:	f002 f8e5 	bl	800517c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fba:	f002 f889 	bl	80050d0 <HAL_NVIC_SetPriority>
}
 8002fbe:	b015      	add	sp, #84	; 0x54
 8002fc0:	bd30      	pop	{r4, r5, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000

08002fcc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002fcc:	e7fe      	b.n	8002fcc <_Error_Handler>
	...

08002fd0 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>:
         int MAX_RX_BUFFER=400,
			int RX_BURST_SIZE=RX_BURST_MODE>
class UartDriver{
public:

  UartDriver(Hardware *huart): huart_(huart)
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	6001      	str	r1, [r0, #0]
  {
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8002fd6:	2004      	movs	r0, #4
 8002fd8:	f004 f9da 	bl	8007390 <_Znwj>
  RxBuffer(Hardware *huart):huart_(huart)
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	6003      	str	r3, [r0, #0]
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8002fe0:	4605      	mov	r5, r0
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8002fe2:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8002fe6:	f004 f9d3 	bl	8007390 <_Znwj>
    byte_in_progress_ = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
    byte_to_add_ = 0;
 8002ff0:	f8a0 3192 	strh.w	r3, [r0, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
 8002ff4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002ff8:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8002ffc:	4b22      	ldr	r3, [pc, #136]	; (8003088 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xb8>)
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 8002ffe:	4923      	ldr	r1, [pc, #140]	; (800308c <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xbc>)
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8003000:	6018      	str	r0, [r3, #0]
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 8003002:	2208      	movs	r2, #8
 8003004:	6828      	ldr	r0, [r5, #0]
 8003006:	f003 fc33 	bl	8006870 <HAL_UART_Receive_DMA>
    huart_->hdmarx->XferCpltCallback = ReceiveCplt;
 800300a:	682b      	ldr	r3, [r5, #0]
 800300c:	4920      	ldr	r1, [pc, #128]	; (8003090 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc0>)
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	4e20      	ldr	r6, [pc, #128]	; (8003094 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc4>)
 8003012:	63d1      	str	r1, [r2, #60]	; 0x3c
    __HAL_UART_DISABLE_IT(huart_, UART_IT_RXNE);
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68d3      	ldr	r3, [r2, #12]
 8003018:	f023 0320 	bic.w	r3, r3, #32
 800301c:	60d3      	str	r3, [r2, #12]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 800301e:	2004      	movs	r0, #4
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8003020:	6065      	str	r5, [r4, #4]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8003022:	f004 f9b5 	bl	8007390 <_Znwj>
    idle_flag_ = true;
 8003026:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc8>)
    subscript_in_progress_ = 0;
 8003028:	491c      	ldr	r1, [pc, #112]	; (800309c <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xcc>)
    idle_flag_ = true;
 800302a:	2201      	movs	r2, #1
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 800302c:	4605      	mov	r5, r0
 800302e:	6820      	ldr	r0, [r4, #0]
    idle_flag_ = true;
 8003030:	701a      	strb	r2, [r3, #0]
    subscript_in_progress_ = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	700b      	strb	r3, [r1, #0]
    subscript_to_add_ = 0;
 8003036:	491a      	ldr	r1, [pc, #104]	; (80030a0 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xd0>)
  TxBuffer(Hardware *huart): huart_(huart)
 8003038:	6028      	str	r0, [r5, #0]
    subscript_to_add_ = 0;
 800303a:	700b      	strb	r3, [r1, #0]
 800303c:	46b6      	mov	lr, r6
    for(int i = 0; i < TX_SIZE; i++) 
 800303e:	f243 1c06 	movw	ip, #12550	; 0x3106
 8003042:	199f      	adds	r7, r3, r6
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8003044:	2100      	movs	r1, #0
        tx_buffer_unit_[i].tx_len_ = 1;
 8003046:	f887 20fa 	strb.w	r2, [r7, #250]	; 0xfa
          tx_buffer_unit_[i].tx_data_[j]  = 1;
 800304a:	547a      	strb	r2, [r7, r1]
        for(int j = 0; j < BUFFER_LENGTH; j++)
 800304c:	3101      	adds	r1, #1
 800304e:	29fa      	cmp	r1, #250	; 0xfa
 8003050:	d1fb      	bne.n	800304a <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x7a>
 8003052:	33fb      	adds	r3, #251	; 0xfb
    for(int i = 0; i < TX_SIZE; i++) 
 8003054:	4563      	cmp	r3, ip
 8003056:	d1f4      	bne.n	8003042 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x72>
    HAL_UART_Transmit_DMA(huart_, (uint8_t*)tx_buffer_unit_[0].tx_data_, tx_buffer_unit_[0].tx_len_);
 8003058:	f89e 20fa 	ldrb.w	r2, [lr, #250]	; 0xfa
 800305c:	490d      	ldr	r1, [pc, #52]	; (8003094 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc4>)
 800305e:	f003 fbcd 	bl	80067fc <HAL_UART_Transmit_DMA>
 8003062:	e005      	b.n	8003070 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xa0>
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8003064:	4628      	mov	r0, r5
 8003066:	f004 f98c 	bl	8007382 <_ZdlPv>
 800306a:	f004 f9a2 	bl	80073b2 <__cxa_end_cleanup>
 800306e:	e7f9      	b.n	8003064 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x94>
    huart_->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8003070:	682a      	ldr	r2, [r5, #0]
 8003072:	6811      	ldr	r1, [r2, #0]
 8003074:	694b      	ldr	r3, [r1, #20]
 8003076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307a:	614b      	str	r3, [r1, #20]
    huart_->hdmatx->XferCpltCallback = TransmitCplt;
 800307c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xd4>)
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 8003082:	4620      	mov	r0, r4
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8003084:	60a5      	str	r5, [r4, #8]
  }
 8003086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003088:	20003bd0 	.word	0x20003bd0
 800308c:	20003bc5 	.word	0x20003bc5
 8003090:	0800270d 	.word	0x0800270d
 8003094:	20000abf 	.word	0x20000abf
 8003098:	20000abc 	.word	0x20000abc
 800309c:	20000abe 	.word	0x20000abe
 80030a0:	20000abd 	.word	0x20000abd
 80030a4:	080025a1 	.word	0x080025a1

080030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>:
    Time now()
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	460d      	mov	r5, r1
 80030ac:	4604      	mov	r4, r0

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}
 80030ae:	f001 fddf 	bl	8004c70 <HAL_GetTick>
      current_time.sec = ms/1000 + sec_offset;
 80030b2:	696a      	ldr	r2, [r5, #20]
 80030b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030b8:	fbb0 f3f1 	udiv	r3, r0, r1
 80030bc:	441a      	add	r2, r3
 80030be:	6022      	str	r2, [r4, #0]
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 80030c0:	fb01 0313 	mls	r3, r1, r3, r0
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv+0x34>)
 80030c6:	69a8      	ldr	r0, [r5, #24]
 80030c8:	4621      	mov	r1, r4
 80030ca:	fb02 0303 	mla	r3, r2, r3, r0
 80030ce:	f841 3f04 	str.w	r3, [r1, #4]!
      normalizeSecNSec(current_time.sec, current_time.nsec);
 80030d2:	4620      	mov	r0, r4
 80030d4:	f001 fd62 	bl	8004b9c <_ZN3ros16normalizeSecNSecERmS0_>
    }
 80030d8:	4620      	mov	r0, r4
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	000f4240 	.word	0x000f4240

080030e0 <main>:
{
 80030e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030e4:	b085      	sub	sp, #20
  HAL_Init();
 80030e6:	f001 fda1 	bl	8004c2c <HAL_Init>
  SystemClock_Config();
 80030ea:	f7ff ff17 	bl	8002f1c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80030ee:	f7fe fe7f 	bl	8001df0 <MX_GPIO_Init>
  MX_DMA_Init();
 80030f2:	f7fe fe5b 	bl	8001dac <MX_DMA_Init>
  MX_USART1_UART_Init();
 80030f6:	f000 fecd 	bl	8003e94 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80030fa:	f000 fe1f 	bl	8003d3c <MX_SPI1_Init>
  MX_ADC1_Init();
 80030fe:	f7fe fddd 	bl	8001cbc <MX_ADC1_Init>
    iostream_ = new UartDriver<serial_class>(huart);
 8003102:	200c      	movs	r0, #12
 8003104:	f004 f944 	bl	8007390 <_Znwj>
 8003108:	4959      	ldr	r1, [pc, #356]	; (8003270 <main+0x190>)
 800310a:	4605      	mov	r5, r0
 800310c:	f7ff ff60 	bl	8002fd0 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>
 8003110:	4c58      	ldr	r4, [pc, #352]	; (8003274 <main+0x194>)
 8003112:	6828      	ldr	r0, [r5, #0]
    huart_->Init.BaudRate = baud_rate;
 8003114:	68e3      	ldr	r3, [r4, #12]
    iostream_ = new UartDriver<serial_class>(huart);
 8003116:	60a5      	str	r5, [r4, #8]
    huart_->Init.BaudRate = baud_rate;
 8003118:	6043      	str	r3, [r0, #4]
      mode_ = 0;
 800311a:	2600      	movs	r6, #0
    HAL_UART_Init(huart_);
 800311c:	f003 fb40 	bl	80067a0 <HAL_UART_Init>
	  testnode = new RosNode(&nh_);
 8003120:	201c      	movs	r0, #28
 8003122:	f8c4 62bc 	str.w	r6, [r4, #700]	; 0x2bc
      bytes_ = 0;
 8003126:	f8c4 62c0 	str.w	r6, [r4, #704]	; 0x2c0
      index_ = 0;
 800312a:	f8c4 62c8 	str.w	r6, [r4, #712]	; 0x2c8
      topic_ = 0;
 800312e:	f8c4 62c4 	str.w	r6, [r4, #708]	; 0x2c4
 8003132:	f004 f92d 	bl	8007390 <_Znwj>
      potentio_length(0), potentio(NULL)
 8003136:	4b50      	ldr	r3, [pc, #320]	; (8003278 <main+0x198>)
 8003138:	6083      	str	r3, [r0, #8]
 800313a:	4605      	mov	r5, r0

class RosNode
{
public:
	RosNode(ros::NodeHandle* nh)
	{
 800313c:	f100 0708 	add.w	r7, r0, #8
 8003140:	60c6      	str	r6, [r0, #12]
 8003142:	6106      	str	r6, [r0, #16]
 8003144:	7506      	strb	r6, [r0, #20]
 8003146:	6186      	str	r6, [r0, #24]
		/* ros node initialize */
		nh_ = nh;
 8003148:	6004      	str	r4, [r0, #0]

		/* ros publisher initialize */
		//radioflag_pub_ = new ros::Publisher("radioflag",&radioflag_msg);
		//odom_pub_ = new ros::Publisher("odometry/raw",&odom_msg);
		potentio_pub = new ros::Publisher("potentio/raw", &potentio_msg);
 800314a:	2014      	movs	r0, #20
 800314c:	f004 f920 	bl	8007390 <_Znwj>
 8003150:	4b4a      	ldr	r3, [pc, #296]	; (800327c <main+0x19c>)
		//publish the msgs
		//nh_->advertise(*radioflag_pub_);
		//nh_->advertise(*odom_pub_);
		nh_->advertise(*potentio_pub);
 8003152:	682a      	ldr	r2, [r5, #0]
 8003154:	6106      	str	r6, [r0, #16]
 8003156:	e880 0088 	stmia.w	r0, {r3, r7}
		potentio_pub = new ros::Publisher("potentio/raw", &potentio_msg);
 800315a:	6068      	str	r0, [r5, #4]
 800315c:	4633      	mov	r3, r6
 800315e:	f502 7107 	add.w	r1, r2, #540	; 0x21c
        if(publishers[i] == 0){ // empty slot
 8003162:	f851 6b04 	ldr.w	r6, [r1], #4
 8003166:	2e00      	cmp	r6, #0
 8003168:	d17c      	bne.n	8003264 <main+0x184>
          publishers[i] = &p;
 800316a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
          p.id_ = i+100+MAX_SUBSCRIBERS;
 800316e:	3378      	adds	r3, #120	; 0x78
          publishers[i] = &p;
 8003170:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8003174:	6083      	str	r3, [r0, #8]
          p.nh_ = this;
 8003176:	60c2      	str	r2, [r0, #12]
		potentio_msg.potentio_length = 4;
 8003178:	2304      	movs	r3, #4
 800317a:	752b      	strb	r3, [r5, #20]
		potentio_msg.potentio = (uint16_t*)malloc(sizeof(uint16_t)*4);
 800317c:	2008      	movs	r0, #8
 800317e:	f005 fe79 	bl	8008e74 <malloc>
 8003182:	f8c4 530c 	str.w	r5, [r4, #780]	; 0x30c
 8003186:	61a8      	str	r0, [r5, #24]
	  imu_.init(&hspi1, &nh_);
 8003188:	4d3d      	ldr	r5, [pc, #244]	; (8003280 <main+0x1a0>)
 800318a:	493e      	ldr	r1, [pc, #248]	; (8003284 <main+0x1a4>)
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800318c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800328c <main+0x1ac>
	  imu_.init(&hspi1, &nh_);
 8003190:	f5a5 7244 	sub.w	r2, r5, #784	; 0x310
 8003194:	4628      	mov	r0, r5
 8003196:	f001 fabb 	bl	8004710 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }
    else
      {
        attitude_estimate_flag_ = true;
        imu_ = imu;
        attitude_estimator_.init(imu_, nh_);
 800319a:	f5a5 7244 	sub.w	r2, r5, #784	; 0x310
        attitude_estimate_flag_ = true;
 800319e:	2601      	movs	r6, #1
        attitude_estimator_.init(imu_, nh_);
 80031a0:	4629      	mov	r1, r5
 80031a2:	f502 6089 	add.w	r0, r2, #1096	; 0x448
        imu_ = imu;
 80031a6:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
    nh_ = nh;
 80031aa:	f8c4 4438 	str.w	r4, [r4, #1080]	; 0x438
        attitude_estimate_flag_ = true;
 80031ae:	f884 6518 	strb.w	r6, [r4, #1304]	; 0x518
	  HAL_ADC_Start(&hadc1);
 80031b2:	4d35      	ldr	r5, [pc, #212]	; (8003288 <main+0x1a8>)
        attitude_estimator_.init(imu_, nh_);
 80031b4:	f7ff fddc 	bl	8002d70 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }

    if(baro == NULL)
      {
        altitude_estimate_flag_ = false;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f884 3519 	strb.w	r3, [r4, #1305]	; 0x519
        altitude_estimator_.init(imu_, baro_, nh_);
      }

    if(gps == NULL)
      {
        pos_estimate_flag_ = false;
 80031be:	f884 351a 	strb.w	r3, [r4, #1306]	; 0x51a
	  start_process_flag_ = true;
 80031c2:	f884 6520 	strb.w	r6, [r4, #1312]	; 0x520
	  if(start_process_flag_){
 80031c6:	f894 3520 	ldrb.w	r3, [r4, #1312]	; 0x520
 80031ca:	b183      	cbz	r3, 80031ee <main+0x10e>
		  if(LEDcounter >= 10){
 80031cc:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
 80031d0:	2b09      	cmp	r3, #9
 80031d2:	dd07      	ble.n	80031e4 <main+0x104>
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80031d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031d8:	4648      	mov	r0, r9
 80031da:	f002 fbfa 	bl	80059d2 <HAL_GPIO_TogglePin>
			  LEDcounter = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
		  LEDcounter++;
 80031e4:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
 80031e8:	3301      	adds	r3, #1
 80031ea:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
	  HAL_Delay(9);
 80031ee:	2009      	movs	r0, #9
 80031f0:	f001 fd44 	bl	8004c7c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80031f4:	4628      	mov	r0, r5
 80031f6:	f001 fdf5 	bl	8004de4 <HAL_ADC_Start>
 80031fa:	2600      	movs	r6, #0
		  ADC_value[i] = HAL_ADC_GetValue(&hadc1);
 80031fc:	af02      	add	r7, sp, #8
		  HAL_ADC_PollForConversion(&hadc1, 1);
 80031fe:	2101      	movs	r1, #1
 8003200:	4628      	mov	r0, r5
 8003202:	f001 fe6d 	bl	8004ee0 <HAL_ADC_PollForConversion>
		  ADC_value[i] = HAL_ADC_GetValue(&hadc1);
 8003206:	4628      	mov	r0, r5
 8003208:	f001 feb9 	bl	8004f7e <HAL_ADC_GetValue>
 800320c:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
	  for(int i=0; i<4; i++){
 8003210:	3601      	adds	r6, #1
 8003212:	2e04      	cmp	r6, #4
 8003214:	d1f3      	bne.n	80031fe <main+0x11e>
	  testnode->publish(ADC_value);
 8003216:	f8d4 630c 	ldr.w	r6, [r4, #780]	; 0x30c

		/* ros subscriber initialize */
	}

	void publish(uint16_t arr[]){
		potentio_msg.stamp = nh_->now();
 800321a:	4637      	mov	r7, r6
 800321c:	4668      	mov	r0, sp
 800321e:	f857 1b0c 	ldr.w	r1, [r7], #12
 8003222:	f7ff ff41 	bl	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8003226:	e89d 0003 	ldmia.w	sp, {r0, r1}
		for(int i=0; i<4; i++)
			potentio_msg.potentio[i] = arr[i];
 800322a:	69b3      	ldr	r3, [r6, #24]
 800322c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
		potentio_msg.stamp = nh_->now();
 8003230:	e887 0003 	stmia.w	r7, {r0, r1}
			potentio_msg.potentio[i] = arr[i];
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800323a:	805a      	strh	r2, [r3, #2]
 800323c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003240:	809a      	strh	r2, [r3, #4]
 8003242:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8003246:	80da      	strh	r2, [r3, #6]
		potentio_pub->publish(&potentio_msg);
 8003248:	f106 0108 	add.w	r1, r6, #8
 800324c:	6870      	ldr	r0, [r6, #4]
 800324e:	f7ff fc67 	bl	8002b20 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  HAL_ADC_Stop(&hadc1);
 8003252:	4628      	mov	r0, r5
 8003254:	f001 fe26 	bl	8004ea4 <HAL_ADC_Stop>
 8003258:	e7b5      	b.n	80031c6 <main+0xe6>
	  testnode = new RosNode(&nh_);
 800325a:	4628      	mov	r0, r5
 800325c:	f004 f891 	bl	8007382 <_ZdlPv>
 8003260:	f004 f8a7 	bl	80073b2 <__cxa_end_cleanup>
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8003264:	3301      	adds	r3, #1
 8003266:	2b14      	cmp	r3, #20
 8003268:	f47f af7b 	bne.w	8003162 <main+0x82>
 800326c:	e784      	b.n	8003178 <main+0x98>
 800326e:	e7f4      	b.n	800325a <main+0x17a>
 8003270:	20003cec 	.word	0x20003cec
 8003274:	20000540 	.word	0x20000540
 8003278:	08009bc0 	.word	0x08009bc0
 800327c:	08009f27 	.word	0x08009f27
 8003280:	20000850 	.word	0x20000850
 8003284:	20003bd4 	.word	0x20003bd4
 8003288:	20000a74 	.word	0x20000a74
 800328c:	40020800 	.word	0x40020800

08003290 <_ZN16AttitudeEstimate7publishEv>:
  void publish()
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	4604      	mov	r4, r0
 8003296:	b0a7      	sub	sp, #156	; 0x9c
    uint32_t now_time = HAL_GetTick();
 8003298:	f001 fcea 	bl	8004c70 <HAL_GetTick>
    if( now_time - last_pub_time_ >= PUB_INTERVAL)
 800329c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800329e:	1ac3      	subs	r3, r0, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d97e      	bls.n	80033a2 <_ZN16AttitudeEstimate7publishEv+0x112>
        imu_msg_.stamp = nh_->now();
 80032a4:	4625      	mov	r5, r4
 80032a6:	ae02      	add	r6, sp, #8
 80032a8:	f855 1b0c 	ldr.w	r1, [r5], #12
        last_pub_time_ = now_time;
 80032ac:	6760      	str	r0, [r4, #116]	; 0x74
        imu_msg_.stamp = nh_->now();
 80032ae:	4630      	mov	r0, r6
 80032b0:	f7ff fefa 	bl	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 80032b4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80032b8:	ab1a      	add	r3, sp, #104	; 0x68
 80032ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 80032c4:	f104 0940 	add.w	r9, r4, #64	; 0x40
 80032c8:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 80032cc:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 80032d0:	9301      	str	r3, [sp, #4]
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;
	static const uint8_t MPU_CALIB_LOAD_CMD = 0x03;
	static const uint8_t MPU_CALIB_SAVE_CMD = 0x04;

	Vector3f  getAcc(){return acc_;}   // return acceleration in m/s^2
	Vector3f  getGyro(){return gyro_;} // return angle velocity in 
 80032d2:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
 80032d6:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
	Vector3f  getMag(){return mag_;}   // 
 80032da:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80032de:	af0a      	add	r7, sp, #40	; 0x28
	Vector3f  getAcc(){return acc_;}   // return acceleration in m/s^2
 80032e0:	ae07      	add	r6, sp, #28
            imu_msg_.gyro_data[i] = imu_->getGyro()[i];
 80032e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
	Vector3f  getGyro(){return gyro_;} // return angle velocity in 
 80032e4:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80032e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ea:	ad1a      	add	r5, sp, #104	; 0x68
 80032ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032f0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80032f4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80032f8:	9900      	ldr	r1, [sp, #0]
 80032fa:	f851 2b04 	ldr.w	r2, [r1], #4
 80032fe:	f8c9 200c 	str.w	r2, [r9, #12]
	Vector3f  getMag(){return mag_;}   // 
 8003302:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003306:	9100      	str	r1, [sp, #0]
 8003308:	ca07      	ldmia	r2, {r0, r1, r2}
            imu_msg_.mag_data[i] = imu_->getMag()[i];
 800330a:	ad1e      	add	r5, sp, #120	; 0x78
 800330c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003310:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8003314:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003318:	f85b 2b04 	ldr.w	r2, [fp], #4
 800331c:	f8c9 2018 	str.w	r2, [r9, #24]
	Vector3f  getAcc(){return acc_;}   // return acceleration in m/s^2
 8003320:	339c      	adds	r3, #156	; 0x9c
 8003322:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003326:	ab04      	add	r3, sp, #16
 8003328:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            imu_msg_.acc_data[i] = imu_->getAcc()[i];
 800332c:	ab22      	add	r3, sp, #136	; 0x88
 800332e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003332:	f85a 3b04 	ldr.w	r3, [sl], #4
 8003336:	f849 3b04 	str.w	r3, [r9], #4
        for(int i = 0; i < 3 ; i ++)
 800333a:	9b01      	ldr	r3, [sp, #4]
 800333c:	4599      	cmp	r9, r3
 800333e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003342:	d1ce      	bne.n	80032e2 <_ZN16AttitudeEstimate7publishEv+0x52>
      	imu_msg_.orientation.x = estimator_->getQuaternion()[0];
 8003344:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  static const uint8_t RELATIVE_COORD = 1;
  static const uint8_t X = 0;
  static const uint8_t Y = 1;
  static const uint8_t Z = 2;

  Quaternion getQuaternion(){return q_;}
 8003346:	357c      	adds	r5, #124	; 0x7c
 8003348:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800334c:	ae22      	add	r6, sp, #136	; 0x88
 800334e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003352:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003354:	f7fd f8ce 	bl	80004f4 <__aeabi_f2d>
 8003358:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800335c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003360:	ae1e      	add	r6, sp, #120	; 0x78
 8003362:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      	imu_msg_.orientation.y = estimator_->getQuaternion()[1];
 8003366:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8003368:	f7fd f8c4 	bl	80004f4 <__aeabi_f2d>
 800336c:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8003370:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003374:	ae1a      	add	r6, sp, #104	; 0x68
 8003376:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      	imu_msg_.orientation.z = estimator_->getQuaternion()[2];
 800337a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800337c:	f7fd f8ba 	bl	80004f4 <__aeabi_f2d>
 8003380:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 8003384:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003388:	ae16      	add	r6, sp, #88	; 0x58
 800338a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      	imu_msg_.orientation.w = estimator_->getQuaternion()[3];
 800338e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003390:	f7fd f8b0 	bl	80004f4 <__aeabi_f2d>
 8003394:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        imu_pub_->publish(&imu_msg_);
 8003398:	f104 0108 	add.w	r1, r4, #8
 800339c:	6860      	ldr	r0, [r4, #4]
 800339e:	f7ff fbbf 	bl	8002b20 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 80033a2:	b027      	add	sp, #156	; 0x9c
 80033a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080033a8 <_ZN13StateEstimate6updateEv>:
        gps_ = gps;
        pos_estimator_.init(imu_, gps_, nh_);
      }
  }

  void update()
 80033a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    if(attitude_estimate_flag_) attitude_estimator_.update();
 80033ac:	f890 30e0 	ldrb.w	r3, [r0, #224]	; 0xe0
  void update()
 80033b0:	b09e      	sub	sp, #120	; 0x78
 80033b2:	4604      	mov	r4, r0
    if(attitude_estimate_flag_) attitude_estimator_.update();
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d077      	beq.n	80034a8 <_ZN13StateEstimate6updateEv+0x100>
    if(imu_->getUpdate())
 80033b8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80033bc:	f890 3124 	ldrb.w	r3, [r0, #292]	; 0x124
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d071      	beq.n	80034a8 <_ZN13StateEstimate6updateEv+0x100>
        if(!imu_->getCalibrated()) return;
 80033c4:	f000 fe5c 	bl	8004080 <_ZN3IMU13getCalibratedEv>
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d06d      	beq.n	80034a8 <_ZN13StateEstimate6updateEv+0x100>
        estimator_->update(imu_->getGyro(), imu_->getAcc(), imu_->getMag());
 80033cc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80033d0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
	Vector3f  getGyro(){return gyro_;} // return angle velocity in 
 80033d2:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80033d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80033d8:	ae1b      	add	r6, sp, #108	; 0x6c
 80033da:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80033de:	af18      	add	r7, sp, #96	; 0x60
 80033e0:	ae03      	add	r6, sp, #12
 80033e2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80033e6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	Vector3f  getAcc(){return acc_;}   // return acceleration in m/s^2
 80033ea:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80033ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80033f0:	af15      	add	r7, sp, #84	; 0x54
 80033f2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80033f6:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 80033fa:	af06      	add	r7, sp, #24
	Vector3f  getMag(){return mag_;}   // 
 80033fc:	33b4      	adds	r3, #180	; 0xb4
 80033fe:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8003402:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800340a:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800340e:	ab09      	add	r3, sp, #36	; 0x24
 8003410:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8003414:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003418:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800341c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    acc_bodyframe_ = acc;
 8003420:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003424:	f105 0e04 	add.w	lr, r5, #4
 8003428:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    gyro_bodyframe_ = gyro;
 800342c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003430:	f105 071c 	add.w	r7, r5, #28
 8003434:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    mag_bodyframe_ = mag;
 8003438:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    acc_virtualframe_ = r_* acc_bodyframe_;
 800343c:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    mag_bodyframe_ = mag;
 8003440:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8003444:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    acc_virtualframe_ = r_* acc_bodyframe_;
 8003448:	4671      	mov	r1, lr
 800344a:	4640      	mov	r0, r8
 800344c:	f003 fe5c 	bl	8007108 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    gyro_virtualframe_ = r_*  gyro_bodyframe_;
 8003450:	4639      	mov	r1, r7
    acc_virtualframe_ = r_* acc_bodyframe_;
 8003452:	ed85 0a04 	vstr	s0, [r5, #16]
 8003456:	edc5 0a05 	vstr	s1, [r5, #20]
 800345a:	ed85 1a06 	vstr	s2, [r5, #24]
    gyro_virtualframe_ = r_*  gyro_bodyframe_;
 800345e:	4640      	mov	r0, r8
 8003460:	f003 fe52 	bl	8007108 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    mag_virtualframe_ = r_ * mag_bodyframe_;
 8003464:	4631      	mov	r1, r6
    gyro_virtualframe_ = r_*  gyro_bodyframe_;
 8003466:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
 800346a:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c
 800346e:	ed85 1a0c 	vstr	s2, [r5, #48]	; 0x30
    mag_virtualframe_ = r_ * mag_bodyframe_;
 8003472:	4640      	mov	r0, r8
 8003474:	f003 fe48 	bl	8007108 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    estimation();
 8003478:	682b      	ldr	r3, [r5, #0]
    mag_virtualframe_ = r_ * mag_bodyframe_;
 800347a:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
    estimation();
 800347e:	681b      	ldr	r3, [r3, #0]
    mag_virtualframe_ = r_ * mag_bodyframe_;
 8003480:	edc5 0a11 	vstr	s1, [r5, #68]	; 0x44
    estimation();
 8003484:	4628      	mov	r0, r5
    mag_virtualframe_ = r_ * mag_bodyframe_;
 8003486:	ed85 1a12 	vstr	s2, [r5, #72]	; 0x48
    estimation();
 800348a:	4798      	blx	r3
        if(nh_->connected())  publish();
 800348c:	6920      	ldr	r0, [r4, #16]
 800348e:	6803      	ldr	r3, [r0, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4798      	blx	r3
 8003494:	b118      	cbz	r0, 800349e <_ZN13StateEstimate6updateEv+0xf6>
 8003496:	f104 0010 	add.w	r0, r4, #16
 800349a:	f7ff fef9 	bl	8003290 <_ZN16AttitudeEstimate7publishEv>
	void setUpdate(bool update) { update_ = update; }
 800349e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
    if(altitude_estimate_flag_) altitude_estimator_.update();
 80034a8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
 80034ac:	b32b      	cbz	r3, 80034fa <_ZN13StateEstimate6updateEv+0x152>
    baro_= baro;
  }

  void update()
  {
    if(baro_->getUpdate())
 80034ae:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80034b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034b6:	b303      	cbz	r3, 80034fa <_ZN13StateEstimate6updateEv+0x152>
  //nav-ekf


  void publish()
  {
    baro_msg_.stamp = nh_->now();
 80034b8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80034bc:	4668      	mov	r0, sp
 80034be:	f7ff fdf3 	bl	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 80034c2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80034c6:	f104 0394 	add.w	r3, r4, #148	; 0x94
 80034ca:	e883 0003 	stmia.w	r3, {r0, r1}
    baro_msg_.pressure = baro_->getPressure();
 80034ce:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    baro_msg_.temperature = baro_->getTemperature();
    baro_msg_.altitude = baro_->getAltitude();
    baro_pub_->publish(&baro_msg_);
 80034d2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80034d6:	681a      	ldr	r2, [r3, #0]
    baro_msg_.pressure = baro_->getPressure();
 80034d8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 80034dc:	689a      	ldr	r2, [r3, #8]
    baro_msg_.temperature = baro_->getTemperature();
 80034de:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80034e2:	68db      	ldr	r3, [r3, #12]
    baro_msg_.altitude = baro_->getAltitude();
 80034e4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    baro_pub_->publish(&baro_msg_);
 80034e8:	f104 0190 	add.w	r1, r4, #144	; 0x90
 80034ec:	f7ff fb18 	bl	8002b20 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
  void setUpdate(bool update) { update_ = update; }
 80034f0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if(pos_estimate_flag_) pos_estimator_.update();
 80034fa:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 80034fe:	b3b3      	cbz	r3, 800356e <_ZN13StateEstimate6updateEv+0x1c6>
    gps_ = gps;
  }

  void update()
  {
    if(gps_->getUpdate())
 8003500:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8003504:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003508:	b38b      	cbz	r3, 800356e <_ZN13StateEstimate6updateEv+0x1c6>
  GPS* gps_;
  //nav-ekf2

  void publish()
  {
    gps_msg_.stamp = nh_->now();
 800350a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800350e:	4668      	mov	r0, sp
 8003510:	f7ff fdca 	bl	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8003514:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8003518:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 800351c:	e883 0003 	stmia.w	r3, {r0, r1}

    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8003520:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;

    gps_msg_.sat_num = gps_->getGosState().num_sats;

    gps_pub_->publish(&gps_msg_);
 8003524:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
  virtual bool is_configured(void) { return true; }
  virtual void inject_data(uint8_t *data, uint8_t len) { return; }

  GPS_State getGosState()
  {
    return state;
 8003528:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800352c:	ee07 2a90 	vmov	s15, r2
 8003530:	f8d3 2022 	ldr.w	r2, [r3, #34]	; 0x22
    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8003534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gps_pub_->publish(&gps_msg_);
 8003538:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 800353c:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
 8003540:	ee07 2a90 	vmov	s15, r2
    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
 8003544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003546:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 800354a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 800354e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8003550:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 8003554:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8003558:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 800355c:	edc4 7a32 	vstr	s15, [r4, #200]	; 0xc8
    gps_pub_->publish(&gps_msg_);
 8003560:	f7ff fade 	bl	8002b20 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  {
    return (uint16_t)GPS_RX_SIZE;
  }

  bool getUpdate() { return update_; }
  void setUpdate(bool update) { update_ = update; }
 8003564:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
  }
 800356e:	b01e      	add	sp, #120	; 0x78
 8003570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003574 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>:
  void write(uint8_t * new_data, uint8_t new_size)
 8003574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 8003578:	4e56      	ldr	r6, [pc, #344]	; (80036d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x160>)
 800357a:	4b57      	ldr	r3, [pc, #348]	; (80036d8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x164>)
  void write(uint8_t * new_data, uint8_t new_size)
 800357c:	4607      	mov	r7, r0
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 800357e:	7830      	ldrb	r0, [r6, #0]
 8003580:	781c      	ldrb	r4, [r3, #0]
 8003582:	1c45      	adds	r5, r0, #1
 8003584:	42ac      	cmp	r4, r5
 8003586:	d0fd      	beq.n	8003584 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x10>
 8003588:	2831      	cmp	r0, #49	; 0x31
 800358a:	d101      	bne.n	8003590 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x1c>
 800358c:	2c00      	cmp	r4, #0
 800358e:	d0f9      	beq.n	8003584 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x10>
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 8003590:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80036f8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x184>
 8003594:	23fb      	movs	r3, #251	; 0xfb
 8003596:	fb03 8300 	mla	r3, r3, r0, r8
    subscript_to_add_++;
 800359a:	b2ed      	uxtb	r5, r5
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 800359c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    memcpy(tx_buffer_unit_[subscript_to_add_].tx_data_, new_data, new_size);
 80035a0:	ebc0 1380 	rsb	r3, r0, r0, lsl #6
 80035a4:	ebc0 0083 	rsb	r0, r0, r3, lsl #2
 80035a8:	4440      	add	r0, r8
 80035aa:	f005 fe81 	bl	80092b0 <memcpy>
    if (subscript_to_add_ == TX_SIZE)
 80035ae:	2d32      	cmp	r5, #50	; 0x32
      subscript_to_add_ = 0;
 80035b0:	bf04      	itt	eq
 80035b2:	2300      	moveq	r3, #0
 80035b4:	7033      	strbeq	r3, [r6, #0]
    if (idle_flag_ )
 80035b6:	4b49      	ldr	r3, [pc, #292]	; (80036dc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x168>)
    subscript_to_add_++;
 80035b8:	bf18      	it	ne
 80035ba:	7035      	strbne	r5, [r6, #0]
    if (idle_flag_ )
 80035bc:	7819      	ldrb	r1, [r3, #0]
 80035be:	4642      	mov	r2, r8
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d054      	beq.n	800366e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xfa>
        if ((subscript_in_progress_ == (subscript_to_add_-1)) || (subscript_in_progress_ == TX_SIZE -1 && subscript_to_add_ == 0)) idle_flag_= false;
 80035c4:	7831      	ldrb	r1, [r6, #0]
 80035c6:	1e48      	subs	r0, r1, #1
 80035c8:	4284      	cmp	r4, r0
 80035ca:	d002      	beq.n	80035d2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x5e>
 80035cc:	2c31      	cmp	r4, #49	; 0x31
 80035ce:	d102      	bne.n	80035d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x62>
 80035d0:	b909      	cbnz	r1, 80035d6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x62>
 80035d2:	2100      	movs	r1, #0
 80035d4:	7019      	strb	r1, [r3, #0]
        huart_->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 80035d6:	6838      	ldr	r0, [r7, #0]
 80035d8:	6801      	ldr	r1, [r0, #0]
 80035da:	694b      	ldr	r3, [r1, #20]
 80035dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e0:	614b      	str	r3, [r1, #20]
        __HAL_DMA_DISABLE(huart_->hdmatx);
 80035e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	f020 0001 	bic.w	r0, r0, #1
 80035ec:	6018      	str	r0, [r3, #0]
        huart_->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 80035ee:	20fb      	movs	r0, #251	; 0xfb
 80035f0:	fb00 2004 	mla	r0, r0, r4, r2
 80035f4:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
 80035f8:	6058      	str	r0, [r3, #4]
        uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 80035fa:	ebc4 1084 	rsb	r0, r4, r4, lsl #6
 80035fe:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 8003602:	4414      	add	r4, r2
        huart_->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 8003604:	60dc      	str	r4, [r3, #12]
        huart_->Instance->CR3 |= USART_CR3_DMAT;
 8003606:	694a      	ldr	r2, [r1, #20]
 8003608:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800360c:	614a      	str	r2, [r1, #20]
        __HAL_DMA_ENABLE(huart_->hdmatx);
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 8003616:	4a32      	ldr	r2, [pc, #200]	; (80036e0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x16c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d915      	bls.n	8003648 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xd4>
 800361c:	3218      	adds	r2, #24
 800361e:	4293      	cmp	r3, r2
 8003620:	d00d      	beq.n	800363e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xca>
 8003622:	3218      	adds	r2, #24
 8003624:	4293      	cmp	r3, r2
 8003626:	d00c      	beq.n	8003642 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xce>
 8003628:	3218      	adds	r2, #24
 800362a:	4293      	cmp	r3, r2
 800362c:	bf0c      	ite	eq
 800362e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003632:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8003636:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x170>)
 8003638:	60d3      	str	r3, [r2, #12]
 800363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800363e:	2320      	movs	r3, #32
 8003640:	e7f9      	b.n	8003636 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc2>
 8003642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003646:	e7f6      	b.n	8003636 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc2>
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x174>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d916      	bls.n	800367c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x108>
 800364e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003652:	4293      	cmp	r3, r2
 8003654:	d00d      	beq.n	8003672 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xfe>
 8003656:	3218      	adds	r2, #24
 8003658:	4293      	cmp	r3, r2
 800365a:	d00c      	beq.n	8003676 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x102>
 800365c:	3218      	adds	r2, #24
 800365e:	4293      	cmp	r3, r2
 8003660:	bf0c      	ite	eq
 8003662:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003666:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 800366a:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x170>)
 800366c:	6093      	str	r3, [r2, #8]
 800366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003672:	2320      	movs	r3, #32
 8003674:	e7f9      	b.n	800366a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf6>
 8003676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800367a:	e7f6      	b.n	800366a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf6>
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x178>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d913      	bls.n	80036aa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x136>
 8003682:	3218      	adds	r2, #24
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x12c>
 8003688:	3218      	adds	r2, #24
 800368a:	4293      	cmp	r3, r2
 800368c:	d00a      	beq.n	80036a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x130>
 800368e:	3218      	adds	r2, #24
 8003690:	4293      	cmp	r3, r2
 8003692:	bf0c      	ite	eq
 8003694:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003698:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x17c>)
 800369e:	e7cb      	b.n	8003638 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc4>
 80036a0:	2320      	movs	r3, #32
 80036a2:	e7fb      	b.n	800369c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x128>
 80036a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a8:	e7f8      	b.n	800369c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x128>
 80036aa:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x180>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x154>
 80036b0:	3218      	adds	r2, #24
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00a      	beq.n	80036cc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x158>
 80036b6:	3218      	adds	r2, #24
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf0c      	ite	eq
 80036bc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80036c0:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x17c>)
 80036c6:	e7d1      	b.n	800366c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf8>
 80036c8:	2320      	movs	r3, #32
 80036ca:	e7fb      	b.n	80036c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x150>
 80036cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036d0:	e7f8      	b.n	80036c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x150>
 80036d2:	bf00      	nop
 80036d4:	20000abd 	.word	0x20000abd
 80036d8:	20000abe 	.word	0x20000abe
 80036dc:	20000abc 	.word	0x20000abc
 80036e0:	40026458 	.word	0x40026458
 80036e4:	40026400 	.word	0x40026400
 80036e8:	400260b8 	.word	0x400260b8
 80036ec:	40026058 	.word	0x40026058
 80036f0:	40026000 	.word	0x40026000
 80036f4:	40026010 	.word	0x40026010
 80036f8:	20000abf 	.word	0x20000abf

080036fc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE>:
      configured_ = true;
    }

    virtual int publish(int id, const Msg * msg)
    {
      if(id >= 100 && !configured_)
 80036fc:	2963      	cmp	r1, #99	; 0x63
    virtual int publish(int id, const Msg * msg)
 80036fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003700:	4604      	mov	r4, r0
 8003702:	460e      	mov	r6, r1
      if(id >= 100 && !configured_)
 8003704:	dd03      	ble.n	800370e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x12>
 8003706:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800370a:	2d00      	cmp	r5, #0
 800370c:	d03b      	beq.n	8003786 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8a>
        return 0;

      /* serialize message */
      uint16_t l = msg->serialize(message_out+7);
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	f504 7191 	add.w	r1, r4, #290	; 0x122
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4610      	mov	r0, r2
 8003718:	4798      	blx	r3

      /* setup the header */
      message_out[0] = 0xff;
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
      message_out[1] = PROTOCOL_VER;
 8003720:	22fe      	movs	r2, #254	; 0xfe
      uint16_t l = msg->serialize(message_out+7);
 8003722:	b283      	uxth	r3, r0
      message_out[1] = PROTOCOL_VER;
 8003724:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 8003728:	b2c2      	uxtb	r2, r0
      message_out[3] = (uint8_t) ((uint16_t)l>>8);
 800372a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800372e:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8003732:	4410      	add	r0, r2
 8003734:	43c0      	mvns	r0, r0
      message_out[5] = (uint8_t) ((int16_t)id&255);
 8003736:	f884 6120 	strb.w	r6, [r4, #288]	; 0x120
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 800373a:	f346 2607 	sbfx	r6, r6, #8, #8
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 800373e:	f884 211d 	strb.w	r2, [r4, #285]	; 0x11d
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8003742:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 8003746:	f884 6121 	strb.w	r6, [r4, #289]	; 0x121

      /* calculate checksum */
      int chk = 0;
      for(int i =5; i<l+7; i++)
 800374a:	2105      	movs	r1, #5
 800374c:	f504 7690 	add.w	r6, r4, #288	; 0x120
      int chk = 0;
 8003750:	2200      	movs	r2, #0
      for(int i =5; i<l+7; i++)
 8003752:	1d98      	adds	r0, r3, #6
 8003754:	4281      	cmp	r1, r0
 8003756:	dc04      	bgt.n	8003762 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x66>
        chk += message_out[i];
 8003758:	f816 5b01 	ldrb.w	r5, [r6], #1
      for(int i =5; i<l+7; i++)
 800375c:	3101      	adds	r1, #1
        chk += message_out[i];
 800375e:	442a      	add	r2, r5
      for(int i =5; i<l+7; i++)
 8003760:	e7f8      	b.n	8003754 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x58>
      l += 7;
      message_out[l++] = 255 - (chk%256);
 8003762:	f103 0508 	add.w	r5, r3, #8
      l += 7;
 8003766:	3307      	adds	r3, #7
      message_out[l++] = 255 - (chk%256);
 8003768:	fa14 f383 	uxtah	r3, r4, r3
        {
          uint8_t reminder = l % DMA_TX_BURST_SIZE;
          if(reminder != 0) l = (l / DMA_TX_BURST_SIZE + 1) * DMA_TX_BURST_SIZE;
        }

      if( l <= OUTPUT_SIZE ){
 800376c:	b2ad      	uxth	r5, r5
      message_out[l++] = 255 - (chk%256);
 800376e:	43d2      	mvns	r2, r2
      if( l <= OUTPUT_SIZE ){
 8003770:	2dff      	cmp	r5, #255	; 0xff
      message_out[l++] = 255 - (chk%256);
 8003772:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
      if( l <= OUTPUT_SIZE ){
 8003776:	d809      	bhi.n	800378c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x90>
    tx_->write(data_byte, size);
 8003778:	68a3      	ldr	r3, [r4, #8]
 800377a:	b2ea      	uxtb	r2, r5
 800377c:	f204 111b 	addw	r1, r4, #283	; 0x11b
 8003780:	6898      	ldr	r0, [r3, #8]
 8003782:	f7ff fef7 	bl	8003574 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>
        return l;
      }else{
        logerror("Message from device dropped: message larger than buffer.");
        return -1;
      }
    }
 8003786:	4628      	mov	r0, r5
 8003788:	b004      	add	sp, #16
 800378a:	bd70      	pop	{r4, r5, r6, pc}
      msg("")
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb0>)
 800378e:	9301      	str	r3, [sp, #4]
     */

  private:
    void log(char byte, const char * msg){
      rosserial_msgs::Log l;
      l.level= byte;
 8003790:	2303      	movs	r3, #3
 8003792:	f88d 3008 	strb.w	r3, [sp, #8]
      l.msg = (char*)msg;
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb4>)
 8003798:	9303      	str	r3, [sp, #12]
      publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	aa01      	add	r2, sp, #4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2107      	movs	r1, #7
 80037a2:	4620      	mov	r0, r4
 80037a4:	4798      	blx	r3
        return -1;
 80037a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80037aa:	e7ec      	b.n	8003786 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8a>
 80037ac:	08009b78 	.word	0x08009b78
 80037b0:	08009ebf 	.word	0x08009ebf

080037b4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>:
    void requestSyncTime()
 80037b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      data()
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv+0x24>)
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	9303      	str	r3, [sp, #12]
      publish(TopicInfo::ID_TIME, &t);
 80037c0:	6803      	ldr	r3, [r0, #0]
 80037c2:	aa01      	add	r2, sp, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	210a      	movs	r1, #10
    void requestSyncTime()
 80037c8:	4604      	mov	r4, r0
      publish(TopicInfo::ID_TIME, &t);
 80037ca:	4798      	blx	r3
  uint32_t time(){return HAL_GetTick();}
 80037cc:	f001 fa50 	bl	8004c70 <HAL_GetTick>
      rt_time = hardware_.time();
 80037d0:	6120      	str	r0, [r4, #16]
    }
 80037d2:	b004      	add	sp, #16
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	08009b48 	.word	0x08009b48

080037dc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>:
    void negotiateTopics()
 80037dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e0:	b086      	sub	sp, #24
      buffer_size(0)
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xb0>)
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	4b29      	ldr	r3, [pc, #164]	; (8003890 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xb4>)
 80037ea:	f8ad 2004 	strh.w	r2, [sp, #4]
 80037ee:	4605      	mov	r5, r0
 80037f0:	9302      	str	r3, [sp, #8]
 80037f2:	9303      	str	r3, [sp, #12]
 80037f4:	9304      	str	r3, [sp, #16]
 80037f6:	9205      	str	r2, [sp, #20]
 80037f8:	f500 7407 	add.w	r4, r0, #540	; 0x21c
 80037fc:	f500 761b 	add.w	r6, r0, #620	; 0x26c
              ti.buffer_size = OUTPUT_SIZE;
 8003800:	27ff      	movs	r7, #255	; 0xff
          if(publishers[i] != 0) // non-empty slot
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	b1bb      	cbz	r3, 8003836 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x5a>
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8003806:	6858      	ldr	r0, [r3, #4]
              ti.topic_id = publishers[i]->id_;
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	f8ad 2004 	strh.w	r2, [sp, #4]
              ti.topic_name = (char *) publishers[i]->topic_;
 800380e:	681a      	ldr	r2, [r3, #0]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8003810:	6803      	ldr	r3, [r0, #0]
              ti.topic_name = (char *) publishers[i]->topic_;
 8003812:	9202      	str	r2, [sp, #8]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4798      	blx	r3
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003818:	6823      	ldr	r3, [r4, #0]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 800381a:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800381c:	6858      	ldr	r0, [r3, #4]
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4798      	blx	r3
              publish( publishers[i]->getEndpointType(), &ti );
 8003824:	6821      	ldr	r1, [r4, #0]
 8003826:	682b      	ldr	r3, [r5, #0]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003828:	9004      	str	r0, [sp, #16]
              ti.buffer_size = OUTPUT_SIZE;
 800382a:	9705      	str	r7, [sp, #20]
              publish( publishers[i]->getEndpointType(), &ti );
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6909      	ldr	r1, [r1, #16]
 8003830:	466a      	mov	r2, sp
 8003832:	4628      	mov	r0, r5
 8003834:	4798      	blx	r3
 8003836:	3404      	adds	r4, #4
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8003838:	42b4      	cmp	r4, r6
 800383a:	d1e2      	bne.n	8003802 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x26>
 800383c:	f505 762f 	add.w	r6, r5, #700	; 0x2bc
              ti.buffer_size = INPUT_SIZE;
 8003840:	27ff      	movs	r7, #255	; 0xff
          if(subscribers[i] != 0) // non-empty slot
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	b1c8      	cbz	r0, 800387a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x9e>
              ti.topic_id = subscribers[i]->id_;
 8003846:	6843      	ldr	r3, [r0, #4]
 8003848:	f8ad 3004 	strh.w	r3, [sp, #4]
              ti.topic_name = (char *) subscribers[i]->topic_;
 800384c:	6883      	ldr	r3, [r0, #8]
 800384e:	9302      	str	r3, [sp, #8]
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8003850:	6803      	ldr	r3, [r0, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4798      	blx	r3
 8003856:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	6803      	ldr	r3, [r0, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4798      	blx	r3
              publish( subscribers[i]->getEndpointType(), &ti );
 8003860:	682b      	ldr	r3, [r5, #0]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003862:	9004      	str	r0, [sp, #16]
              publish( subscribers[i]->getEndpointType(), &ti );
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	f8d3 8000 	ldr.w	r8, [r3]
 800386a:	6803      	ldr	r3, [r0, #0]
              ti.buffer_size = INPUT_SIZE;
 800386c:	9705      	str	r7, [sp, #20]
              publish( subscribers[i]->getEndpointType(), &ti );
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4798      	blx	r3
 8003872:	466a      	mov	r2, sp
 8003874:	4601      	mov	r1, r0
 8003876:	4628      	mov	r0, r5
 8003878:	47c0      	blx	r8
 800387a:	3404      	adds	r4, #4
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 800387c:	42a6      	cmp	r6, r4
 800387e:	d1e0      	bne.n	8003842 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x66>
      configured_ = true;
 8003880:	2301      	movs	r3, #1
 8003882:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
    }
 8003886:	b006      	add	sp, #24
 8003888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800388c:	08009b60 	.word	0x08009b60
 8003890:	0800a0f8 	.word	0x0800a0f8

08003894 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>:
    void syncTime(uint8_t * data)
 8003894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x74>)
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	4604      	mov	r4, r0
 800389c:	2300      	movs	r3, #0
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	460d      	mov	r5, r1
 80038a4:	f001 f9e4 	bl	8004c70 <HAL_GetTick>
      uint32_t offset = hardware_.time() - rt_time;
 80038a8:	6922      	ldr	r2, [r4, #16]
      t.deserialize(data);
 80038aa:	4629      	mov	r1, r5
      uint32_t offset = hardware_.time() - rt_time;
 80038ac:	1a86      	subs	r6, r0, r2
      t.deserialize(data);
 80038ae:	a801      	add	r0, sp, #4
 80038b0:	f7fe fb06 	bl	8001ec0 <_ZN8std_msgs4Time11deserializeEPh>
      t.data.sec += offset/1000;
 80038b4:	9b02      	ldr	r3, [sp, #8]
 80038b6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80038ba:	fbb6 f2f5 	udiv	r2, r6, r5
 80038be:	4413      	add	r3, r2
 80038c0:	9302      	str	r3, [sp, #8]
      t.data.nsec += (offset%1000)*1000000UL;
 80038c2:	fb05 6212 	mls	r2, r5, r2, r6
 80038c6:	9b03      	ldr	r3, [sp, #12]
 80038c8:	4e10      	ldr	r6, [pc, #64]	; (800390c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x78>)
 80038ca:	fb06 3202 	mla	r2, r6, r2, r3
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	f001 f9ce 	bl	8004c70 <HAL_GetTick>
      sec_offset = new_now.sec - ms/1000 - 1;
 80038d4:	9a02      	ldr	r2, [sp, #8]
 80038d6:	fbb0 f3f5 	udiv	r3, r0, r5
 80038da:	3a01      	subs	r2, #1
 80038dc:	1ad2      	subs	r2, r2, r3
 80038de:	6162      	str	r2, [r4, #20]
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 80038e0:	9903      	ldr	r1, [sp, #12]
 80038e2:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x7c>)
 80038e4:	fb05 0313 	mls	r3, r5, r3, r0
 80038e8:	440a      	add	r2, r1
 80038ea:	4621      	mov	r1, r4
 80038ec:	fb06 2313 	mls	r3, r6, r3, r2
 80038f0:	f841 3f18 	str.w	r3, [r1, #24]!
      normalizeSecNSec(sec_offset, nsec_offset);
 80038f4:	f104 0014 	add.w	r0, r4, #20
 80038f8:	f001 f950 	bl	8004b9c <_ZN3ros16normalizeSecNSecERmS0_>
 80038fc:	f001 f9b8 	bl	8004c70 <HAL_GetTick>
      last_sync_receive_time = hardware_.time();
 8003900:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
    }
 8003904:	b004      	add	sp, #16
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	08009b48 	.word	0x08009b48
 800390c:	000f4240 	.word	0x000f4240
 8003910:	3b9aca00 	.word	0x3b9aca00

08003914 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>:
    virtual int spinOnce(){
 8003914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	4604      	mov	r4, r0
 800391a:	f001 f9a9 	bl	8004c70 <HAL_GetTick>
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 800391e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8003922:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003926:	1ac3      	subs	r3, r0, r3
 8003928:	4293      	cmp	r3, r2
        configured_ = false;
 800392a:	bf84      	itt	hi
 800392c:	2300      	movhi	r3, #0
 800392e:	f884 32d0 	strbhi.w	r3, [r4, #720]	; 0x2d0
      if ( mode_ != MODE_FIRST_FF){
 8003932:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003936:	4607      	mov	r7, r0
 8003938:	b133      	cbz	r3, 8003948 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x34>
        if (c_time > last_msg_timeout_time){
 800393a:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 800393e:	4283      	cmp	r3, r0
          mode_ = MODE_FIRST_FF;
 8003940:	bf3c      	itt	cc
 8003942:	2300      	movcc	r3, #0
 8003944:	f8c4 32bc 	strcc.w	r3, [r4, #700]	; 0x2bc
  bool available() { return ring_buf_->length(); }
 8003948:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8003b28 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x214>
          byte_in_progress_ = 0;
 800394c:	f04f 0800 	mov.w	r8, #0
                  subscribers[topic_-100]->callback( message_in );
 8003950:	f104 091c 	add.w	r9, r4, #28
  bool available() { return ring_buf_->length(); }
 8003954:	f8da 2000 	ldr.w	r2, [sl]
    if(byte_to_add_ - byte_in_progress_ >= 0)
 8003958:	f9b2 1192 	ldrsh.w	r1, [r2, #402]	; 0x192
 800395c:	f9b2 3190 	ldrsh.w	r3, [r2, #400]	; 0x190
 8003960:	1acd      	subs	r5, r1, r3
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 8003962:	bf42      	ittt	mi
 8003964:	f8b2 0194 	ldrhmi.w	r0, [r2, #404]	; 0x194
 8003968:	18cd      	addmi	r5, r1, r3
 800396a:	1a2d      	submi	r5, r5, r0
 800396c:	b2ad      	uxth	r5, r5
    if(!available()) return -1;
 800396e:	2d00      	cmp	r5, #0
 8003970:	f000 80c7 	beq.w	8003b02 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1ee>
    if (byte_in_progress_ != byte_to_add_)
 8003974:	4299      	cmp	r1, r3
 8003976:	d00a      	beq.n	800398e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x7a>
        pop_value =  buf_[byte_in_progress_];
 8003978:	5cd6      	ldrb	r6, [r2, r3]
        if (byte_in_progress_ == buffer_length_)
 800397a:	f8b2 1194 	ldrh.w	r1, [r2, #404]	; 0x194
        byte_in_progress_++;
 800397e:	3301      	adds	r3, #1
 8003980:	b21b      	sxth	r3, r3
        if (byte_in_progress_ == buffer_length_)
 8003982:	428b      	cmp	r3, r1
        byte_in_progress_++;
 8003984:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
          byte_in_progress_ = 0;
 8003988:	bf08      	it	eq
 800398a:	f8a2 8190 	strheq.w	r8, [r2, #400]	; 0x190
          checksum_ += data;
 800398e:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8003992:	f8d4 52bc 	ldr.w	r5, [r4, #700]	; 0x2bc
          checksum_ += data;
 8003996:	4433      	add	r3, r6
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8003998:	2d07      	cmp	r5, #7
          checksum_ += data;
 800399a:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800399e:	d111      	bne.n	80039c4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xb0>
            message_in[index_++] = data;
 80039a0:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	4423      	add	r3, r4
 80039a8:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 80039ac:	771e      	strb	r6, [r3, #28]
            bytes_--;
 80039ae:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1cb      	bne.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              mode_ = MODE_MSG_CHECKSUM;
 80039bc:	2308      	movs	r3, #8
              mode_++;
 80039be:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 80039c2:	e7c7      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_FIRST_FF ){
 80039c4:	b9ad      	cbnz	r5, 80039f2 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xde>
            if(data == 0xff){
 80039c6:	2eff      	cmp	r6, #255	; 0xff
 80039c8:	d107      	bne.n	80039da <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xc6>
              mode_++;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 80039d8:	e7bc      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
  uint32_t time(){return HAL_GetTick();}
 80039da:	f001 f949 	bl	8004c70 <HAL_GetTick>
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 80039de:	1bc0      	subs	r0, r0, r7
 80039e0:	2805      	cmp	r0, #5
 80039e2:	d9b7      	bls.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              configured_=false;
 80039e4:	f884 52d0 	strb.w	r5, [r4, #720]	; 0x2d0
              return -2;
 80039e8:	f06f 0501 	mvn.w	r5, #1
    }
 80039ec:	4628      	mov	r0, r5
 80039ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          }else if( mode_ == MODE_PROTOCOL_VER ){
 80039f2:	2d01      	cmp	r5, #1
 80039f4:	d10d      	bne.n	8003a12 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xfe>
            if(data == PROTOCOL_VER){
 80039f6:	2efe      	cmp	r6, #254	; 0xfe
 80039f8:	d101      	bne.n	80039fe <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xea>
              mode_++;
 80039fa:	2302      	movs	r3, #2
 80039fc:	e7df      	b.n	80039be <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
              if (configured_ == false)
 80039fe:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
              mode_ = MODE_FIRST_FF;
 8003a02:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
              if (configured_ == false)
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1a4      	bne.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                requestSyncTime(); 	/* send a msg back showing our protocol version */
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7ff fed2 	bl	80037b4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
 8003a10:	e7a0      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 8003a12:	2d02      	cmp	r5, #2
 8003a14:	d109      	bne.n	8003a2a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x116>
            bytes_ = data;
 8003a16:	f8c4 62c0 	str.w	r6, [r4, #704]	; 0x2c0
            index_ = 0;
 8003a1a:	f8c4 82c8 	str.w	r8, [r4, #712]	; 0x2c8
            mode_++;
 8003a1e:	2303      	movs	r3, #3
            mode_++;
 8003a20:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            checksum_ = data;               /* first byte included in checksum */
 8003a24:	f8c4 62cc 	str.w	r6, [r4, #716]	; 0x2cc
 8003a28:	e794      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 8003a2a:	2d03      	cmp	r5, #3
 8003a2c:	d107      	bne.n	8003a3e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x12a>
            bytes_ += data<<8;
 8003a2e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003a32:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8003a36:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            mode_++;
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e7bf      	b.n	80039be <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 8003a3e:	2d04      	cmp	r5, #4
 8003a40:	d10b      	bne.n	8003a5a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x146>
            if( (checksum_%256) == 255)
 8003a42:	425a      	negs	r2, r3
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	bf58      	it	pl
 8003a4a:	4253      	negpl	r3, r2
 8003a4c:	2bff      	cmp	r3, #255	; 0xff
 8003a4e:	d101      	bne.n	8003a54 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x140>
              mode_++;
 8003a50:	2305      	movs	r3, #5
 8003a52:	e7b4      	b.n	80039be <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003a54:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
 8003a58:	e77c      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 8003a5a:	2d05      	cmp	r5, #5
 8003a5c:	d103      	bne.n	8003a66 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x152>
            topic_ = data;
 8003a5e:	f8c4 62c4 	str.w	r6, [r4, #708]	; 0x2c4
            mode_++;
 8003a62:	2306      	movs	r3, #6
 8003a64:	e7dc      	b.n	8003a20 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x10c>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8003a66:	2d06      	cmp	r5, #6
 8003a68:	d10b      	bne.n	8003a82 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x16e>
            topic_ += data<<8;
 8003a6a:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8003a6e:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8003a72:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
            mode_ = MODE_MESSAGE;
 8003a76:	2307      	movs	r3, #7
 8003a78:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            if(bytes_ == 0)
 8003a7c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003a80:	e79a      	b.n	80039b8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xa4>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 8003a82:	2d08      	cmp	r5, #8
 8003a84:	f47f af66 	bne.w	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
            if( (checksum_%256) == 255){
 8003a88:	425a      	negs	r2, r3
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	bf58      	it	pl
 8003a90:	4253      	negpl	r3, r2
 8003a92:	2bff      	cmp	r3, #255	; 0xff
            mode_ = MODE_FIRST_FF;
 8003a94:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
            if( (checksum_%256) == 255){
 8003a98:	f47f af5c 	bne.w	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 8003a9c:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8003aa0:	b963      	cbnz	r3, 8003abc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1a8>
                requestSyncTime();
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7ff fe86 	bl	80037b4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
                negotiateTopics();
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff fe97 	bl	80037dc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>
                return -1;
 8003aae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
                last_sync_time = c_time;
 8003ab2:	f8c4 72d4 	str.w	r7, [r4, #724]	; 0x2d4
                last_sync_receive_time = c_time;
 8003ab6:	f8c4 72d8 	str.w	r7, [r4, #728]	; 0x2d8
                return -1;
 8003aba:	e797      	b.n	80039ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
              }else if(topic_ == TopicInfo::ID_TIME){
 8003abc:	2b0a      	cmp	r3, #10
 8003abe:	d104      	bne.n	8003aca <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1b6>
                syncTime(message_in);
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7ff fee6 	bl	8003894 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>
 8003ac8:	e744      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d108      	bne.n	8003ae0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1cc>
                req_param_resp.deserialize(message_in);
 8003ace:	4649      	mov	r1, r9
 8003ad0:	f504 7039 	add.w	r0, r4, #740	; 0x2e4
 8003ad4:	f7fe ff43 	bl	800295e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                param_recieved= true;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
 8003ade:	e739      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	d102      	bne.n	8003aea <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1d6>
                configured_ = false;
 8003ae4:	f884 82d0 	strb.w	r8, [r4, #720]	; 0x2d0
 8003ae8:	e734      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                if(subscribers[topic_-100])
 8003aea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003aee:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8003af2:	2800      	cmp	r0, #0
 8003af4:	f43f af2e 	beq.w	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                  subscribers[topic_-100]->callback( message_in );
 8003af8:	6803      	ldr	r3, [r0, #0]
 8003afa:	4649      	mov	r1, r9
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4798      	blx	r3
 8003b00:	e728      	b.n	8003954 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 8003b02:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f43f af70 	beq.w	80039ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
 8003b0c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003b10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003b14:	1afb      	subs	r3, r7, r3
 8003b16:	4293      	cmp	r3, r2
 8003b18:	f67f af68 	bls.w	80039ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
        requestSyncTime();
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fe49 	bl	80037b4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
        last_sync_time = c_time;
 8003b22:	f8c4 72d4 	str.w	r7, [r4, #724]	; 0x2d4
 8003b26:	e761      	b.n	80039ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
 8003b28:	20003bd0 	.word	0x20003bd0

08003b2c <HAL_SYSTICK_Callback>:
{
 8003b2c:	b510      	push	{r4, lr}
	static uint32_t last_time = HAL_GetTick();
 8003b2e:	4c14      	ldr	r4, [pc, #80]	; (8003b80 <HAL_SYSTICK_Callback+0x54>)
 8003b30:	f8d4 3528 	ldr.w	r3, [r4, #1320]	; 0x528
 8003b34:	07db      	lsls	r3, r3, #31
 8003b36:	d404      	bmi.n	8003b42 <HAL_SYSTICK_Callback+0x16>
 8003b38:	f001 f89a 	bl	8004c70 <HAL_GetTick>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
	uint32_t now_time = HAL_GetTick();
 8003b42:	f001 f895 	bl	8004c70 <HAL_GetTick>
	nh_.spinOnce();
 8003b46:	480e      	ldr	r0, [pc, #56]	; (8003b80 <HAL_SYSTICK_Callback+0x54>)
 8003b48:	f7ff fee4 	bl	8003914 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>
	if(!start_process_flag_)
 8003b4c:	f894 3520 	ldrb.w	r3, [r4, #1312]	; 0x520
 8003b50:	b1a3      	cbz	r3, 8003b7c <HAL_SYSTICK_Callback+0x50>
	if(nh_.connected())
 8003b52:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 8003b56:	b18b      	cbz	r3, 8003b7c <HAL_SYSTICK_Callback+0x50>
		if(counter++>8)
 8003b58:	f8d4 352c 	ldr.w	r3, [r4, #1324]	; 0x52c
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	dc03      	bgt.n	8003b68 <HAL_SYSTICK_Callback+0x3c>
 8003b60:	3301      	adds	r3, #1
 8003b62:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
 8003b66:	bd10      	pop	{r4, pc}
			counter = 0;
 8003b68:	2300      	movs	r3, #0
			imu_.update();
 8003b6a:	210a      	movs	r1, #10
 8003b6c:	4805      	ldr	r0, [pc, #20]	; (8003b84 <HAL_SYSTICK_Callback+0x58>)
			counter = 0;
 8003b6e:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
			imu_.update();
 8003b72:	f000 ff6b 	bl	8004a4c <_ZN3IMU6updateEt>
			estimator_.update();
 8003b76:	4804      	ldr	r0, [pc, #16]	; (8003b88 <HAL_SYSTICK_Callback+0x5c>)
 8003b78:	f7ff fc16 	bl	80033a8 <_ZN13StateEstimate6updateEv>
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000540 	.word	0x20000540
 8003b84:	20000850 	.word	0x20000850
 8003b88:	20000978 	.word	0x20000978

08003b8c <_GLOBAL__sub_I_nh_>:
    NodeHandle_() : configured_(false) {
 8003b8c:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <_GLOBAL__sub_I_nh_+0x188>)
 8003b8e:	4a62      	ldr	r2, [pc, #392]	; (8003d18 <_GLOBAL__sub_I_nh_+0x18c>)
      strings_length(0), strings(NULL)
 8003b90:	4962      	ldr	r1, [pc, #392]	; (8003d1c <_GLOBAL__sub_I_nh_+0x190>)
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}
 8003b92:	b510      	push	{r4, lr}
 8003b94:	601a      	str	r2, [r3, #0]
    baud_ = 961200;
 8003b96:	4a62      	ldr	r2, [pc, #392]	; (8003d20 <_GLOBAL__sub_I_nh_+0x194>)
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8003ba0:	f8c3 12e4 	str.w	r1, [r3, #740]	; 0x2e4
 8003ba4:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8003ba8:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
 8003bac:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8003bb0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 8003bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003bb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        publishers[i] = 0;
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	1899      	adds	r1, r3, r2
 8003bc0:	3204      	adds	r2, #4
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8003bc2:	2a50      	cmp	r2, #80	; 0x50
        publishers[i] = 0;
 8003bc4:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8003bc8:	d1f9      	bne.n	8003bbe <_GLOBAL__sub_I_nh_+0x32>
 8003bca:	2200      	movs	r2, #0
        subscribers[i] = 0;
 8003bcc:	4610      	mov	r0, r2
 8003bce:	1899      	adds	r1, r3, r2
 8003bd0:	3204      	adds	r2, #4
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8003bd2:	2a50      	cmp	r2, #80	; 0x50
        subscribers[i] = 0;
 8003bd4:	f8c1 026c 	str.w	r0, [r1, #620]	; 0x26c
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8003bd8:	d1f9      	bne.n	8003bce <_GLOBAL__sub_I_nh_+0x42>
 8003bda:	2200      	movs	r2, #0
        message_in[i] = 0;
 8003bdc:	4610      	mov	r0, r2
 8003bde:	1899      	adds	r1, r3, r2
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 8003be0:	3201      	adds	r2, #1
 8003be2:	2aff      	cmp	r2, #255	; 0xff
        message_in[i] = 0;
 8003be4:	7708      	strb	r0, [r1, #28]
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 8003be6:	d1fa      	bne.n	8003bde <_GLOBAL__sub_I_nh_+0x52>
 8003be8:	2200      	movs	r2, #0
        message_out[i] = 0;
 8003bea:	4611      	mov	r1, r2
 8003bec:	1898      	adds	r0, r3, r2
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8003bee:	3201      	adds	r2, #1
 8003bf0:	2aff      	cmp	r2, #255	; 0xff
        message_out[i] = 0;
 8003bf2:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8003bf6:	d1f9      	bne.n	8003bec <_GLOBAL__sub_I_nh_+0x60>
 8003bf8:	4c4a      	ldr	r4, [pc, #296]	; (8003d24 <_GLOBAL__sub_I_nh_+0x198>)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003bfa:	f8c3 1310 	str.w	r1, [r3, #784]	; 0x310
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 1314 	str.w	r1, [r3, #788]	; 0x314
 8003c04:	f8c3 1318 	str.w	r1, [r3, #792]	; 0x318
 8003c08:	f8c3 131c 	str.w	r1, [r3, #796]	; 0x31c
 8003c0c:	f8c3 1320 	str.w	r1, [r3, #800]	; 0x320
 8003c10:	f8c3 1324 	str.w	r1, [r3, #804]	; 0x324
 8003c14:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
 8003c18:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
      data("")
 8003c1c:	4842      	ldr	r0, [pc, #264]	; (8003d28 <_GLOBAL__sub_I_nh_+0x19c>)
 8003c1e:	4943      	ldr	r1, [pc, #268]	; (8003d2c <_GLOBAL__sub_I_nh_+0x1a0>)
 8003c20:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
 8003c24:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 8003c28:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8003c2c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 8003c30:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
 8003c34:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
 8003c38:	f8c3 0350 	str.w	r0, [r3, #848]	; 0x350
 8003c3c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
 8003c40:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8003c44:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
 8003c48:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
 8003c4c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 8003c50:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8003c54:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8003c58:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 8003c5c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8003c60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8003c64:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
 8003c68:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
 8003c6c:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
 8003c70:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
 8003c74:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
 8003c78:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
 8003c7c:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
 8003c80:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
 8003c84:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
 8003c88:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
 8003c8c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
 8003c90:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
 8003c94:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 8003c98:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 8003c9c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8003ca0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8003ca4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 8003ca8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 8003cac:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
 8003cb0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
 8003cb4:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
 8003cb8:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 8003cbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
 8003cc0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
 8003cc4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 8003cc8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
 8003ccc:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	f844 2c08 	str.w	r2, [r4, #-8]
 8003cd6:	f843 2904 	str.w	r2, [r3], #-4
 8003cda:	60e2      	str	r2, [r4, #12]
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	60a2      	str	r2, [r4, #8]
 8003ce0:	6062      	str	r2, [r4, #4]
 8003ce2:	61a2      	str	r2, [r4, #24]
 8003ce4:	6162      	str	r2, [r4, #20]
 8003ce6:	6122      	str	r2, [r4, #16]
 8003ce8:	6262      	str	r2, [r4, #36]	; 0x24
 8003cea:	6222      	str	r2, [r4, #32]
 8003cec:	61e2      	str	r2, [r4, #28]
//ros node  ugvnode
static RosNode *testnode;

/* sensors */
#if IMU_FLAG
IMU imu_;
 8003cee:	4910      	ldr	r1, [pc, #64]	; (8003d30 <_GLOBAL__sub_I_nh_+0x1a4>)
 8003cf0:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <_GLOBAL__sub_I_nh_+0x1a8>)
 8003cf2:	f1a4 00f8 	sub.w	r0, r4, #248	; 0xf8
 8003cf6:	f003 fb46 	bl	8007386 <__aeabi_atexit>
#if GPS_FLAG
GPS gps_;
#endif
//
#if ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG
StateEstimate estimator_;
 8003cfa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003cfe:	f7ff f8c9 	bl	8002e94 <_ZN13StateEstimateC1Ev>
 8003d02:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003d06:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <_GLOBAL__sub_I_nh_+0x1a8>)
 8003d08:	490b      	ldr	r1, [pc, #44]	; (8003d38 <_GLOBAL__sub_I_nh_+0x1ac>)
 8003d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0e:	f003 bb3a 	b.w	8007386 <__aeabi_atexit>
 8003d12:	bf00      	nop
 8003d14:	20000540 	.word	0x20000540
 8003d18:	08009bf0 	.word	0x08009bf0
 8003d1c:	08009b90 	.word	0x08009b90
 8003d20:	000eaab0 	.word	0x000eaab0
 8003d24:	20000948 	.word	0x20000948
 8003d28:	08009bd8 	.word	0x08009bd8
 8003d2c:	0800a0f8 	.word	0x0800a0f8
 8003d30:	08002b09 	.word	0x08002b09
 8003d34:	20000000 	.word	0x20000000
 8003d38:	08002599 	.word	0x08002599

08003d3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d3c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8003d3e:	480f      	ldr	r0, [pc, #60]	; (8003d7c <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <MX_SPI1_Init+0x44>)
 8003d42:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d4a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d52:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d54:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d56:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d58:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d5a:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d5c:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d5e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d60:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8003d62:	230f      	movs	r3, #15
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d64:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 15;
 8003d66:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d68:	f002 f8f0 	bl	8005f4c <HAL_SPI_Init>
 8003d6c:	b128      	cbz	r0, 8003d7a <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003d6e:	2145      	movs	r1, #69	; 0x45
 8003d70:	4804      	ldr	r0, [pc, #16]	; (8003d84 <MX_SPI1_Init+0x48>)
  }

}
 8003d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003d76:	f7ff b929 	b.w	8002fcc <_Error_Handler>
 8003d7a:	bd08      	pop	{r3, pc}
 8003d7c:	20003bd4 	.word	0x20003bd4
 8003d80:	40013000 	.word	0x40013000
 8003d84:	08009f34 	.word	0x08009f34

08003d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d88:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8003d8a:	6802      	ldr	r2, [r0, #0]
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_SPI_MspInit+0x54>)
 8003d8e:	429a      	cmp	r2, r3
{
 8003d90:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 8003d92:	d120      	bne.n	8003dd6 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d94:	2400      	movs	r4, #0
 8003d96:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003d9a:	9400      	str	r4, [sp, #0]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d9e:	4810      	ldr	r0, [pc, #64]	; (8003de0 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003da0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dae:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003db0:	2338      	movs	r3, #56	; 0x38
 8003db2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db8:	2303      	movs	r3, #3
 8003dba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003dbe:	2305      	movs	r3, #5
 8003dc0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc2:	f001 fd47 	bl	8005854 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003dc6:	2023      	movs	r0, #35	; 0x23
 8003dc8:	4622      	mov	r2, r4
 8003dca:	4621      	mov	r1, r4
 8003dcc:	f001 f980 	bl	80050d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003dd0:	2023      	movs	r0, #35	; 0x23
 8003dd2:	f001 f9b1 	bl	8005138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003dd6:	b006      	add	sp, #24
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	bf00      	nop
 8003ddc:	40013000 	.word	0x40013000
 8003de0:	40020400 	.word	0x40020400

08003de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003de6:	2005      	movs	r0, #5
 8003de8:	f001 f960 	bl	80050ac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003dec:	2200      	movs	r2, #0
 8003dee:	4611      	mov	r1, r2
 8003df0:	f06f 000b 	mvn.w	r0, #11
 8003df4:	f001 f96c 	bl	80050d0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	f06f 000a 	mvn.w	r0, #10
 8003e00:	f001 f966 	bl	80050d0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003e04:	2200      	movs	r2, #0
 8003e06:	4611      	mov	r1, r2
 8003e08:	f06f 0009 	mvn.w	r0, #9
 8003e0c:	f001 f960 	bl	80050d0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003e10:	2200      	movs	r2, #0
 8003e12:	4611      	mov	r1, r2
 8003e14:	f06f 0004 	mvn.w	r0, #4
 8003e18:	f001 f95a 	bl	80050d0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4611      	mov	r1, r2
 8003e20:	f06f 0003 	mvn.w	r0, #3
 8003e24:	f001 f954 	bl	80050d0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	f06f 0001 	mvn.w	r0, #1
 8003e30:	f001 f94e 	bl	80050d0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 8003e34:	2201      	movs	r2, #1
 8003e36:	2100      	movs	r1, #0
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 8003e40:	f001 b946 	b.w	80050d0 <HAL_NVIC_SetPriority>

08003e44 <NMI_Handler>:
 8003e44:	4770      	bx	lr

08003e46 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003e46:	e7fe      	b.n	8003e46 <HardFault_Handler>

08003e48 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003e48:	e7fe      	b.n	8003e48 <MemManage_Handler>

08003e4a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003e4a:	e7fe      	b.n	8003e4a <BusFault_Handler>

08003e4c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003e4c:	e7fe      	b.n	8003e4c <UsageFault_Handler>

08003e4e <SVC_Handler>:
 8003e4e:	4770      	bx	lr

08003e50 <DebugMon_Handler>:
 8003e50:	4770      	bx	lr

08003e52 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003e52:	4770      	bx	lr

08003e54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e56:	f000 ff03 	bl	8004c60 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003e5e:	f001 b999 	b.w	8005194 <HAL_SYSTICK_IRQHandler>
	...

08003e64 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003e64:	4801      	ldr	r0, [pc, #4]	; (8003e6c <SPI1_IRQHandler+0x8>)
 8003e66:	f002 bafb 	b.w	8006460 <HAL_SPI_IRQHandler>
 8003e6a:	bf00      	nop
 8003e6c:	20003bd4 	.word	0x20003bd4

08003e70 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e70:	4801      	ldr	r0, [pc, #4]	; (8003e78 <USART1_IRQHandler+0x8>)
 8003e72:	f002 bde9 	b.w	8006a48 <HAL_UART_IRQHandler>
 8003e76:	bf00      	nop
 8003e78:	20003cec 	.word	0x20003cec

08003e7c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003e7c:	4801      	ldr	r0, [pc, #4]	; (8003e84 <DMA2_Stream2_IRQHandler+0x8>)
 8003e7e:	f001 ba71 	b.w	8005364 <HAL_DMA_IRQHandler>
 8003e82:	bf00      	nop
 8003e84:	20003c2c 	.word	0x20003c2c

08003e88 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e88:	4801      	ldr	r0, [pc, #4]	; (8003e90 <DMA2_Stream7_IRQHandler+0x8>)
 8003e8a:	f001 ba6b 	b.w	8005364 <HAL_DMA_IRQHandler>
 8003e8e:	bf00      	nop
 8003e90:	20003c8c 	.word	0x20003c8c

08003e94 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e94:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8003e96:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 921600;
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <MX_USART1_UART_Init+0x38>)
 8003e9a:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 8003e9e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ea2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ea8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003eaa:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003eac:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eae:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eb0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003eb2:	f002 fc75 	bl	80067a0 <HAL_UART_Init>
 8003eb6:	b128      	cbz	r0, 8003ec4 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003eb8:	2145      	movs	r1, #69	; 0x45
 8003eba:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <MX_USART1_UART_Init+0x3c>)
  }

}
 8003ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003ec0:	f7ff b884 	b.w	8002fcc <_Error_Handler>
 8003ec4:	bd08      	pop	{r3, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20003cec 	.word	0x20003cec
 8003ecc:	40011000 	.word	0x40011000
 8003ed0:	08009f47 	.word	0x08009f47

08003ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ed4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8003ed6:	6802      	ldr	r2, [r0, #0]
 8003ed8:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_UART_MspInit+0xe0>)
 8003eda:	429a      	cmp	r2, r3
{
 8003edc:	b087      	sub	sp, #28
 8003ede:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART1)
 8003ee0:	d165      	bne.n	8003fae <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ee2:	2500      	movs	r5, #0
 8003ee4:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003ee8:	9500      	str	r5, [sp, #0]
 8003eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eec:	4832      	ldr	r0, [pc, #200]	; (8003fb8 <HAL_UART_MspInit+0xe4>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003eee:	4c33      	ldr	r4, [pc, #204]	; (8003fbc <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ef0:	f042 0210 	orr.w	r2, r2, #16
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003efe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f02:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f08:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f0a:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f10:	2307      	movs	r3, #7
 8003f12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f14:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f16:	f001 fc9d 	bl	8005854 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_UART_MspInit+0xec>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f1c:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f1e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8003f22:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f2a:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f30:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f32:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003f36:	6223      	str	r3, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f38:	2304      	movs	r3, #4
 8003f3a:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f3c:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 8003f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f42:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f44:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f46:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003f48:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 8003f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003f4c:	6325      	str	r5, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f4e:	f001 f93b 	bl	80051c8 <HAL_DMA_Init>
 8003f52:	b118      	cbz	r0, 8003f5c <HAL_UART_MspInit+0x88>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003f54:	2172      	movs	r1, #114	; 0x72
 8003f56:	481b      	ldr	r0, [pc, #108]	; (8003fc4 <HAL_UART_MspInit+0xf0>)
 8003f58:	f7ff f838 	bl	8002fcc <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f5c:	6374      	str	r4, [r6, #52]	; 0x34
 8003f5e:	63a6      	str	r6, [r4, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003f60:	4c19      	ldr	r4, [pc, #100]	; (8003fc8 <HAL_UART_MspInit+0xf4>)
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_UART_MspInit+0xf8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f68:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8003f6c:	2740      	movs	r7, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f6e:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003f70:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f74:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003f78:	61e2      	str	r2, [r4, #28]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f7a:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f80:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f82:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f84:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f86:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f88:	6222      	str	r2, [r4, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f8a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f8c:	f001 f91c 	bl	80051c8 <HAL_DMA_Init>
 8003f90:	b118      	cbz	r0, 8003f9a <HAL_UART_MspInit+0xc6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003f92:	2184      	movs	r1, #132	; 0x84
 8003f94:	480b      	ldr	r0, [pc, #44]	; (8003fc4 <HAL_UART_MspInit+0xf0>)
 8003f96:	f7ff f819 	bl	8002fcc <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f9a:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003f9c:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f9e:	2025      	movs	r0, #37	; 0x25
 8003fa0:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003fa2:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fa4:	f001 f894 	bl	80050d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fa8:	2025      	movs	r0, #37	; 0x25
 8003faa:	f001 f8c5 	bl	8005138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003fae:	b007      	add	sp, #28
 8003fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	20003c2c 	.word	0x20003c2c
 8003fc0:	40026440 	.word	0x40026440
 8003fc4:	08009f47 	.word	0x08009f47
 8003fc8:	20003c8c 	.word	0x20003c8c
 8003fcc:	400264b8 	.word	0x400264b8

08003fd0 <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8003fd0:	7903      	ldrb	r3, [r0, #4]
 8003fd2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	4770      	bx	lr

08003fd8 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8003fd8:	780b      	ldrb	r3, [r1, #0]
 8003fda:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8003fdc:	2001      	movs	r0, #1
 8003fde:	4770      	bx	lr

08003fe0 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8003fe0:	4800      	ldr	r0, [pc, #0]	; (8003fe4 <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 8003fe2:	4770      	bx	lr
 8003fe4:	0800a005 	.word	0x0800a005

08003fe8 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8003fe8:	4800      	ldr	r0, [pc, #0]	; (8003fec <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 8003fea:	4770      	bx	lr
 8003fec:	08009fe4 	.word	0x08009fe4

08003ff0 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE15getEndpointTypeEv>:
      virtual int getEndpointType(){ return endpoint_; }
 8003ff0:	6a00      	ldr	r0, [r0, #32]
 8003ff2:	4770      	bx	lr

08003ff4 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 8003ff4:	4800      	ldr	r0, [pc, #0]	; (8003ff8 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv+0x4>)
 8003ff6:	4770      	bx	lr
 8003ff8:	0800a005 	.word	0x0800a005

08003ffc <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8003ffc:	4800      	ldr	r0, [pc, #0]	; (8004000 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev+0x4>)
 8003ffe:	4770      	bx	lr
 8004000:	08009fe4 	.word	0x08009fe4

08004004 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh>:
      virtual void callback(unsigned char* data){
 8004004:	b410      	push	{r4}
      { return (__p->*_M_f)(__x); }
 8004006:	69c2      	ldr	r2, [r0, #28]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8004008:	780b      	ldrb	r3, [r1, #0]
        this->fun_obj_(obj_, msg);
 800400a:	6944      	ldr	r4, [r0, #20]
 800400c:	7403      	strb	r3, [r0, #16]
 800400e:	f012 0f01 	tst.w	r2, #1
 8004012:	ea4f 0262 	mov.w	r2, r2, asr #1
 8004016:	6983      	ldr	r3, [r0, #24]
 8004018:	f100 010c 	add.w	r1, r0, #12
 800401c:	bf1c      	itt	ne
 800401e:	58a0      	ldrne	r0, [r4, r2]
 8004020:	58c3      	ldrne	r3, [r0, r3]
 8004022:	18a0      	adds	r0, r4, r2
      }
 8004024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004028:	4718      	bx	r3
	...

0800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800402c:	f100 0308 	add.w	r3, r0, #8
      /**
       *  @brief  Construct string as copy of a C string.
       *  @param  __s  Source C string.
       *  @param  __a  Allocator to use (default is default allocator).
       */
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8004030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004032:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
 8004034:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 8004036:	460d      	mov	r5, r1
 8004038:	b1e1      	cbz	r1, 8004074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25+0x48>
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }
 800403a:	4608      	mov	r0, r1
 800403c:	f7fc f8ee 	bl	800021c <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 8004040:	280f      	cmp	r0, #15
 8004042:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004046:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 8004048:	d907      	bls.n	800405a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800404a:	2200      	movs	r2, #0
 800404c:	a901      	add	r1, sp, #4
 800404e:	4620      	mov	r0, r4
 8004050:	f003 fd92 	bl	8007b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8004054:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 8004056:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8004058:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800405a:	4632      	mov	r2, r6
 800405c:	4629      	mov	r1, r5
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	f003 fdb5 	bl	8007bce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8004064:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
 8004066:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 8004068:	6063      	str	r3, [r4, #4]
 800406a:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 800406c:	4620      	mov	r0, r4
 800406e:	54d1      	strb	r1, [r2, r3]
 8004070:	b002      	add	sp, #8
 8004072:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25+0x50>)
 8004076:	f003 fdaf 	bl	8007bd8 <_ZSt19__throw_logic_errorPKc>
 800407a:	bf00      	nop
 800407c:	0800a014 	.word	0x0800a014

08004080 <_ZN3IMU13getCalibratedEv>:
	else LED0_H;
}

bool IMU::getCalibrated()
{
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 8004080:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8004084:	b943      	cbnz	r3, 8004098 <_ZN3IMU13getCalibratedEv+0x18>
 8004086:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800408a:	b92a      	cbnz	r2, 8004098 <_ZN3IMU13getCalibratedEv+0x18>
 800408c:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8004090:	fab0 f080 	clz	r0, r0
 8004094:	0940      	lsrs	r0, r0, #5
 8004096:	4770      	bx	lr
	else return false;
 8004098:	2000      	movs	r0, #0
 800409a:	4770      	bx	lr

0800409c <_ZN3IMU14writeCalibDataEv>:
		this->debugPrint(std::string("[ERROR]Internal flashed calibration offsets include NaN value."));
	}
}

void IMU::writeCalibData()
{
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	4604      	mov	r4, r0
	HAL_StatusTypeDef r;

	r = HAL_FLASH_Unlock();
 80040a2:	f001 fa97 	bl	80055d4 <HAL_FLASH_Unlock>
	if( r != HAL_OK ) return;
 80040a6:	bb50      	cbnz	r0, 80040fe <_ZN3IMU14writeCalibDataEv+0x62>

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError = 0;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
	EraseInitStruct.Sector = CALIB_DATA_SECTOR ;
 80040a8:	2304      	movs	r3, #4
 80040aa:	9303      	str	r3, [sp, #12]
	EraseInitStruct.NbSectors = 1;
 80040ac:	2301      	movs	r3, #1
	uint32_t SectorError = 0;
 80040ae:	9000      	str	r0, [sp, #0]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80040b0:	9001      	str	r0, [sp, #4]
	EraseInitStruct.NbSectors = 1;
 80040b2:	9304      	str	r3, [sp, #16]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;

	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80040b4:	4669      	mov	r1, sp
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80040b6:	2302      	movs	r3, #2
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80040b8:	a801      	add	r0, sp, #4
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80040ba:	9305      	str	r3, [sp, #20]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80040bc:	f001 fb7c 	bl	80057b8 <HAL_FLASHEx_Erase>
	if ( r != HAL_OK )
 80040c0:	b9e8      	cbnz	r0, 80040fe <_ZN3IMU14writeCalibDataEv+0x62>
 80040c2:	4d10      	ldr	r5, [pc, #64]	; (8004104 <_ZN3IMU14writeCalibDataEv+0x68>)
		return;

	for(int i = 0; i < 3; i++)
 80040c4:	4e10      	ldr	r6, [pc, #64]	; (8004108 <_ZN3IMU14writeCalibDataEv+0x6c>)
 80040c6:	34e4      	adds	r4, #228	; 0xe4
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i, (*(__IO uint32_t*)(&this->acc_offset_[i])));
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	4629      	mov	r1, r5
 80040cc:	2300      	movs	r3, #0
 80040ce:	2002      	movs	r0, #2
 80040d0:	f001 fac6 	bl	8005660 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_GYRO_ADDRESS + 4 * i, (*(__IO uint32_t*)(&this->gyro_offset_[i])));
 80040d4:	68e2      	ldr	r2, [r4, #12]
 80040d6:	f105 010c 	add.w	r1, r5, #12
 80040da:	2300      	movs	r3, #0
 80040dc:	2002      	movs	r0, #2
 80040de:	f001 fabf 	bl	8005660 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i, (*(__IO uint32_t*)(&this->mag_offset_[i])));
 80040e2:	69a2      	ldr	r2, [r4, #24]
 80040e4:	f105 0118 	add.w	r1, r5, #24
 80040e8:	2300      	movs	r3, #0
 80040ea:	2002      	movs	r0, #2
 80040ec:	3504      	adds	r5, #4
 80040ee:	f001 fab7 	bl	8005660 <HAL_FLASH_Program>
	for(int i = 0; i < 3; i++)
 80040f2:	42b5      	cmp	r5, r6
 80040f4:	f104 0404 	add.w	r4, r4, #4
 80040f8:	d1e6      	bne.n	80040c8 <_ZN3IMU14writeCalibDataEv+0x2c>
	}

	r = HAL_FLASH_Lock();
 80040fa:	f001 fa7d 	bl	80055f8 <HAL_FLASH_Lock>
}
 80040fe:	b006      	add	sp, #24
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	bf00      	nop
 8004104:	08010000 	.word	0x08010000
 8004108:	0801000c 	.word	0x0801000c

0800410c <_ZN3IMU8mpuWriteEhh>:



void IMU::mpuWrite(uint8_t address, uint8_t value)
{
 800410c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	IMU_SPI_CS_L;
 800410e:	4c11      	ldr	r4, [pc, #68]	; (8004154 <_ZN3IMU8mpuWriteEhh+0x48>)
{
 8004110:	f88d 1007 	strb.w	r1, [sp, #7]
 8004114:	4605      	mov	r5, r0
 8004116:	f88d 2006 	strb.w	r2, [sp, #6]
	IMU_SPI_CS_L;
 800411a:	4620      	mov	r0, r4
 800411c:	2200      	movs	r2, #0
 800411e:	2140      	movs	r1, #64	; 0x40
 8004120:	f001 fc52 	bl	80059c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 8004124:	f10d 0107 	add.w	r1, sp, #7
 8004128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412c:	2201      	movs	r2, #1
 800412e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004130:	f001 ff49 	bl	8005fc6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 8004134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004138:	f10d 0106 	add.w	r1, sp, #6
 800413c:	2201      	movs	r2, #1
 800413e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004140:	f001 ff41 	bl	8005fc6 <HAL_SPI_Transmit>
	IMU_SPI_CS_H;
 8004144:	2201      	movs	r2, #1
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	4620      	mov	r0, r4
 800414a:	f001 fc3d 	bl	80059c8 <HAL_GPIO_WritePin>
}
 800414e:	b003      	add	sp, #12
 8004150:	bd30      	pop	{r4, r5, pc}
 8004152:	bf00      	nop
 8004154:	40020400 	.word	0x40020400

08004158 <_ZN3IMU8gyroInitEv>:
	return temp;
}


void IMU::gyroInit(void)
{
 8004158:	b510      	push	{r4, lr}
 800415a:	4604      	mov	r4, r0
	HAL_Delay(100);
 800415c:	2064      	movs	r0, #100	; 0x64
 800415e:	f000 fd8d 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x6B, 0x80);             //PWR_MGMT_1    -- DEVICE_RESET 1
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	216b      	movs	r1, #107	; 0x6b
 8004166:	4620      	mov	r0, r4
 8004168:	f7ff ffd0 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800416c:	200a      	movs	r0, #10
 800416e:	f000 fd85 	bl	8004c7c <HAL_Delay>
	//mpuWrite( 0x6B, 0x01);             //PWR_MGMT_1    -- SLEEP 0; CYCLE 0; TEMP_DIS 0; CLKSEL 3 (PLL with Z Gyro reference)
	HAL_Delay(1); //very important!, some duration for process the setting
 8004172:	2001      	movs	r0, #1
 8004174:	f000 fd82 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x6A, 0x10);             //disable i2c communication
 8004178:	2210      	movs	r2, #16
 800417a:	216a      	movs	r1, #106	; 0x6a
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff ffc5 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 8004182:	2001      	movs	r0, #1
 8004184:	f000 fd7a 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 8004188:	2202      	movs	r2, #2
 800418a:	211a      	movs	r1, #26
 800418c:	4620      	mov	r0, r4
 800418e:	f7ff ffbd 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 8004192:	2001      	movs	r0, #1
 8004194:	f000 fd72 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 8004198:	2218      	movs	r2, #24
 800419a:	211b      	movs	r1, #27
 800419c:	4620      	mov	r0, r4
 800419e:	f7ff ffb5 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10); //very importnat! between gyro and acc
 80041a2:	200a      	movs	r0, #10
 80041a4:	f000 fd6a 	bl	8004c7c <HAL_Delay>

	calibrate_gyro_ = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 80041b4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80041b8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80041bc:	bd10      	pop	{r4, pc}

080041be <_ZN3IMU7accInitEv>:

	raw_gyro_p_.zero();
}

void IMU::accInit (void) {
 80041be:	b510      	push	{r4, lr}
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 80041c0:	2210      	movs	r2, #16
 80041c2:	211c      	movs	r1, #28
void IMU::accInit (void) {
 80041c4:	4604      	mov	r4, r0
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 80041c6:	f7ff ffa1 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80041ca:	2001      	movs	r0, #1
 80041cc:	f000 fd56 	bl	8004c7c <HAL_Delay>
	//old: acceleration bandwidth is 460Hz
	mpuWrite( 0x1D, ACC_DLPF_CFG);
 80041d0:	2203      	movs	r2, #3
 80041d2:	211d      	movs	r1, #29
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff ff99 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 80041da:	200a      	movs	r0, #10
 80041dc:	f000 fd4e 	bl	8004c7c <HAL_Delay>
	calibrate_acc_ = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 80041ec:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80041f0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 80041f4:	bd10      	pop	{r4, pc}

080041f6 <_ZN3IMU7magInitEv>:
	raw_acc_p_.zero();
}


void IMU::magInit(void)
{
 80041f6:	b510      	push	{r4, lr}
 80041f8:	4604      	mov	r4, r0
	HAL_Delay(10);
 80041fa:	200a      	movs	r0, #10
 80041fc:	f000 fd3e 	bl	8004c7c <HAL_Delay>
	//at this stage, the MAG is configured via the original MAG init function in I2C bypass mode
	//now we configure MPU as a I2C Master device to handle the MAG via the I2C AUX port (done here for HMC5883)
	mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 8004200:	2220      	movs	r2, #32
 8004202:	216a      	movs	r1, #106	; 0x6a
 8004204:	4620      	mov	r0, r4
 8004206:	f7ff ff81 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800420a:	200a      	movs	r0, #10
 800420c:	f000 fd36 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 8004210:	2200      	movs	r2, #0
 8004212:	2137      	movs	r1, #55	; 0x37
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff ff79 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800421a:	2001      	movs	r0, #1
 800421c:	f000 fd2e 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 8004220:	220d      	movs	r2, #13
 8004222:	2124      	movs	r1, #36	; 0x24
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff ff71 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800422a:	2001      	movs	r0, #1
 800422c:	f000 fd26 	bl	8004c7c <HAL_Delay>

	//write mode
	mpuWrite( 0x25, MAG_ADDRESS);
 8004230:	220c      	movs	r2, #12
 8004232:	2125      	movs	r1, #37	; 0x25
 8004234:	4620      	mov	r0, r4
 8004236:	f7ff ff69 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800423a:	2001      	movs	r0, #1
 800423c:	f000 fd1e 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x26, 0x0B);
 8004240:	220b      	movs	r2, #11
 8004242:	2126      	movs	r1, #38	; 0x26
 8004244:	4620      	mov	r0, r4
 8004246:	f7ff ff61 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800424a:	2001      	movs	r0, #1
 800424c:	f000 fd16 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x63, 0x01);
 8004250:	2201      	movs	r2, #1
 8004252:	2163      	movs	r1, #99	; 0x63
 8004254:	4620      	mov	r0, r4
 8004256:	f7ff ff59 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800425a:	2001      	movs	r0, #1
 800425c:	f000 fd0e 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 8004260:	2281      	movs	r2, #129	; 0x81
 8004262:	2127      	movs	r1, #39	; 0x27
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff ff51 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800426a:	2001      	movs	r0, #1
 800426c:	f000 fd06 	bl	8004c7c <HAL_Delay>

	mpuWrite( 0x26, 0x0A);
 8004270:	220a      	movs	r2, #10
 8004272:	2126      	movs	r1, #38	; 0x26
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff ff49 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800427a:	2001      	movs	r0, #1
 800427c:	f000 fcfe 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x63, 0x16);
 8004280:	2216      	movs	r2, #22
 8004282:	2163      	movs	r1, #99	; 0x63
 8004284:	4620      	mov	r0, r4
 8004286:	f7ff ff41 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800428a:	2001      	movs	r0, #1
 800428c:	f000 fcf6 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 8004290:	2281      	movs	r2, #129	; 0x81
 8004292:	2127      	movs	r1, #39	; 0x27
 8004294:	4620      	mov	r0, r4
 8004296:	f7ff ff39 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800429a:	2001      	movs	r0, #1
 800429c:	f000 fcee 	bl	8004c7c <HAL_Delay>

	//read mode
	mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 80042a0:	228c      	movs	r2, #140	; 0x8c
 80042a2:	2125      	movs	r1, #37	; 0x25
 80042a4:	4620      	mov	r0, r4
 80042a6:	f7ff ff31 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f000 fce6 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 80042b0:	2203      	movs	r2, #3
 80042b2:	2126      	movs	r1, #38	; 0x26
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff ff29 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f000 fcde 	bl	8004c7c <HAL_Delay>
	mpuWrite( 0x27, 0x87);
 80042c0:	2287      	movs	r2, #135	; 0x87
 80042c2:	2127      	movs	r1, #39	; 0x27
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff ff21 	bl	800410c <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f000 fcd6 	bl	8004c7c <HAL_Delay>

	calibrate_mag_ = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80042d6:	bd10      	pop	{r4, pc}

080042d8 <_ZN3IMU4readEv>:
}

void IMU::read()
{
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	b088      	sub	sp, #32
	uint8_t adc_gyro[6];
	uint8_t adc_acc[6];
	uint8_t adc_mag[7];

	uint8_t t_data[1];
	t_data[0] = 0x43 | 0x80;
 80042dc:	ad08      	add	r5, sp, #32
 80042de:	23c3      	movs	r3, #195	; 0xc3
{
 80042e0:	4604      	mov	r4, r0
	t_data[0] = 0x43 | 0x80;
 80042e2:	f805 3d1c 	strb.w	r3, [r5, #-28]!

	IMU_SPI_CS_L;
 80042e6:	2200      	movs	r2, #0
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	489c      	ldr	r0, [pc, #624]	; (800455c <_ZN3IMU4readEv+0x284>)
 80042ec:	f001 fb6c 	bl	80059c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 80042f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042f4:	2201      	movs	r2, #1
 80042f6:	4629      	mov	r1, r5
 80042f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80042fa:	f001 fe64 	bl	8005fc6 <HAL_SPI_Transmit>
	r = HAL_SPI_Receive(hspi_, adc_gyro, 6, 1000);
 80042fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004302:	2206      	movs	r2, #6
 8004304:	a902      	add	r1, sp, #8
 8004306:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004308:	f002 f809 	bl	800631e <HAL_SPI_Receive>
	if( r == HAL_OK ) {
 800430c:	2800      	cmp	r0, #0
 800430e:	f040 811e 	bne.w	800454e <_ZN3IMU4readEv+0x276>
		SPI_connection_flag_ = true;
 8004312:	2301      	movs	r3, #1
	} else {
		SPI_connection_flag_ = false;
 8004314:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	}
	IMU_SPI_CS_H;
 8004318:	2201      	movs	r2, #1
 800431a:	2140      	movs	r1, #64	; 0x40
 800431c:	488f      	ldr	r0, [pc, #572]	; (800455c <_ZN3IMU4readEv+0x284>)
 800431e:	f001 fb53 	bl	80059c8 <HAL_GPIO_WritePin>

	/* we need add some delay between each sensor reading */
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004322:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004326:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800432a:	ed9f 5a8d 	vldr	s10, [pc, #564]	; 8004560 <_ZN3IMU4readEv+0x288>
 800432e:	eddf 5a8d 	vldr	s11, [pc, #564]	; 8004564 <_ZN3IMU4readEv+0x28c>
 8004332:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8004568 <_ZN3IMU4readEv+0x290>
 8004336:	eddf 6a8d 	vldr	s13, [pc, #564]	; 800456c <_ZN3IMU4readEv+0x294>
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;

	t_data[0] = 0x3B | 0x80;
	IMU_SPI_CS_L;
 800433a:	4888      	ldr	r0, [pc, #544]	; (800455c <_ZN3IMU4readEv+0x284>)
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800433c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004340:	b21b      	sxth	r3, r3
 8004342:	ee07 3a10 	vmov	s14, r3
 8004346:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800434a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800434e:	f89d 300b 	ldrb.w	r3, [sp, #11]
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004352:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800435a:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800435e:	b21b      	sxth	r3, r3
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004360:	f89d 200c 	ldrb.w	r2, [sp, #12]
	IMU_SPI_CS_L;
 8004364:	2140      	movs	r1, #64	; 0x40
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004366:	ee67 7a86 	vmul.f32	s15, s15, s12
 800436a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800436e:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004372:	ee07 3a10 	vmov	s14, r3
 8004376:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800437a:	f89d 300d 	ldrb.w	r3, [sp, #13]
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800437e:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004386:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800438a:	b21b      	sxth	r3, r3
	IMU_SPI_CS_L;
 800438c:	2200      	movs	r2, #0
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800438e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004392:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800439e:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80043a2:	ee67 7a85 	vmul.f32	s15, s15, s10
	t_data[0] = 0x3B | 0x80;
 80043a6:	23bb      	movs	r3, #187	; 0xbb
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80043a8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
	t_data[0] = 0x3B | 0x80;
 80043ac:	f88d 3004 	strb.w	r3, [sp, #4]
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80043b0:	ee67 7a06 	vmul.f32	s15, s14, s12
 80043b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043b8:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
	IMU_SPI_CS_L;
 80043bc:	f001 fb04 	bl	80059c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 80043c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c4:	2201      	movs	r2, #1
 80043c6:	4629      	mov	r1, r5
 80043c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80043ca:	f001 fdfc 	bl	8005fc6 <HAL_SPI_Transmit>
	r = HAL_SPI_Receive(hspi_, adc_acc, 6, 1000);
 80043ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043d2:	2206      	movs	r2, #6
 80043d4:	a904      	add	r1, sp, #16
 80043d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80043d8:	f001 ffa1 	bl	800631e <HAL_SPI_Receive>
	if( r == HAL_OK ) {
 80043dc:	2800      	cmp	r0, #0
 80043de:	f040 80b8 	bne.w	8004552 <_ZN3IMU4readEv+0x27a>
		SPI_connection_flag_ = true;
 80043e2:	2301      	movs	r3, #1
	} else {
		SPI_connection_flag_ = false;
 80043e4:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	}
	IMU_SPI_CS_H;
 80043e8:	2201      	movs	r2, #1
 80043ea:	2140      	movs	r1, #64	; 0x40
 80043ec:	485b      	ldr	r0, [pc, #364]	; (800455c <_ZN3IMU4readEv+0x284>)
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;


	if(i == MAG_PRESCALER)
 80043ee:	4e60      	ldr	r6, [pc, #384]	; (8004570 <_ZN3IMU4readEv+0x298>)
	IMU_SPI_CS_H;
 80043f0:	f001 faea 	bl	80059c8 <HAL_GPIO_WritePin>
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 80043f4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80043f8:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80043fc:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8004574 <_ZN3IMU4readEv+0x29c>
 8004400:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004578 <_ZN3IMU4readEv+0x2a0>
 8004404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004408:	b21b      	sxth	r3, r3
 800440a:	ee07 3a10 	vmov	s14, r3
 800440e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8004412:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8004416:	f89d 3013 	ldrb.w	r3, [sp, #19]
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 800441a:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 800441e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8004422:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8004426:	b21b      	sxth	r3, r3
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8004428:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 800442c:	f89d 2014 	ldrb.w	r2, [sp, #20]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8004430:	ee07 3a10 	vmov	s14, r3
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8004434:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800443c:	b21b      	sxth	r3, r3
 800443e:	ee07 3a90 	vmov	s15, r3
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8004442:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8004446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 800444a:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 800444e:	ee67 7a86 	vmul.f32	s15, s15, s12
	if(i == MAG_PRESCALER)
 8004452:	6833      	ldr	r3, [r6, #0]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8004454:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8004458:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if(i == MAG_PRESCALER)
 800445c:	2b04      	cmp	r3, #4
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 800445e:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8004462:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
	if(i == MAG_PRESCALER)
 8004466:	d16a      	bne.n	800453e <_ZN3IMU4readEv+0x266>
	{
		//mag is in low speed
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8004468:	6b23      	ldr	r3, [r4, #48]	; 0x30
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
		t_data[0] = 0x49 | 0x80;
		IMU_SPI_CS_L;
 800446a:	483c      	ldr	r0, [pc, #240]	; (800455c <_ZN3IMU4readEv+0x284>)
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8004474:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800447c:	601a      	str	r2, [r3, #0]
		IMU_SPI_CS_L;
 800447e:	2140      	movs	r1, #64	; 0x40
		t_data[0] = 0x49 | 0x80;
 8004480:	23c9      	movs	r3, #201	; 0xc9
		IMU_SPI_CS_L;
 8004482:	2200      	movs	r2, #0
		t_data[0] = 0x49 | 0x80;
 8004484:	f88d 3004 	strb.w	r3, [sp, #4]
		IMU_SPI_CS_L;
 8004488:	f001 fa9e 	bl	80059c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800448c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004490:	2201      	movs	r2, #1
 8004492:	4629      	mov	r1, r5
 8004494:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004496:	f001 fd96 	bl	8005fc6 <HAL_SPI_Transmit>
		r = HAL_SPI_Receive(hspi_, adc_mag, 7, 1000);
 800449a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800449e:	2207      	movs	r2, #7
 80044a0:	a906      	add	r1, sp, #24
 80044a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80044a4:	f001 ff3b 	bl	800631e <HAL_SPI_Receive>
		if( r == HAL_OK ) {
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d154      	bne.n	8004556 <_ZN3IMU4readEv+0x27e>
			SPI_connection_flag_ = true;
 80044ac:	2301      	movs	r3, #1
		} else {
			SPI_connection_flag_ = false;
 80044ae:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
		}
		IMU_SPI_CS_H;
 80044b2:	2201      	movs	r2, #1
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	4829      	ldr	r0, [pc, #164]	; (800455c <_ZN3IMU4readEv+0x284>)
 80044b8:	f001 fa86 	bl	80059c8 <HAL_GPIO_WritePin>

		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 80044bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz

		//uT(10e-6 T)
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 80044be:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800457c <_ZN3IMU4readEv+0x2a4>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 80044c2:	681b      	ldr	r3, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 80044c4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8004580 <_ZN3IMU4readEv+0x2a8>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80044ce:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	f042 0210 	orr.w	r2, r2, #16
 80044d6:	601a      	str	r2, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 80044d8:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80044dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80044e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044e4:	b21b      	sxth	r3, r3
 80044e6:	ee07 3a10 	vmov	s14, r3
 80044ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 80044ee:	f89d 201b 	ldrb.w	r2, [sp, #27]
 80044f2:	f89d 301a 	ldrb.w	r3, [sp, #26]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 80044f6:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 80044fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 80044fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8004502:	b21b      	sxth	r3, r3
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8004504:	f89d 201d 	ldrb.w	r2, [sp, #29]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8004508:	ee07 3a10 	vmov	s14, r3
 800450c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8004510:	edc4 7a1b 	vstr	s15, [r4, #108]	; 0x6c
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8004514:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8004518:	f89d 301c 	ldrb.w	r3, [sp, #28]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 800451c:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8004520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004524:	b21b      	sxth	r3, r3
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8004526:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004532:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004536:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800453a:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
	}
	if(i == MAG_PRESCALER) i =0;
 800453e:	6833      	ldr	r3, [r6, #0]
 8004540:	2b04      	cmp	r3, #4
 8004542:	bf0c      	ite	eq
 8004544:	2300      	moveq	r3, #0
	else i++;
 8004546:	3301      	addne	r3, #1
 8004548:	6033      	str	r3, [r6, #0]

}
 800454a:	b008      	add	sp, #32
 800454c:	bd70      	pop	{r4, r5, r6, pc}
		SPI_connection_flag_ = false;
 800454e:	2300      	movs	r3, #0
 8004550:	e6e0      	b.n	8004314 <_ZN3IMU4readEv+0x3c>
		SPI_connection_flag_ = false;
 8004552:	2300      	movs	r3, #0
 8004554:	e746      	b.n	80043e4 <_ZN3IMU4readEv+0x10c>
			SPI_connection_flag_ = false;
 8004556:	2300      	movs	r3, #0
 8004558:	e7a9      	b.n	80044ae <_ZN3IMU4readEv+0x1d6>
 800455a:	bf00      	nop
 800455c:	40020400 	.word	0x40020400
 8004560:	44fa0000 	.word	0x44fa0000
 8004564:	46fffe00 	.word	0x46fffe00
 8004568:	40490fdb 	.word	0x40490fdb
 800456c:	43340000 	.word	0x43340000
 8004570:	20000a70 	.word	0x20000a70
 8004574:	39800000 	.word	0x39800000
 8004578:	411ce80a 	.word	0x411ce80a
 800457c:	45998000 	.word	0x45998000
 8004580:	46fff000 	.word	0x46fff000

08004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	uint8_t ans = this->getIMUConfiguration();
	return ( ans >> 6 ) % 0b10;
}

void IMU::debugPrint(const std::string& message)
{
 8004584:	b573      	push	{r0, r1, r4, r5, r6, lr}
	imu_debug_msg_.stamp = nh_->now();
 8004586:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
 8004588:	4604      	mov	r4, r0
 800458a:	460e      	mov	r6, r1
  uint32_t time(){return HAL_GetTick();}
 800458c:	f000 fb70 	bl	8004c70 <HAL_GetTick>
      current_time.sec = ms/1000 + sec_offset;
 8004590:	696a      	ldr	r2, [r5, #20]
 8004592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004596:	fbb0 f3f1 	udiv	r3, r0, r1
 800459a:	441a      	add	r2, r3
 800459c:	9200      	str	r2, [sp, #0]
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 800459e:	fb01 0313 	mls	r3, r1, r3, r0
 80045a2:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
 80045a4:	69a8      	ldr	r0, [r5, #24]
      normalizeSecNSec(current_time.sec, current_time.nsec);
 80045a6:	a901      	add	r1, sp, #4
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 80045a8:	fb02 0303 	mla	r3, r2, r3, r0
      normalizeSecNSec(current_time.sec, current_time.nsec);
 80045ac:	4668      	mov	r0, sp
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 80045ae:	9301      	str	r3, [sp, #4]
      normalizeSecNSec(current_time.sec, current_time.nsec);
 80045b0:	f000 faf4 	bl	8004b9c <_ZN3ros16normalizeSecNSecERmS0_>
	imu_debug_msg_.stamp = nh_->now();
 80045b4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80045b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80045c0:	6833      	ldr	r3, [r6, #0]
	imu_debug_msg_.data = message.c_str();
 80045c2:	64e3      	str	r3, [r4, #76]	; 0x4c
	imu_debug_pub_->publish(&imu_debug_msg_);
 80045c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 80045c6:	68d8      	ldr	r0, [r3, #12]
 80045c8:	6899      	ldr	r1, [r3, #8]
 80045ca:	6802      	ldr	r2, [r0, #0]
 80045cc:	6815      	ldr	r5, [r2, #0]
 80045ce:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80045d2:	47a8      	blx	r5
}
 80045d4:	b002      	add	sp, #8
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	000f4240 	.word	0x000f4240

080045dc <_ZN3IMU13readCalibDataEv>:
{
 80045dc:	b510      	push	{r4, lr}
 80045de:	4604      	mov	r4, r0
 80045e0:	b086      	sub	sp, #24
	status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045e6:	f001 f811 	bl	800560c <FLASH_WaitForLastOperation>
	if(status == HAL_OK)
 80045ea:	bb40      	cbnz	r0, 800463e <_ZN3IMU13readCalibDataEv+0x62>
			this->acc_offset_[i] = (*(float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 80045ec:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <_ZN3IMU13readCalibDataEv+0x108>)
		FLASH->CR &= (~FLASH_CR_PG);
 80045ee:	4a3e      	ldr	r2, [pc, #248]	; (80046e8 <_ZN3IMU13readCalibDataEv+0x10c>)
			this->acc_offset_[i] = (*(float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
			this->gyro_offset_[i]= (*(float*)(CALIB_DATA_ADDRESS + CALIB_GYRO_ADDRESS + 4 * i));
 80045f6:	4b3d      	ldr	r3, [pc, #244]	; (80046ec <_ZN3IMU13readCalibDataEv+0x110>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
			this->mag_offset_[i] = (*(float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 80045fe:	4b3c      	ldr	r3, [pc, #240]	; (80046f0 <_ZN3IMU13readCalibDataEv+0x114>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
			this->acc_offset_[i] = (*(float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8004606:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <_ZN3IMU13readCalibDataEv+0x118>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			this->gyro_offset_[i]= (*(float*)(CALIB_DATA_ADDRESS + CALIB_GYRO_ADDRESS + 4 * i));
 800460e:	4b3a      	ldr	r3, [pc, #232]	; (80046f8 <_ZN3IMU13readCalibDataEv+0x11c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
			this->mag_offset_[i] = (*(float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 8004616:	4b39      	ldr	r3, [pc, #228]	; (80046fc <_ZN3IMU13readCalibDataEv+0x120>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			this->acc_offset_[i] = (*(float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <_ZN3IMU13readCalibDataEv+0x124>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			this->gyro_offset_[i]= (*(float*)(CALIB_DATA_ADDRESS + CALIB_GYRO_ADDRESS + 4 * i));
 8004626:	4b37      	ldr	r3, [pc, #220]	; (8004704 <_ZN3IMU13readCalibDataEv+0x128>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
			this->mag_offset_[i] = (*(float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 800462e:	4b36      	ldr	r3, [pc, #216]	; (8004708 <_ZN3IMU13readCalibDataEv+0x12c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		FLASH->CR &= (~FLASH_CR_PG);
 8004636:	6913      	ldr	r3, [r2, #16]
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6113      	str	r3, [r2, #16]
	if( this->acc_offset_[0] != this->acc_offset_[0]   ||
 800463e:	edd4 7a39 	vldr	s15, [r4, #228]	; 0xe4
            this->mag_offset_[1] != this->mag_offset_[1]   ||
 8004642:	eef4 7a67 	vcmp.f32	s15, s15
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	d142      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->acc_offset_[1] != this->acc_offset_[1]   ||
 800464c:	edd4 7a3a 	vldr	s15, [r4, #232]	; 0xe8
	if( this->acc_offset_[0] != this->acc_offset_[0]   ||
 8004650:	eef4 7a67 	vcmp.f32	s15, s15
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	d13b      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->acc_offset_[2] != this->acc_offset_[2]   ||
 800465a:	edd4 7a3b 	vldr	s15, [r4, #236]	; 0xec
            this->acc_offset_[1] != this->acc_offset_[1]   ||
 800465e:	eef4 7a67 	vcmp.f32	s15, s15
 8004662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004666:	d134      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->gyro_offset_[0] != this->gyro_offset_[0] ||
 8004668:	edd4 7a3c 	vldr	s15, [r4, #240]	; 0xf0
            this->acc_offset_[2] != this->acc_offset_[2]   ||
 800466c:	eef4 7a67 	vcmp.f32	s15, s15
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	d12d      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->gyro_offset_[1] != this->gyro_offset_[1] ||
 8004676:	edd4 7a3d 	vldr	s15, [r4, #244]	; 0xf4
            this->gyro_offset_[0] != this->gyro_offset_[0] ||
 800467a:	eef4 7a67 	vcmp.f32	s15, s15
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	d126      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->gyro_offset_[2] != this->gyro_offset_[2] ||
 8004684:	edd4 7a3e 	vldr	s15, [r4, #248]	; 0xf8
            this->gyro_offset_[1] != this->gyro_offset_[1] ||
 8004688:	eef4 7a67 	vcmp.f32	s15, s15
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	d11f      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->mag_offset_[0] != this->mag_offset_[0]   ||
 8004692:	edd4 7a3f 	vldr	s15, [r4, #252]	; 0xfc
            this->gyro_offset_[2] != this->gyro_offset_[2] ||
 8004696:	eef4 7a67 	vcmp.f32	s15, s15
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	d118      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->mag_offset_[1] != this->mag_offset_[1]   ||
 80046a0:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
            this->mag_offset_[0] != this->mag_offset_[0]   ||
 80046a4:	eef4 7a67 	vcmp.f32	s15, s15
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d111      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
            this->mag_offset_[2] != this->mag_offset_[2] ) {
 80046ae:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
            this->mag_offset_[1] != this->mag_offset_[1]   ||
 80046b2:	eef4 7a67 	vcmp.f32	s15, s15
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d10a      	bne.n	80046d2 <_ZN3IMU13readCalibDataEv+0xf6>
}
 80046bc:	b006      	add	sp, #24
 80046be:	bd10      	pop	{r4, pc}

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 80046c0:	4668      	mov	r0, sp
 80046c2:	f003 fa73 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80046c6:	e7f9      	b.n	80046bc <_ZN3IMU13readCalibDataEv+0xe0>
 80046c8:	4668      	mov	r0, sp
 80046ca:	f003 fa6f 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80046ce:	f002 fe70 	bl	80073b2 <__cxa_end_cleanup>
		this->debugPrint(std::string("[ERROR]Internal flashed calibration offsets include NaN value."));
 80046d2:	490e      	ldr	r1, [pc, #56]	; (800470c <_ZN3IMU13readCalibDataEv+0x130>)
 80046d4:	4668      	mov	r0, sp
 80046d6:	f7ff fca9 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 80046da:	4669      	mov	r1, sp
 80046dc:	4620      	mov	r0, r4
 80046de:	f7ff ff51 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80046e2:	e7ed      	b.n	80046c0 <_ZN3IMU13readCalibDataEv+0xe4>
 80046e4:	08010000 	.word	0x08010000
 80046e8:	40023c00 	.word	0x40023c00
 80046ec:	0801000c 	.word	0x0801000c
 80046f0:	08010018 	.word	0x08010018
 80046f4:	08010004 	.word	0x08010004
 80046f8:	08010010 	.word	0x08010010
 80046fc:	0801001c 	.word	0x0801001c
 8004700:	08010008 	.word	0x08010008
 8004704:	08010014 	.word	0x08010014
 8004708:	08010020 	.word	0x08010020
 800470c:	0800a03e 	.word	0x0800a03e

08004710 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
{
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	2300      	movs	r3, #0
	reset_calib_flag_  = 0;
 8004714:	2500      	movs	r5, #0
	SPI_connection_flag_ = true;
 8004716:	2701      	movs	r7, #1
{
 8004718:	4604      	mov	r4, r0
 800471a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 800471e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8004722:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 8004726:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 800472a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
 800472e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8004732:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 8004736:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800473a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	nh_ = nh;
 800473e:	6342      	str	r2, [r0, #52]	; 0x34
	reset_calib_flag_  = 0;
 8004740:	f880 5052 	strb.w	r5, [r0, #82]	; 0x52
	SPI_connection_flag_ = true;
 8004744:	f880 7126 	strb.w	r7, [r0, #294]	; 0x126
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 8004748:	2024      	movs	r0, #36	; 0x24
{
 800474a:	460e      	mov	r6, r1
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 800474c:	f002 fe20 	bl	8007390 <_Znwj>
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8004750:	4b2e      	ldr	r3, [pc, #184]	; (800480c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xfc>)
 8004752:	6003      	str	r3, [r0, #0]
      data(0)
 8004754:	4b2e      	ldr	r3, [pc, #184]	; (8004810 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x100>)
 8004756:	60c3      	str	r3, [r0, #12]
	nh_->subscribe<std_msgs::UInt8, IMU>(*imu_config_sub_);
 8004758:	6b62      	ldr	r2, [r4, #52]	; 0x34
      : _M_f(__pf) { }
 800475a:	4b2e      	ldr	r3, [pc, #184]	; (8004814 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x104>)
 800475c:	6183      	str	r3, [r0, #24]
        topic_ = topic_name;
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x108>)
 8004760:	6083      	str	r3, [r0, #8]
 8004762:	7405      	strb	r5, [r0, #16]
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8004764:	6144      	str	r4, [r0, #20]
 8004766:	61c5      	str	r5, [r0, #28]
 8004768:	6207      	str	r7, [r0, #32]
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 800476a:	63a0      	str	r0, [r4, #56]	; 0x38
 800476c:	f502 711b 	add.w	r1, r2, #620	; 0x26c
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8004770:	462b      	mov	r3, r5
        if(subscribers[i] == 0){ // empty slot
 8004772:	f851 5b04 	ldr.w	r5, [r1], #4
 8004776:	2d00      	cmp	r5, #0
 8004778:	d140      	bne.n	80047fc <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xec>
          subscribers[i] = (Subscriber_*) &s;
 800477a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          s.id_ = i+100;
 800477e:	3364      	adds	r3, #100	; 0x64
          subscribers[i] = (Subscriber_*) &s;
 8004780:	f8c2 026c 	str.w	r0, [r2, #620]	; 0x26c
          s.id_ = i+100;
 8004784:	6043      	str	r3, [r0, #4]
	imu_debug_pub_ = new ros::Publisher("debug", &imu_debug_msg_);
 8004786:	2014      	movs	r0, #20
 8004788:	f002 fe02 	bl	8007390 <_Znwj>
        endpoint_(endpoint) {};
 800478c:	4b23      	ldr	r3, [pc, #140]	; (800481c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x10c>)
 800478e:	6003      	str	r3, [r0, #0]
	nh_->advertise(*imu_debug_pub_);
 8004790:	6b62      	ldr	r2, [r4, #52]	; 0x34
	imu_debug_pub_ = new ros::Publisher("debug", &imu_debug_msg_);
 8004792:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004794:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004798:	6043      	str	r3, [r0, #4]
 800479a:	2300      	movs	r3, #0
 800479c:	6103      	str	r3, [r0, #16]
 800479e:	f502 7107 	add.w	r1, r2, #540	; 0x21c
        if(publishers[i] == 0){ // empty slot
 80047a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80047a6:	bb6d      	cbnz	r5, 8004804 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xf4>
          publishers[i] = &p;
 80047a8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
          p.id_ = i+100+MAX_SUBSCRIBERS;
 80047ac:	3378      	adds	r3, #120	; 0x78
          publishers[i] = &p;
 80047ae:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
          p.id_ = i+100+MAX_SUBSCRIBERS;
 80047b2:	6083      	str	r3, [r0, #8]
          p.nh_ = this;
 80047b4:	60c2      	str	r2, [r0, #12]
	ahb_suspend_flag_ = false;
 80047b6:	2300      	movs	r3, #0
	mag_filtering_flag_ = true;
 80047b8:	2201      	movs	r2, #1
	ahb_suspend_flag_ = false;
 80047ba:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	mag_filtering_flag_ = true;
 80047be:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
	mag_outlier_counter_ = 0;
 80047c2:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	HAL_Delay(100);
 80047c6:	2064      	movs	r0, #100	; 0x64
	hspi_ = hspi;
 80047c8:	6326      	str	r6, [r4, #48]	; 0x30
	HAL_Delay(100);
 80047ca:	f000 fa57 	bl	8004c7c <HAL_Delay>
	readCalibData();
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff ff04 	bl	80045dc <_ZN3IMU13readCalibDataEv>
	gyroInit();
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7ff fcbf 	bl	8004158 <_ZN3IMU8gyroInitEv>
	accInit();
 80047da:	4620      	mov	r0, r4
 80047dc:	f7ff fcef 	bl	80041be <_ZN3IMU7accInitEv>
	magInit();
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff fd08 	bl	80041f6 <_ZN3IMU7magInitEv>
	hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 80047e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80047f0:	601a      	str	r2, [r3, #0]
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f042 0210 	orr.w	r2, r2, #16
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 80047fc:	3301      	adds	r3, #1
 80047fe:	2b14      	cmp	r3, #20
 8004800:	d1b7      	bne.n	8004772 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x62>
 8004802:	e7c0      	b.n	8004786 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x76>
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8004804:	3301      	adds	r3, #1
 8004806:	2b14      	cmp	r3, #20
 8004808:	d1cb      	bne.n	80047a2 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x92>
 800480a:	e7d4      	b.n	80047b6 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xa6>
 800480c:	08009fd4 	.word	0x08009fd4
 8004810:	08009fbc 	.word	0x08009fbc
 8004814:	08004a81 	.word	0x08004a81
 8004818:	0800a07d 	.word	0x0800a07d
 800481c:	0800a08d 	.word	0x0800a08d

08004820 <_ZN3IMU7processEv>:
{
 8004820:	b570      	push	{r4, r5, r6, lr}
	if (calibrate_gyro_ > 0)
 8004822:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8004826:	2b00      	cmp	r3, #0
{
 8004828:	4604      	mov	r4, r0
 800482a:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	f100 0054 	add.w	r0, r0, #84	; 0x54
	if (calibrate_gyro_ > 0)
 8004834:	f340 80ca 	ble.w	80049cc <_ZN3IMU7processEv+0x1ac>
		if (calibrate_gyro_ == CALIBRATING_STEP)
 8004838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483c:	bf01      	itttt	eq
 800483e:	2300      	moveq	r3, #0
 8004840:	f8c4 30f8 	streq.w	r3, [r4, #248]	; 0xf8
 8004844:	f8c4 30f4 	streq.w	r3, [r4, #244]	; 0xf4
 8004848:	f8c4 30f0 	streq.w	r3, [r4, #240]	; 0xf0
		gyro_offset_ += raw_gyro_adc_;
 800484c:	4601      	mov	r1, r0
 800484e:	4628      	mov	r0, r5
 8004850:	f002 fa5c 	bl	8006d0c <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_gyro_ == 1)
 8004854:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8004858:	2b01      	cmp	r3, #1
 800485a:	d104      	bne.n	8004866 <_ZN3IMU7processEv+0x46>
			gyro_offset_ /= (float)CALIBRATING_STEP;
 800485c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8004a40 <_ZN3IMU7processEv+0x220>
 8004860:	4628      	mov	r0, r5
 8004862:	f002 f9f9 	bl	8006c58 <_ZN7Vector3IfEdVEf>
		calibrate_gyro_--;
 8004866:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800486a:	3b01      	subs	r3, #1
 800486c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	if (calibrate_acc_ > 0) {
 8004870:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8004874:	2b00      	cmp	r3, #0
 8004876:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
 800487a:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800487e:	f340 80af 	ble.w	80049e0 <_ZN3IMU7processEv+0x1c0>
		if (calibrate_acc_ == CALIBRATING_STEP) acc_offset_.zero();
 8004882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004886:	bf01      	itttt	eq
 8004888:	2300      	moveq	r3, #0
 800488a:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
 800488e:	f8c4 30e8 	streq.w	r3, [r4, #232]	; 0xe8
 8004892:	f8c4 30e4 	streq.w	r3, [r4, #228]	; 0xe4
		acc_offset_ += raw_acc_adc_;
 8004896:	4601      	mov	r1, r0
 8004898:	4628      	mov	r0, r5
 800489a:	f002 fa37 	bl	8006d0c <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_acc_ == 1) {
 800489e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d12e      	bne.n	8004904 <_ZN3IMU7processEv+0xe4>
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 80048a6:	eddf 7a66 	vldr	s15, [pc, #408]	; 8004a40 <_ZN3IMU7processEv+0x220>
 80048aa:	ed94 7a39 	vldr	s14, [r4, #228]	; 0xe4
			acc_offset_[2] /= (float)CALIBRATING_STEP;
 80048ae:	edd4 5a3b 	vldr	s11, [r4, #236]	; 0xec
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 80048b2:	ee87 6a27 	vdiv.f32	s12, s14, s15
        *this /= length();
 80048b6:	a801      	add	r0, sp, #4
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 80048b8:	ed94 7a3a 	vldr	s14, [r4, #232]	; 0xe8
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 80048bc:	ed84 6a39 	vstr	s12, [r4, #228]	; 0xe4
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 80048c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
			acc_offset_[2] /= (float)CALIBRATING_STEP;
 80048c4:	ee85 7aa7 	vdiv.f32	s14, s11, s15
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 80048c8:	edc4 6a3a 	vstr	s13, [r4, #232]	; 0xe8
			acc_offset_[2] /= (float)CALIBRATING_STEP;
 80048cc:	ed84 7a3b 	vstr	s14, [r4, #236]	; 0xec
    Vector3<T>(const T x0, const T y0, const T z0) : x(x0), y(y0), z(z0) {
 80048d0:	ed8d 6a01 	vstr	s12, [sp, #4]
 80048d4:	edcd 6a02 	vstr	s13, [sp, #8]
 80048d8:	ed8d 7a03 	vstr	s14, [sp, #12]
        *this /= length();
 80048dc:	f002 f9a0 	bl	8006c20 <_ZNK7Vector3IfE6lengthEv>
 80048e0:	a801      	add	r0, sp, #4
 80048e2:	f002 f9b9 	bl	8006c58 <_ZN7Vector3IfEdVEf>
                        acc_offset_ -= gravity_direction * GRAVITY_MSS;
 80048e6:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8004a44 <_ZN3IMU7processEv+0x224>
 80048ea:	a801      	add	r0, sp, #4
 80048ec:	f002 fa7c 	bl	8006de8 <_ZNK7Vector3IfEmlEf>
 80048f0:	a904      	add	r1, sp, #16
 80048f2:	4628      	mov	r0, r5
 80048f4:	ed8d 0a04 	vstr	s0, [sp, #16]
 80048f8:	edcd 0a05 	vstr	s1, [sp, #20]
 80048fc:	ed8d 1a06 	vstr	s2, [sp, #24]
 8004900:	f002 f9d6 	bl	8006cb0 <_ZN7Vector3IfEmIERKS0_>
		calibrate_acc_--;
 8004904:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8004908:	3b01      	subs	r3, #1
 800490a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (calibrate_mag_ > 0)
 800490e:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
 8004912:	2e00      	cmp	r6, #0
 8004914:	dd6e      	ble.n	80049f4 <_ZN3IMU7processEv+0x1d4>
		if(calibrate_mag_  == CALIBRATING_MAG_STEP)
 8004916:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 800491a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800491e:	d112      	bne.n	8004946 <_ZN3IMU7processEv+0x126>
        x = y = z = 0;
 8004920:	2200      	movs	r2, #0
 8004922:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 8004926:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800492a:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
			mag_min_ = raw_mag_adc_;
 800492e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004932:	f504 758a 	add.w	r5, r4, #276	; 0x114
 8004936:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			mag_max_ = raw_mag_adc_;
 800493a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800493e:	f504 7584 	add.w	r5, r4, #264	; 0x108
 8004942:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004946:	f104 0278 	add.w	r2, r4, #120	; 0x78
			if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
 800494a:	edd3 7a00 	vldr	s15, [r3]
 800494e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8004952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495a:	bf48      	it	mi
 800495c:	edc3 7a2a 	vstrmi	s15, [r3, #168]	; 0xa8
 8004960:	3304      	adds	r3, #4
			if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
 8004962:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496e:	bfc8      	it	gt
 8004970:	edc3 7a26 	vstrgt	s15, [r3, #152]	; 0x98
		for (int i = 0; i < 3; i++)
 8004974:	4293      	cmp	r3, r2
 8004976:	d1e8      	bne.n	800494a <_ZN3IMU7processEv+0x12a>
		if(calibrate_mag_ == 1)
 8004978:	2e01      	cmp	r6, #1
 800497a:	f504 708a 	add.w	r0, r4, #276	; 0x114
 800497e:	f504 7184 	add.w	r1, r4, #264	; 0x108
 8004982:	d112      	bne.n	80049aa <_ZN3IMU7processEv+0x18a>
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 8004984:	f002 fa70 	bl	8006e68 <_ZNK7Vector3IfEplERKS0_>
 8004988:	a804      	add	r0, sp, #16
 800498a:	ed8d 0a04 	vstr	s0, [sp, #16]
 800498e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004992:	edcd 0a05 	vstr	s1, [sp, #20]
 8004996:	ed8d 1a06 	vstr	s2, [sp, #24]
 800499a:	f002 f9e5 	bl	8006d68 <_ZNK7Vector3IfEdvEf>
 800499e:	ed84 0a3f 	vstr	s0, [r4, #252]	; 0xfc
 80049a2:	edc4 0a40 	vstr	s1, [r4, #256]	; 0x100
 80049a6:	ed84 1a41 	vstr	s2, [r4, #260]	; 0x104
		calibrate_mag_ --;
 80049aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80049ae:	3b01      	subs	r3, #1
 80049b0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	if( !SPI_connection_flag_ ) {
 80049b4:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80049b8:	bbd3      	cbnz	r3, 8004a30 <_ZN3IMU7processEv+0x210>
		debugPrint(std::string("[ERROR] SPI connection is not valid."));
 80049ba:	4923      	ldr	r1, [pc, #140]	; (8004a48 <_ZN3IMU7processEv+0x228>)
 80049bc:	a804      	add	r0, sp, #16
 80049be:	f7ff fb35 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 80049c2:	a904      	add	r1, sp, #16
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7ff fddd 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80049ca:	e02e      	b.n	8004a2a <_ZN3IMU7processEv+0x20a>
                gyro_ = raw_gyro_adc_ - gyro_offset_;
 80049cc:	4629      	mov	r1, r5
 80049ce:	f002 fa8d 	bl	8006eec <_ZNK7Vector3IfEmiERKS0_>
 80049d2:	ed84 0a2a 	vstr	s0, [r4, #168]	; 0xa8
 80049d6:	edc4 0a2b 	vstr	s1, [r4, #172]	; 0xac
 80049da:	ed84 1a2c 	vstr	s2, [r4, #176]	; 0xb0
 80049de:	e747      	b.n	8004870 <_ZN3IMU7processEv+0x50>
                acc_ = raw_acc_adc_ - acc_offset_;
 80049e0:	4629      	mov	r1, r5
 80049e2:	f002 fa83 	bl	8006eec <_ZNK7Vector3IfEmiERKS0_>
 80049e6:	ed84 0a27 	vstr	s0, [r4, #156]	; 0x9c
 80049ea:	edc4 0a28 	vstr	s1, [r4, #160]	; 0xa0
 80049ee:	ed84 1a29 	vstr	s2, [r4, #164]	; 0xa4
 80049f2:	e78c      	b.n	800490e <_ZN3IMU7processEv+0xee>
		mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 80049f4:	ed94 7a40 	vldr	s14, [r4, #256]	; 0x100
 80049f8:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 80049fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
		mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8004a00:	ed94 7a3f 	vldr	s14, [r4, #252]	; 0xfc
		mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 8004a04:	edc4 7a2d 	vstr	s15, [r4, #180]	; 0xb4
		mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8004a08:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
 8004a0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
		mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 8004a10:	ed94 7a41 	vldr	s14, [r4, #260]	; 0x104
		mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8004a14:	edc4 7a2e 	vstr	s15, [r4, #184]	; 0xb8
		mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 8004a18:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 8004a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a20:	eef1 7a67 	vneg.f32	s15, s15
 8004a24:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
 8004a28:	e7c4      	b.n	80049b4 <_ZN3IMU7processEv+0x194>
 8004a2a:	a804      	add	r0, sp, #16
 8004a2c:	f003 f8be 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 8004a30:	b00a      	add	sp, #40	; 0x28
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	a804      	add	r0, sp, #16
 8004a36:	f003 f8b9 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004a3a:	f002 fcba 	bl	80073b2 <__cxa_end_cleanup>
 8004a3e:	bf00      	nop
 8004a40:	447a0000 	.word	0x447a0000
 8004a44:	411ce80a 	.word	0x411ce80a
 8004a48:	0800a093 	.word	0x0800a093

08004a4c <_ZN3IMU6updateEt>:
{
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	4604      	mov	r4, r0
	if(nh_->connected() && (!nh_->getHardware()->getUartDriver()->getTx()->idleFlag()))
 8004a50:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004a52:	6803      	ldr	r3, [r0, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4798      	blx	r3
 8004a58:	b128      	cbz	r0, 8004a66 <_ZN3IMU6updateEt+0x1a>
  bool idleFlag(){return idle_flag_;}
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <_ZN3IMU6updateEt+0x30>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b913      	cbnz	r3, 8004a66 <_ZN3IMU6updateEt+0x1a>
		ahb_suspend_flag_ = true; //should suspend USART1 of DMA(ros) for a while
 8004a60:	2301      	movs	r3, #1
 8004a62:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	read(); //read from SPI
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff fc36 	bl	80042d8 <_ZN3IMU4readEv>
	process();
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff fed7 	bl	8004820 <_ZN3IMU7processEv>
	update_ = true;
 8004a72:	2001      	movs	r0, #1
 8004a74:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
}
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000abc 	.word	0x20000abc

08004a80 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E>:
{
 8004a80:	b510      	push	{r4, lr}
	switch(config_msg.data)
 8004a82:	790b      	ldrb	r3, [r1, #4]
{
 8004a84:	b086      	sub	sp, #24
 8004a86:	4604      	mov	r4, r0
	switch(config_msg.data)
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d864      	bhi.n	8004b56 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xd6>
 8004a8c:	e8df f003 	tbb	[pc, r3]
 8004a90:	45352303 	.word	0x45352303
 8004a94:	54          	.byte	0x54
 8004a95:	00          	.byte	0x00
		debugPrint(std::string("[INFO] RESET_CALIB_CMD received. All offset values are set to 0."));
 8004a96:	493b      	ldr	r1, [pc, #236]	; (8004b84 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x104>)
 8004a98:	4668      	mov	r0, sp
 8004a9a:	f7ff fac7 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 8004a9e:	4669      	mov	r1, sp
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff fd6f 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004aa6:	4668      	mov	r0, sp
 8004aa8:	f003 f880 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8004ab2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8004ab6:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8004aba:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 8004abe:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8004ac2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8004ac6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8004aca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004ace:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
}
 8004ad2:	b006      	add	sp, #24
 8004ad4:	bd10      	pop	{r4, pc}
		debugPrint(std::string("[INFO] MPU_ACC_GYRO_CALIB_CMD received. Acc and Gyro are calibrated."));
 8004ad6:	492c      	ldr	r1, [pc, #176]	; (8004b88 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x108>)
 8004ad8:	4668      	mov	r0, sp
 8004ada:	f7ff faa7 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 8004ade:	4669      	mov	r1, sp
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7ff fd4f 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004ae6:	4668      	mov	r0, sp
 8004ae8:	f003 f860 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
		calibrate_gyro_ = CALIBRATING_STEP;
 8004aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004af0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		calibrate_acc_ = CALIBRATING_STEP;
 8004af4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		break;
 8004af8:	e7eb      	b.n	8004ad2 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x52>
		debugPrint(std::string("[INFO] MPU_MAG_CALIB_CMD received. Mag is calibrated."));
 8004afa:	4924      	ldr	r1, [pc, #144]	; (8004b8c <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x10c>)
 8004afc:	4668      	mov	r0, sp
 8004afe:	f7ff fa95 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 8004b02:	4669      	mov	r1, sp
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7ff fd3d 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004b0a:	4668      	mov	r0, sp
 8004b0c:	f003 f84e 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
		calibrate_mag_ = CALIBRATING_MAG_STEP;
 8004b10:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8004b14:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		break;
 8004b18:	e7db      	b.n	8004ad2 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x52>
		debugPrint(std::string("[INFO] MPU_CALIB_LOAD_CMD received."));
 8004b1a:	491d      	ldr	r1, [pc, #116]	; (8004b90 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x110>)
 8004b1c:	4668      	mov	r0, sp
 8004b1e:	f7ff fa85 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 8004b22:	4669      	mov	r1, sp
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff fd2d 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004b2a:	4668      	mov	r0, sp
 8004b2c:	f003 f83e 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
		readCalibData();
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff fd53 	bl	80045dc <_ZN3IMU13readCalibDataEv>
		break;
 8004b36:	e7cc      	b.n	8004ad2 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x52>
		debugPrint(std::string("[INFO] MPU_CALIB_SAVE_CMD received."));
 8004b38:	4916      	ldr	r1, [pc, #88]	; (8004b94 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x114>)
 8004b3a:	4668      	mov	r0, sp
 8004b3c:	f7ff fa76 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 8004b40:	4669      	mov	r1, sp
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7ff fd1e 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004b48:	4668      	mov	r0, sp
 8004b4a:	f003 f82f 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
		writeCalibData();
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff faa4 	bl	800409c <_ZN3IMU14writeCalibDataEv>
		break;
 8004b54:	e7bd      	b.n	8004ad2 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x52>
        debugPrint(std::string("[ERROR] Unknown command received."));
 8004b56:	4910      	ldr	r1, [pc, #64]	; (8004b98 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x118>)
 8004b58:	4668      	mov	r0, sp
 8004b5a:	f7ff fa67 	bl	800402c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.25>
 8004b5e:	4669      	mov	r1, sp
 8004b60:	4620      	mov	r0, r4
 8004b62:	f7ff fd0f 	bl	8004584 <_ZN3IMU10debugPrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004b66:	4668      	mov	r0, sp
 8004b68:	f003 f820 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 8004b6c:	e7b1      	b.n	8004ad2 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x52>
 8004b6e:	4668      	mov	r0, sp
 8004b70:	f003 f81c 	bl	8007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004b74:	f002 fc1d 	bl	80073b2 <__cxa_end_cleanup>
 8004b78:	e7f9      	b.n	8004b6e <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xee>
 8004b7a:	e7f8      	b.n	8004b6e <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xee>
 8004b7c:	e7f7      	b.n	8004b6e <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xee>
 8004b7e:	e7f6      	b.n	8004b6e <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xee>
 8004b80:	e7f5      	b.n	8004b6e <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xee>
 8004b82:	bf00      	nop
 8004b84:	0800a0b8 	.word	0x0800a0b8
 8004b88:	0800a0f9 	.word	0x0800a0f9
 8004b8c:	0800a13e 	.word	0x0800a13e
 8004b90:	0800a174 	.word	0x0800a174
 8004b94:	0800a198 	.word	0x0800a198
 8004b98:	0800a1bc 	.word	0x0800a1bc

08004b9c <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 8004b9c:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8004b9e:	6802      	ldr	r2, [r0, #0]
    uint32_t nsec_part= nsec % 1000000000UL;
 8004ba0:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
 8004ba2:	4c04      	ldr	r4, [pc, #16]	; (8004bb4 <_ZN3ros16normalizeSecNSecERmS0_+0x18>)
 8004ba4:	fbb5 f3f4 	udiv	r3, r5, r4
    sec += sec_part;
 8004ba8:	441a      	add	r2, r3
    uint32_t nsec_part= nsec % 1000000000UL;
 8004baa:	fb04 5313 	mls	r3, r4, r3, r5
    sec += sec_part;
 8004bae:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004bb0:	600b      	str	r3, [r1, #0]
 8004bb2:	bd30      	pop	{r4, r5, pc}
 8004bb4:	3b9aca00 	.word	0x3b9aca00

08004bb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bb8:	490f      	ldr	r1, [pc, #60]	; (8004bf8 <SystemInit+0x40>)
 8004bba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004bbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <SystemInit+0x44>)
 8004bc8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bca:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004bd2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004bda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bde:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004be0:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <SystemInit+0x48>)
 8004be2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004bec:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bf2:	608b      	str	r3, [r1, #8]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000ed00 	.word	0xe000ed00
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	24003010 	.word	0x24003010

08004c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c04:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <HAL_InitTick+0x24>)
{
 8004c08:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c10:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c14:	f000 fa9c 	bl	8005150 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c20:	f000 fa56 	bl	80050d0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8004c24:	2000      	movs	r0, #0
 8004c26:	bd10      	pop	{r4, pc}
 8004c28:	20000004 	.word	0x20000004

08004c2c <HAL_Init>:
{
 8004c2c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_Init+0x30>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c36:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c48:	2003      	movs	r0, #3
 8004c4a:	f000 fa2f 	bl	80050ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7ff ffd8 	bl	8004c04 <HAL_InitTick>
  HAL_MspInit();
 8004c54:	f7ff f8c6 	bl	8003de4 <HAL_MspInit>
}
 8004c58:	2000      	movs	r0, #0
 8004c5a:	bd08      	pop	{r3, pc}
 8004c5c:	40023c00 	.word	0x40023c00

08004c60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004c60:	4a02      	ldr	r2, [pc, #8]	; (8004c6c <HAL_IncTick+0xc>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20003d2c 	.word	0x20003d2c

08004c70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004c70:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <HAL_GetTick+0x8>)
 8004c72:	6818      	ldr	r0, [r3, #0]
}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20003d2c 	.word	0x20003d2c

08004c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8004c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c7e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c80:	f7ff fff6 	bl	8004c70 <HAL_GetTick>
  uint32_t wait = Delay;
 8004c84:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c86:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004c88:	4605      	mov	r5, r0
  {
     wait++;
 8004c8a:	bf18      	it	ne
 8004c8c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004c8e:	f7ff ffef 	bl	8004c70 <HAL_GetTick>
 8004c92:	1b40      	subs	r0, r0, r5
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d3fa      	bcc.n	8004c8e <HAL_Delay+0x12>
  {
  }
}
 8004c98:	b003      	add	sp, #12
 8004c9a:	bd30      	pop	{r4, r5, pc}

08004c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c9c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f000 8099 	beq.w	8004dd8 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ca6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ca8:	b923      	cbnz	r3, 8004cb4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004caa:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cb0:	f7fd f85a 	bl	8001d68 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cb6:	06db      	lsls	r3, r3, #27
 8004cb8:	f100 808c 	bmi.w	8004dd4 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cc2:	f023 0302 	bic.w	r3, r3, #2
 8004cc6:	f043 0302 	orr.w	r3, r3, #2
 8004cca:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ccc:	4b43      	ldr	r3, [pc, #268]	; (8004ddc <HAL_ADC_Init+0x140>)
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004cd4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	6861      	ldr	r1, [r4, #4]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cde:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ce0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004cf2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004cf4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004cf6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004cfa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d02:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d04:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d12:	4933      	ldr	r1, [pc, #204]	; (8004de0 <HAL_ADC_Init+0x144>)
 8004d14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004d16:	428a      	cmp	r2, r1
 8004d18:	d050      	beq.n	8004dbc <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d1a:	6899      	ldr	r1, [r3, #8]
 8004d1c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004d20:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d22:	6899      	ldr	r1, [r3, #8]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d28:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d36:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d38:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004d3a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d3c:	f022 0202 	bic.w	r2, r2, #2
 8004d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d4a:	6a22      	ldr	r2, [r4, #32]
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	d03d      	beq.n	8004dcc <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d50:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d52:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d58:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d60:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	3901      	subs	r1, #1
 8004d66:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d6e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d70:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d78:	3901      	subs	r1, #1
 8004d7a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d80:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004d82:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004d90:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d92:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d94:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d9c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004d9e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004da0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004da4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004da6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004db4:	2300      	movs	r3, #0
 8004db6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8004dba:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dca:	e7b4      	b.n	8004d36 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd2:	e7ca      	b.n	8004d6a <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	e7ed      	b.n	8004db4 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8004dd8:	2001      	movs	r0, #1
}
 8004dda:	bd10      	pop	{r4, pc}
 8004ddc:	40012300 	.word	0x40012300
 8004de0:	0f000001 	.word	0x0f000001

08004de4 <HAL_ADC_Start>:
{
 8004de4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004dea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d04d      	beq.n	8004e8e <HAL_ADC_Start+0xaa>
 8004df2:	2301      	movs	r3, #1
 8004df4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004df8:	6803      	ldr	r3, [r0, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	07d1      	lsls	r1, r2, #31
 8004dfe:	d410      	bmi.n	8004e22 <HAL_ADC_Start+0x3e>
    __HAL_ADC_ENABLE(hadc);
 8004e00:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e02:	4924      	ldr	r1, [pc, #144]	; (8004e94 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e0a:	4a23      	ldr	r2, [pc, #140]	; (8004e98 <HAL_ADC_Start+0xb4>)
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	fbb2 f2f1 	udiv	r2, r2, r1
 8004e12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004e16:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8004e18:	9a01      	ldr	r2, [sp, #4]
 8004e1a:	b112      	cbz	r2, 8004e22 <HAL_ADC_Start+0x3e>
      counter--;
 8004e1c:	9a01      	ldr	r2, [sp, #4]
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	e7f9      	b.n	8004e16 <HAL_ADC_Start+0x32>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	07d2      	lsls	r2, r2, #31
 8004e26:	d402      	bmi.n	8004e2e <HAL_ADC_Start+0x4a>
  return HAL_OK;
 8004e28:	2000      	movs	r0, #0
}
 8004e2a:	b002      	add	sp, #8
 8004e2c:	4770      	bx	lr
    ADC_STATE_CLR_SET(hadc->State,
 8004e2e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3c:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e42:	bf41      	itttt	mi
 8004e44:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8004e46:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8004e4a:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8004e4e:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e50:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e52:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e56:	bf1c      	itt	ne
 8004e58:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8004e5a:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8004e5e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8004e60:	2200      	movs	r2, #0
 8004e62:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e6a:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <HAL_ADC_Start+0xb8>)
 8004e6e:	6852      	ldr	r2, [r2, #4]
 8004e70:	06d2      	lsls	r2, r2, #27
 8004e72:	d108      	bne.n	8004e86 <HAL_ADC_Start+0xa2>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e74:	6898      	ldr	r0, [r3, #8]
 8004e76:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004e7a:	d1d5      	bne.n	8004e28 <HAL_ADC_Start+0x44>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	e7d1      	b.n	8004e2a <HAL_ADC_Start+0x46>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e86:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <HAL_ADC_Start+0xbc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d1cd      	bne.n	8004e28 <HAL_ADC_Start+0x44>
 8004e8c:	e7f2      	b.n	8004e74 <HAL_ADC_Start+0x90>
  __HAL_LOCK(hadc);
 8004e8e:	2002      	movs	r0, #2
 8004e90:	e7cb      	b.n	8004e2a <HAL_ADC_Start+0x46>
 8004e92:	bf00      	nop
 8004e94:	000f4240 	.word	0x000f4240
 8004e98:	20000004 	.word	0x20000004
 8004e9c:	40012300 	.word	0x40012300
 8004ea0:	40012000 	.word	0x40012000

08004ea4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004ea4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d017      	beq.n	8004edc <HAL_ADC_Stop+0x38>
 8004eac:	2301      	movs	r3, #1
 8004eae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8004eb2:	6803      	ldr	r3, [r0, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	07db      	lsls	r3, r3, #31
 8004ec0:	d407      	bmi.n	8004ed2 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8004ec2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ec4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004ed8:	4618      	mov	r0, r3
 8004eda:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8004edc:	2002      	movs	r0, #2
}
 8004ede:	4770      	bx	lr

08004ee0 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ee0:	6803      	ldr	r3, [r0, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
{
 8004ee4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ee6:	0556      	lsls	r6, r2, #21
{
 8004ee8:	4604      	mov	r4, r0
 8004eea:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004eec:	d502      	bpl.n	8004ef4 <HAL_ADC_PollForConversion+0x14>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004eee:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ef0:	05d8      	lsls	r0, r3, #23
 8004ef2:	d43b      	bmi.n	8004f6c <HAL_ADC_PollForConversion+0x8c>
  tickstart = HAL_GetTick();
 8004ef4:	f7ff febc 	bl	8004c70 <HAL_GetTick>
 8004ef8:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	0791      	lsls	r1, r2, #30
 8004f00:	d410      	bmi.n	8004f24 <HAL_ADC_PollForConversion+0x44>
    if(Timeout != HAL_MAX_DELAY)
 8004f02:	1c6a      	adds	r2, r5, #1
 8004f04:	d0fa      	beq.n	8004efc <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004f06:	b125      	cbz	r5, 8004f12 <HAL_ADC_PollForConversion+0x32>
 8004f08:	f7ff feb2 	bl	8004c70 <HAL_GetTick>
 8004f0c:	1b80      	subs	r0, r0, r6
 8004f0e:	4285      	cmp	r5, r0
 8004f10:	d2f3      	bcs.n	8004efa <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f14:	f043 0304 	orr.w	r3, r3, #4
 8004f18:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004f20:	2003      	movs	r0, #3
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f24:	f06f 0212 	mvn.w	r2, #18
 8004f28:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f30:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f32:	689a      	ldr	r2, [r3, #8]
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f34:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004f38:	d001      	beq.n	8004f3e <HAL_ADC_PollForConversion+0x5e>
  return HAL_OK;
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f3e:	69a2      	ldr	r2, [r4, #24]
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	d1fa      	bne.n	8004f3a <HAL_ADC_PollForConversion+0x5a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f46:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004f4a:	d002      	beq.n	8004f52 <HAL_ADC_PollForConversion+0x72>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f4c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f4e:	055b      	lsls	r3, r3, #21
 8004f50:	d4f3      	bmi.n	8004f3a <HAL_ADC_PollForConversion+0x5a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f58:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004f5c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8004f60:	d1eb      	bne.n	8004f3a <HAL_ADC_PollForConversion+0x5a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6423      	str	r3, [r4, #64]	; 0x40
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f6e:	f043 0320 	orr.w	r3, r3, #32
 8004f72:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8004f74:	2300      	movs	r3, #0
 8004f76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}

08004f7e <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004f7e:	6803      	ldr	r3, [r0, #0]
 8004f80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8004f82:	4770      	bx	lr

08004f84 <HAL_ADC_ConfigChannel>:
{
 8004f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004f8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	f000 8082 	beq.w	8005098 <HAL_ADC_ConfigChannel+0x114>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f94:	680d      	ldr	r5, [r1, #0]
 8004f96:	6804      	ldr	r4, [r0, #0]
 8004f98:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8004f9a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f9c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8004f9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8004fa2:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fa4:	d943      	bls.n	800502e <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fa6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004faa:	68e7      	ldr	r7, [r4, #12]
 8004fac:	3b1e      	subs	r3, #30
 8004fae:	f04f 0e07 	mov.w	lr, #7
 8004fb2:	fa0e fe03 	lsl.w	lr, lr, r3
 8004fb6:	ea27 070e 	bic.w	r7, r7, lr
 8004fba:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fbc:	68e7      	ldr	r7, [r4, #12]
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	433b      	orrs	r3, r7
 8004fc4:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8004fc6:	684a      	ldr	r2, [r1, #4]
 8004fc8:	2a06      	cmp	r2, #6
 8004fca:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8004fce:	d83e      	bhi.n	800504e <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fd0:	4413      	add	r3, r2
 8004fd2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004fd4:	1f59      	subs	r1, r3, #5
 8004fd6:	231f      	movs	r3, #31
 8004fd8:	408b      	lsls	r3, r1
 8004fda:	ea27 0303 	bic.w	r3, r7, r3
 8004fde:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fe0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004fe2:	fa06 f101 	lsl.w	r1, r6, r1
 8004fe6:	4311      	orrs	r1, r2
 8004fe8:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <HAL_ADC_ConfigChannel+0x118>)
 8004fec:	429c      	cmp	r4, r3
 8004fee:	d14d      	bne.n	800508c <HAL_ADC_ConfigChannel+0x108>
 8004ff0:	2d12      	cmp	r5, #18
 8004ff2:	d104      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x7a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <HAL_ADC_ConfigChannel+0x11c>)
 8004ff6:	6853      	ldr	r3, [r2, #4]
 8004ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ffc:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ffe:	f1a5 0310 	sub.w	r3, r5, #16
 8005002:	2b01      	cmp	r3, #1
 8005004:	d842      	bhi.n	800508c <HAL_ADC_ConfigChannel+0x108>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005006:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <HAL_ADC_ConfigChannel+0x11c>)
 8005008:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800500a:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800500c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005010:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005012:	d13b      	bne.n	800508c <HAL_ADC_ConfigChannel+0x108>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005014:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <HAL_ADC_ConfigChannel+0x120>)
 8005016:	4a24      	ldr	r2, [pc, #144]	; (80050a8 <HAL_ADC_ConfigChannel+0x124>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fbb3 f2f2 	udiv	r2, r3, r2
 800501e:	230a      	movs	r3, #10
 8005020:	4353      	muls	r3, r2
 8005022:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005024:	9b01      	ldr	r3, [sp, #4]
 8005026:	b38b      	cbz	r3, 800508c <HAL_ADC_ConfigChannel+0x108>
        counter--;
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	e7f9      	b.n	8005022 <HAL_ADC_ConfigChannel+0x9e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800502e:	6927      	ldr	r7, [r4, #16]
 8005030:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005034:	f04f 0e07 	mov.w	lr, #7
 8005038:	fa0e fe03 	lsl.w	lr, lr, r3
 800503c:	ea27 070e 	bic.w	r7, r7, lr
 8005040:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005042:	6927      	ldr	r7, [r4, #16]
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	433b      	orrs	r3, r7
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	e7bb      	b.n	8004fc6 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800504e:	2a0c      	cmp	r2, #12
 8005050:	d80e      	bhi.n	8005070 <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005052:	4413      	add	r3, r2
 8005054:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005056:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800505a:	231f      	movs	r3, #31
 800505c:	4093      	lsls	r3, r2
 800505e:	ea21 0303 	bic.w	r3, r1, r3
 8005062:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005064:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005066:	fa06 f202 	lsl.w	r2, r6, r2
 800506a:	431a      	orrs	r2, r3
 800506c:	6322      	str	r2, [r4, #48]	; 0x30
 800506e:	e7bc      	b.n	8004fea <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005070:	4413      	add	r3, r2
 8005072:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005074:	3b41      	subs	r3, #65	; 0x41
 8005076:	221f      	movs	r2, #31
 8005078:	409a      	lsls	r2, r3
 800507a:	ea21 0202 	bic.w	r2, r1, r2
 800507e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005080:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005082:	fa06 f103 	lsl.w	r1, r6, r3
 8005086:	4311      	orrs	r1, r2
 8005088:	62e1      	str	r1, [r4, #44]	; 0x2c
 800508a:	e7ae      	b.n	8004fea <HAL_ADC_ConfigChannel+0x66>
  __HAL_UNLOCK(hadc);
 800508c:	2300      	movs	r3, #0
 800508e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005092:	4618      	mov	r0, r3
}
 8005094:	b003      	add	sp, #12
 8005096:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8005098:	2002      	movs	r0, #2
 800509a:	e7fb      	b.n	8005094 <HAL_ADC_ConfigChannel+0x110>
 800509c:	40012000 	.word	0x40012000
 80050a0:	40012300 	.word	0x40012300
 80050a4:	20000004 	.word	0x20000004
 80050a8:	000f4240 	.word	0x000f4240

080050ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050ac:	4a07      	ldr	r2, [pc, #28]	; (80050cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80050ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80050bc:	0200      	lsls	r0, r0, #8
 80050be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80050c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80050c8:	60d3      	str	r3, [r2, #12]
 80050ca:	4770      	bx	lr
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050d2:	b530      	push	{r4, r5, lr}
 80050d4:	68dc      	ldr	r4, [r3, #12]
 80050d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	bf28      	it	cs
 80050e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e8:	f04f 0501 	mov.w	r5, #1
 80050ec:	fa05 f303 	lsl.w	r3, r5, r3
 80050f0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050f4:	bf8c      	ite	hi
 80050f6:	3c03      	subhi	r4, #3
 80050f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050fa:	4019      	ands	r1, r3
 80050fc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050fe:	fa05 f404 	lsl.w	r4, r5, r4
 8005102:	3c01      	subs	r4, #1
 8005104:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8005106:	2800      	cmp	r0, #0
         );
 8005108:	ea42 0201 	orr.w	r2, r2, r1
 800510c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005110:	bfaf      	iteee	ge
 8005112:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005116:	f000 000f 	andlt.w	r0, r0, #15
 800511a:	4b06      	ldrlt	r3, [pc, #24]	; (8005134 <HAL_NVIC_SetPriority+0x64>)
 800511c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800511e:	bfa5      	ittet	ge
 8005120:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8005124:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005126:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005128:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800512c:	bd30      	pop	{r4, r5, pc}
 800512e:	bf00      	nop
 8005130:	e000ed00 	.word	0xe000ed00
 8005134:	e000ed14 	.word	0xe000ed14

08005138 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005138:	0942      	lsrs	r2, r0, #5
 800513a:	2301      	movs	r3, #1
 800513c:	f000 001f 	and.w	r0, r0, #31
 8005140:	fa03 f000 	lsl.w	r0, r3, r0
 8005144:	4b01      	ldr	r3, [pc, #4]	; (800514c <HAL_NVIC_EnableIRQ+0x14>)
 8005146:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800514a:	4770      	bx	lr
 800514c:	e000e100 	.word	0xe000e100

08005150 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005150:	3801      	subs	r0, #1
 8005152:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005156:	d20a      	bcs.n	800516e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	4a07      	ldr	r2, [pc, #28]	; (8005178 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800515c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515e:	21f0      	movs	r1, #240	; 0xf0
 8005160:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005164:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005166:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005168:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800516e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e010 	.word	0xe000e010
 8005178:	e000ed00 	.word	0xe000ed00

0800517c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800517e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005180:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005182:	bf0c      	ite	eq
 8005184:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005188:	f022 0204 	bicne.w	r2, r2, #4
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	4770      	bx	lr
 8005190:	e000e010 	.word	0xe000e010

08005194 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005194:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005196:	f7fe fcc9 	bl	8003b2c <HAL_SYSTICK_Callback>
 800519a:	bd08      	pop	{r3, pc}

0800519c <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800519c:	6803      	ldr	r3, [r0, #0]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051a4:	f023 0303 	bic.w	r3, r3, #3
 80051a8:	2118      	movs	r1, #24
 80051aa:	3a10      	subs	r2, #16
 80051ac:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051b0:	4904      	ldr	r1, [pc, #16]	; (80051c4 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x28>)
  
  if (stream_number > 3U)
 80051b2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051b4:	bf88      	it	hi
 80051b6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051b8:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051ba:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051bc:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80051be:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	0800a1f6 	.word	0x0800a1f6

080051c8 <HAL_DMA_Init>:
{
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80051cc:	f7ff fd50 	bl	8004c70 <HAL_GetTick>
 80051d0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d071      	beq.n	80052ba <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80051d6:	2300      	movs	r3, #0
 80051d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80051dc:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80051de:	2302      	movs	r3, #2
 80051e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80051e4:	6813      	ldr	r3, [r2, #0]
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ec:	6821      	ldr	r1, [r4, #0]
 80051ee:	680b      	ldr	r3, [r1, #0]
 80051f0:	07d8      	lsls	r0, r3, #31
 80051f2:	d50a      	bpl.n	800520a <HAL_DMA_Init+0x42>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051f4:	f7ff fd3c 	bl	8004c70 <HAL_GetTick>
 80051f8:	1b40      	subs	r0, r0, r5
 80051fa:	2805      	cmp	r0, #5
 80051fc:	d9f6      	bls.n	80051ec <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051fe:	2320      	movs	r3, #32
 8005200:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005202:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8005204:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005208:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800520a:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800520c:	4d2c      	ldr	r5, [pc, #176]	; (80052c0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800520e:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005210:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005212:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005214:	68a3      	ldr	r3, [r4, #8]
 8005216:	4313      	orrs	r3, r2
 8005218:	68e2      	ldr	r2, [r4, #12]
 800521a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	6962      	ldr	r2, [r4, #20]
 8005222:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005224:	69e2      	ldr	r2, [r4, #28]
 8005226:	4303      	orrs	r3, r0
 8005228:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800522a:	6a22      	ldr	r2, [r4, #32]
 800522c:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800522e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005230:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005232:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005236:	bf01      	itttt	eq
 8005238:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800523a:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800523c:	4335      	orreq	r5, r6
 800523e:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8005240:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8005242:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005244:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005246:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800524a:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800524e:	d10b      	bne.n	8005268 <HAL_DMA_Init+0xa0>
    tmp |= hdma->Init.FIFOThreshold;
 8005250:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005252:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005254:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005256:	b13d      	cbz	r5, 8005268 <HAL_DMA_Init+0xa0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005258:	b9a0      	cbnz	r0, 8005284 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800525a:	2a01      	cmp	r2, #1
 800525c:	d022      	beq.n	80052a4 <HAL_DMA_Init+0xdc>
 800525e:	d301      	bcc.n	8005264 <HAL_DMA_Init+0x9c>
 8005260:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005262:	d101      	bne.n	8005268 <HAL_DMA_Init+0xa0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005264:	01ea      	lsls	r2, r5, #7
 8005266:	d420      	bmi.n	80052aa <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8005268:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800526a:	4620      	mov	r0, r4
 800526c:	f7ff ff96 	bl	800519c <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005270:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005272:	233f      	movs	r3, #63	; 0x3f
 8005274:	4093      	lsls	r3, r2
 8005276:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005278:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800527a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800527c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800527e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005282:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005284:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005288:	d113      	bne.n	80052b2 <HAL_DMA_Init+0xea>
    switch (tmp)
 800528a:	2a03      	cmp	r2, #3
 800528c:	d8ec      	bhi.n	8005268 <HAL_DMA_Init+0xa0>
 800528e:	a001      	add	r0, pc, #4	; (adr r0, 8005294 <HAL_DMA_Init+0xcc>)
 8005290:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005294:	080052ab 	.word	0x080052ab
 8005298:	08005265 	.word	0x08005265
 800529c:	080052ab 	.word	0x080052ab
 80052a0:	080052a5 	.word	0x080052a5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052a4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80052a8:	d1de      	bne.n	8005268 <HAL_DMA_Init+0xa0>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80052ae:	2001      	movs	r0, #1
 80052b0:	e7a8      	b.n	8005204 <HAL_DMA_Init+0x3c>
    switch (tmp)
 80052b2:	2a02      	cmp	r2, #2
 80052b4:	d9f9      	bls.n	80052aa <HAL_DMA_Init+0xe2>
 80052b6:	2a03      	cmp	r2, #3
 80052b8:	e7d3      	b.n	8005262 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80052ba:	2001      	movs	r0, #1
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
 80052be:	bf00      	nop
 80052c0:	f010803f 	.word	0xf010803f

080052c4 <HAL_DMA_Start_IT>:
{
 80052c4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80052c6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80052ca:	2c01      	cmp	r4, #1
 80052cc:	d036      	beq.n	800533c <HAL_DMA_Start_IT+0x78>
 80052ce:	2401      	movs	r4, #1
 80052d0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80052d4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052d8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80052da:	2c01      	cmp	r4, #1
 80052dc:	f04f 0500 	mov.w	r5, #0
 80052e0:	f04f 0402 	mov.w	r4, #2
 80052e4:	d128      	bne.n	8005338 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80052e6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ea:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ec:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ee:	6825      	ldr	r5, [r4, #0]
 80052f0:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80052f4:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80052f6:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f8:	6883      	ldr	r3, [r0, #8]
 80052fa:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80052fc:	bf0e      	itee	eq
 80052fe:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005300:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8005302:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005304:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8005306:	bf08      	it	eq
 8005308:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800530a:	233f      	movs	r3, #63	; 0x3f
 800530c:	4093      	lsls	r3, r2
 800530e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	f043 0316 	orr.w	r3, r3, #22
 8005316:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005318:	6963      	ldr	r3, [r4, #20]
 800531a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005320:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005322:	b11b      	cbz	r3, 800532c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	f043 0308 	orr.w	r3, r3, #8
 800532a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2000      	movs	r0, #0
 8005336:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8005338:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800533c:	2002      	movs	r0, #2
}
 800533e:	bd70      	pop	{r4, r5, r6, pc}

08005340 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005340:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005344:	2b02      	cmp	r3, #2
 8005346:	d003      	beq.n	8005350 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800534c:	2001      	movs	r0, #1
 800534e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005350:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005352:	2305      	movs	r3, #5
 8005354:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005358:	6813      	ldr	r3, [r2, #0]
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005360:	2000      	movs	r0, #0
}
 8005362:	4770      	bx	lr

08005364 <HAL_DMA_IRQHandler>:
{
 8005364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800536a:	4b5a      	ldr	r3, [pc, #360]	; (80054d4 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800536c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800536e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005370:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8005372:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005374:	2208      	movs	r2, #8
 8005376:	409a      	lsls	r2, r3
 8005378:	4216      	tst	r6, r2
{
 800537a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800537c:	d00c      	beq.n	8005398 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800537e:	6801      	ldr	r1, [r0, #0]
 8005380:	6808      	ldr	r0, [r1, #0]
 8005382:	0740      	lsls	r0, r0, #29
 8005384:	d508      	bpl.n	8005398 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005386:	6808      	ldr	r0, [r1, #0]
 8005388:	f020 0004 	bic.w	r0, r0, #4
 800538c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800538e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005390:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005398:	2201      	movs	r2, #1
 800539a:	409a      	lsls	r2, r3
 800539c:	4216      	tst	r6, r2
 800539e:	d008      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053a0:	6821      	ldr	r1, [r4, #0]
 80053a2:	6949      	ldr	r1, [r1, #20]
 80053a4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053a6:	bf41      	itttt	mi
 80053a8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053aa:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80053ac:	f042 0202 	orrmi.w	r2, r2, #2
 80053b0:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053b2:	2204      	movs	r2, #4
 80053b4:	409a      	lsls	r2, r3
 80053b6:	4216      	tst	r6, r2
 80053b8:	d008      	beq.n	80053cc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053ba:	6821      	ldr	r1, [r4, #0]
 80053bc:	6809      	ldr	r1, [r1, #0]
 80053be:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053c0:	bf41      	itttt	mi
 80053c2:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053c4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80053c6:	f042 0204 	orrmi.w	r2, r2, #4
 80053ca:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053cc:	2210      	movs	r2, #16
 80053ce:	409a      	lsls	r2, r3
 80053d0:	4216      	tst	r6, r2
 80053d2:	d010      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	0709      	lsls	r1, r1, #28
 80053da:	d50c      	bpl.n	80053f6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053dc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	0350      	lsls	r0, r2, #13
 80053e2:	d535      	bpl.n	8005450 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	0319      	lsls	r1, r3, #12
 80053e8:	d401      	bmi.n	80053ee <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80053ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ec:	e000      	b.n	80053f0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80053f0:	b10b      	cbz	r3, 80053f6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80053f2:	4620      	mov	r0, r4
 80053f4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80053f8:	2220      	movs	r2, #32
 80053fa:	408a      	lsls	r2, r1
 80053fc:	4216      	tst	r6, r2
 80053fe:	d038      	beq.n	8005472 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	06c6      	lsls	r6, r0, #27
 8005406:	d534      	bpl.n	8005472 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005408:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800540a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800540e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005410:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005412:	d125      	bne.n	8005460 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005414:	f022 0216 	bic.w	r2, r2, #22
 8005418:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005420:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005422:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005424:	b90a      	cbnz	r2, 800542a <HAL_DMA_IRQHandler+0xc6>
 8005426:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005428:	b11a      	cbz	r2, 8005432 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f022 0208 	bic.w	r2, r2, #8
 8005430:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005432:	233f      	movs	r3, #63	; 0x3f
 8005434:	408b      	lsls	r3, r1
 8005436:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8005438:	2300      	movs	r3, #0
 800543a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800543e:	2301      	movs	r3, #1
 8005440:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005444:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8005446:	b10b      	cbz	r3, 800544c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8005448:	4620      	mov	r0, r4
 800544a:	4798      	blx	r3
}
 800544c:	b003      	add	sp, #12
 800544e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005454:	bf5e      	ittt	pl
 8005456:	681a      	ldrpl	r2, [r3, #0]
 8005458:	f022 0208 	bicpl.w	r2, r2, #8
 800545c:	601a      	strpl	r2, [r3, #0]
 800545e:	e7c4      	b.n	80053ea <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005460:	0350      	lsls	r0, r2, #13
 8005462:	d528      	bpl.n	80054b6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	0319      	lsls	r1, r3, #12
 8005468:	d432      	bmi.n	80054d0 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800546a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800546c:	b10b      	cbz	r3, 8005472 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800546e:	4620      	mov	r0, r4
 8005470:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005472:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0e9      	beq.n	800544c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005478:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800547a:	07da      	lsls	r2, r3, #31
 800547c:	d519      	bpl.n	80054b2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800547e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8005480:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005482:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800548e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005492:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8005496:	9b01      	ldr	r3, [sp, #4]
 8005498:	3301      	adds	r3, #1
 800549a:	429f      	cmp	r7, r3
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	d302      	bcc.n	80054a6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054a0:	6813      	ldr	r3, [r2, #0]
      do
 80054a2:	07db      	lsls	r3, r3, #31
 80054a4:	d4f7      	bmi.n	8005496 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80054a6:	2300      	movs	r3, #0
 80054a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80054b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80054b4:	e7c7      	b.n	8005446 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80054bc:	d108      	bne.n	80054d0 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	f021 0110 	bic.w	r1, r1, #16
 80054c4:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80054c6:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80054c8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80054cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80054d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054d2:	e7cb      	b.n	800546c <HAL_DMA_IRQHandler+0x108>
 80054d4:	20000004 	.word	0x20000004

080054d8 <_ZL24FLASH_Program_DoubleWordmy>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054d8:	4908      	ldr	r1, [pc, #32]	; (80054fc <_ZL24FLASH_Program_DoubleWordmy+0x24>)
{
 80054da:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054dc:	690c      	ldr	r4, [r1, #16]
 80054de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80054e2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80054e4:	690c      	ldr	r4, [r1, #16]
 80054e6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80054ea:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054ec:	690c      	ldr	r4, [r1, #16]
 80054ee:	f044 0401 	orr.w	r4, r4, #1
 80054f2:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80054f4:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80054f6:	6043      	str	r3, [r0, #4]
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	bf00      	nop
 80054fc:	40023c00 	.word	0x40023c00

08005500 <_ZL18FLASH_Program_Wordmm>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <_ZL18FLASH_Program_Wordmm+0x20>)
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005508:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005510:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800551a:	6001      	str	r1, [r0, #0]
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40023c00 	.word	0x40023c00

08005524 <_ZL22FLASH_Program_HalfWordmt>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <_ZL22FLASH_Program_HalfWordmt+0x20>)
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800552c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005534:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800553e:	8001      	strh	r1, [r0, #0]
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40023c00 	.word	0x40023c00

08005548 <_ZL18FLASH_SetErrorCodev>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005548:	4b20      	ldr	r3, [pc, #128]	; (80055cc <_ZL18FLASH_SetErrorCodev+0x84>)
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	06d0      	lsls	r0, r2, #27
 800554e:	d506      	bpl.n	800555e <_ZL18FLASH_SetErrorCodev+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005550:	491f      	ldr	r1, [pc, #124]	; (80055d0 <_ZL18FLASH_SetErrorCodev+0x88>)
 8005552:	69ca      	ldr	r2, [r1, #28]
 8005554:	f042 0210 	orr.w	r2, r2, #16
 8005558:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800555a:	2210      	movs	r2, #16
 800555c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	0691      	lsls	r1, r2, #26
 8005562:	d506      	bpl.n	8005572 <_ZL18FLASH_SetErrorCodev+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005564:	491a      	ldr	r1, [pc, #104]	; (80055d0 <_ZL18FLASH_SetErrorCodev+0x88>)
 8005566:	69ca      	ldr	r2, [r1, #28]
 8005568:	f042 0208 	orr.w	r2, r2, #8
 800556c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800556e:	2220      	movs	r2, #32
 8005570:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <_ZL18FLASH_SetErrorCodev+0x84>)
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	0652      	lsls	r2, r2, #25
 8005578:	d506      	bpl.n	8005588 <_ZL18FLASH_SetErrorCodev+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800557a:	4915      	ldr	r1, [pc, #84]	; (80055d0 <_ZL18FLASH_SetErrorCodev+0x88>)
 800557c:	69ca      	ldr	r2, [r1, #28]
 800557e:	f042 0204 	orr.w	r2, r2, #4
 8005582:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005584:	2240      	movs	r2, #64	; 0x40
 8005586:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	0610      	lsls	r0, r2, #24
 800558c:	d506      	bpl.n	800559c <_ZL18FLASH_SetErrorCodev+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800558e:	4910      	ldr	r1, [pc, #64]	; (80055d0 <_ZL18FLASH_SetErrorCodev+0x88>)
 8005590:	69ca      	ldr	r2, [r1, #28]
 8005592:	f042 0202 	orr.w	r2, r2, #2
 8005596:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005598:	2280      	movs	r2, #128	; 0x80
 800559a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <_ZL18FLASH_SetErrorCodev+0x84>)
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	05d1      	lsls	r1, r2, #23
 80055a2:	d507      	bpl.n	80055b4 <_ZL18FLASH_SetErrorCodev+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80055a4:	490a      	ldr	r1, [pc, #40]	; (80055d0 <_ZL18FLASH_SetErrorCodev+0x88>)
 80055a6:	69ca      	ldr	r2, [r1, #28]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80055ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055b2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	0792      	lsls	r2, r2, #30
 80055b8:	d506      	bpl.n	80055c8 <_ZL18FLASH_SetErrorCodev+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80055ba:	4905      	ldr	r1, [pc, #20]	; (80055d0 <_ZL18FLASH_SetErrorCodev+0x88>)
 80055bc:	69ca      	ldr	r2, [r1, #28]
 80055be:	f042 0220 	orr.w	r2, r2, #32
 80055c2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80055c4:	2202      	movs	r2, #2
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40023c00 	.word	0x40023c00
 80055d0:	20003d30 	.word	0x20003d30

080055d4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_FLASH_Unlock+0x1c>)
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80055da:	bfbf      	itttt	lt
 80055dc:	4a05      	ldrlt	r2, [pc, #20]	; (80055f4 <HAL_FLASH_Unlock+0x20>)
 80055de:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80055e0:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80055e4:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80055e6:	bfba      	itte	lt
 80055e8:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	0fc0      	lsrlt	r0, r0, #31
 80055ec:	2000      	movge	r0, #0
}
 80055ee:	4770      	bx	lr
 80055f0:	40023c00 	.word	0x40023c00
 80055f4:	45670123 	.word	0x45670123

080055f8 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80055f8:	4a03      	ldr	r2, [pc, #12]	; (8005608 <HAL_FLASH_Lock+0x10>)
 80055fa:	6913      	ldr	r3, [r2, #16]
 80055fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005600:	6113      	str	r3, [r2, #16]
}
 8005602:	2000      	movs	r0, #0
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40023c00 	.word	0x40023c00

0800560c <FLASH_WaitForLastOperation>:
{ 
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005610:	4c12      	ldr	r4, [pc, #72]	; (800565c <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005612:	2200      	movs	r2, #0
{ 
 8005614:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005616:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8005618:	f7ff fb2a 	bl	8004c70 <HAL_GetTick>
 800561c:	4626      	mov	r6, r4
 800561e:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005620:	68e3      	ldr	r3, [r4, #12]
 8005622:	03d9      	lsls	r1, r3, #15
 8005624:	d50a      	bpl.n	800563c <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8005626:	1c6a      	adds	r2, r5, #1
 8005628:	d0fa      	beq.n	8005620 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800562a:	b90d      	cbnz	r5, 8005630 <FLASH_WaitForLastOperation+0x24>
        return HAL_TIMEOUT;
 800562c:	2003      	movs	r0, #3
 800562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005630:	f7ff fb1e 	bl	8004c70 <HAL_GetTick>
 8005634:	1bc0      	subs	r0, r0, r7
 8005636:	4285      	cmp	r5, r0
 8005638:	d3f8      	bcc.n	800562c <FLASH_WaitForLastOperation+0x20>
 800563a:	e7f1      	b.n	8005620 <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800563c:	68e3      	ldr	r3, [r4, #12]
 800563e:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005640:	bf44      	itt	mi
 8005642:	2301      	movmi	r3, #1
 8005644:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005646:	68f0      	ldr	r0, [r6, #12]
 8005648:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 800564c:	d002      	beq.n	8005654 <FLASH_WaitForLastOperation+0x48>
    FLASH_SetErrorCode();
 800564e:	f7ff ff7b 	bl	8005548 <_ZL18FLASH_SetErrorCodev>
    return HAL_ERROR;
 8005652:	2001      	movs	r0, #1
}  
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005656:	bf00      	nop
 8005658:	20003d30 	.word	0x20003d30
 800565c:	40023c00 	.word	0x40023c00

08005660 <HAL_FLASH_Program>:
{
 8005660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8005664:	4d20      	ldr	r5, [pc, #128]	; (80056e8 <HAL_FLASH_Program+0x88>)
{
 8005666:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8005668:	7e2b      	ldrb	r3, [r5, #24]
 800566a:	2b01      	cmp	r3, #1
{
 800566c:	4607      	mov	r7, r0
 800566e:	460e      	mov	r6, r1
 8005670:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8005672:	d035      	beq.n	80056e0 <HAL_FLASH_Program+0x80>
 8005674:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005676:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800567a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800567c:	f7ff ffc6 	bl	800560c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005680:	b9b0      	cbnz	r0, 80056b0 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005682:	b9cf      	cbnz	r7, 80056b8 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <HAL_FLASH_Program+0x8c>)
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800568c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005692:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005694:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800569c:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800569e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056a2:	f7ff ffb3 	bl	800560c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80056a6:	4a11      	ldr	r2, [pc, #68]	; (80056ec <HAL_FLASH_Program+0x8c>)
 80056a8:	6913      	ldr	r3, [r2, #16]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80056b0:	2300      	movs	r3, #0
 80056b2:	762b      	strb	r3, [r5, #24]
  return status;
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80056b8:	2f01      	cmp	r7, #1
 80056ba:	d104      	bne.n	80056c6 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80056bc:	b2a1      	uxth	r1, r4
 80056be:	4630      	mov	r0, r6
 80056c0:	f7ff ff30 	bl	8005524 <_ZL22FLASH_Program_HalfWordmt>
 80056c4:	e7eb      	b.n	800569e <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80056c6:	2f02      	cmp	r7, #2
 80056c8:	d104      	bne.n	80056d4 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80056ca:	4621      	mov	r1, r4
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff ff17 	bl	8005500 <_ZL18FLASH_Program_Wordmm>
 80056d2:	e7e4      	b.n	800569e <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80056d4:	4622      	mov	r2, r4
 80056d6:	4643      	mov	r3, r8
 80056d8:	4630      	mov	r0, r6
 80056da:	f7ff fefd 	bl	80054d8 <_ZL24FLASH_Program_DoubleWordmy>
 80056de:	e7de      	b.n	800569e <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80056e0:	2002      	movs	r0, #2
}
 80056e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e6:	bf00      	nop
 80056e8:	20003d30 	.word	0x20003d30
 80056ec:	40023c00 	.word	0x40023c00

080056f0 <_ZL15FLASH_MassErasehm.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <_ZL15FLASH_MassErasehm.isra.0+0x20>)
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	f042 0204 	orr.w	r2, r2, #4
 8005700:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005708:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800570c:	6118      	str	r0, [r3, #16]
 800570e:	4770      	bx	lr
 8005710:	40023c00 	.word	0x40023c00

08005714 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005714:	b139      	cbz	r1, 8005726 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005716:	2901      	cmp	r1, #1
 8005718:	d01c      	beq.n	8005754 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800571a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800571c:	bf0c      	ite	eq
 800571e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8005722:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005726:	4b0d      	ldr	r3, [pc, #52]	; (800575c <FLASH_Erase_Sector+0x48>)
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800572e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	4311      	orrs	r1, r2
 8005734:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800573c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	f042 0202 	orr.w	r2, r2, #2
 8005744:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8005748:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005750:	611a      	str	r2, [r3, #16]
 8005752:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005758:	e7e5      	b.n	8005726 <FLASH_Erase_Sector+0x12>
 800575a:	bf00      	nop
 800575c:	40023c00 	.word	0x40023c00

08005760 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <FLASH_FlushCaches+0x54>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	0591      	lsls	r1, r2, #22
 8005766:	d50f      	bpl.n	8005788 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800576e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800577e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005786:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <FLASH_FlushCaches+0x54>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	0552      	lsls	r2, r2, #21
 800578e:	d50f      	bpl.n	80057b0 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005796:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057a6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40023c00 	.word	0x40023c00

080057b8 <HAL_FLASHEx_Erase>:
{
 80057b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80057bc:	4e23      	ldr	r6, [pc, #140]	; (800584c <HAL_FLASHEx_Erase+0x94>)
 80057be:	7e33      	ldrb	r3, [r6, #24]
 80057c0:	2b01      	cmp	r3, #1
{
 80057c2:	4604      	mov	r4, r0
 80057c4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80057c6:	d03f      	beq.n	8005848 <HAL_FLASHEx_Erase+0x90>
 80057c8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057ca:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80057ce:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057d0:	f7ff ff1c 	bl	800560c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80057d4:	4605      	mov	r5, r0
 80057d6:	b9a8      	cbnz	r0, 8005804 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 80057d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057dc:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d113      	bne.n	800580e <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80057e6:	7c20      	ldrb	r0, [r4, #16]
 80057e8:	f7ff ff82 	bl	80056f0 <_ZL15FLASH_MassErasehm.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057f0:	f7ff ff0c 	bl	800560c <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80057f4:	4a16      	ldr	r2, [pc, #88]	; (8005850 <HAL_FLASHEx_Erase+0x98>)
 80057f6:	6913      	ldr	r3, [r2, #16]
 80057f8:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057fc:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80057fe:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8005800:	f7ff ffae 	bl	8005760 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8005804:	2300      	movs	r3, #0
 8005806:	7633      	strb	r3, [r6, #24]
}
 8005808:	4628      	mov	r0, r5
 800580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800580e:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005810:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8005850 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005814:	68e3      	ldr	r3, [r4, #12]
 8005816:	68a2      	ldr	r2, [r4, #8]
 8005818:	4413      	add	r3, r2
 800581a:	429f      	cmp	r7, r3
 800581c:	d2f0      	bcs.n	8005800 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800581e:	7c21      	ldrb	r1, [r4, #16]
 8005820:	4638      	mov	r0, r7
 8005822:	f7ff ff77 	bl	8005714 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005826:	f24c 3050 	movw	r0, #50000	; 0xc350
 800582a:	f7ff feef 	bl	800560c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800582e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005832:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005836:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800583a:	b118      	cbz	r0, 8005844 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 800583c:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005840:	4605      	mov	r5, r0
          break;
 8005842:	e7dd      	b.n	8005800 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005844:	3701      	adds	r7, #1
 8005846:	e7e5      	b.n	8005814 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8005848:	2502      	movs	r5, #2
 800584a:	e7dd      	b.n	8005808 <HAL_FLASHEx_Erase+0x50>
 800584c:	20003d30 	.word	0x20003d30
 8005850:	40023c00 	.word	0x40023c00

08005854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800585a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800585c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80059c4 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005860:	4a56      	ldr	r2, [pc, #344]	; (80059bc <HAL_GPIO_Init+0x168>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005862:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8005864:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005868:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800586a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800586c:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005870:	ea0a 0504 	and.w	r5, sl, r4
    if(iocurrent == ioposition)
 8005874:	45aa      	cmp	sl, r5
 8005876:	f040 8096 	bne.w	80059a6 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800587a:	684c      	ldr	r4, [r1, #4]
 800587c:	f024 0b10 	bic.w	fp, r4, #16
 8005880:	f1bb 0f02 	cmp.w	fp, #2
 8005884:	d114      	bne.n	80058b0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8005886:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800588a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800588e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005892:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005896:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800589a:	270f      	movs	r7, #15
 800589c:	fa07 f70c 	lsl.w	r7, r7, ip
 80058a0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058a4:	690e      	ldr	r6, [r1, #16]
 80058a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80058aa:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80058ac:	f8ce 6020 	str.w	r6, [lr, #32]
 80058b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058b4:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80058b6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80058bc:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058be:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058c2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058c4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058cc:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058d0:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80058d4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058d6:	d811      	bhi.n	80058fc <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 80058d8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058da:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058de:	68ce      	ldr	r6, [r1, #12]
 80058e0:	fa06 fe0c 	lsl.w	lr, r6, ip
 80058e4:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80058e8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80058ea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058ec:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80058f0:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80058f4:	409e      	lsls	r6, r3
 80058f6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80058fa:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80058fc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058fe:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005900:	688e      	ldr	r6, [r1, #8]
 8005902:	fa06 f60c 	lsl.w	r6, r6, ip
 8005906:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005908:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800590a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800590c:	d54b      	bpl.n	80059a6 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800590e:	2600      	movs	r6, #0
 8005910:	9603      	str	r6, [sp, #12]
 8005912:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8005916:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800591a:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 800591e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8005922:	f023 0703 	bic.w	r7, r3, #3
 8005926:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800592a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800592e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8005932:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005934:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005938:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800593a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800593e:	f04f 0e0f 	mov.w	lr, #15
 8005942:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005946:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800594a:	4e1d      	ldr	r6, [pc, #116]	; (80059c0 <HAL_GPIO_Init+0x16c>)
 800594c:	42b0      	cmp	r0, r6
 800594e:	d031      	beq.n	80059b4 <HAL_GPIO_Init+0x160>
 8005950:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005954:	42b0      	cmp	r0, r6
 8005956:	d02f      	beq.n	80059b8 <HAL_GPIO_Init+0x164>
 8005958:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800595c:	42b0      	cmp	r0, r6
 800595e:	bf14      	ite	ne
 8005960:	2607      	movne	r6, #7
 8005962:	2602      	moveq	r6, #2
 8005964:	fa06 f60c 	lsl.w	r6, r6, ip
 8005968:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800596c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800596e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005970:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005972:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8005976:	bf0c      	ite	eq
 8005978:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800597a:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800597c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800597e:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005980:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005984:	bf0c      	ite	eq
 8005986:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005988:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800598a:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800598c:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800598e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005992:	bf0c      	ite	eq
 8005994:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005996:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8005998:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800599a:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800599c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800599e:	bf54      	ite	pl
 80059a0:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80059a2:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80059a4:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059a6:	3301      	adds	r3, #1
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	f47f af5e 	bne.w	800586a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80059ae:	b005      	add	sp, #20
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059b4:	2600      	movs	r6, #0
 80059b6:	e7d5      	b.n	8005964 <HAL_GPIO_Init+0x110>
 80059b8:	2601      	movs	r6, #1
 80059ba:	e7d3      	b.n	8005964 <HAL_GPIO_Init+0x110>
 80059bc:	40013c00 	.word	0x40013c00
 80059c0:	40020000 	.word	0x40020000
 80059c4:	40023800 	.word	0x40023800

080059c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059c8:	b10a      	cbz	r2, 80059ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059ca:	6181      	str	r1, [r0, #24]
 80059cc:	4770      	bx	lr
 80059ce:	0409      	lsls	r1, r1, #16
 80059d0:	e7fb      	b.n	80059ca <HAL_GPIO_WritePin+0x2>

080059d2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80059d2:	6943      	ldr	r3, [r0, #20]
 80059d4:	4059      	eors	r1, r3
 80059d6:	6141      	str	r1, [r0, #20]
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059dc:	4913      	ldr	r1, [pc, #76]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80059de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059e0:	688b      	ldr	r3, [r1, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d003      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x16>
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d003      	beq.n	80059f6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ee:	4810      	ldr	r0, [pc, #64]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80059f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80059f2:	4810      	ldr	r0, [pc, #64]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x58>)
 80059f4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059f6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059f8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059fc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a00:	bf14      	ite	ne
 8005a02:	480c      	ldrne	r0, [pc, #48]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a04:	480a      	ldreq	r0, [pc, #40]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a06:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005a0a:	bf18      	it	ne
 8005a0c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a12:	fba1 0100 	umull	r0, r1, r1, r0
 8005a16:	f7fb f823 	bl	8000a60 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a1a:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x50>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a22:	3301      	adds	r3, #1
 8005a24:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8005a26:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a2a:	bd08      	pop	{r3, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	00f42400 	.word	0x00f42400
 8005a34:	007a1200 	.word	0x007a1200

08005a38 <HAL_RCC_ClockConfig>:
{
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005a3e:	4604      	mov	r4, r0
 8005a40:	b910      	cbnz	r0, 8005a48 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005a42:	2001      	movs	r0, #1
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a48:	4b44      	ldr	r3, [pc, #272]	; (8005b5c <HAL_RCC_ClockConfig+0x124>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	f002 020f 	and.w	r2, r2, #15
 8005a50:	428a      	cmp	r2, r1
 8005a52:	d327      	bcc.n	8005aa4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a54:	6821      	ldr	r1, [r4, #0]
 8005a56:	078f      	lsls	r7, r1, #30
 8005a58:	d42c      	bmi.n	8005ab4 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5a:	07c8      	lsls	r0, r1, #31
 8005a5c:	d549      	bpl.n	8005af2 <HAL_RCC_ClockConfig+0xba>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5e:	6862      	ldr	r2, [r4, #4]
 8005a60:	4b3f      	ldr	r3, [pc, #252]	; (8005b60 <HAL_RCC_ClockConfig+0x128>)
 8005a62:	2a01      	cmp	r2, #1
 8005a64:	d13b      	bne.n	8005ade <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6c:	d0e9      	beq.n	8005a42 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a6e:	4e3c      	ldr	r6, [pc, #240]	; (8005b60 <HAL_RCC_ClockConfig+0x128>)
 8005a70:	68b3      	ldr	r3, [r6, #8]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005a7a:	f7ff f8f9 	bl	8004c70 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a7e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005a82:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a84:	68b3      	ldr	r3, [r6, #8]
 8005a86:	6862      	ldr	r2, [r4, #4]
 8005a88:	f003 030c 	and.w	r3, r3, #12
 8005a8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005a90:	d02f      	beq.n	8005af2 <HAL_RCC_ClockConfig+0xba>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a92:	f7ff f8ed 	bl	8004c70 <HAL_GetTick>
 8005a96:	eba0 0008 	sub.w	r0, r0, r8
 8005a9a:	42b8      	cmp	r0, r7
 8005a9c:	d9f2      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x4c>
        return HAL_TIMEOUT;
 8005a9e:	2003      	movs	r0, #3
}
 8005aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa4:	b2ca      	uxtb	r2, r1
 8005aa6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	428b      	cmp	r3, r1
 8005ab0:	d1c7      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xa>
 8005ab2:	e7cf      	b.n	8005a54 <HAL_RCC_ClockConfig+0x1c>
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aba:	bf1e      	ittt	ne
 8005abc:	689a      	ldrne	r2, [r3, #8]
 8005abe:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8005ac2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac6:	bf42      	ittt	mi
 8005ac8:	689a      	ldrmi	r2, [r3, #8]
 8005aca:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8005ace:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	68a0      	ldr	r0, [r4, #8]
 8005ad4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ad8:	4302      	orrs	r2, r0
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	e7bd      	b.n	8005a5a <HAL_RCC_ClockConfig+0x22>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ade:	1e91      	subs	r1, r2, #2
 8005ae0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ae4:	d802      	bhi.n	8005aec <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005aea:	e7bf      	b.n	8005a6c <HAL_RCC_ClockConfig+0x34>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aec:	f013 0f02 	tst.w	r3, #2
 8005af0:	e7bc      	b.n	8005a6c <HAL_RCC_ClockConfig+0x34>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af2:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <HAL_RCC_ClockConfig+0x124>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	f002 020f 	and.w	r2, r2, #15
 8005afa:	42aa      	cmp	r2, r5
 8005afc:	d81d      	bhi.n	8005b3a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	0751      	lsls	r1, r2, #29
 8005b02:	d423      	bmi.n	8005b4c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b04:	0713      	lsls	r3, r2, #28
 8005b06:	d507      	bpl.n	8005b18 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b08:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <HAL_RCC_ClockConfig+0x128>)
 8005b0a:	6921      	ldr	r1, [r4, #16]
 8005b0c:	6893      	ldr	r3, [r2, #8]
 8005b0e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005b12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b16:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b18:	f7ff ff60 	bl	80059dc <HAL_RCC_GetSysClockFreq>
 8005b1c:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <HAL_RCC_ClockConfig+0x128>)
 8005b1e:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <HAL_RCC_ClockConfig+0x12c>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b26:	5cd3      	ldrb	r3, [r2, r3]
 8005b28:	40d8      	lsrs	r0, r3
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <HAL_RCC_ClockConfig+0x130>)
 8005b2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005b2e:	2000      	movs	r0, #0
 8005b30:	f7ff f868 	bl	8004c04 <HAL_InitTick>
  return HAL_OK;
 8005b34:	2000      	movs	r0, #0
 8005b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3a:	b2ea      	uxtb	r2, r5
 8005b3c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	f47f af7c 	bne.w	8005a42 <HAL_RCC_ClockConfig+0xa>
 8005b4a:	e7d8      	b.n	8005afe <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b4c:	4904      	ldr	r1, [pc, #16]	; (8005b60 <HAL_RCC_ClockConfig+0x128>)
 8005b4e:	68e0      	ldr	r0, [r4, #12]
 8005b50:	688b      	ldr	r3, [r1, #8]
 8005b52:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005b56:	4303      	orrs	r3, r0
 8005b58:	608b      	str	r3, [r1, #8]
 8005b5a:	e7d3      	b.n	8005b04 <HAL_RCC_ClockConfig+0xcc>
 8005b5c:	40023c00 	.word	0x40023c00
 8005b60:	40023800 	.word	0x40023800
 8005b64:	0800a1de 	.word	0x0800a1de
 8005b68:	20000004 	.word	0x20000004

08005b6c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <HAL_RCC_GetHCLKFreq+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000004 	.word	0x20000004

08005b78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8005b7a:	4a05      	ldr	r2, [pc, #20]	; (8005b90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	4a03      	ldr	r2, [pc, #12]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005b86:	6810      	ldr	r0, [r2, #0]
}
 8005b88:	40d8      	lsrs	r0, r3
 8005b8a:	4770      	bx	lr
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	0800a1ee 	.word	0x0800a1ee
 8005b94:	20000004 	.word	0x20000004

08005b98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b98:	4b04      	ldr	r3, [pc, #16]	; (8005bac <HAL_RCC_GetPCLK2Freq+0x14>)
 8005b9a:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	4a03      	ldr	r2, [pc, #12]	; (8005bb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005ba6:	6810      	ldr	r0, [r2, #0]
}
 8005ba8:	40d8      	lsrs	r0, r3
 8005baa:	4770      	bx	lr
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	0800a1ee 	.word	0x0800a1ee
 8005bb4:	20000004 	.word	0x20000004

08005bb8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bb8:	6803      	ldr	r3, [r0, #0]
{
 8005bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbc:	07d9      	lsls	r1, r3, #31
{
 8005bbe:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bc0:	f140 812d 	bpl.w	8005e1e <HAL_RCC_OscConfig+0x266>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bc4:	4ba8      	ldr	r3, [pc, #672]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	f002 020c 	and.w	r2, r2, #12
 8005bcc:	2a04      	cmp	r2, #4
 8005bce:	f000 8121 	beq.w	8005e14 <HAL_RCC_OscConfig+0x25c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bd8:	2a08      	cmp	r2, #8
 8005bda:	d103      	bne.n	8005be4 <HAL_RCC_OscConfig+0x2c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	0252      	lsls	r2, r2, #9
 8005be0:	f100 8118 	bmi.w	8005e14 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be4:	6862      	ldr	r2, [r4, #4]
 8005be6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005bea:	d119      	bne.n	8005c20 <HAL_RCC_OscConfig+0x68>
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7ff f83c 	bl	8004c70 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf8:	4e9b      	ldr	r6, [pc, #620]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005bfa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	039b      	lsls	r3, r3, #14
 8005c00:	f100 810d 	bmi.w	8005e1e <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c04:	f7ff f834 	bl	8004c70 <HAL_GetTick>
 8005c08:	1b40      	subs	r0, r0, r5
 8005c0a:	2864      	cmp	r0, #100	; 0x64
 8005c0c:	d9f6      	bls.n	8005bfc <HAL_RCC_OscConfig+0x44>
          {
            return HAL_TIMEOUT;
 8005c0e:	2003      	movs	r0, #3
 8005c10:	e004      	b.n	8005c1c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8102 	bne.w	8005e1e <HAL_RCC_OscConfig+0x266>
        return HAL_ERROR;
 8005c1a:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8005c1c:	b003      	add	sp, #12
 8005c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c20:	4d91      	ldr	r5, [pc, #580]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c22:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8005c26:	682b      	ldr	r3, [r5, #0]
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_OscConfig+0x82>
 8005c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	e7dc      	b.n	8005bf4 <HAL_RCC_OscConfig+0x3c>
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c46:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c48:	2a00      	cmp	r2, #0
 8005c4a:	d1d3      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x3c>
        tickstart = HAL_GetTick();
 8005c4c:	f7ff f810 	bl	8004c70 <HAL_GetTick>
 8005c50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c52:	682b      	ldr	r3, [r5, #0]
 8005c54:	039f      	lsls	r7, r3, #14
 8005c56:	f140 80e2 	bpl.w	8005e1e <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c5a:	f7ff f809 	bl	8004c70 <HAL_GetTick>
 8005c5e:	1b80      	subs	r0, r0, r6
 8005c60:	2864      	cmp	r0, #100	; 0x64
 8005c62:	d9f6      	bls.n	8005c52 <HAL_RCC_OscConfig+0x9a>
 8005c64:	e7d3      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_ENABLE();
 8005c66:	2301      	movs	r3, #1
 8005c68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c6a:	f7ff f801 	bl	8004c70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c6e:	4d7e      	ldr	r5, [pc, #504]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005c70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	0798      	lsls	r0, r3, #30
 8005c76:	d405      	bmi.n	8005c84 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c78:	f7fe fffa 	bl	8004c70 <HAL_GetTick>
 8005c7c:	1b80      	subs	r0, r0, r6
 8005c7e:	2802      	cmp	r0, #2
 8005c80:	d9f7      	bls.n	8005c72 <HAL_RCC_OscConfig+0xba>
 8005c82:	e7c4      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	6922      	ldr	r2, [r4, #16]
 8005c88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005c90:	602b      	str	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	071a      	lsls	r2, r3, #28
 8005c96:	d51f      	bpl.n	8005cd8 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c98:	6962      	ldr	r2, [r4, #20]
 8005c9a:	4b74      	ldr	r3, [pc, #464]	; (8005e6c <HAL_RCC_OscConfig+0x2b4>)
 8005c9c:	b172      	cbz	r2, 8005cbc <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_ENABLE();
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005ca2:	f7fe ffe5 	bl	8004c70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca6:	4e70      	ldr	r6, [pc, #448]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8005ca8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005caa:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005cac:	079b      	lsls	r3, r3, #30
 8005cae:	d413      	bmi.n	8005cd8 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb0:	f7fe ffde 	bl	8004c70 <HAL_GetTick>
 8005cb4:	1b40      	subs	r0, r0, r5
 8005cb6:	2802      	cmp	r0, #2
 8005cb8:	d9f7      	bls.n	8005caa <HAL_RCC_OscConfig+0xf2>
 8005cba:	e7a8      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_LSI_DISABLE();
 8005cbc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005cbe:	f7fe ffd7 	bl	8004c70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc2:	4e69      	ldr	r6, [pc, #420]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8005cc4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005cc8:	079f      	lsls	r7, r3, #30
 8005cca:	d505      	bpl.n	8005cd8 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ccc:	f7fe ffd0 	bl	8004c70 <HAL_GetTick>
 8005cd0:	1b40      	subs	r0, r0, r5
 8005cd2:	2802      	cmp	r0, #2
 8005cd4:	d9f7      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x10e>
 8005cd6:	e79a      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	075d      	lsls	r5, r3, #29
 8005cdc:	d551      	bpl.n	8005d82 <HAL_RCC_OscConfig+0x1ca>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	4b61      	ldr	r3, [pc, #388]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
    PWR->CR |= PWR_CR_DBP;
 8005ce4:	4d62      	ldr	r5, [pc, #392]	; (8005e70 <HAL_RCC_OscConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	9301      	str	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cfc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005cfe:	f7fe ffb7 	bl	8004c70 <HAL_GetTick>
 8005d02:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	05d8      	lsls	r0, r3, #23
 8005d08:	d405      	bmi.n	8005d16 <HAL_RCC_OscConfig+0x15e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fe ffb1 	bl	8004c70 <HAL_GetTick>
 8005d0e:	1b80      	subs	r0, r0, r6
 8005d10:	2802      	cmp	r0, #2
 8005d12:	d9f7      	bls.n	8005d04 <HAL_RCC_OscConfig+0x14c>
 8005d14:	e77b      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d16:	68a3      	ldr	r3, [r4, #8]
 8005d18:	4d53      	ldr	r5, [pc, #332]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d112      	bne.n	8005d44 <HAL_RCC_OscConfig+0x18c>
 8005d1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005d26:	f7fe ffa3 	bl	8004c70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2a:	4f4f      	ldr	r7, [pc, #316]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8005d2c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d2e:	f241 3588 	movw	r5, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d34:	0799      	lsls	r1, r3, #30
 8005d36:	d424      	bmi.n	8005d82 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fe ff9a 	bl	8004c70 <HAL_GetTick>
 8005d3c:	1b80      	subs	r0, r0, r6
 8005d3e:	42a8      	cmp	r0, r5
 8005d40:	d9f7      	bls.n	8005d32 <HAL_RCC_OscConfig+0x17a>
 8005d42:	e764      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d44:	2b05      	cmp	r3, #5
 8005d46:	d104      	bne.n	8005d52 <HAL_RCC_OscConfig+0x19a>
 8005d48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d4a:	f043 0304 	orr.w	r3, r3, #4
 8005d4e:	672b      	str	r3, [r5, #112]	; 0x70
 8005d50:	e7e5      	b.n	8005d1e <HAL_RCC_OscConfig+0x166>
 8005d52:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	672a      	str	r2, [r5, #112]	; 0x70
 8005d5a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005d5c:	f022 0204 	bic.w	r2, r2, #4
 8005d60:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1df      	bne.n	8005d26 <HAL_RCC_OscConfig+0x16e>
      tickstart = HAL_GetTick();
 8005d66:	f7fe ff83 	bl	8004c70 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005d6e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d72:	079a      	lsls	r2, r3, #30
 8005d74:	d505      	bpl.n	8005d82 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d76:	f7fe ff7b 	bl	8004c70 <HAL_GetTick>
 8005d7a:	1bc0      	subs	r0, r0, r7
 8005d7c:	42b0      	cmp	r0, r6
 8005d7e:	d9f7      	bls.n	8005d70 <HAL_RCC_OscConfig+0x1b8>
 8005d80:	e745      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d82:	69a2      	ldr	r2, [r4, #24]
 8005d84:	b90a      	cbnz	r2, 8005d8a <HAL_RCC_OscConfig+0x1d2>
  return HAL_OK;
 8005d86:	2000      	movs	r0, #0
 8005d88:	e748      	b.n	8005c1c <HAL_RCC_OscConfig+0x64>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d8a:	4d37      	ldr	r5, [pc, #220]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
 8005d8c:	68ab      	ldr	r3, [r5, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	f43f af41 	beq.w	8005c1a <HAL_RCC_OscConfig+0x62>
 8005d98:	4e36      	ldr	r6, [pc, #216]	; (8005e74 <HAL_RCC_OscConfig+0x2bc>)
 8005d9a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d9c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005d9e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da0:	d12c      	bne.n	8005dfc <HAL_RCC_OscConfig+0x244>
        tickstart = HAL_GetTick();
 8005da2:	f7fe ff65 	bl	8004c70 <HAL_GetTick>
 8005da6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	019b      	lsls	r3, r3, #6
 8005dac:	d505      	bpl.n	8005dba <HAL_RCC_OscConfig+0x202>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dae:	f7fe ff5f 	bl	8004c70 <HAL_GetTick>
 8005db2:	1bc0      	subs	r0, r0, r7
 8005db4:	2802      	cmp	r0, #2
 8005db6:	d9f7      	bls.n	8005da8 <HAL_RCC_OscConfig+0x1f0>
 8005db8:	e729      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dba:	6a22      	ldr	r2, [r4, #32]
 8005dbc:	69e3      	ldr	r3, [r4, #28]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005dc2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005dc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005dc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005dce:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005dd4:	0852      	lsrs	r2, r2, #1
 8005dd6:	3a01      	subs	r2, #1
 8005dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ddc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005dde:	2301      	movs	r3, #1
 8005de0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005de2:	f7fe ff45 	bl	8004c70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de6:	4d20      	ldr	r5, [pc, #128]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005de8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	019e      	lsls	r6, r3, #6
 8005dee:	d4ca      	bmi.n	8005d86 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df0:	f7fe ff3e 	bl	8004c70 <HAL_GetTick>
 8005df4:	1b00      	subs	r0, r0, r4
 8005df6:	2802      	cmp	r0, #2
 8005df8:	d9f7      	bls.n	8005dea <HAL_RCC_OscConfig+0x232>
 8005dfa:	e708      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
        tickstart = HAL_GetTick();
 8005dfc:	f7fe ff38 	bl	8004c70 <HAL_GetTick>
 8005e00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	0198      	lsls	r0, r3, #6
 8005e06:	d5be      	bpl.n	8005d86 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fe ff32 	bl	8004c70 <HAL_GetTick>
 8005e0c:	1b00      	subs	r0, r0, r4
 8005e0e:	2802      	cmp	r0, #2
 8005e10:	d9f7      	bls.n	8005e02 <HAL_RCC_OscConfig+0x24a>
 8005e12:	e6fc      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	0399      	lsls	r1, r3, #14
 8005e1a:	f53f aefa 	bmi.w	8005c12 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	079e      	lsls	r6, r3, #30
 8005e22:	f57f af36 	bpl.w	8005c92 <HAL_RCC_OscConfig+0xda>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	f012 0f0c 	tst.w	r2, #12
 8005e2e:	d025      	beq.n	8005e7c <HAL_RCC_OscConfig+0x2c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e36:	2a08      	cmp	r2, #8
 8005e38:	d102      	bne.n	8005e40 <HAL_RCC_OscConfig+0x288>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	025d      	lsls	r5, r3, #9
 8005e3e:	d51d      	bpl.n	8005e7c <HAL_RCC_OscConfig+0x2c4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e40:	68e3      	ldr	r3, [r4, #12]
 8005e42:	4a0d      	ldr	r2, [pc, #52]	; (8005e78 <HAL_RCC_OscConfig+0x2c0>)
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f47f af0e 	bne.w	8005c66 <HAL_RCC_OscConfig+0xae>
        __HAL_RCC_HSI_DISABLE();
 8005e4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e4c:	f7fe ff10 	bl	8004c70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e50:	4e05      	ldr	r6, [pc, #20]	; (8005e68 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005e52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e54:	6833      	ldr	r3, [r6, #0]
 8005e56:	0799      	lsls	r1, r3, #30
 8005e58:	f57f af1b 	bpl.w	8005c92 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e5c:	f7fe ff08 	bl	8004c70 <HAL_GetTick>
 8005e60:	1b40      	subs	r0, r0, r5
 8005e62:	2802      	cmp	r0, #2
 8005e64:	d9f6      	bls.n	8005e54 <HAL_RCC_OscConfig+0x29c>
 8005e66:	e6d2      	b.n	8005c0e <HAL_RCC_OscConfig+0x56>
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	42470e80 	.word	0x42470e80
 8005e70:	40007000 	.word	0x40007000
 8005e74:	42470060 	.word	0x42470060
 8005e78:	42470000 	.word	0x42470000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7c:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <HAL_RCC_OscConfig+0x2e4>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	0792      	lsls	r2, r2, #30
 8005e82:	d503      	bpl.n	8005e8c <HAL_RCC_OscConfig+0x2d4>
 8005e84:	68e2      	ldr	r2, [r4, #12]
 8005e86:	2a01      	cmp	r2, #1
 8005e88:	f47f aec7 	bne.w	8005c1a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	6921      	ldr	r1, [r4, #16]
 8005e90:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005e94:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e6fa      	b.n	8005c92 <HAL_RCC_OscConfig+0xda>
 8005e9c:	40023800 	.word	0x40023800

08005ea0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	9f06      	ldr	r7, [sp, #24]
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	460e      	mov	r6, r1
 8005eaa:	4690      	mov	r8, r2
 8005eac:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	ea36 0202 	bics.w	r2, r6, r2
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2201      	moveq	r2, #1
 8005eba:	2200      	movne	r2, #0
 8005ebc:	4590      	cmp	r8, r2
 8005ebe:	d032      	beq.n	8005f26 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005ec0:	1c6a      	adds	r2, r5, #1
 8005ec2:	d0f5      	beq.n	8005eb0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005ec4:	b125      	cbz	r5, 8005ed0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x30>
 8005ec6:	f7fe fed3 	bl	8004c70 <HAL_GetTick>
 8005eca:	1bc0      	subs	r0, r0, r7
 8005ecc:	4285      	cmp	r5, r0
 8005ece:	d8ee      	bhi.n	8005eae <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0xe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ed8:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eda:	6862      	ldr	r2, [r4, #4]
 8005edc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005ee0:	d10a      	bne.n	8005ef8 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
 8005ee2:	68a2      	ldr	r2, [r4, #8]
 8005ee4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005ee8:	d002      	beq.n	8005ef0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x50>
 8005eea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005eee:	d103      	bne.n	8005ef8 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005efa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005efe:	d109      	bne.n	8005f14 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x74>
        {
          SPI_RESET_CRC(hspi);
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f06:	0412      	lsls	r2, r2, #16
 8005f08:	0c12      	lsrs	r2, r2, #16
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f12:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8005f20:	2003      	movs	r0, #3
 8005f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005f26:	2000      	movs	r0, #0
 8005f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f2c <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2e:	460b      	mov	r3, r1
 8005f30:	9200      	str	r2, [sp, #0]
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	2200      	movs	r2, #0
{
 8005f36:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f38:	f7ff ffb2 	bl	8005ea0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 8005f3c:	b120      	cbz	r0, 8005f48 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f40:	f043 0320 	orr.w	r3, r3, #32
 8005f44:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f46:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd10      	pop	{r4, pc}

08005f4c <HAL_SPI_Init>:
{
 8005f4c:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8005f4e:	4604      	mov	r4, r0
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d036      	beq.n	8005fc2 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8005f58:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005f5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f60:	b91b      	cbnz	r3, 8005f6a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8005f62:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005f66:	f7fd ff0f 	bl	8003d88 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005f6a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005f6c:	68a0      	ldr	r0, [r4, #8]
 8005f6e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005f70:	2302      	movs	r3, #2
 8005f72:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005f76:	680b      	ldr	r3, [r1, #0]
 8005f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	4303      	orrs	r3, r0
 8005f82:	68e0      	ldr	r0, [r4, #12]
 8005f84:	4303      	orrs	r3, r0
 8005f86:	6920      	ldr	r0, [r4, #16]
 8005f88:	4303      	orrs	r3, r0
 8005f8a:	6960      	ldr	r0, [r4, #20]
 8005f8c:	4303      	orrs	r3, r0
 8005f8e:	69e0      	ldr	r0, [r4, #28]
 8005f90:	4303      	orrs	r3, r0
 8005f92:	6a20      	ldr	r0, [r4, #32]
 8005f94:	4303      	orrs	r3, r0
 8005f96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005f98:	4303      	orrs	r3, r0
 8005f9a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8005f9e:	4303      	orrs	r3, r0
 8005fa0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fa2:	0c12      	lsrs	r2, r2, #16
 8005fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa6:	f002 0204 	and.w	r2, r2, #4
 8005faa:	431a      	orrs	r2, r3
 8005fac:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fae:	69cb      	ldr	r3, [r1, #28]
 8005fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fb4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fb6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fba:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fbc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8005fc0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005fc2:	2001      	movs	r0, #1
}
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <HAL_SPI_Transmit>:
{
 8005fc6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005fca:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005fcc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005fd0:	2b01      	cmp	r3, #1
{
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005fd8:	f000 809d 	beq.w	8006116 <HAL_SPI_Transmit+0x150>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005fe2:	f7fe fe45 	bl	8004c70 <HAL_GetTick>
 8005fe6:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8005fe8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005fec:	b2c0      	uxtb	r0, r0
 8005fee:	2801      	cmp	r0, #1
 8005ff0:	f040 808f 	bne.w	8006112 <HAL_SPI_Transmit+0x14c>
  if((pData == NULL ) || (Size == 0))
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	d03d      	beq.n	8006074 <HAL_SPI_Transmit+0xae>
 8005ff8:	f1b8 0f00 	cmp.w	r8, #0
 8005ffc:	d03a      	beq.n	8006074 <HAL_SPI_Transmit+0xae>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ffe:	2303      	movs	r3, #3
 8006000:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006004:	2300      	movs	r3, #0
 8006006:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006008:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800600a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800600e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006010:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006012:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006014:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006016:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006018:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800601a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8006020:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8006024:	bf02      	ittt	eq
 8006026:	681a      	ldreq	r2, [r3, #0]
 8006028:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 800602c:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006032:	bf5e      	ittt	pl
 8006034:	681a      	ldrpl	r2, [r3, #0]
 8006036:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800603a:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800603c:	68e2      	ldr	r2, [r4, #12]
 800603e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	d127      	bne.n	8006096 <HAL_SPI_Transmit+0xd0>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8006046:	b15a      	cbz	r2, 8006060 <HAL_SPI_Transmit+0x9a>
 8006048:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800604a:	b292      	uxth	r2, r2
 800604c:	2a01      	cmp	r2, #1
 800604e:	d007      	beq.n	8006060 <HAL_SPI_Transmit+0x9a>
    while (hspi->TxXferCount > 0U)
 8006050:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d03c      	beq.n	80060d2 <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	0790      	lsls	r0, r2, #30
 800605e:	d507      	bpl.n	8006070 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)pData);
 8006060:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006064:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006066:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006068:	3b01      	subs	r3, #1
 800606a:	b29b      	uxth	r3, r3
 800606c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800606e:	e7ef      	b.n	8006050 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8006070:	b94e      	cbnz	r6, 8006086 <HAL_SPI_Transmit+0xc0>
          errorcode = HAL_TIMEOUT;
 8006072:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006074:	2301      	movs	r3, #1
 8006076:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800607a:	2300      	movs	r3, #0
 800607c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006080:	b004      	add	sp, #16
 8006082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8006086:	1c71      	adds	r1, r6, #1
 8006088:	d0e2      	beq.n	8006050 <HAL_SPI_Transmit+0x8a>
 800608a:	f7fe fdf1 	bl	8004c70 <HAL_GetTick>
 800608e:	1bc0      	subs	r0, r0, r7
 8006090:	4286      	cmp	r6, r0
 8006092:	d9ee      	bls.n	8006072 <HAL_SPI_Transmit+0xac>
 8006094:	e7dc      	b.n	8006050 <HAL_SPI_Transmit+0x8a>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8006096:	b152      	cbz	r2, 80060ae <HAL_SPI_Transmit+0xe8>
 8006098:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800609a:	b292      	uxth	r2, r2
 800609c:	2a01      	cmp	r2, #1
 800609e:	d006      	beq.n	80060ae <HAL_SPI_Transmit+0xe8>
    while (hspi->TxXferCount > 0U)
 80060a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	b1ab      	cbz	r3, 80060d2 <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	0792      	lsls	r2, r2, #30
 80060ac:	d507      	bpl.n	80060be <HAL_SPI_Transmit+0xf8>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80060ae:	f815 2b01 	ldrb.w	r2, [r5], #1
 80060b2:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80060b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	86e3      	strh	r3, [r4, #54]	; 0x36
 80060bc:	e7f0      	b.n	80060a0 <HAL_SPI_Transmit+0xda>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80060be:	2e00      	cmp	r6, #0
 80060c0:	d0d7      	beq.n	8006072 <HAL_SPI_Transmit+0xac>
 80060c2:	1c73      	adds	r3, r6, #1
 80060c4:	d0ec      	beq.n	80060a0 <HAL_SPI_Transmit+0xda>
 80060c6:	f7fe fdd3 	bl	8004c70 <HAL_GetTick>
 80060ca:	1bc0      	subs	r0, r0, r7
 80060cc:	4286      	cmp	r6, r0
 80060ce:	d9d0      	bls.n	8006072 <HAL_SPI_Transmit+0xac>
 80060d0:	e7e6      	b.n	80060a0 <HAL_SPI_Transmit+0xda>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80060d2:	9700      	str	r7, [sp, #0]
 80060d4:	4633      	mov	r3, r6
 80060d6:	2201      	movs	r2, #1
 80060d8:	2102      	movs	r1, #2
 80060da:	4620      	mov	r0, r4
 80060dc:	f7ff fee0 	bl	8005ea0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d1c6      	bne.n	8006072 <HAL_SPI_Transmit+0xac>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80060e4:	463a      	mov	r2, r7
 80060e6:	4631      	mov	r1, r6
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff ff1f 	bl	8005f2c <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 80060ee:	b118      	cbz	r0, 80060f8 <HAL_SPI_Transmit+0x132>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f0:	2320      	movs	r3, #32
 80060f2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80060f4:	2001      	movs	r0, #1
    goto error;
 80060f6:	e7bd      	b.n	8006074 <HAL_SPI_Transmit+0xae>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060f8:	68a3      	ldr	r3, [r4, #8]
 80060fa:	b92b      	cbnz	r3, 8006108 <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	9203      	str	r2, [sp, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	9303      	str	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006108:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800610a:	3000      	adds	r0, #0
 800610c:	bf18      	it	ne
 800610e:	2001      	movne	r0, #1
 8006110:	e7b0      	b.n	8006074 <HAL_SPI_Transmit+0xae>
 8006112:	2002      	movs	r0, #2
 8006114:	e7ae      	b.n	8006074 <HAL_SPI_Transmit+0xae>
  __HAL_LOCK(hspi);
 8006116:	2002      	movs	r0, #2
 8006118:	e7b2      	b.n	8006080 <HAL_SPI_Transmit+0xba>

0800611a <HAL_SPI_TransmitReceive>:
{
 800611a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800611e:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8006120:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8006124:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8006126:	2b01      	cmp	r3, #1
{
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	4616      	mov	r6, r2
 800612e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8006130:	f000 80a8 	beq.w	8006284 <HAL_SPI_TransmitReceive+0x16a>
 8006134:	2301      	movs	r3, #1
 8006136:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800613a:	f7fe fd99 	bl	8004c70 <HAL_GetTick>
  tmp  = hspi->State;
 800613e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8006142:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8006144:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8006146:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006148:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800614a:	d00a      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x48>
 800614c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8006150:	f040 8096 	bne.w	8006280 <HAL_SPI_TransmitReceive+0x166>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8006154:	68a2      	ldr	r2, [r4, #8]
 8006156:	2a00      	cmp	r2, #0
 8006158:	f040 8092 	bne.w	8006280 <HAL_SPI_TransmitReceive+0x166>
 800615c:	2b04      	cmp	r3, #4
 800615e:	f040 808f 	bne.w	8006280 <HAL_SPI_TransmitReceive+0x166>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8006162:	2d00      	cmp	r5, #0
 8006164:	d050      	beq.n	8006208 <HAL_SPI_TransmitReceive+0xee>
 8006166:	2e00      	cmp	r6, #0
 8006168:	d04e      	beq.n	8006208 <HAL_SPI_TransmitReceive+0xee>
 800616a:	f1b9 0f00 	cmp.w	r9, #0
 800616e:	d04b      	beq.n	8006208 <HAL_SPI_TransmitReceive+0xee>
  if(hspi->State == HAL_SPI_STATE_READY)
 8006170:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006174:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8006176:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006178:	bf04      	itt	eq
 800617a:	2305      	moveq	r3, #5
 800617c:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006180:	2300      	movs	r3, #0
 8006182:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006184:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006186:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006188:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800618a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800618e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006192:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8006194:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006198:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800619a:	bf58      	it	pl
 800619c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800619e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80061a0:	bf58      	it	pl
 80061a2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80061a6:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80061aa:	bf58      	it	pl
 80061ac:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061ae:	68e2      	ldr	r2, [r4, #12]
 80061b0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80061b4:	d12a      	bne.n	800620c <HAL_SPI_TransmitReceive+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80061b6:	b119      	cbz	r1, 80061c0 <HAL_SPI_TransmitReceive+0xa6>
 80061b8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80061ba:	b292      	uxth	r2, r2
 80061bc:	2a01      	cmp	r2, #1
 80061be:	d106      	bne.n	80061ce <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80061c0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80061c4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80061c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	86e3      	strh	r3, [r4, #54]	; 0x36
{
 80061ce:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d156      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x16e>
 80061da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d152      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x16e>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80061e2:	f8cd 8000 	str.w	r8, [sp]
 80061e6:	463b      	mov	r3, r7
 80061e8:	2201      	movs	r2, #1
 80061ea:	2102      	movs	r1, #2
 80061ec:	4620      	mov	r0, r4
 80061ee:	f7ff fe57 	bl	8005ea0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d161      	bne.n	80062ba <HAL_SPI_TransmitReceive+0x1a0>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80061f6:	4642      	mov	r2, r8
 80061f8:	4639      	mov	r1, r7
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7ff fe96 	bl	8005f2c <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 8006200:	2800      	cmp	r0, #0
 8006202:	d033      	beq.n	800626c <HAL_SPI_TransmitReceive+0x152>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006204:	2320      	movs	r3, #32
 8006206:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006208:	2001      	movs	r0, #1
 800620a:	e057      	b.n	80062bc <HAL_SPI_TransmitReceive+0x1a2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800620c:	b119      	cbz	r1, 8006216 <HAL_SPI_TransmitReceive+0xfc>
 800620e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006210:	b292      	uxth	r2, r2
 8006212:	2a01      	cmp	r2, #1
 8006214:	d106      	bne.n	8006224 <HAL_SPI_TransmitReceive+0x10a>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8006216:	f815 2b01 	ldrb.w	r2, [r5], #1
 800621a:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800621c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800621e:	3b01      	subs	r3, #1
 8006220:	b29b      	uxth	r3, r3
 8006222:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006224:	f04f 0901 	mov.w	r9, #1
 8006228:	e015      	b.n	8006256 <HAL_SPI_TransmitReceive+0x13c>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800622a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800622c:	b29b      	uxth	r3, r3
 800622e:	b11b      	cbz	r3, 8006238 <HAL_SPI_TransmitReceive+0x11e>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	0791      	lsls	r1, r2, #30
 8006236:	d45e      	bmi.n	80062f6 <HAL_SPI_TransmitReceive+0x1dc>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8006238:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800623a:	b29b      	uxth	r3, r3
 800623c:	b11b      	cbz	r3, 8006246 <HAL_SPI_TransmitReceive+0x12c>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	07d2      	lsls	r2, r2, #31
 8006244:	d461      	bmi.n	800630a <HAL_SPI_TransmitReceive+0x1f0>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8006246:	1c7b      	adds	r3, r7, #1
 8006248:	d005      	beq.n	8006256 <HAL_SPI_TransmitReceive+0x13c>
 800624a:	f7fe fd11 	bl	8004c70 <HAL_GetTick>
 800624e:	eba0 0008 	sub.w	r0, r0, r8
 8006252:	4287      	cmp	r7, r0
 8006254:	d931      	bls.n	80062ba <HAL_SPI_TransmitReceive+0x1a0>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006256:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	b91b      	cbnz	r3, 8006264 <HAL_SPI_TransmitReceive+0x14a>
 800625c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0be      	beq.n	80061e2 <HAL_SPI_TransmitReceive+0xc8>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8006264:	f1b9 0f00 	cmp.w	r9, #0
 8006268:	d1df      	bne.n	800622a <HAL_SPI_TransmitReceive+0x110>
 800626a:	e7e5      	b.n	8006238 <HAL_SPI_TransmitReceive+0x11e>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800626c:	68a3      	ldr	r3, [r4, #8]
 800626e:	bb2b      	cbnz	r3, 80062bc <HAL_SPI_TransmitReceive+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	9303      	str	r3, [sp, #12]
 8006274:	68d1      	ldr	r1, [r2, #12]
 8006276:	9103      	str	r1, [sp, #12]
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	9203      	str	r2, [sp, #12]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800627c:	4618      	mov	r0, r3
 800627e:	e01d      	b.n	80062bc <HAL_SPI_TransmitReceive+0x1a2>
    errorcode = HAL_BUSY;
 8006280:	2002      	movs	r0, #2
 8006282:	e01b      	b.n	80062bc <HAL_SPI_TransmitReceive+0x1a2>
  __HAL_LOCK(hspi);
 8006284:	2002      	movs	r0, #2
 8006286:	e01f      	b.n	80062c8 <HAL_SPI_TransmitReceive+0x1ae>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8006288:	f1b9 0f00 	cmp.w	r9, #0
 800628c:	d006      	beq.n	800629c <HAL_SPI_TransmitReceive+0x182>
 800628e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006290:	b29b      	uxth	r3, r3
 8006292:	b11b      	cbz	r3, 800629c <HAL_SPI_TransmitReceive+0x182>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	0791      	lsls	r1, r2, #30
 800629a:	d418      	bmi.n	80062ce <HAL_SPI_TransmitReceive+0x1b4>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800629c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800629e:	b29b      	uxth	r3, r3
 80062a0:	b11b      	cbz	r3, 80062aa <HAL_SPI_TransmitReceive+0x190>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	07d2      	lsls	r2, r2, #31
 80062a8:	d41b      	bmi.n	80062e2 <HAL_SPI_TransmitReceive+0x1c8>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80062aa:	1c78      	adds	r0, r7, #1
 80062ac:	d091      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0xb8>
 80062ae:	f7fe fcdf 	bl	8004c70 <HAL_GetTick>
 80062b2:	eba0 0008 	sub.w	r0, r0, r8
 80062b6:	4287      	cmp	r7, r0
 80062b8:	d88b      	bhi.n	80061d2 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80062ba:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80062bc:	2301      	movs	r3, #1
 80062be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062c2:	2300      	movs	r3, #0
 80062c4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80062c8:	b005      	add	sp, #20
 80062ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80062ce:	f835 2b02 	ldrh.w	r2, [r5], #2
 80062d2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80062d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29b      	uxth	r3, r3
 80062da:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80062dc:	f04f 0900 	mov.w	r9, #0
 80062e0:	e7dc      	b.n	800629c <HAL_SPI_TransmitReceive+0x182>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80062e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80062f0:	f04f 0901 	mov.w	r9, #1
 80062f4:	e7d9      	b.n	80062aa <HAL_SPI_TransmitReceive+0x190>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80062f6:	782a      	ldrb	r2, [r5, #0]
 80062f8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80062fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8006302:	3501      	adds	r5, #1
        txallowed = 0U;
 8006304:	f04f 0900 	mov.w	r9, #0
 8006308:	e796      	b.n	8006238 <HAL_SPI_TransmitReceive+0x11e>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 800630e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006310:	3b01      	subs	r3, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8006316:	3601      	adds	r6, #1
        txallowed = 1U;
 8006318:	f04f 0901 	mov.w	r9, #1
 800631c:	e793      	b.n	8006246 <HAL_SPI_TransmitReceive+0x12c>

0800631e <HAL_SPI_Receive>:
{
 800631e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006322:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006324:	6843      	ldr	r3, [r0, #4]
 8006326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800632a:	4604      	mov	r4, r0
 800632c:	460d      	mov	r5, r1
 800632e:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006330:	d10c      	bne.n	800634c <HAL_SPI_Receive+0x2e>
 8006332:	6883      	ldr	r3, [r0, #8]
 8006334:	b953      	cbnz	r3, 800634c <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006336:	2304      	movs	r3, #4
 8006338:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 800633c:	4613      	mov	r3, r2
 800633e:	9600      	str	r6, [sp, #0]
 8006340:	460a      	mov	r2, r1
 8006342:	f7ff feea 	bl	800611a <HAL_SPI_TransmitReceive>
}
 8006346:	b002      	add	sp, #8
 8006348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800634c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006350:	2b01      	cmp	r3, #1
 8006352:	f000 8081 	beq.w	8006458 <HAL_SPI_Receive+0x13a>
 8006356:	2301      	movs	r3, #1
 8006358:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800635c:	f7fe fc88 	bl	8004c70 <HAL_GetTick>
 8006360:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8006362:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006366:	b2c0      	uxtb	r0, r0
 8006368:	2801      	cmp	r0, #1
 800636a:	d173      	bne.n	8006454 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 800636c:	2d00      	cmp	r5, #0
 800636e:	d035      	beq.n	80063dc <HAL_SPI_Receive+0xbe>
 8006370:	f1b8 0f00 	cmp.w	r8, #0
 8006374:	d032      	beq.n	80063dc <HAL_SPI_Receive+0xbe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006376:	2304      	movs	r3, #4
 8006378:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800637c:	2300      	movs	r3, #0
 800637e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006380:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8006382:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8006386:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006388:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800638a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800638c:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638e:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006390:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006396:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8006398:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 800639c:	bf02      	ittt	eq
 800639e:	681a      	ldreq	r2, [r3, #0]
 80063a0:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80063a4:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80063aa:	bf5e      	ittt	pl
 80063ac:	681a      	ldrpl	r2, [r3, #0]
 80063ae:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80063b2:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063b4:	68e3      	ldr	r3, [r4, #12]
 80063b6:	bb4b      	cbnz	r3, 800640c <HAL_SPI_Receive+0xee>
    while(hspi->RxXferCount > 0U)
 80063b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d034      	beq.n	800642a <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	07d0      	lsls	r0, r2, #31
 80063c6:	d507      	bpl.n	80063d8 <HAL_SPI_Receive+0xba>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80063c8:	7b1b      	ldrb	r3, [r3, #12]
 80063ca:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 80063ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80063d6:	e7ef      	b.n	80063b8 <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80063d8:	b93e      	cbnz	r6, 80063ea <HAL_SPI_Receive+0xcc>
          errorcode = HAL_TIMEOUT;
 80063da:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80063dc:	2301      	movs	r3, #1
 80063de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063e2:	2300      	movs	r3, #0
 80063e4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80063e8:	e7ad      	b.n	8006346 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80063ea:	1c71      	adds	r1, r6, #1
 80063ec:	d0e4      	beq.n	80063b8 <HAL_SPI_Receive+0x9a>
 80063ee:	f7fe fc3f 	bl	8004c70 <HAL_GetTick>
 80063f2:	1bc0      	subs	r0, r0, r7
 80063f4:	4286      	cmp	r6, r0
 80063f6:	d9f0      	bls.n	80063da <HAL_SPI_Receive+0xbc>
 80063f8:	e7de      	b.n	80063b8 <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	d0ed      	beq.n	80063da <HAL_SPI_Receive+0xbc>
 80063fe:	1c73      	adds	r3, r6, #1
 8006400:	d004      	beq.n	800640c <HAL_SPI_Receive+0xee>
 8006402:	f7fe fc35 	bl	8004c70 <HAL_GetTick>
 8006406:	1bc0      	subs	r0, r0, r7
 8006408:	4286      	cmp	r6, r0
 800640a:	d9e6      	bls.n	80063da <HAL_SPI_Receive+0xbc>
    while(hspi->RxXferCount > 0U)
 800640c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800640e:	b29b      	uxth	r3, r3
 8006410:	b15b      	cbz	r3, 800642a <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	07d2      	lsls	r2, r2, #31
 8006418:	d5ef      	bpl.n	80063fa <HAL_SPI_Receive+0xdc>
        *((uint16_t*)pData) = hspi->Instance->DR;
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8006420:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006422:	3b01      	subs	r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006428:	e7f0      	b.n	800640c <HAL_SPI_Receive+0xee>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800642a:	6863      	ldr	r3, [r4, #4]
 800642c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006430:	d10b      	bne.n	800644a <HAL_SPI_Receive+0x12c>
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d002      	beq.n	8006440 <HAL_SPI_Receive+0x122>
 800643a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643e:	d104      	bne.n	800644a <HAL_SPI_Receive+0x12c>
    __HAL_SPI_DISABLE(hspi);
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006448:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800644a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800644c:	3000      	adds	r0, #0
 800644e:	bf18      	it	ne
 8006450:	2001      	movne	r0, #1
 8006452:	e7c3      	b.n	80063dc <HAL_SPI_Receive+0xbe>
 8006454:	2002      	movs	r0, #2
 8006456:	e7c1      	b.n	80063dc <HAL_SPI_Receive+0xbe>
  __HAL_LOCK(hspi);
 8006458:	2002      	movs	r0, #2
 800645a:	e774      	b.n	8006346 <HAL_SPI_Receive+0x28>

0800645c <HAL_SPI_ErrorCallback>:
 800645c:	4770      	bx	lr
	...

08006460 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8006460:	6803      	ldr	r3, [r0, #0]
{
 8006462:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8006464:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8006466:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8006468:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800646c:	2d01      	cmp	r5, #1
{
 800646e:	b085      	sub	sp, #20
 8006470:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8006472:	d105      	bne.n	8006480 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8006474:	064d      	lsls	r5, r1, #25
 8006476:	d503      	bpl.n	8006480 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8006478:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800647a:	4798      	blx	r3
}
 800647c:	b005      	add	sp, #20
 800647e:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8006480:	0795      	lsls	r5, r2, #30
 8006482:	d504      	bpl.n	800648e <HAL_SPI_IRQHandler+0x2e>
 8006484:	0608      	lsls	r0, r1, #24
 8006486:	d502      	bpl.n	800648e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8006488:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800648a:	4620      	mov	r0, r4
 800648c:	e7f5      	b.n	800647a <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800648e:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8006492:	d0f3      	beq.n	800647c <HAL_SPI_IRQHandler+0x1c>
 8006494:	068d      	lsls	r5, r1, #26
 8006496:	d5f1      	bpl.n	800647c <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8006498:	0650      	lsls	r0, r2, #25
 800649a:	d50e      	bpl.n	80064ba <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800649c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80064a0:	2803      	cmp	r0, #3
 80064a2:	f04f 0500 	mov.w	r5, #0
 80064a6:	d03e      	beq.n	8006526 <HAL_SPI_IRQHandler+0xc6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064aa:	f040 0004 	orr.w	r0, r0, #4
 80064ae:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b0:	9500      	str	r5, [sp, #0]
 80064b2:	68d8      	ldr	r0, [r3, #12]
 80064b4:	9000      	str	r0, [sp, #0]
 80064b6:	6898      	ldr	r0, [r3, #8]
 80064b8:	9000      	str	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 80064ba:	0695      	lsls	r5, r2, #26
 80064bc:	d50b      	bpl.n	80064d6 <HAL_SPI_IRQHandler+0x76>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064c0:	f040 0001 	orr.w	r0, r0, #1
 80064c4:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064c6:	2000      	movs	r0, #0
 80064c8:	9002      	str	r0, [sp, #8]
 80064ca:	6898      	ldr	r0, [r3, #8]
 80064cc:	9002      	str	r0, [sp, #8]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80064d4:	6018      	str	r0, [r3, #0]
    if((itflag & SPI_FLAG_FRE) != RESET)
 80064d6:	05d0      	lsls	r0, r2, #23
 80064d8:	d507      	bpl.n	80064ea <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80064dc:	f042 0208 	orr.w	r2, r2, #8
 80064e0:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064e2:	2200      	movs	r2, #0
 80064e4:	9203      	str	r2, [sp, #12]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	9203      	str	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	d0c5      	beq.n	800647c <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064f6:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80064f8:	2201      	movs	r2, #1
 80064fa:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80064fe:	078a      	lsls	r2, r1, #30
 8006500:	d017      	beq.n	8006532 <HAL_SPI_IRQHandler+0xd2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006502:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8006504:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006506:	f022 0203 	bic.w	r2, r2, #3
 800650a:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 800650c:	b118      	cbz	r0, 8006516 <HAL_SPI_IRQHandler+0xb6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_SPI_IRQHandler+0xdc>)
 8006510:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8006512:	f7fe ff15 	bl	8005340 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8006516:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006518:	2800      	cmp	r0, #0
 800651a:	d0af      	beq.n	800647c <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800651c:	4b07      	ldr	r3, [pc, #28]	; (800653c <HAL_SPI_IRQHandler+0xdc>)
 800651e:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8006520:	f7fe ff0e 	bl	8005340 <HAL_DMA_Abort_IT>
 8006524:	e7aa      	b.n	800647c <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006526:	9501      	str	r5, [sp, #4]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	9201      	str	r2, [sp, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	9301      	str	r3, [sp, #4]
        return;
 8006530:	e7a4      	b.n	800647c <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff ff92 	bl	800645c <HAL_SPI_ErrorCallback>
 8006538:	e7a0      	b.n	800647c <HAL_SPI_IRQHandler+0x1c>
 800653a:	bf00      	nop
 800653c:	08006541 	.word	0x08006541

08006540 <_ZL19SPI_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 8006540:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006542:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006548:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800654a:	f7ff ff87 	bl	800645c <HAL_SPI_ErrorCallback>
 800654e:	bd08      	pop	{r3, pc}

08006550 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006550:	6803      	ldr	r3, [r0, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006558:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006562:	2320      	movs	r3, #32
 8006564:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8006568:	4770      	bx	lr
	...

0800656c <_ZL14UART_SetConfigP18UART_HandleTypeDef>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800656c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006570:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006572:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8006574:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006576:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800657c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800657e:	6133      	str	r3, [r6, #16]
{
 8006580:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006582:	6883      	ldr	r3, [r0, #8]
 8006584:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8006586:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006588:	4303      	orrs	r3, r0
 800658a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800658c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006590:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006592:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006596:	430b      	orrs	r3, r1
 8006598:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800659a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800659c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800659e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80065a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80065a4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80065aa:	6173      	str	r3, [r6, #20]
 80065ac:	4b7a      	ldr	r3, [pc, #488]	; (8006798 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ae:	d17c      	bne.n	80066aa <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80065b0:	429e      	cmp	r6, r3
 80065b2:	d003      	beq.n	80065bc <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x50>
 80065b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b8:	429e      	cmp	r6, r3
 80065ba:	d144      	bne.n	8006646 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80065bc:	f7ff faec 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 80065c0:	2519      	movs	r5, #25
 80065c2:	fb05 f300 	mul.w	r3, r5, r0
 80065c6:	6860      	ldr	r0, [r4, #4]
 80065c8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80065cc:	0040      	lsls	r0, r0, #1
 80065ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80065d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80065d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065da:	f7ff fadd 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	4368      	muls	r0, r5
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	fbb0 f7f3 	udiv	r7, r0, r3
 80065e8:	f7ff fad6 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	4368      	muls	r0, r5
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80065fa:	fb09 7313 	mls	r3, r9, r3, r7
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	3332      	adds	r3, #50	; 0x32
 8006602:	fbb3 f3f9 	udiv	r3, r3, r9
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800660c:	f7ff fac4 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 8006610:	6862      	ldr	r2, [r4, #4]
 8006612:	4368      	muls	r0, r5
 8006614:	0052      	lsls	r2, r2, #1
 8006616:	fbb0 faf2 	udiv	sl, r0, r2
 800661a:	f7ff fabd 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	4368      	muls	r0, r5
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	fbb0 f3f3 	udiv	r3, r0, r3
 8006628:	fbb3 f3f9 	udiv	r3, r3, r9
 800662c:	fb09 a313 	mls	r3, r9, r3, sl
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	3332      	adds	r3, #50	; 0x32
 8006634:	fbb3 f3f9 	udiv	r3, r3, r9
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800663e:	443b      	add	r3, r7
 8006640:	60b3      	str	r3, [r6, #8]
 8006642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006646:	f7ff fa97 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 800664a:	2519      	movs	r5, #25
 800664c:	fb05 f300 	mul.w	r3, r5, r0
 8006650:	6860      	ldr	r0, [r4, #4]
 8006652:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006656:	0040      	lsls	r0, r0, #1
 8006658:	fbb3 f3f0 	udiv	r3, r3, r0
 800665c:	fbb3 f3f9 	udiv	r3, r3, r9
 8006660:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006664:	f7ff fa88 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	4368      	muls	r0, r5
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	fbb0 f7f3 	udiv	r7, r0, r3
 8006672:	f7ff fa81 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	4368      	muls	r0, r5
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006680:	fbb3 f3f9 	udiv	r3, r3, r9
 8006684:	fb09 7313 	mls	r3, r9, r3, r7
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	3332      	adds	r3, #50	; 0x32
 800668c:	fbb3 f3f9 	udiv	r3, r3, r9
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8006696:	f7ff fa6f 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 800669a:	6862      	ldr	r2, [r4, #4]
 800669c:	4368      	muls	r0, r5
 800669e:	0052      	lsls	r2, r2, #1
 80066a0:	fbb0 faf2 	udiv	sl, r0, r2
 80066a4:	f7ff fa68 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 80066a8:	e7b9      	b.n	800661e <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80066aa:	429e      	cmp	r6, r3
 80066ac:	d002      	beq.n	80066b4 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x148>
 80066ae:	4b3b      	ldr	r3, [pc, #236]	; (800679c <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x230>)
 80066b0:	429e      	cmp	r6, r3
 80066b2:	d140      	bne.n	8006736 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80066b4:	f7ff fa70 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 80066b8:	6867      	ldr	r7, [r4, #4]
 80066ba:	2519      	movs	r5, #25
 80066bc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80066c0:	fb05 f300 	mul.w	r3, r5, r0
 80066c4:	00bf      	lsls	r7, r7, #2
 80066c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80066ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80066ce:	011f      	lsls	r7, r3, #4
 80066d0:	f7ff fa62 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	4368      	muls	r0, r5
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	fbb0 f8f3 	udiv	r8, r0, r3
 80066de:	f7ff fa5b 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 80066e2:	6863      	ldr	r3, [r4, #4]
 80066e4:	4368      	muls	r0, r5
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80066f0:	fb09 8313 	mls	r3, r9, r3, r8
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	3332      	adds	r3, #50	; 0x32
 80066f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80066fc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8006700:	f7ff fa4a 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 8006704:	6862      	ldr	r2, [r4, #4]
 8006706:	4368      	muls	r0, r5
 8006708:	0092      	lsls	r2, r2, #2
 800670a:	fbb0 faf2 	udiv	sl, r0, r2
 800670e:	f7ff fa43 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006712:	6863      	ldr	r3, [r4, #4]
 8006714:	4368      	muls	r0, r5
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	fbb0 f3f3 	udiv	r3, r0, r3
 800671c:	fbb3 f3f9 	udiv	r3, r3, r9
 8006720:	fb09 a313 	mls	r3, r9, r3, sl
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	3332      	adds	r3, #50	; 0x32
 8006728:	fbb3 f3f9 	udiv	r3, r3, r9
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	ea43 0308 	orr.w	r3, r3, r8
 8006734:	e783      	b.n	800663e <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xd2>
 8006736:	f7ff fa1f 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 800673a:	6867      	ldr	r7, [r4, #4]
 800673c:	2519      	movs	r5, #25
 800673e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006742:	fb05 f300 	mul.w	r3, r5, r0
 8006746:	00bf      	lsls	r7, r7, #2
 8006748:	fbb3 f3f7 	udiv	r3, r3, r7
 800674c:	fbb3 f3f9 	udiv	r3, r3, r9
 8006750:	011f      	lsls	r7, r3, #4
 8006752:	f7ff fa11 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	4368      	muls	r0, r5
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	fbb0 f8f3 	udiv	r8, r0, r3
 8006760:	f7ff fa0a 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	4368      	muls	r0, r5
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	fbb0 f3f3 	udiv	r3, r0, r3
 800676e:	fbb3 f3f9 	udiv	r3, r3, r9
 8006772:	fb09 8313 	mls	r3, r9, r3, r8
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	3332      	adds	r3, #50	; 0x32
 800677a:	fbb3 f3f9 	udiv	r3, r3, r9
 800677e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8006782:	f7ff f9f9 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006786:	6862      	ldr	r2, [r4, #4]
 8006788:	4368      	muls	r0, r5
 800678a:	0092      	lsls	r2, r2, #2
 800678c:	fbb0 faf2 	udiv	sl, r0, r2
 8006790:	f7ff f9f2 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006794:	e7bd      	b.n	8006712 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1a6>
 8006796:	bf00      	nop
 8006798:	40011000 	.word	0x40011000
 800679c:	40011400 	.word	0x40011400

080067a0 <HAL_UART_Init>:
{
 80067a0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80067a2:	4604      	mov	r4, r0
 80067a4:	b340      	cbz	r0, 80067f8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80067a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80067aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067ae:	b91b      	cbnz	r3, 80067b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80067b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80067b4:	f7fd fb8e 	bl	8003ed4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80067b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80067ba:	2324      	movs	r3, #36	; 0x24
 80067bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80067c0:	68d3      	ldr	r3, [r2, #12]
 80067c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff fecf 	bl	800656c <_ZL14UART_SetConfigP18UART_HandleTypeDef>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067d8:	695a      	ldr	r2, [r3, #20]
 80067da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067e6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80067ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80067ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80067f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80067f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80067f8:	2001      	movs	r0, #1
}
 80067fa:	bd10      	pop	{r4, pc}

080067fc <HAL_UART_Transmit_DMA>:
{
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4604      	mov	r4, r0
 8006800:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8006802:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006806:	2a20      	cmp	r2, #32
 8006808:	d12a      	bne.n	8006860 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 800680a:	b339      	cbz	r1, 800685c <HAL_UART_Transmit_DMA+0x60>
 800680c:	b333      	cbz	r3, 800685c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800680e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006812:	2a01      	cmp	r2, #1
 8006814:	d024      	beq.n	8006860 <HAL_UART_Transmit_DMA+0x64>
 8006816:	2201      	movs	r2, #1
 8006818:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800681c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 800681e:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006820:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006822:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006824:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006826:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800682a:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 800682c:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800682e:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006830:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006832:	4a0d      	ldr	r2, [pc, #52]	; (8006868 <HAL_UART_Transmit_DMA+0x6c>)
 8006834:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006836:	4a0d      	ldr	r2, [pc, #52]	; (800686c <HAL_UART_Transmit_DMA+0x70>)
 8006838:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800683a:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 800683c:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800683e:	3204      	adds	r2, #4
 8006840:	f7fe fd40 	bl	80052c4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800684a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800684c:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 800684e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006856:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8006858:	4628      	mov	r0, r5
 800685a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800685c:	2001      	movs	r0, #1
 800685e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8006860:	2002      	movs	r0, #2
}
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	08006903 	.word	0x08006903
 8006868:	08006931 	.word	0x08006931
 800686c:	080069f7 	.word	0x080069f7

08006870 <HAL_UART_Receive_DMA>:
{  
 8006870:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8006872:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8006876:	2a20      	cmp	r2, #32
{  
 8006878:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800687a:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 800687c:	d137      	bne.n	80068ee <HAL_UART_Receive_DMA+0x7e>
    if((pData == NULL ) || (Size == 0)) 
 800687e:	2900      	cmp	r1, #0
 8006880:	d033      	beq.n	80068ea <HAL_UART_Receive_DMA+0x7a>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d031      	beq.n	80068ea <HAL_UART_Receive_DMA+0x7a>
    __HAL_LOCK(huart);
 8006886:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800688a:	2a01      	cmp	r2, #1
 800688c:	d02f      	beq.n	80068ee <HAL_UART_Receive_DMA+0x7e>
 800688e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8006892:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006896:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 800689a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800689c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800689e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068a2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80068a4:	4a13      	ldr	r2, [pc, #76]	; (80068f4 <HAL_UART_Receive_DMA+0x84>)
 80068a6:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80068a8:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068aa:	4a13      	ldr	r2, [pc, #76]	; (80068f8 <HAL_UART_Receive_DMA+0x88>)
 80068ac:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068ae:	4a13      	ldr	r2, [pc, #76]	; (80068fc <HAL_UART_Receive_DMA+0x8c>)
 80068b0:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80068b2:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80068b4:	460a      	mov	r2, r1
 80068b6:	1d31      	adds	r1, r6, #4
 80068b8:	f7fe fd04 	bl	80052c4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	9401      	str	r4, [sp, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	9201      	str	r2, [sp, #4]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	9201      	str	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c8:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 80068ca:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068d2:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e2:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80068e4:	4620      	mov	r0, r4
}
 80068e6:	b002      	add	sp, #8
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7fb      	b.n	80068e6 <HAL_UART_Receive_DMA+0x76>
    return HAL_BUSY; 
 80068ee:	2002      	movs	r0, #2
 80068f0:	e7f9      	b.n	80068e6 <HAL_UART_Receive_DMA+0x76>
 80068f2:	bf00      	nop
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	080069eb 	.word	0x080069eb
 80068fc:	080069f7 	.word	0x080069f7

08006900 <HAL_UART_TxCpltCallback>:
 8006900:	4770      	bx	lr

08006902 <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef>:
{
 8006902:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006904:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006906:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800690e:	d10a      	bne.n	8006926 <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef+0x24>
    huart->TxXferCount = 0U;
 8006910:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800691a:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006922:	60da      	str	r2, [r3, #12]
 8006924:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006926:	4610      	mov	r0, r2
 8006928:	f7ff ffea 	bl	8006900 <HAL_UART_TxCpltCallback>
 800692c:	bd08      	pop	{r3, pc}

0800692e <HAL_UART_TxHalfCpltCallback>:
 800692e:	4770      	bx	lr

08006930 <_ZL18UART_DMATxHalfCpltP19__DMA_HandleTypeDef>:
{
 8006930:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006932:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006934:	f7ff fffb 	bl	800692e <HAL_UART_TxHalfCpltCallback>
 8006938:	bd08      	pop	{r3, pc}

0800693a <HAL_UART_RxCpltCallback>:
 800693a:	4770      	bx	lr

0800693c <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef>:
{
 800693c:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800693e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006940:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006948:	d110      	bne.n	800696c <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x30>
    huart->RxXferCount = 0U;
 800694a:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	68d9      	ldr	r1, [r3, #12]
 8006950:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006954:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	6959      	ldr	r1, [r3, #20]
 8006958:	f021 0101 	bic.w	r1, r1, #1
 800695c:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695e:	6959      	ldr	r1, [r3, #20]
 8006960:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006964:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8006966:	2320      	movs	r3, #32
 8006968:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800696c:	4610      	mov	r0, r2
 800696e:	f7ff ffe4 	bl	800693a <HAL_UART_RxCpltCallback>
 8006972:	bd08      	pop	{r3, pc}

08006974 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8006974:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006978:	2b22      	cmp	r3, #34	; 0x22
{
 800697a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800697c:	d132      	bne.n	80069e4 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800697e:	6883      	ldr	r3, [r0, #8]
 8006980:	6901      	ldr	r1, [r0, #16]
 8006982:	6802      	ldr	r2, [r0, #0]
 8006984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006988:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800698a:	d11f      	bne.n	80069cc <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800698c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800698e:	b9c9      	cbnz	r1, 80069c4 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8006998:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800699a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800699c:	3c01      	subs	r4, #1
 800699e:	b2a4      	uxth	r4, r4
 80069a0:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80069a2:	b96c      	cbnz	r4, 80069c0 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a4:	6803      	ldr	r3, [r0, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069ac:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80069b6:	2320      	movs	r3, #32
 80069b8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80069bc:	f7ff ffbd 	bl	800693a <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80069c0:	2000      	movs	r0, #0
}
 80069c2:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	f823 2b01 	strh.w	r2, [r3], #1
 80069ca:	e7e5      	b.n	8006998 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80069cc:	b921      	cbnz	r1, 80069d8 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	6852      	ldr	r2, [r2, #4]
 80069d2:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	e7e0      	b.n	800699a <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x26>
 80069d8:	6852      	ldr	r2, [r2, #4]
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	6281      	str	r1, [r0, #40]	; 0x28
 80069de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069e2:	e7f7      	b.n	80069d4 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x60>
    return HAL_BUSY;
 80069e4:	2002      	movs	r0, #2
 80069e6:	bd10      	pop	{r4, pc}

080069e8 <HAL_UART_RxHalfCpltCallback>:
 80069e8:	4770      	bx	lr

080069ea <_ZL18UART_DMARxHalfCpltP19__DMA_HandleTypeDef>:
{
 80069ea:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80069ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80069ee:	f7ff fffb 	bl	80069e8 <HAL_UART_RxHalfCpltCallback>
 80069f2:	bd08      	pop	{r3, pc}

080069f4 <HAL_UART_ErrorCallback>:
 80069f4:	4770      	bx	lr

080069f6 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80069f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80069f8:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069fa:	680b      	ldr	r3, [r1, #0]
 80069fc:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069fe:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8006a02:	2821      	cmp	r0, #33	; 0x21
 8006a04:	d101      	bne.n	8006a0a <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
 8006a06:	0612      	lsls	r2, r2, #24
 8006a08:	d40e      	bmi.n	8006a28 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x32>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8006a0a:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a0c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8006a10:	2a22      	cmp	r2, #34	; 0x22
 8006a12:	d101      	bne.n	8006a18 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>
 8006a14:	065b      	lsls	r3, r3, #25
 8006a16:	d411      	bmi.n	8006a3c <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x46>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a18:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006a1a:	f043 0310 	orr.w	r3, r3, #16
 8006a1e:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8006a20:	4608      	mov	r0, r1
 8006a22:	f7ff ffe7 	bl	80069f4 <HAL_UART_ErrorCallback>
}
 8006a26:	bd08      	pop	{r3, pc}
    huart->TxXferCount = 0U;
 8006a28:	2200      	movs	r2, #0
 8006a2a:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a32:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006a34:	2220      	movs	r2, #32
 8006a36:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
 8006a3a:	e7e6      	b.n	8006a0a <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
    huart->RxXferCount = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a40:	4608      	mov	r0, r1
 8006a42:	f7ff fd85 	bl	8006550 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
 8006a46:	e7e7      	b.n	8006a18 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>

08006a48 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a48:	6803      	ldr	r3, [r0, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a4c:	68d9      	ldr	r1, [r3, #12]
{
 8006a4e:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8006a50:	0716      	lsls	r6, r2, #28
{
 8006a52:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a54:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8006a56:	d107      	bne.n	8006a68 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a58:	0696      	lsls	r6, r2, #26
 8006a5a:	d551      	bpl.n	8006b00 <HAL_UART_IRQHandler+0xb8>
 8006a5c:	068d      	lsls	r5, r1, #26
 8006a5e:	d54f      	bpl.n	8006b00 <HAL_UART_IRQHandler+0xb8>
}
 8006a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8006a64:	f7ff bf86 	b.w	8006974 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a68:	f015 0501 	ands.w	r5, r5, #1
 8006a6c:	d102      	bne.n	8006a74 <HAL_UART_IRQHandler+0x2c>
 8006a6e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006a72:	d045      	beq.n	8006b00 <HAL_UART_IRQHandler+0xb8>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a74:	07d3      	lsls	r3, r2, #31
 8006a76:	d505      	bpl.n	8006a84 <HAL_UART_IRQHandler+0x3c>
 8006a78:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a7a:	bf42      	ittt	mi
 8006a7c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8006a7e:	f043 0301 	orrmi.w	r3, r3, #1
 8006a82:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a84:	0750      	lsls	r0, r2, #29
 8006a86:	d504      	bpl.n	8006a92 <HAL_UART_IRQHandler+0x4a>
 8006a88:	b11d      	cbz	r5, 8006a92 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a8c:	f043 0302 	orr.w	r3, r3, #2
 8006a90:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a92:	0793      	lsls	r3, r2, #30
 8006a94:	d504      	bpl.n	8006aa0 <HAL_UART_IRQHandler+0x58>
 8006a96:	b11d      	cbz	r5, 8006aa0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a9a:	f043 0304 	orr.w	r3, r3, #4
 8006a9e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aa0:	0716      	lsls	r6, r2, #28
 8006aa2:	d504      	bpl.n	8006aae <HAL_UART_IRQHandler+0x66>
 8006aa4:	b11d      	cbz	r5, 8006aae <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006aa8:	f043 0308 	orr.w	r3, r3, #8
 8006aac:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d069      	beq.n	8006b88 <HAL_UART_IRQHandler+0x140>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ab4:	0690      	lsls	r0, r2, #26
 8006ab6:	d504      	bpl.n	8006ac2 <HAL_UART_IRQHandler+0x7a>
 8006ab8:	068a      	lsls	r2, r1, #26
 8006aba:	d502      	bpl.n	8006ac2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7ff ff59 	bl	8006974 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ac6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006ac8:	0713      	lsls	r3, r2, #28
 8006aca:	d452      	bmi.n	8006b72 <HAL_UART_IRQHandler+0x12a>
 8006acc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006ad0:	d14f      	bne.n	8006b72 <HAL_UART_IRQHandler+0x12a>
        HAL_UART_ErrorCallback(huart);
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7ff ff8e 	bl	80069f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006adc:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8006ade:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae4:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d04a      	beq.n	8006b80 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aea:	4b28      	ldr	r3, [pc, #160]	; (8006b8c <HAL_UART_IRQHandler+0x144>)
 8006aec:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aee:	f7fe fc27 	bl	8005340 <HAL_DMA_Abort_IT>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d048      	beq.n	8006b88 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af6:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8006af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006afc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006afe:	4718      	bx	r3
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b00:	0616      	lsls	r6, r2, #24
 8006b02:	d527      	bpl.n	8006b54 <HAL_UART_IRQHandler+0x10c>
 8006b04:	060d      	lsls	r5, r1, #24
 8006b06:	d525      	bpl.n	8006b54 <HAL_UART_IRQHandler+0x10c>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b08:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006b0c:	2a21      	cmp	r2, #33	; 0x21
 8006b0e:	d13b      	bne.n	8006b88 <HAL_UART_IRQHandler+0x140>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b10:	68a2      	ldr	r2, [r4, #8]
 8006b12:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006b16:	6a22      	ldr	r2, [r4, #32]
 8006b18:	d117      	bne.n	8006b4a <HAL_UART_IRQHandler+0x102>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b1a:	8811      	ldrh	r1, [r2, #0]
 8006b1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006b20:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8006b22:	6921      	ldr	r1, [r4, #16]
 8006b24:	b979      	cbnz	r1, 8006b46 <HAL_UART_IRQHandler+0xfe>
        huart->pTxBuffPtr += 2U;
 8006b26:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8006b28:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8006b2a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8006b2c:	3a01      	subs	r2, #1
 8006b2e:	b292      	uxth	r2, r2
 8006b30:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006b32:	bb4a      	cbnz	r2, 8006b88 <HAL_UART_IRQHandler+0x140>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b3a:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b42:	60da      	str	r2, [r3, #12]
 8006b44:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8006b46:	3201      	adds	r2, #1
 8006b48:	e7ee      	b.n	8006b28 <HAL_UART_IRQHandler+0xe0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b4a:	1c51      	adds	r1, r2, #1
 8006b4c:	6221      	str	r1, [r4, #32]
 8006b4e:	7812      	ldrb	r2, [r2, #0]
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	e7ea      	b.n	8006b2a <HAL_UART_IRQHandler+0xe2>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b54:	0650      	lsls	r0, r2, #25
 8006b56:	d517      	bpl.n	8006b88 <HAL_UART_IRQHandler+0x140>
 8006b58:	0649      	lsls	r1, r1, #25
 8006b5a:	d515      	bpl.n	8006b88 <HAL_UART_IRQHandler+0x140>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b62:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006b64:	2320      	movs	r3, #32
 8006b66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff fec8 	bl	8006900 <HAL_UART_TxCpltCallback>
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
        UART_EndRxTransfer(huart);
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff fcec 	bl	8006550 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	0652      	lsls	r2, r2, #25
 8006b7e:	d4ad      	bmi.n	8006adc <HAL_UART_IRQHandler+0x94>
            HAL_UART_ErrorCallback(huart);
 8006b80:	4620      	mov	r0, r4
 8006b82:	f7ff ff37 	bl	80069f4 <HAL_UART_ErrorCallback>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	bf00      	nop
 8006b8c:	08006b91 	.word	0x08006b91

08006b90 <_ZL20UART_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 8006b90:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b92:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8006b98:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006b9a:	f7ff ff2b 	bl	80069f4 <HAL_UART_ErrorCallback>
 8006b9e:	bd08      	pop	{r3, pc}

08006ba0 <_ZL2sqf>:
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8006baa:	ed97 7a01 	vldr	s14, [r7, #4]
 8006bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <_ZL12pythagorous3fff>:
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	ed2d 8b02 	vpush	{d8}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	ed87 0a03 	vstr	s0, [r7, #12]
 8006bd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8006bd6:	ed87 1a01 	vstr	s2, [r7, #4]
 8006bda:	ed97 0a03 	vldr	s0, [r7, #12]
 8006bde:	f7ff ffdf 	bl	8006ba0 <_ZL2sqf>
 8006be2:	eeb0 8a40 	vmov.f32	s16, s0
 8006be6:	ed97 0a02 	vldr	s0, [r7, #8]
 8006bea:	f7ff ffd9 	bl	8006ba0 <_ZL2sqf>
 8006bee:	eef0 7a40 	vmov.f32	s15, s0
 8006bf2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8006bf6:	ed97 0a01 	vldr	s0, [r7, #4]
 8006bfa:	f7ff ffd1 	bl	8006ba0 <_ZL2sqf>
 8006bfe:	eef0 7a40 	vmov.f32	s15, s0
 8006c02:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006c06:	eeb0 0a67 	vmov.f32	s0, s15
 8006c0a:	f001 fa65 	bl	80080d8 <sqrtf>
 8006c0e:	eef0 7a40 	vmov.f32	s15, s0
 8006c12:	eeb0 0a67 	vmov.f32	s0, s15
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	ecbd 8b02 	vpop	{d8}
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <_ZNK7Vector3IfE6lengthEv>:
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	edd3 7a00 	vldr	s15, [r3]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c3a:	eeb0 1a66 	vmov.f32	s2, s13
 8006c3e:	eef0 0a47 	vmov.f32	s1, s14
 8006c42:	eeb0 0a67 	vmov.f32	s0, s15
 8006c46:	f7ff ffbd 	bl	8006bc4 <_ZL12pythagorous3fff>
 8006c4a:	eef0 7a40 	vmov.f32	s15, s0
 8006c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <_ZN7Vector3IfEdVEf>:
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	ed87 0a00 	vstr	s0, [r7]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	edd3 6a00 	vldr	s13, [r3]
 8006c6a:	ed97 7a00 	vldr	s14, [r7]
 8006c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	edc3 7a00 	vstr	s15, [r3]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	edd3 6a01 	vldr	s13, [r3, #4]
 8006c7e:	ed97 7a00 	vldr	s14, [r7]
 8006c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	edc3 7a01 	vstr	s15, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c92:	ed97 7a00 	vldr	s14, [r7]
 8006c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop

08006cb0 <_ZN7Vector3IfEmIERKS0_>:
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	ed93 7a00 	vldr	s14, [r3]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	edd3 7a00 	vldr	s15, [r3]
 8006cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	edc3 7a00 	vstr	s15, [r3]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	ed93 7a01 	vldr	s14, [r3, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	edc3 7a01 	vstr	s15, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	ed93 7a02 	vldr	s14, [r3, #8]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	edd3 7a02 	vldr	s15, [r3, #8]
 8006cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	edc3 7a02 	vstr	s15, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <_ZN7Vector3IfEpLERKS0_>:
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	ed93 7a00 	vldr	s14, [r3]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	edd3 7a00 	vldr	s15, [r3]
 8006d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	edc3 7a00 	vstr	s15, [r3]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	ed93 7a02 	vldr	s14, [r3, #8]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	edc3 7a02 	vstr	s15, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <_ZNK7Vector3IfEdvEf>:
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08c      	sub	sp, #48	; 0x30
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6178      	str	r0, [r7, #20]
 8006d70:	ed87 0a04 	vstr	s0, [r7, #16]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	ed93 7a00 	vldr	s14, [r3]
 8006d7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	ed93 7a01 	vldr	s14, [r3, #4]
 8006d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d8c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	ed93 7a02 	vldr	s14, [r3, #8]
 8006d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d9a:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8006d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da2:	eeb0 1a65 	vmov.f32	s2, s11
 8006da6:	eef0 0a46 	vmov.f32	s1, s12
 8006daa:	eeb0 0a66 	vmov.f32	s0, s13
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f8de 	bl	8006f70 <_ZN7Vector3IfEC1Efff>
 8006db4:	f107 0318 	add.w	r3, r7, #24
 8006db8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006dbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006dc2:	69b9      	ldr	r1, [r7, #24]
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	ee06 1a90 	vmov	s13, r1
 8006dcc:	ee07 2a10 	vmov	s14, r2
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eeb0 0a66 	vmov.f32	s0, s13
 8006dd8:	eef0 0a47 	vmov.f32	s1, s14
 8006ddc:	eeb0 1a67 	vmov.f32	s2, s15
 8006de0:	3730      	adds	r7, #48	; 0x30
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop

08006de8 <_ZNK7Vector3IfEmlEf>:
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08c      	sub	sp, #48	; 0x30
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6178      	str	r0, [r7, #20]
 8006df0:	ed87 0a04 	vstr	s0, [r7, #16]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	ed93 7a00 	vldr	s14, [r3]
 8006dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8006dfe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e08:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e0c:	ee27 6a27 	vmul.f32	s12, s14, s15
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ed93 7a02 	vldr	s14, [r3, #8]
 8006e16:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e22:	eeb0 1a67 	vmov.f32	s2, s15
 8006e26:	eef0 0a46 	vmov.f32	s1, s12
 8006e2a:	eeb0 0a66 	vmov.f32	s0, s13
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f89e 	bl	8006f70 <_ZN7Vector3IfEC1Efff>
 8006e34:	f107 0318 	add.w	r3, r7, #24
 8006e38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006e3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e42:	69b9      	ldr	r1, [r7, #24]
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	ee06 1a90 	vmov	s13, r1
 8006e4c:	ee07 2a10 	vmov	s14, r2
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eeb0 0a66 	vmov.f32	s0, s13
 8006e58:	eef0 0a47 	vmov.f32	s1, s14
 8006e5c:	eeb0 1a67 	vmov.f32	s2, s15
 8006e60:	3730      	adds	r7, #48	; 0x30
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop

08006e68 <_ZNK7Vector3IfEplERKS0_>:
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08c      	sub	sp, #48	; 0x30
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6178      	str	r0, [r7, #20]
 8006e70:	6139      	str	r1, [r7, #16]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	ed93 7a00 	vldr	s14, [r3]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	edd3 7a00 	vldr	s15, [r3]
 8006e7e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e8e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	ed93 7a02 	vldr	s14, [r3, #8]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ea6:	eeb0 1a67 	vmov.f32	s2, s15
 8006eaa:	eef0 0a46 	vmov.f32	s1, s12
 8006eae:	eeb0 0a66 	vmov.f32	s0, s13
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f85c 	bl	8006f70 <_ZN7Vector3IfEC1Efff>
 8006eb8:	f107 0318 	add.w	r3, r7, #24
 8006ebc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ec6:	69b9      	ldr	r1, [r7, #24]
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	ee06 1a90 	vmov	s13, r1
 8006ed0:	ee07 2a10 	vmov	s14, r2
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eeb0 0a66 	vmov.f32	s0, s13
 8006edc:	eef0 0a47 	vmov.f32	s1, s14
 8006ee0:	eeb0 1a67 	vmov.f32	s2, s15
 8006ee4:	3730      	adds	r7, #48	; 0x30
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop

08006eec <_ZNK7Vector3IfEmiERKS0_>:
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08c      	sub	sp, #48	; 0x30
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6178      	str	r0, [r7, #20]
 8006ef4:	6139      	str	r1, [r7, #16]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	ed93 7a00 	vldr	s14, [r3]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	edd3 7a00 	vldr	s15, [r3]
 8006f02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	ed93 7a01 	vldr	s14, [r3, #4]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f12:	ee37 6a67 	vsub.f32	s12, s14, s15
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	ed93 7a02 	vldr	s14, [r3, #8]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f2a:	eeb0 1a67 	vmov.f32	s2, s15
 8006f2e:	eef0 0a46 	vmov.f32	s1, s12
 8006f32:	eeb0 0a66 	vmov.f32	s0, s13
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f81a 	bl	8006f70 <_ZN7Vector3IfEC1Efff>
 8006f3c:	f107 0318 	add.w	r3, r7, #24
 8006f40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006f44:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	ee06 1a90 	vmov	s13, r1
 8006f54:	ee07 2a10 	vmov	s14, r2
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eeb0 0a66 	vmov.f32	s0, s13
 8006f60:	eef0 0a47 	vmov.f32	s1, s14
 8006f64:	eeb0 1a67 	vmov.f32	s2, s15
 8006f68:	3730      	adds	r7, #48	; 0x30
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop

08006f70 <_ZN7Vector3IfEC1Efff>:
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	ed87 0a02 	vstr	s0, [r7, #8]
 8006f7c:	edc7 0a01 	vstr	s1, [r7, #4]
 8006f80:	ed87 1a00 	vstr	s2, [r7]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	609a      	str	r2, [r3, #8]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <_ZN7Matrix3IfE10from_eulerEfff>:
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	ed87 0a02 	vstr	s0, [r7, #8]
 8006fb0:	edc7 0a01 	vstr	s1, [r7, #4]
 8006fb4:	ed87 1a00 	vstr	s2, [r7]
 8006fb8:	ed97 0a01 	vldr	s0, [r7, #4]
 8006fbc:	f001 f80a 	bl	8007fd4 <cosf>
 8006fc0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006fc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8006fc8:	f001 f844 	bl	8008054 <sinf>
 8006fcc:	ed87 0a08 	vstr	s0, [r7, #32]
 8006fd0:	ed97 0a02 	vldr	s0, [r7, #8]
 8006fd4:	f001 f83e 	bl	8008054 <sinf>
 8006fd8:	ed87 0a07 	vstr	s0, [r7, #28]
 8006fdc:	ed97 0a02 	vldr	s0, [r7, #8]
 8006fe0:	f000 fff8 	bl	8007fd4 <cosf>
 8006fe4:	ed87 0a06 	vstr	s0, [r7, #24]
 8006fe8:	ed97 0a00 	vldr	s0, [r7]
 8006fec:	f001 f832 	bl	8008054 <sinf>
 8006ff0:	ed87 0a05 	vstr	s0, [r7, #20]
 8006ff4:	ed97 0a00 	vldr	s0, [r7]
 8006ff8:	f000 ffec 	bl	8007fd4 <cosf>
 8006ffc:	ed87 0a04 	vstr	s0, [r7, #16]
 8007000:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007004:	edd7 7a04 	vldr	s15, [r7, #16]
 8007008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	edc3 7a00 	vstr	s15, [r3]
 8007012:	ed97 7a07 	vldr	s14, [r7, #28]
 8007016:	edd7 7a08 	vldr	s15, [r7, #32]
 800701a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800701e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007026:	edd7 6a06 	vldr	s13, [r7, #24]
 800702a:	edd7 7a05 	vldr	s15, [r7, #20]
 800702e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	edc3 7a01 	vstr	s15, [r3, #4]
 800703c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007040:	edd7 7a08 	vldr	s15, [r7, #32]
 8007044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007048:	edd7 7a04 	vldr	s15, [r7, #16]
 800704c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007050:	edd7 6a07 	vldr	s13, [r7, #28]
 8007054:	edd7 7a05 	vldr	s15, [r7, #20]
 8007058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800705c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	edc3 7a02 	vstr	s15, [r3, #8]
 8007066:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800706a:	edd7 7a05 	vldr	s15, [r7, #20]
 800706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	edc3 7a03 	vstr	s15, [r3, #12]
 8007078:	ed97 7a07 	vldr	s14, [r7, #28]
 800707c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007084:	edd7 7a05 	vldr	s15, [r7, #20]
 8007088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800708c:	edd7 6a06 	vldr	s13, [r7, #24]
 8007090:	edd7 7a04 	vldr	s15, [r7, #16]
 8007094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	edc3 7a04 	vstr	s15, [r3, #16]
 80070a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80070a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80070aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80070b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80070be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	edc3 7a05 	vstr	s15, [r3, #20]
 80070cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80070d0:	eef1 7a67 	vneg.f32	s15, s15
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	edc3 7a06 	vstr	s15, [r3, #24]
 80070da:	ed97 7a07 	vldr	s14, [r7, #28]
 80070de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	edc3 7a07 	vstr	s15, [r3, #28]
 80070ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80070f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80070f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	edc3 7a08 	vstr	s15, [r3, #32]
 80070fe:	bf00      	nop
 8007100:	3728      	adds	r7, #40	; 0x28
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop

08007108 <_ZNK7Matrix3IfEmlERK7Vector3IfE>:
 8007108:	b580      	push	{r7, lr}
 800710a:	b08c      	sub	sp, #48	; 0x30
 800710c:	af00      	add	r7, sp, #0
 800710e:	6178      	str	r0, [r7, #20]
 8007110:	6139      	str	r1, [r7, #16]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	ed93 7a00 	vldr	s14, [r3]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	edd3 7a00 	vldr	s15, [r3]
 800711e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	edd3 6a01 	vldr	s13, [r3, #4]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	edd3 7a01 	vldr	s15, [r3, #4]
 800712e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	edd3 6a02 	vldr	s13, [r3, #8]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007146:	ee37 6a27 	vadd.f32	s12, s14, s15
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	ed93 7a03 	vldr	s14, [r3, #12]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	edd3 7a00 	vldr	s15, [r3]
 8007156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	edd3 6a04 	vldr	s13, [r3, #16]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	edd3 7a01 	vldr	s15, [r3, #4]
 8007166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800716a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	edd3 6a05 	vldr	s13, [r3, #20]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	edd3 7a02 	vldr	s15, [r3, #8]
 800717a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800717e:	ee77 5a27 	vadd.f32	s11, s14, s15
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	ed93 7a06 	vldr	s14, [r3, #24]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	edd3 7a00 	vldr	s15, [r3]
 800718e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	edd3 6a07 	vldr	s13, [r3, #28]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	edd3 7a01 	vldr	s15, [r3, #4]
 800719e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	edd3 6a08 	vldr	s13, [r3, #32]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80071b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071be:	eeb0 1a67 	vmov.f32	s2, s15
 80071c2:	eef0 0a65 	vmov.f32	s1, s11
 80071c6:	eeb0 0a46 	vmov.f32	s0, s12
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fed0 	bl	8006f70 <_ZN7Vector3IfEC1Efff>
 80071d0:	f107 0318 	add.w	r3, r7, #24
 80071d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80071d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80071da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80071de:	69b9      	ldr	r1, [r7, #24]
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	ee06 1a90 	vmov	s13, r1
 80071e8:	ee07 2a10 	vmov	s14, r2
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eeb0 0a66 	vmov.f32	s0, s13
 80071f4:	eef0 0a47 	vmov.f32	s1, s14
 80071f8:	eeb0 1a67 	vmov.f32	s2, s15
 80071fc:	3730      	adds	r7, #48	; 0x30
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop

08007204 <_Z8inv_sqrtf>:
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	ed87 0a01 	vstr	s0, [r7, #4]
 800720e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007212:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800721a:	edc7 7a05 	vstr	s15, [r7, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	f107 0310 	add.w	r3, r7, #16
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	105a      	asrs	r2, r3, #1
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <_Z8inv_sqrtf+0x74>)
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	f107 030c 	add.w	r3, r7, #12
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007240:	edd7 7a05 	vldr	s15, [r7, #20]
 8007244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007248:	edd7 7a04 	vldr	s15, [r7, #16]
 800724c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007250:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8007254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007258:	edd7 7a04 	vldr	s15, [r7, #16]
 800725c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007260:	edc7 7a04 	vstr	s15, [r7, #16]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eeb0 0a67 	vmov.f32	s0, s15
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	5f3759df 	.word	0x5f3759df

0800727c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800727c:	b510      	push	{r4, lr}
 800727e:	4b03      	ldr	r3, [pc, #12]	; (800728c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007280:	6003      	str	r3, [r0, #0]
 8007282:	4604      	mov	r4, r0
 8007284:	f000 fc0a 	bl	8007a9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007288:	4620      	mov	r0, r4
 800728a:	bd10      	pop	{r4, pc}
 800728c:	0800a23c 	.word	0x0800a23c

08007290 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007290:	b510      	push	{r4, lr}
 8007292:	4604      	mov	r4, r0
 8007294:	f7ff fff2 	bl	800727c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8007298:	4620      	mov	r0, r4
 800729a:	210c      	movs	r1, #12
 800729c:	f000 fbd4 	bl	8007a48 <_ZdlPvj>
 80072a0:	4620      	mov	r0, r4
 80072a2:	bd10      	pop	{r4, pc}

080072a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80072a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	9e06      	ldr	r6, [sp, #24]
 80072aa:	4296      	cmp	r6, r2
 80072ac:	4680      	mov	r8, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	4614      	mov	r4, r2
 80072b2:	461d      	mov	r5, r3
 80072b4:	d103      	bne.n	80072be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80072b6:	4619      	mov	r1, r3
 80072b8:	f000 fc44 	bl	8007b44 <_ZNKSt9type_infoeqERKS_>
 80072bc:	b958      	cbnz	r0, 80072d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80072be:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80072c2:	6803      	ldr	r3, [r0, #0]
 80072c4:	9606      	str	r6, [sp, #24]
 80072c6:	6a1e      	ldr	r6, [r3, #32]
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	4639      	mov	r1, r7
 80072ce:	46b4      	mov	ip, r6
 80072d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d4:	4760      	bx	ip
 80072d6:	2006      	movs	r0, #6
 80072d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80072dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	460e      	mov	r6, r1
 80072e2:	4619      	mov	r1, r3
 80072e4:	4683      	mov	fp, r0
 80072e6:	4617      	mov	r7, r2
 80072e8:	4699      	mov	r9, r3
 80072ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072ec:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80072f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80072f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80072f6:	f000 fc25 	bl	8007b44 <_ZNKSt9type_infoeqERKS_>
 80072fa:	b190      	cbz	r0, 8007322 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	602c      	str	r4, [r5, #0]
 8007300:	712f      	strb	r7, [r5, #4]
 8007302:	db09      	blt.n	8007318 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8007304:	4434      	add	r4, r6
 8007306:	45a0      	cmp	r8, r4
 8007308:	bf0c      	ite	eq
 800730a:	2406      	moveq	r4, #6
 800730c:	2401      	movne	r4, #1
 800730e:	71ac      	strb	r4, [r5, #6]
 8007310:	2000      	movs	r0, #0
 8007312:	b001      	add	sp, #4
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	3602      	adds	r6, #2
 800731a:	d1f9      	bne.n	8007310 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800731c:	2301      	movs	r3, #1
 800731e:	71ab      	strb	r3, [r5, #6]
 8007320:	e7f6      	b.n	8007310 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8007322:	4544      	cmp	r4, r8
 8007324:	d104      	bne.n	8007330 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007326:	4651      	mov	r1, sl
 8007328:	4658      	mov	r0, fp
 800732a:	f000 fc0b 	bl	8007b44 <_ZNKSt9type_infoeqERKS_>
 800732e:	b988      	cbnz	r0, 8007354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8007330:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	950d      	str	r5, [sp, #52]	; 0x34
 8007338:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800733c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007340:	940a      	str	r4, [sp, #40]	; 0x28
 8007342:	69dc      	ldr	r4, [r3, #28]
 8007344:	463a      	mov	r2, r7
 8007346:	464b      	mov	r3, r9
 8007348:	4631      	mov	r1, r6
 800734a:	46a4      	mov	ip, r4
 800734c:	b001      	add	sp, #4
 800734e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007352:	4760      	bx	ip
 8007354:	716f      	strb	r7, [r5, #5]
 8007356:	e7db      	b.n	8007310 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08007358 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8007358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	4616      	mov	r6, r2
 8007362:	461f      	mov	r7, r3
 8007364:	f000 fbae 	bl	8007ac4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8007368:	b948      	cbnz	r0, 800737e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800736a:	68a0      	ldr	r0, [r4, #8]
 800736c:	6803      	ldr	r3, [r0, #0]
 800736e:	699c      	ldr	r4, [r3, #24]
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	4629      	mov	r1, r5
 8007376:	46a4      	mov	ip, r4
 8007378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800737c:	4760      	bx	ip
 800737e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007382 <_ZdlPv>:
 8007382:	f001 bd7f 	b.w	8008e84 <free>

08007386 <__aeabi_atexit>:
 8007386:	460b      	mov	r3, r1
 8007388:	4601      	mov	r1, r0
 800738a:	4618      	mov	r0, r3
 800738c:	f001 bc2b 	b.w	8008be6 <__cxa_atexit>

08007390 <_Znwj>:
 8007390:	b510      	push	{r4, lr}
 8007392:	2800      	cmp	r0, #0
 8007394:	bf14      	ite	ne
 8007396:	4604      	movne	r4, r0
 8007398:	2401      	moveq	r4, #1
 800739a:	4620      	mov	r0, r4
 800739c:	f001 fd6a 	bl	8008e74 <malloc>
 80073a0:	b930      	cbnz	r0, 80073b0 <_Znwj+0x20>
 80073a2:	f000 fb53 	bl	8007a4c <_ZSt15get_new_handlerv>
 80073a6:	b908      	cbnz	r0, 80073ac <_Znwj+0x1c>
 80073a8:	f001 fc16 	bl	8008bd8 <abort>
 80073ac:	4780      	blx	r0
 80073ae:	e7f4      	b.n	800739a <_Znwj+0xa>
 80073b0:	bd10      	pop	{r4, pc}

080073b2 <__cxa_end_cleanup>:
 80073b2:	b41e      	push	{r1, r2, r3, r4}
 80073b4:	f000 f89b 	bl	80074ee <__gnu_end_cleanup>
 80073b8:	bc1e      	pop	{r1, r2, r3, r4}
 80073ba:	f7fa fa4b 	bl	8001854 <_Unwind_Resume>

080073be <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80073be:	7803      	ldrb	r3, [r0, #0]
 80073c0:	2b47      	cmp	r3, #71	; 0x47
 80073c2:	d117      	bne.n	80073f4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073c4:	7843      	ldrb	r3, [r0, #1]
 80073c6:	2b4e      	cmp	r3, #78	; 0x4e
 80073c8:	d114      	bne.n	80073f4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073ca:	7883      	ldrb	r3, [r0, #2]
 80073cc:	2b55      	cmp	r3, #85	; 0x55
 80073ce:	d111      	bne.n	80073f4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073d0:	78c3      	ldrb	r3, [r0, #3]
 80073d2:	2b43      	cmp	r3, #67	; 0x43
 80073d4:	d10e      	bne.n	80073f4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073d6:	7903      	ldrb	r3, [r0, #4]
 80073d8:	2b43      	cmp	r3, #67	; 0x43
 80073da:	d10b      	bne.n	80073f4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073dc:	7943      	ldrb	r3, [r0, #5]
 80073de:	2b2b      	cmp	r3, #43	; 0x2b
 80073e0:	d108      	bne.n	80073f4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073e2:	7983      	ldrb	r3, [r0, #6]
 80073e4:	2b2b      	cmp	r3, #43	; 0x2b
 80073e6:	d105      	bne.n	80073f4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073e8:	79c0      	ldrb	r0, [r0, #7]
 80073ea:	2801      	cmp	r0, #1
 80073ec:	bf8c      	ite	hi
 80073ee:	2000      	movhi	r0, #0
 80073f0:	2001      	movls	r0, #1
 80073f2:	4770      	bx	lr
 80073f4:	2000      	movs	r0, #0
 80073f6:	4770      	bx	lr

080073f8 <__cxa_type_match>:
 80073f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073fc:	461e      	mov	r6, r3
 80073fe:	7803      	ldrb	r3, [r0, #0]
 8007400:	2b47      	cmp	r3, #71	; 0x47
 8007402:	460d      	mov	r5, r1
 8007404:	4602      	mov	r2, r0
 8007406:	79c1      	ldrb	r1, [r0, #7]
 8007408:	d148      	bne.n	800749c <__cxa_type_match+0xa4>
 800740a:	7843      	ldrb	r3, [r0, #1]
 800740c:	2b4e      	cmp	r3, #78	; 0x4e
 800740e:	d145      	bne.n	800749c <__cxa_type_match+0xa4>
 8007410:	7883      	ldrb	r3, [r0, #2]
 8007412:	2b55      	cmp	r3, #85	; 0x55
 8007414:	d142      	bne.n	800749c <__cxa_type_match+0xa4>
 8007416:	78c3      	ldrb	r3, [r0, #3]
 8007418:	2b43      	cmp	r3, #67	; 0x43
 800741a:	d13f      	bne.n	800749c <__cxa_type_match+0xa4>
 800741c:	7903      	ldrb	r3, [r0, #4]
 800741e:	2b46      	cmp	r3, #70	; 0x46
 8007420:	d13c      	bne.n	800749c <__cxa_type_match+0xa4>
 8007422:	7943      	ldrb	r3, [r0, #5]
 8007424:	2b4f      	cmp	r3, #79	; 0x4f
 8007426:	d139      	bne.n	800749c <__cxa_type_match+0xa4>
 8007428:	7983      	ldrb	r3, [r0, #6]
 800742a:	2b52      	cmp	r3, #82	; 0x52
 800742c:	d136      	bne.n	800749c <__cxa_type_match+0xa4>
 800742e:	2900      	cmp	r1, #0
 8007430:	d134      	bne.n	800749c <__cxa_type_match+0xa4>
 8007432:	2301      	movs	r3, #1
 8007434:	4608      	mov	r0, r1
 8007436:	2400      	movs	r4, #0
 8007438:	9401      	str	r4, [sp, #4]
 800743a:	bb3b      	cbnz	r3, 800748c <__cxa_type_match+0x94>
 800743c:	bb40      	cbnz	r0, 8007490 <__cxa_type_match+0x98>
 800743e:	2901      	cmp	r1, #1
 8007440:	bf0a      	itet	eq
 8007442:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8007446:	f1a2 0320 	subne.w	r3, r2, #32
 800744a:	3b78      	subeq	r3, #120	; 0x78
 800744c:	2901      	cmp	r1, #1
 800744e:	bf08      	it	eq
 8007450:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8007454:	681c      	ldr	r4, [r3, #0]
 8007456:	bf18      	it	ne
 8007458:	3258      	addne	r2, #88	; 0x58
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	4620      	mov	r0, r4
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	4798      	blx	r3
 8007464:	b1b0      	cbz	r0, 8007494 <__cxa_type_match+0x9c>
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	2702      	movs	r7, #2
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	aa01      	add	r2, sp, #4
 8007472:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8007476:	4621      	mov	r1, r4
 8007478:	2301      	movs	r3, #1
 800747a:	4628      	mov	r0, r5
 800747c:	47c0      	blx	r8
 800747e:	b158      	cbz	r0, 8007498 <__cxa_type_match+0xa0>
 8007480:	9b01      	ldr	r3, [sp, #4]
 8007482:	6033      	str	r3, [r6, #0]
 8007484:	4638      	mov	r0, r7
 8007486:	b002      	add	sp, #8
 8007488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800748c:	4c07      	ldr	r4, [pc, #28]	; (80074ac <__cxa_type_match+0xb4>)
 800748e:	e7e5      	b.n	800745c <__cxa_type_match+0x64>
 8007490:	4c07      	ldr	r4, [pc, #28]	; (80074b0 <__cxa_type_match+0xb8>)
 8007492:	e7e3      	b.n	800745c <__cxa_type_match+0x64>
 8007494:	2701      	movs	r7, #1
 8007496:	e7ea      	b.n	800746e <__cxa_type_match+0x76>
 8007498:	4607      	mov	r7, r0
 800749a:	e7f3      	b.n	8007484 <__cxa_type_match+0x8c>
 800749c:	4610      	mov	r0, r2
 800749e:	f7ff ff8e 	bl	80073be <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80074a2:	f080 0001 	eor.w	r0, r0, #1
 80074a6:	b2c0      	uxtb	r0, r0
 80074a8:	2300      	movs	r3, #0
 80074aa:	e7c4      	b.n	8007436 <__cxa_type_match+0x3e>
 80074ac:	0800a2ec 	.word	0x0800a2ec
 80074b0:	0800a2f4 	.word	0x0800a2f4

080074b4 <__cxa_begin_cleanup>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	4604      	mov	r4, r0
 80074b8:	f000 fc40 	bl	8007d3c <__cxa_get_globals>
 80074bc:	4602      	mov	r2, r0
 80074be:	4620      	mov	r0, r4
 80074c0:	f1a4 0120 	sub.w	r1, r4, #32
 80074c4:	f7ff ff7b 	bl	80073be <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80074c8:	b160      	cbz	r0, 80074e4 <__cxa_begin_cleanup+0x30>
 80074ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80074ce:	3301      	adds	r3, #1
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80074d6:	d103      	bne.n	80074e0 <__cxa_begin_cleanup+0x2c>
 80074d8:	6893      	ldr	r3, [r2, #8]
 80074da:	f844 3c08 	str.w	r3, [r4, #-8]
 80074de:	6091      	str	r1, [r2, #8]
 80074e0:	2001      	movs	r0, #1
 80074e2:	bd10      	pop	{r4, pc}
 80074e4:	6893      	ldr	r3, [r2, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0f9      	beq.n	80074de <__cxa_begin_cleanup+0x2a>
 80074ea:	f000 fc0f 	bl	8007d0c <_ZSt9terminatev>

080074ee <__gnu_end_cleanup>:
 80074ee:	b510      	push	{r4, lr}
 80074f0:	f000 fc24 	bl	8007d3c <__cxa_get_globals>
 80074f4:	6882      	ldr	r2, [r0, #8]
 80074f6:	4601      	mov	r1, r0
 80074f8:	b90a      	cbnz	r2, 80074fe <__gnu_end_cleanup+0x10>
 80074fa:	f000 fc07 	bl	8007d0c <_ZSt9terminatev>
 80074fe:	f102 0420 	add.w	r4, r2, #32
 8007502:	4620      	mov	r0, r4
 8007504:	f7ff ff5b 	bl	80073be <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007508:	b140      	cbz	r0, 800751c <__gnu_end_cleanup+0x2e>
 800750a:	69d3      	ldr	r3, [r2, #28]
 800750c:	3b01      	subs	r3, #1
 800750e:	61d3      	str	r3, [r2, #28]
 8007510:	b913      	cbnz	r3, 8007518 <__gnu_end_cleanup+0x2a>
 8007512:	6990      	ldr	r0, [r2, #24]
 8007514:	6088      	str	r0, [r1, #8]
 8007516:	6193      	str	r3, [r2, #24]
 8007518:	4620      	mov	r0, r4
 800751a:	bd10      	pop	{r4, pc}
 800751c:	6088      	str	r0, [r1, #8]
 800751e:	e7fb      	b.n	8007518 <__gnu_end_cleanup+0x2a>

08007520 <_ZL12read_uleb128PKhPm>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	2300      	movs	r3, #0
 8007524:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8007528:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800752c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8007530:	1994      	adds	r4, r2, r6
 8007532:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8007536:	40a2      	lsls	r2, r4
 8007538:	4313      	orrs	r3, r2
 800753a:	062a      	lsls	r2, r5, #24
 800753c:	d4f4      	bmi.n	8007528 <_ZL12read_uleb128PKhPm+0x8>
 800753e:	600b      	str	r3, [r1, #0]
 8007540:	bd70      	pop	{r4, r5, r6, pc}

08007542 <_ZL12read_sleb128PKhPl>:
 8007542:	b530      	push	{r4, r5, lr}
 8007544:	2300      	movs	r3, #0
 8007546:	461a      	mov	r2, r3
 8007548:	f810 4b01 	ldrb.w	r4, [r0], #1
 800754c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8007550:	4095      	lsls	r5, r2
 8007552:	432b      	orrs	r3, r5
 8007554:	0625      	lsls	r5, r4, #24
 8007556:	f102 0207 	add.w	r2, r2, #7
 800755a:	d4f5      	bmi.n	8007548 <_ZL12read_sleb128PKhPl+0x6>
 800755c:	2a1f      	cmp	r2, #31
 800755e:	d806      	bhi.n	800756e <_ZL12read_sleb128PKhPl+0x2c>
 8007560:	0664      	lsls	r4, r4, #25
 8007562:	bf42      	ittt	mi
 8007564:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8007568:	fa04 f202 	lslmi.w	r2, r4, r2
 800756c:	4313      	orrmi	r3, r2
 800756e:	600b      	str	r3, [r1, #0]
 8007570:	bd30      	pop	{r4, r5, pc}

08007572 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8007572:	2850      	cmp	r0, #80	; 0x50
 8007574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007576:	4605      	mov	r5, r0
 8007578:	460e      	mov	r6, r1
 800757a:	4614      	mov	r4, r2
 800757c:	461f      	mov	r7, r3
 800757e:	d107      	bne.n	8007590 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8007580:	1cd0      	adds	r0, r2, #3
 8007582:	f020 0003 	bic.w	r0, r0, #3
 8007586:	f850 3b04 	ldr.w	r3, [r0], #4
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	b003      	add	sp, #12
 800758e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007590:	f000 030f 	and.w	r3, r0, #15
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d82e      	bhi.n	80075f6 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8007598:	e8df f003 	tbb	[pc, r3]
 800759c:	251d0725 	.word	0x251d0725
 80075a0:	2d2d2d29 	.word	0x2d2d2d29
 80075a4:	2521182d 	.word	0x2521182d
 80075a8:	29          	.byte	0x29
 80075a9:	00          	.byte	0x00
 80075aa:	a901      	add	r1, sp, #4
 80075ac:	4620      	mov	r0, r4
 80075ae:	f7ff ffb7 	bl	8007520 <_ZL12read_uleb128PKhPm>
 80075b2:	9b01      	ldr	r3, [sp, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0e8      	beq.n	800758a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80075b8:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80075bc:	2a10      	cmp	r2, #16
 80075be:	bf08      	it	eq
 80075c0:	4626      	moveq	r6, r4
 80075c2:	4433      	add	r3, r6
 80075c4:	062a      	lsls	r2, r5, #24
 80075c6:	bf48      	it	mi
 80075c8:	681b      	ldrmi	r3, [r3, #0]
 80075ca:	e7de      	b.n	800758a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80075cc:	a901      	add	r1, sp, #4
 80075ce:	4620      	mov	r0, r4
 80075d0:	f7ff ffb7 	bl	8007542 <_ZL12read_sleb128PKhPl>
 80075d4:	e7ed      	b.n	80075b2 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80075d6:	4620      	mov	r0, r4
 80075d8:	f830 3b02 	ldrh.w	r3, [r0], #2
 80075dc:	e7ea      	b.n	80075b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80075de:	4620      	mov	r0, r4
 80075e0:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80075e4:	e7e6      	b.n	80075b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80075e6:	4620      	mov	r0, r4
 80075e8:	f850 3b04 	ldr.w	r3, [r0], #4
 80075ec:	e7e2      	b.n	80075b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80075ee:	4620      	mov	r0, r4
 80075f0:	f850 3b08 	ldr.w	r3, [r0], #8
 80075f4:	e7de      	b.n	80075b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80075f6:	f001 faef 	bl	8008bd8 <abort>

080075fa <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80075fa:	b508      	push	{r3, lr}
 80075fc:	4603      	mov	r3, r0
 80075fe:	2bff      	cmp	r3, #255	; 0xff
 8007600:	4608      	mov	r0, r1
 8007602:	d007      	beq.n	8007614 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8007604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007608:	2b20      	cmp	r3, #32
 800760a:	d00d      	beq.n	8007628 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 800760c:	d804      	bhi.n	8007618 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 800760e:	b10b      	cbz	r3, 8007614 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8007610:	2b10      	cmp	r3, #16
 8007612:	d107      	bne.n	8007624 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8007614:	2000      	movs	r0, #0
 8007616:	bd08      	pop	{r3, pc}
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d00d      	beq.n	8007638 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 800761c:	2b50      	cmp	r3, #80	; 0x50
 800761e:	d0f9      	beq.n	8007614 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8007620:	2b30      	cmp	r3, #48	; 0x30
 8007622:	d005      	beq.n	8007630 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8007624:	f001 fad8 	bl	8008bd8 <abort>
 8007628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800762c:	f7fa bb12 	b.w	8001c54 <_Unwind_GetTextRelBase>
 8007630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007634:	f7fa bb12 	b.w	8001c5c <_Unwind_GetDataRelBase>
 8007638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800763c:	f7fa bafa 	b.w	8001c34 <_Unwind_GetRegionStart>

08007640 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	460c      	mov	r4, r1
 8007644:	4601      	mov	r1, r0
 8007646:	4620      	mov	r0, r4
 8007648:	4615      	mov	r5, r2
 800764a:	461e      	mov	r6, r3
 800764c:	f7ff ffd5 	bl	80075fa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8007650:	4633      	mov	r3, r6
 8007652:	462a      	mov	r2, r5
 8007654:	4601      	mov	r1, r0
 8007656:	4620      	mov	r0, r4
 8007658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800765c:	f7ff bf89 	b.w	8007572 <_ZL28read_encoded_value_with_basehjPKhPj>

08007660 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8007660:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007662:	460e      	mov	r6, r1
 8007664:	4614      	mov	r4, r2
 8007666:	4605      	mov	r5, r0
 8007668:	b328      	cbz	r0, 80076b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800766a:	f7fa fae3 	bl	8001c34 <_Unwind_GetRegionStart>
 800766e:	6020      	str	r0, [r4, #0]
 8007670:	7831      	ldrb	r1, [r6, #0]
 8007672:	29ff      	cmp	r1, #255	; 0xff
 8007674:	f106 0201 	add.w	r2, r6, #1
 8007678:	d01e      	beq.n	80076b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 800767a:	1d23      	adds	r3, r4, #4
 800767c:	4628      	mov	r0, r5
 800767e:	f7ff ffdf 	bl	8007640 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007682:	4602      	mov	r2, r0
 8007684:	7813      	ldrb	r3, [r2, #0]
 8007686:	7523      	strb	r3, [r4, #20]
 8007688:	2bff      	cmp	r3, #255	; 0xff
 800768a:	f102 0001 	add.w	r0, r2, #1
 800768e:	d015      	beq.n	80076bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 8007690:	2310      	movs	r3, #16
 8007692:	7523      	strb	r3, [r4, #20]
 8007694:	a901      	add	r1, sp, #4
 8007696:	f7ff ff43 	bl	8007520 <_ZL12read_uleb128PKhPm>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	4403      	add	r3, r0
 800769e:	60e3      	str	r3, [r4, #12]
 80076a0:	7803      	ldrb	r3, [r0, #0]
 80076a2:	7563      	strb	r3, [r4, #21]
 80076a4:	a901      	add	r1, sp, #4
 80076a6:	3001      	adds	r0, #1
 80076a8:	f7ff ff3a 	bl	8007520 <_ZL12read_uleb128PKhPm>
 80076ac:	9b01      	ldr	r3, [sp, #4]
 80076ae:	4403      	add	r3, r0
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	b002      	add	sp, #8
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
 80076b6:	e7da      	b.n	800766e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80076b8:	6060      	str	r0, [r4, #4]
 80076ba:	e7e3      	b.n	8007684 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 80076bc:	2300      	movs	r3, #0
 80076be:	e7ee      	b.n	800769e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080076c0 <_Unwind_GetGR>:
 80076c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076c2:	ab03      	add	r3, sp, #12
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	2300      	movs	r3, #0
 80076c8:	460a      	mov	r2, r1
 80076ca:	4619      	mov	r1, r3
 80076cc:	f7f9 fd1c 	bl	8001108 <_Unwind_VRS_Get>
 80076d0:	9803      	ldr	r0, [sp, #12]
 80076d2:	b005      	add	sp, #20
 80076d4:	f85d fb04 	ldr.w	pc, [sp], #4

080076d8 <__gxx_personality_v0>:
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	b091      	sub	sp, #68	; 0x44
 80076de:	2300      	movs	r3, #0
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	f000 0303 	and.w	r3, r0, #3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	4607      	mov	r7, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4616      	mov	r6, r2
 80076ee:	d011      	beq.n	8007714 <__gxx_personality_v0+0x3c>
 80076f0:	d303      	bcc.n	80076fa <__gxx_personality_v0+0x22>
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d003      	beq.n	80076fe <__gxx_personality_v0+0x26>
 80076f6:	f001 fa6f 	bl	8008bd8 <abort>
 80076fa:	0702      	lsls	r2, r0, #28
 80076fc:	d51a      	bpl.n	8007734 <__gxx_personality_v0+0x5c>
 80076fe:	4631      	mov	r1, r6
 8007700:	4620      	mov	r0, r4
 8007702:	f7fa fa83 	bl	8001c0c <__gnu_unwind_frame>
 8007706:	b118      	cbz	r0, 8007710 <__gxx_personality_v0+0x38>
 8007708:	2009      	movs	r0, #9
 800770a:	b011      	add	sp, #68	; 0x44
 800770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007710:	2008      	movs	r0, #8
 8007712:	e7fa      	b.n	800770a <__gxx_personality_v0+0x32>
 8007714:	f000 0508 	and.w	r5, r0, #8
 8007718:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800771c:	bb85      	cbnz	r5, 8007780 <__gxx_personality_v0+0xa8>
 800771e:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8007722:	4610      	mov	r0, r2
 8007724:	210d      	movs	r1, #13
 8007726:	f7ff ffcb 	bl	80076c0 <_Unwind_GetGR>
 800772a:	4581      	cmp	r9, r0
 800772c:	f040 8140 	bne.w	80079b0 <__gxx_personality_v0+0x2d8>
 8007730:	2506      	movs	r5, #6
 8007732:	e000      	b.n	8007736 <__gxx_personality_v0+0x5e>
 8007734:	2501      	movs	r5, #1
 8007736:	ab10      	add	r3, sp, #64	; 0x40
 8007738:	f007 0708 	and.w	r7, r7, #8
 800773c:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	2300      	movs	r3, #0
 8007744:	433d      	orrs	r5, r7
 8007746:	220c      	movs	r2, #12
 8007748:	4619      	mov	r1, r3
 800774a:	4630      	mov	r0, r6
 800774c:	f7f9 fd02 	bl	8001154 <_Unwind_VRS_Set>
 8007750:	2d06      	cmp	r5, #6
 8007752:	f040 8139 	bne.w	80079c8 <__gxx_personality_v0+0x2f0>
 8007756:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800775a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800775c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800775e:	f1b8 0f00 	cmp.w	r8, #0
 8007762:	bf0c      	ite	eq
 8007764:	f04f 0a01 	moveq.w	sl, #1
 8007768:	f04f 0a03 	movne.w	sl, #3
 800776c:	f015 0508 	ands.w	r5, r5, #8
 8007770:	f000 80ce 	beq.w	8007910 <__gxx_personality_v0+0x238>
 8007774:	f1ba 0f01 	cmp.w	sl, #1
 8007778:	f040 80c6 	bne.w	8007908 <__gxx_personality_v0+0x230>
 800777c:	f000 fac6 	bl	8007d0c <_ZSt9terminatev>
 8007780:	2502      	movs	r5, #2
 8007782:	e7d8      	b.n	8007736 <__gxx_personality_v0+0x5e>
 8007784:	9a07      	ldr	r2, [sp, #28]
 8007786:	4413      	add	r3, r2
 8007788:	429f      	cmp	r7, r3
 800778a:	f080 8137 	bcs.w	80079fc <__gxx_personality_v0+0x324>
 800778e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007792:	f1b8 0f00 	cmp.w	r8, #0
 8007796:	d001      	beq.n	800779c <__gxx_personality_v0+0xc4>
 8007798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800779a:	4498      	add	r8, r3
 800779c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800779e:	b117      	cbz	r7, 80077a6 <__gxx_personality_v0+0xce>
 80077a0:	1e78      	subs	r0, r7, #1
 80077a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80077a4:	4407      	add	r7, r0
 80077a6:	f1b8 0f00 	cmp.w	r8, #0
 80077aa:	d0a8      	beq.n	80076fe <__gxx_personality_v0+0x26>
 80077ac:	2f00      	cmp	r7, #0
 80077ae:	f000 80a1 	beq.w	80078f4 <__gxx_personality_v0+0x21c>
 80077b2:	f015 0308 	ands.w	r3, r5, #8
 80077b6:	9302      	str	r3, [sp, #8]
 80077b8:	d036      	beq.n	8007828 <__gxx_personality_v0+0x150>
 80077ba:	2347      	movs	r3, #71	; 0x47
 80077bc:	7023      	strb	r3, [r4, #0]
 80077be:	234e      	movs	r3, #78	; 0x4e
 80077c0:	7063      	strb	r3, [r4, #1]
 80077c2:	2355      	movs	r3, #85	; 0x55
 80077c4:	70a3      	strb	r3, [r4, #2]
 80077c6:	2343      	movs	r3, #67	; 0x43
 80077c8:	70e3      	strb	r3, [r4, #3]
 80077ca:	2346      	movs	r3, #70	; 0x46
 80077cc:	7123      	strb	r3, [r4, #4]
 80077ce:	234f      	movs	r3, #79	; 0x4f
 80077d0:	7163      	strb	r3, [r4, #5]
 80077d2:	2352      	movs	r3, #82	; 0x52
 80077d4:	71a3      	strb	r3, [r4, #6]
 80077d6:	2300      	movs	r3, #0
 80077d8:	71e3      	strb	r3, [r4, #7]
 80077da:	f04f 0a00 	mov.w	sl, #0
 80077de:	f06f 0b03 	mvn.w	fp, #3
 80077e2:	a907      	add	r1, sp, #28
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff feac 	bl	8007542 <_ZL12read_sleb128PKhPl>
 80077ea:	a908      	add	r1, sp, #32
 80077ec:	9003      	str	r0, [sp, #12]
 80077ee:	f7ff fea8 	bl	8007542 <_ZL12read_sleb128PKhPl>
 80077f2:	9a07      	ldr	r2, [sp, #28]
 80077f4:	2a00      	cmp	r2, #0
 80077f6:	d076      	beq.n	80078e6 <__gxx_personality_v0+0x20e>
 80077f8:	dd3d      	ble.n	8007876 <__gxx_personality_v0+0x19e>
 80077fa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80077fe:	28ff      	cmp	r0, #255	; 0xff
 8007800:	d035      	beq.n	800786e <__gxx_personality_v0+0x196>
 8007802:	f000 0307 	and.w	r3, r0, #7
 8007806:	2b04      	cmp	r3, #4
 8007808:	f63f af75 	bhi.w	80076f6 <__gxx_personality_v0+0x1e>
 800780c:	a101      	add	r1, pc, #4	; (adr r1, 8007814 <__gxx_personality_v0+0x13c>)
 800780e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007812:	bf00      	nop
 8007814:	08007873 	.word	0x08007873
 8007818:	080076f7 	.word	0x080076f7
 800781c:	0800783b 	.word	0x0800783b
 8007820:	08007873 	.word	0x08007873
 8007824:	0800786b 	.word	0x0800786b
 8007828:	79e3      	ldrb	r3, [r4, #7]
 800782a:	2b01      	cmp	r3, #1
 800782c:	bf0c      	ite	eq
 800782e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8007832:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8007836:	9304      	str	r3, [sp, #16]
 8007838:	e7cf      	b.n	80077da <__gxx_personality_v0+0x102>
 800783a:	2702      	movs	r7, #2
 800783c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800783e:	ab09      	add	r3, sp, #36	; 0x24
 8007840:	fb07 1212 	mls	r2, r7, r2, r1
 8007844:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007846:	f7ff fe94 	bl	8007572 <_ZL28read_encoded_value_with_basehjPKhPj>
 800784a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800784c:	b369      	cbz	r1, 80078aa <__gxx_personality_v0+0x1d2>
 800784e:	b12c      	cbz	r4, 800785c <__gxx_personality_v0+0x184>
 8007850:	ab04      	add	r3, sp, #16
 8007852:	2200      	movs	r2, #0
 8007854:	4620      	mov	r0, r4
 8007856:	f7ff fdcf 	bl	80073f8 <__cxa_type_match>
 800785a:	bb30      	cbnz	r0, 80078aa <__gxx_personality_v0+0x1d2>
 800785c:	9f08      	ldr	r7, [sp, #32]
 800785e:	2f00      	cmp	r7, #0
 8007860:	d044      	beq.n	80078ec <__gxx_personality_v0+0x214>
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	443b      	add	r3, r7
 8007866:	461f      	mov	r7, r3
 8007868:	e7bb      	b.n	80077e2 <__gxx_personality_v0+0x10a>
 800786a:	2708      	movs	r7, #8
 800786c:	e7e6      	b.n	800783c <__gxx_personality_v0+0x164>
 800786e:	2700      	movs	r7, #0
 8007870:	e7e4      	b.n	800783c <__gxx_personality_v0+0x164>
 8007872:	2704      	movs	r7, #4
 8007874:	e7e2      	b.n	800783c <__gxx_personality_v0+0x164>
 8007876:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007878:	3201      	adds	r2, #1
 800787a:	b36c      	cbz	r4, 80078d8 <__gxx_personality_v0+0x200>
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	bb5b      	cbnz	r3, 80078d8 <__gxx_personality_v0+0x200>
 8007880:	9b04      	ldr	r3, [sp, #16]
 8007882:	9306      	str	r3, [sp, #24]
 8007884:	fb0b 7202 	mla	r2, fp, r2, r7
 8007888:	1f17      	subs	r7, r2, #4
 800788a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800788e:	b141      	cbz	r1, 80078a2 <__gxx_personality_v0+0x1ca>
 8007890:	ab06      	add	r3, sp, #24
 8007892:	2200      	movs	r2, #0
 8007894:	4439      	add	r1, r7
 8007896:	4620      	mov	r0, r4
 8007898:	f7ff fdae 	bl	80073f8 <__cxa_type_match>
 800789c:	2800      	cmp	r0, #0
 800789e:	d0f4      	beq.n	800788a <__gxx_personality_v0+0x1b2>
 80078a0:	2101      	movs	r1, #1
 80078a2:	f081 0101 	eor.w	r1, r1, #1
 80078a6:	2900      	cmp	r1, #0
 80078a8:	d0d8      	beq.n	800785c <__gxx_personality_v0+0x184>
 80078aa:	9f07      	ldr	r7, [sp, #28]
 80078ac:	f04f 0a03 	mov.w	sl, #3
 80078b0:	07eb      	lsls	r3, r5, #31
 80078b2:	d527      	bpl.n	8007904 <__gxx_personality_v0+0x22c>
 80078b4:	f1ba 0f02 	cmp.w	sl, #2
 80078b8:	f43f af21 	beq.w	80076fe <__gxx_personality_v0+0x26>
 80078bc:	210d      	movs	r1, #13
 80078be:	4630      	mov	r0, r6
 80078c0:	9d04      	ldr	r5, [sp, #16]
 80078c2:	f7ff fefd 	bl	80076c0 <_Unwind_GetGR>
 80078c6:	6265      	str	r5, [r4, #36]	; 0x24
 80078c8:	6220      	str	r0, [r4, #32]
 80078ca:	62a7      	str	r7, [r4, #40]	; 0x28
 80078cc:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 80078d0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80078d4:	2006      	movs	r0, #6
 80078d6:	e718      	b.n	800770a <__gxx_personality_v0+0x32>
 80078d8:	fb0b f202 	mul.w	r2, fp, r2
 80078dc:	58b9      	ldr	r1, [r7, r2]
 80078de:	fab1 f181 	clz	r1, r1
 80078e2:	0949      	lsrs	r1, r1, #5
 80078e4:	e7df      	b.n	80078a6 <__gxx_personality_v0+0x1ce>
 80078e6:	f04f 0a01 	mov.w	sl, #1
 80078ea:	e7b7      	b.n	800785c <__gxx_personality_v0+0x184>
 80078ec:	f1ba 0f00 	cmp.w	sl, #0
 80078f0:	f43f af05 	beq.w	80076fe <__gxx_personality_v0+0x26>
 80078f4:	f04f 0a02 	mov.w	sl, #2
 80078f8:	e7da      	b.n	80078b0 <__gxx_personality_v0+0x1d8>
 80078fa:	2700      	movs	r7, #0
 80078fc:	46b8      	mov	r8, r7
 80078fe:	f04f 0a01 	mov.w	sl, #1
 8007902:	e7d5      	b.n	80078b0 <__gxx_personality_v0+0x1d8>
 8007904:	4649      	mov	r1, r9
 8007906:	e731      	b.n	800776c <__gxx_personality_v0+0x94>
 8007908:	2f00      	cmp	r7, #0
 800790a:	da23      	bge.n	8007954 <__gxx_personality_v0+0x27c>
 800790c:	f000 fa10 	bl	8007d30 <_ZSt10unexpectedv>
 8007910:	f1ba 0f01 	cmp.w	sl, #1
 8007914:	d102      	bne.n	800791c <__gxx_personality_v0+0x244>
 8007916:	4620      	mov	r0, r4
 8007918:	f000 f981 	bl	8007c1e <__cxa_call_terminate>
 800791c:	2f00      	cmp	r7, #0
 800791e:	da19      	bge.n	8007954 <__gxx_personality_v0+0x27c>
 8007920:	aa0a      	add	r2, sp, #40	; 0x28
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff fe9c 	bl	8007660 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8007928:	4631      	mov	r1, r6
 800792a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800792e:	f7ff fe64 	bl	80075fa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8007932:	f06f 0303 	mvn.w	r3, #3
 8007936:	fb07 3203 	mla	r2, r7, r3, r3
 800793a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800793c:	900c      	str	r0, [sp, #48]	; 0x30
 800793e:	4413      	add	r3, r2
 8007940:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007944:	b10a      	cbz	r2, 800794a <__gxx_personality_v0+0x272>
 8007946:	3501      	adds	r5, #1
 8007948:	e7fa      	b.n	8007940 <__gxx_personality_v0+0x268>
 800794a:	2204      	movs	r2, #4
 800794c:	62a5      	str	r5, [r4, #40]	; 0x28
 800794e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007950:	6322      	str	r2, [r4, #48]	; 0x30
 8007952:	6363      	str	r3, [r4, #52]	; 0x34
 8007954:	ab10      	add	r3, sp, #64	; 0x40
 8007956:	4630      	mov	r0, r6
 8007958:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	2300      	movs	r3, #0
 8007960:	461a      	mov	r2, r3
 8007962:	4619      	mov	r1, r3
 8007964:	f7f9 fbf6 	bl	8001154 <_Unwind_VRS_Set>
 8007968:	ab10      	add	r3, sp, #64	; 0x40
 800796a:	2201      	movs	r2, #1
 800796c:	f843 7d20 	str.w	r7, [r3, #-32]!
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	4619      	mov	r1, r3
 8007976:	4630      	mov	r0, r6
 8007978:	f7f9 fbec 	bl	8001154 <_Unwind_VRS_Set>
 800797c:	210f      	movs	r1, #15
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff fe9e 	bl	80076c0 <_Unwind_GetGR>
 8007984:	ab10      	add	r3, sp, #64	; 0x40
 8007986:	f000 0001 	and.w	r0, r0, #1
 800798a:	ea40 0008 	orr.w	r0, r0, r8
 800798e:	f843 0d24 	str.w	r0, [r3, #-36]!
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	220f      	movs	r2, #15
 8007998:	4619      	mov	r1, r3
 800799a:	4630      	mov	r0, r6
 800799c:	f7f9 fbda 	bl	8001154 <_Unwind_VRS_Set>
 80079a0:	f1ba 0f02 	cmp.w	sl, #2
 80079a4:	d102      	bne.n	80079ac <__gxx_personality_v0+0x2d4>
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff fd84 	bl	80074b4 <__cxa_begin_cleanup>
 80079ac:	2007      	movs	r0, #7
 80079ae:	e6ac      	b.n	800770a <__gxx_personality_v0+0x32>
 80079b0:	aa10      	add	r2, sp, #64	; 0x40
 80079b2:	4643      	mov	r3, r8
 80079b4:	f842 4d2c 	str.w	r4, [r2, #-44]!
 80079b8:	4641      	mov	r1, r8
 80079ba:	9200      	str	r2, [sp, #0]
 80079bc:	4630      	mov	r0, r6
 80079be:	220c      	movs	r2, #12
 80079c0:	f045 0502 	orr.w	r5, r5, #2
 80079c4:	f7f9 fbc6 	bl	8001154 <_Unwind_VRS_Set>
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7fa f939 	bl	8001c40 <_Unwind_GetLanguageSpecificData>
 80079ce:	4681      	mov	r9, r0
 80079d0:	2800      	cmp	r0, #0
 80079d2:	f43f ae94 	beq.w	80076fe <__gxx_personality_v0+0x26>
 80079d6:	aa0a      	add	r2, sp, #40	; 0x28
 80079d8:	4601      	mov	r1, r0
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff fe40 	bl	8007660 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80079e0:	4631      	mov	r1, r6
 80079e2:	4680      	mov	r8, r0
 80079e4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80079e8:	f7ff fe07 	bl	80075fa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80079ec:	210f      	movs	r1, #15
 80079ee:	900c      	str	r0, [sp, #48]	; 0x30
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff fe65 	bl	80076c0 <_Unwind_GetGR>
 80079f6:	f020 0001 	bic.w	r0, r0, #1
 80079fa:	1e47      	subs	r7, r0, #1
 80079fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079fe:	4598      	cmp	r8, r3
 8007a00:	f4bf af7b 	bcs.w	80078fa <__gxx_personality_v0+0x222>
 8007a04:	4642      	mov	r2, r8
 8007a06:	ab06      	add	r3, sp, #24
 8007a08:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f7ff fe17 	bl	8007640 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007a12:	ab07      	add	r3, sp, #28
 8007a14:	4602      	mov	r2, r0
 8007a16:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	f7ff fe10 	bl	8007640 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007a20:	ab08      	add	r3, sp, #32
 8007a22:	4602      	mov	r2, r0
 8007a24:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7ff fe09 	bl	8007640 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007a2e:	a909      	add	r1, sp, #36	; 0x24
 8007a30:	f7ff fd76 	bl	8007520 <_ZL12read_uleb128PKhPm>
 8007a34:	9a06      	ldr	r2, [sp, #24]
 8007a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a38:	4413      	add	r3, r2
 8007a3a:	429f      	cmp	r7, r3
 8007a3c:	4680      	mov	r8, r0
 8007a3e:	f4bf aea1 	bcs.w	8007784 <__gxx_personality_v0+0xac>
 8007a42:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8007a46:	e7d9      	b.n	80079fc <__gxx_personality_v0+0x324>

08007a48 <_ZdlPvj>:
 8007a48:	f7ff bc9b 	b.w	8007382 <_ZdlPv>

08007a4c <_ZSt15get_new_handlerv>:
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <_ZSt15get_new_handlerv+0xc>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	f3bf 8f5b 	dmb	ish
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20003d50 	.word	0x20003d50

08007a5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8007a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a5e:	2310      	movs	r3, #16
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	6803      	ldr	r3, [r0, #0]
 8007a64:	2400      	movs	r4, #0
 8007a66:	4615      	mov	r5, r2
 8007a68:	699e      	ldr	r6, [r3, #24]
 8007a6a:	9400      	str	r4, [sp, #0]
 8007a6c:	466b      	mov	r3, sp
 8007a6e:	f88d 4004 	strb.w	r4, [sp, #4]
 8007a72:	9403      	str	r4, [sp, #12]
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	47b0      	blx	r6
 8007a78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a7c:	f003 0306 	and.w	r3, r3, #6
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	bf03      	ittte	eq
 8007a84:	9b00      	ldreq	r3, [sp, #0]
 8007a86:	602b      	streq	r3, [r5, #0]
 8007a88:	2001      	moveq	r0, #1
 8007a8a:	4620      	movne	r0, r4
 8007a8c:	b004      	add	sp, #16
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}

08007a90 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8007a90:	9800      	ldr	r0, [sp, #0]
 8007a92:	4290      	cmp	r0, r2
 8007a94:	bf0c      	ite	eq
 8007a96:	2006      	moveq	r0, #6
 8007a98:	2001      	movne	r0, #1
 8007a9a:	4770      	bx	lr

08007a9c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	4b03      	ldr	r3, [pc, #12]	; (8007aac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	f000 f84b 	bl	8007b3e <_ZNSt9type_infoD1Ev>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	0800a298 	.word	0x0800a298

08007ab0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	f7ff fff2 	bl	8007a9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	2108      	movs	r1, #8
 8007abc:	f7ff ffc4 	bl	8007a48 <_ZdlPvj>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	bd10      	pop	{r4, pc}

08007ac4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4615      	mov	r5, r2
 8007ac8:	461c      	mov	r4, r3
 8007aca:	f000 f83b 	bl	8007b44 <_ZNKSt9type_infoeqERKS_>
 8007ace:	b120      	cbz	r0, 8007ada <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	60e3      	str	r3, [r4, #12]
 8007ad4:	2306      	movs	r3, #6
 8007ad6:	6025      	str	r5, [r4, #0]
 8007ad8:	7123      	strb	r3, [r4, #4]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}

08007adc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8007adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	4616      	mov	r6, r2
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	f000 f82c 	bl	8007b44 <_ZNKSt9type_infoeqERKS_>
 8007aec:	b948      	cbnz	r0, 8007b02 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007aee:	2f03      	cmp	r7, #3
 8007af0:	d807      	bhi.n	8007b02 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	4632      	mov	r2, r6
 8007af6:	4629      	mov	r1, r5
 8007af8:	4620      	mov	r0, r4
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	4718      	bx	r3
 8007b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b06 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8007b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0a:	9e06      	ldr	r6, [sp, #24]
 8007b0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007b0e:	4698      	mov	r8, r3
 8007b10:	9b08      	ldr	r3, [sp, #32]
 8007b12:	429e      	cmp	r6, r3
 8007b14:	4607      	mov	r7, r0
 8007b16:	4615      	mov	r5, r2
 8007b18:	d103      	bne.n	8007b22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8007b1a:	9907      	ldr	r1, [sp, #28]
 8007b1c:	f000 f812 	bl	8007b44 <_ZNKSt9type_infoeqERKS_>
 8007b20:	b958      	cbnz	r0, 8007b3a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8007b22:	4641      	mov	r1, r8
 8007b24:	4638      	mov	r0, r7
 8007b26:	f000 f80d 	bl	8007b44 <_ZNKSt9type_infoeqERKS_>
 8007b2a:	b118      	cbz	r0, 8007b34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	6026      	str	r6, [r4, #0]
 8007b30:	7125      	strb	r5, [r4, #4]
 8007b32:	71a3      	strb	r3, [r4, #6]
 8007b34:	2000      	movs	r0, #0
 8007b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b3a:	7165      	strb	r5, [r4, #5]
 8007b3c:	e7fa      	b.n	8007b34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08007b3e <_ZNSt9type_infoD1Ev>:
 8007b3e:	4770      	bx	lr

08007b40 <_ZNKSt9type_info14__is_pointer_pEv>:
 8007b40:	2000      	movs	r0, #0
 8007b42:	4770      	bx	lr

08007b44 <_ZNKSt9type_infoeqERKS_>:
 8007b44:	4281      	cmp	r1, r0
 8007b46:	b508      	push	{r3, lr}
 8007b48:	d00e      	beq.n	8007b68 <_ZNKSt9type_infoeqERKS_+0x24>
 8007b4a:	6840      	ldr	r0, [r0, #4]
 8007b4c:	7803      	ldrb	r3, [r0, #0]
 8007b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b50:	d00c      	beq.n	8007b6c <_ZNKSt9type_infoeqERKS_+0x28>
 8007b52:	6849      	ldr	r1, [r1, #4]
 8007b54:	780b      	ldrb	r3, [r1, #0]
 8007b56:	2b2a      	cmp	r3, #42	; 0x2a
 8007b58:	bf08      	it	eq
 8007b5a:	3101      	addeq	r1, #1
 8007b5c:	f7f8 fb54 	bl	8000208 <strcmp>
 8007b60:	fab0 f080 	clz	r0, r0
 8007b64:	0940      	lsrs	r0, r0, #5
 8007b66:	bd08      	pop	{r3, pc}
 8007b68:	2001      	movs	r0, #1
 8007b6a:	bd08      	pop	{r3, pc}
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	bd08      	pop	{r3, pc}

08007b70 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8007b70:	b10a      	cbz	r2, 8007b76 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8007b72:	f001 bb9d 	b.w	80092b0 <memcpy>
 8007b76:	4770      	bx	lr

08007b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007b78:	b508      	push	{r3, lr}
 8007b7a:	680b      	ldr	r3, [r1, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	da02      	bge.n	8007b86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8007b80:	4809      	ldr	r0, [pc, #36]	; (8007ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8007b82:	f000 f82c 	bl	8007bde <_ZSt20__throw_length_errorPKc>
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d908      	bls.n	8007b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8007b8a:	0052      	lsls	r2, r2, #1
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d205      	bcs.n	8007b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	bfb6      	itet	lt
 8007b94:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8007b98:	600a      	strge	r2, [r1, #0]
 8007b9a:	600b      	strlt	r3, [r1, #0]
 8007b9c:	6808      	ldr	r0, [r1, #0]
 8007b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f7ff bbf4 	b.w	8007390 <_Znwj>
 8007ba8:	0800a2d1 	.word	0x0800a2d1

08007bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8007bac:	4603      	mov	r3, r0
 8007bae:	f853 0b08 	ldr.w	r0, [r3], #8
 8007bb2:	4298      	cmp	r0, r3
 8007bb4:	d001      	beq.n	8007bba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8007bb6:	f7ff bbe4 	b.w	8007382 <_ZdlPv>
 8007bba:	4770      	bx	lr

08007bbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007bbc:	2a01      	cmp	r2, #1
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	d102      	bne.n	8007bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8007bc2:	780a      	ldrb	r2, [r1, #0]
 8007bc4:	7002      	strb	r2, [r0, #0]
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	f7ff ffd2 	bl	8007b70 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8007bcc:	bd10      	pop	{r4, pc}

08007bce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8007bce:	b508      	push	{r3, lr}
 8007bd0:	1a52      	subs	r2, r2, r1
 8007bd2:	f7ff fff3 	bl	8007bbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007bd6:	bd08      	pop	{r3, pc}

08007bd8 <_ZSt19__throw_logic_errorPKc>:
 8007bd8:	b508      	push	{r3, lr}
 8007bda:	f000 fffd 	bl	8008bd8 <abort>

08007bde <_ZSt20__throw_length_errorPKc>:
 8007bde:	b508      	push	{r3, lr}
 8007be0:	f000 fffa 	bl	8008bd8 <abort>

08007be4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8007be4:	7803      	ldrb	r3, [r0, #0]
 8007be6:	2b47      	cmp	r3, #71	; 0x47
 8007be8:	d117      	bne.n	8007c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007bea:	7843      	ldrb	r3, [r0, #1]
 8007bec:	2b4e      	cmp	r3, #78	; 0x4e
 8007bee:	d114      	bne.n	8007c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007bf0:	7883      	ldrb	r3, [r0, #2]
 8007bf2:	2b55      	cmp	r3, #85	; 0x55
 8007bf4:	d111      	bne.n	8007c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007bf6:	78c3      	ldrb	r3, [r0, #3]
 8007bf8:	2b43      	cmp	r3, #67	; 0x43
 8007bfa:	d10e      	bne.n	8007c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007bfc:	7903      	ldrb	r3, [r0, #4]
 8007bfe:	2b43      	cmp	r3, #67	; 0x43
 8007c00:	d10b      	bne.n	8007c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c02:	7943      	ldrb	r3, [r0, #5]
 8007c04:	2b2b      	cmp	r3, #43	; 0x2b
 8007c06:	d108      	bne.n	8007c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c08:	7983      	ldrb	r3, [r0, #6]
 8007c0a:	2b2b      	cmp	r3, #43	; 0x2b
 8007c0c:	d105      	bne.n	8007c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c0e:	79c0      	ldrb	r0, [r0, #7]
 8007c10:	2801      	cmp	r0, #1
 8007c12:	bf8c      	ite	hi
 8007c14:	2000      	movhi	r0, #0
 8007c16:	2001      	movls	r0, #1
 8007c18:	4770      	bx	lr
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	4770      	bx	lr

08007c1e <__cxa_call_terminate>:
 8007c1e:	b510      	push	{r4, lr}
 8007c20:	4604      	mov	r4, r0
 8007c22:	b148      	cbz	r0, 8007c38 <__cxa_call_terminate+0x1a>
 8007c24:	f000 f83b 	bl	8007c9e <__cxa_begin_catch>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f7ff ffdb 	bl	8007be4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007c2e:	b118      	cbz	r0, 8007c38 <__cxa_call_terminate+0x1a>
 8007c30:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8007c34:	f000 f85d 	bl	8007cf2 <_ZN10__cxxabiv111__terminateEPFvvE>
 8007c38:	f000 f868 	bl	8007d0c <_ZSt9terminatev>

08007c3c <__cxa_call_unexpected>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4602      	mov	r2, r0
 8007c40:	f7ff ffd0 	bl	8007be4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007c44:	b140      	cbz	r0, 8007c58 <__cxa_call_unexpected+0x1c>
 8007c46:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8007c4a:	2500      	movs	r5, #0
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f000 f826 	bl	8007c9e <__cxa_begin_catch>
 8007c52:	b125      	cbz	r5, 8007c5e <__cxa_call_unexpected+0x22>
 8007c54:	f000 f86c 	bl	8007d30 <_ZSt10unexpectedv>
 8007c58:	4604      	mov	r4, r0
 8007c5a:	2501      	movs	r5, #1
 8007c5c:	e7f6      	b.n	8007c4c <__cxa_call_unexpected+0x10>
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 f859 	bl	8007d16 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08007c64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8007c64:	7803      	ldrb	r3, [r0, #0]
 8007c66:	2b47      	cmp	r3, #71	; 0x47
 8007c68:	d117      	bne.n	8007c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c6a:	7843      	ldrb	r3, [r0, #1]
 8007c6c:	2b4e      	cmp	r3, #78	; 0x4e
 8007c6e:	d114      	bne.n	8007c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c70:	7883      	ldrb	r3, [r0, #2]
 8007c72:	2b55      	cmp	r3, #85	; 0x55
 8007c74:	d111      	bne.n	8007c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c76:	78c3      	ldrb	r3, [r0, #3]
 8007c78:	2b43      	cmp	r3, #67	; 0x43
 8007c7a:	d10e      	bne.n	8007c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c7c:	7903      	ldrb	r3, [r0, #4]
 8007c7e:	2b43      	cmp	r3, #67	; 0x43
 8007c80:	d10b      	bne.n	8007c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c82:	7943      	ldrb	r3, [r0, #5]
 8007c84:	2b2b      	cmp	r3, #43	; 0x2b
 8007c86:	d108      	bne.n	8007c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c88:	7983      	ldrb	r3, [r0, #6]
 8007c8a:	2b2b      	cmp	r3, #43	; 0x2b
 8007c8c:	d105      	bne.n	8007c9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007c8e:	79c0      	ldrb	r0, [r0, #7]
 8007c90:	2801      	cmp	r0, #1
 8007c92:	bf8c      	ite	hi
 8007c94:	2000      	movhi	r0, #0
 8007c96:	2001      	movls	r0, #1
 8007c98:	4770      	bx	lr
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	4770      	bx	lr

08007c9e <__cxa_begin_catch>:
 8007c9e:	b538      	push	{r3, r4, r5, lr}
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	f000 f84b 	bl	8007d3c <__cxa_get_globals>
 8007ca6:	4601      	mov	r1, r0
 8007ca8:	6802      	ldr	r2, [r0, #0]
 8007caa:	4628      	mov	r0, r5
 8007cac:	f1a5 0420 	sub.w	r4, r5, #32
 8007cb0:	f7ff ffd8 	bl	8007c64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007cb4:	b930      	cbnz	r0, 8007cc4 <__cxa_begin_catch+0x26>
 8007cb6:	b10a      	cbz	r2, 8007cbc <__cxa_begin_catch+0x1e>
 8007cb8:	f000 f828 	bl	8007d0c <_ZSt9terminatev>
 8007cbc:	600c      	str	r4, [r1, #0]
 8007cbe:	4614      	mov	r4, r2
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfb4      	ite	lt
 8007ccc:	f1c3 0301 	rsblt	r3, r3, #1
 8007cd0:	3301      	addge	r3, #1
 8007cd2:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007cd6:	684b      	ldr	r3, [r1, #4]
 8007cd8:	42a2      	cmp	r2, r4
 8007cda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007cde:	604b      	str	r3, [r1, #4]
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	bf1c      	itt	ne
 8007ce4:	f845 2c10 	strne.w	r2, [r5, #-16]
 8007ce8:	600c      	strne	r4, [r1, #0]
 8007cea:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8007cec:	f7f9 fa04 	bl	80010f8 <_Unwind_Complete>
 8007cf0:	e7e6      	b.n	8007cc0 <__cxa_begin_catch+0x22>

08007cf2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007cf2:	b508      	push	{r3, lr}
 8007cf4:	4780      	blx	r0
 8007cf6:	f000 ff6f 	bl	8008bd8 <abort>
	...

08007cfc <_ZSt13get_terminatev>:
 8007cfc:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <_ZSt13get_terminatev+0xc>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	f3bf 8f5b 	dmb	ish
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20000008 	.word	0x20000008

08007d0c <_ZSt9terminatev>:
 8007d0c:	b508      	push	{r3, lr}
 8007d0e:	f7ff fff5 	bl	8007cfc <_ZSt13get_terminatev>
 8007d12:	f7ff ffee 	bl	8007cf2 <_ZN10__cxxabiv111__terminateEPFvvE>

08007d16 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8007d16:	b508      	push	{r3, lr}
 8007d18:	4780      	blx	r0
 8007d1a:	f7ff fff7 	bl	8007d0c <_ZSt9terminatev>
	...

08007d20 <_ZSt14get_unexpectedv>:
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <_ZSt14get_unexpectedv+0xc>)
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	f3bf 8f5b 	dmb	ish
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	2000000c 	.word	0x2000000c

08007d30 <_ZSt10unexpectedv>:
 8007d30:	b508      	push	{r3, lr}
 8007d32:	f7ff fff5 	bl	8007d20 <_ZSt14get_unexpectedv>
 8007d36:	f7ff ffee 	bl	8007d16 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08007d3c <__cxa_get_globals>:
 8007d3c:	4800      	ldr	r0, [pc, #0]	; (8007d40 <__cxa_get_globals+0x4>)
 8007d3e:	4770      	bx	lr
 8007d40:	20003d54 	.word	0x20003d54

08007d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	07d0      	lsls	r0, r2, #31
 8007d4a:	bf5c      	itt	pl
 8007d4c:	2201      	movpl	r2, #1
 8007d4e:	601a      	strpl	r2, [r3, #0]
 8007d50:	4b22      	ldr	r3, [pc, #136]	; (8007ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	07d1      	lsls	r1, r2, #31
 8007d56:	bf5c      	itt	pl
 8007d58:	2201      	movpl	r2, #1
 8007d5a:	601a      	strpl	r2, [r3, #0]
 8007d5c:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	07d2      	lsls	r2, r2, #31
 8007d62:	bf5c      	itt	pl
 8007d64:	2201      	movpl	r2, #1
 8007d66:	601a      	strpl	r2, [r3, #0]
 8007d68:	4b1e      	ldr	r3, [pc, #120]	; (8007de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	07d0      	lsls	r0, r2, #31
 8007d6e:	bf5c      	itt	pl
 8007d70:	2201      	movpl	r2, #1
 8007d72:	601a      	strpl	r2, [r3, #0]
 8007d74:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	07d1      	lsls	r1, r2, #31
 8007d7a:	bf5c      	itt	pl
 8007d7c:	2201      	movpl	r2, #1
 8007d7e:	601a      	strpl	r2, [r3, #0]
 8007d80:	4b1a      	ldr	r3, [pc, #104]	; (8007dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	07d2      	lsls	r2, r2, #31
 8007d86:	bf5c      	itt	pl
 8007d88:	2201      	movpl	r2, #1
 8007d8a:	601a      	strpl	r2, [r3, #0]
 8007d8c:	4b18      	ldr	r3, [pc, #96]	; (8007df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	07d0      	lsls	r0, r2, #31
 8007d92:	bf5c      	itt	pl
 8007d94:	2201      	movpl	r2, #1
 8007d96:	601a      	strpl	r2, [r3, #0]
 8007d98:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	07d1      	lsls	r1, r2, #31
 8007d9e:	bf5c      	itt	pl
 8007da0:	2201      	movpl	r2, #1
 8007da2:	601a      	strpl	r2, [r3, #0]
 8007da4:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	07d2      	lsls	r2, r2, #31
 8007daa:	bf5c      	itt	pl
 8007dac:	2201      	movpl	r2, #1
 8007dae:	601a      	strpl	r2, [r3, #0]
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	07d0      	lsls	r0, r2, #31
 8007db6:	bf5c      	itt	pl
 8007db8:	2201      	movpl	r2, #1
 8007dba:	601a      	strpl	r2, [r3, #0]
 8007dbc:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	07d1      	lsls	r1, r2, #31
 8007dc2:	bf5c      	itt	pl
 8007dc4:	2201      	movpl	r2, #1
 8007dc6:	601a      	strpl	r2, [r3, #0]
 8007dc8:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	07d2      	lsls	r2, r2, #31
 8007dce:	bf5c      	itt	pl
 8007dd0:	2201      	movpl	r2, #1
 8007dd2:	601a      	strpl	r2, [r3, #0]
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	20003d8c 	.word	0x20003d8c
 8007ddc:	20003d88 	.word	0x20003d88
 8007de0:	20003d84 	.word	0x20003d84
 8007de4:	20003d80 	.word	0x20003d80
 8007de8:	20003d7c 	.word	0x20003d7c
 8007dec:	20003d78 	.word	0x20003d78
 8007df0:	20003d74 	.word	0x20003d74
 8007df4:	20003d70 	.word	0x20003d70
 8007df8:	20003d6c 	.word	0x20003d6c
 8007dfc:	20003d68 	.word	0x20003d68
 8007e00:	20003d64 	.word	0x20003d64
 8007e04:	20003d60 	.word	0x20003d60

08007e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8007e08:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	07d1      	lsls	r1, r2, #31
 8007e0e:	bf5c      	itt	pl
 8007e10:	2201      	movpl	r2, #1
 8007e12:	601a      	strpl	r2, [r3, #0]
 8007e14:	4b16      	ldr	r3, [pc, #88]	; (8007e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	07d2      	lsls	r2, r2, #31
 8007e1a:	bf5c      	itt	pl
 8007e1c:	2201      	movpl	r2, #1
 8007e1e:	601a      	strpl	r2, [r3, #0]
 8007e20:	4b14      	ldr	r3, [pc, #80]	; (8007e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	07d0      	lsls	r0, r2, #31
 8007e26:	bf5c      	itt	pl
 8007e28:	2201      	movpl	r2, #1
 8007e2a:	601a      	strpl	r2, [r3, #0]
 8007e2c:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	07d1      	lsls	r1, r2, #31
 8007e32:	bf5c      	itt	pl
 8007e34:	2201      	movpl	r2, #1
 8007e36:	601a      	strpl	r2, [r3, #0]
 8007e38:	4b10      	ldr	r3, [pc, #64]	; (8007e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	07d2      	lsls	r2, r2, #31
 8007e3e:	bf5c      	itt	pl
 8007e40:	2201      	movpl	r2, #1
 8007e42:	601a      	strpl	r2, [r3, #0]
 8007e44:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	07d0      	lsls	r0, r2, #31
 8007e4a:	bf5c      	itt	pl
 8007e4c:	2201      	movpl	r2, #1
 8007e4e:	601a      	strpl	r2, [r3, #0]
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	07d1      	lsls	r1, r2, #31
 8007e56:	bf5c      	itt	pl
 8007e58:	2201      	movpl	r2, #1
 8007e5a:	601a      	strpl	r2, [r3, #0]
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	07d2      	lsls	r2, r2, #31
 8007e62:	bf5c      	itt	pl
 8007e64:	2201      	movpl	r2, #1
 8007e66:	601a      	strpl	r2, [r3, #0]
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20003dac 	.word	0x20003dac
 8007e70:	20003da8 	.word	0x20003da8
 8007e74:	20003da4 	.word	0x20003da4
 8007e78:	20003da0 	.word	0x20003da0
 8007e7c:	20003d9c 	.word	0x20003d9c
 8007e80:	20003d98 	.word	0x20003d98
 8007e84:	20003d94 	.word	0x20003d94
 8007e88:	20003d90 	.word	0x20003d90

08007e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8007e8c:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	07d0      	lsls	r0, r2, #31
 8007e92:	bf5c      	itt	pl
 8007e94:	2201      	movpl	r2, #1
 8007e96:	601a      	strpl	r2, [r3, #0]
 8007e98:	4b22      	ldr	r3, [pc, #136]	; (8007f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	07d1      	lsls	r1, r2, #31
 8007e9e:	bf5c      	itt	pl
 8007ea0:	2201      	movpl	r2, #1
 8007ea2:	601a      	strpl	r2, [r3, #0]
 8007ea4:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	07d2      	lsls	r2, r2, #31
 8007eaa:	bf5c      	itt	pl
 8007eac:	2201      	movpl	r2, #1
 8007eae:	601a      	strpl	r2, [r3, #0]
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	07d0      	lsls	r0, r2, #31
 8007eb6:	bf5c      	itt	pl
 8007eb8:	2201      	movpl	r2, #1
 8007eba:	601a      	strpl	r2, [r3, #0]
 8007ebc:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	07d1      	lsls	r1, r2, #31
 8007ec2:	bf5c      	itt	pl
 8007ec4:	2201      	movpl	r2, #1
 8007ec6:	601a      	strpl	r2, [r3, #0]
 8007ec8:	4b1a      	ldr	r3, [pc, #104]	; (8007f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	07d2      	lsls	r2, r2, #31
 8007ece:	bf5c      	itt	pl
 8007ed0:	2201      	movpl	r2, #1
 8007ed2:	601a      	strpl	r2, [r3, #0]
 8007ed4:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	07d0      	lsls	r0, r2, #31
 8007eda:	bf5c      	itt	pl
 8007edc:	2201      	movpl	r2, #1
 8007ede:	601a      	strpl	r2, [r3, #0]
 8007ee0:	4b16      	ldr	r3, [pc, #88]	; (8007f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	07d1      	lsls	r1, r2, #31
 8007ee6:	bf5c      	itt	pl
 8007ee8:	2201      	movpl	r2, #1
 8007eea:	601a      	strpl	r2, [r3, #0]
 8007eec:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	07d2      	lsls	r2, r2, #31
 8007ef2:	bf5c      	itt	pl
 8007ef4:	2201      	movpl	r2, #1
 8007ef6:	601a      	strpl	r2, [r3, #0]
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	07d0      	lsls	r0, r2, #31
 8007efe:	bf5c      	itt	pl
 8007f00:	2201      	movpl	r2, #1
 8007f02:	601a      	strpl	r2, [r3, #0]
 8007f04:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	07d1      	lsls	r1, r2, #31
 8007f0a:	bf5c      	itt	pl
 8007f0c:	2201      	movpl	r2, #1
 8007f0e:	601a      	strpl	r2, [r3, #0]
 8007f10:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	07d2      	lsls	r2, r2, #31
 8007f16:	bf5c      	itt	pl
 8007f18:	2201      	movpl	r2, #1
 8007f1a:	601a      	strpl	r2, [r3, #0]
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20003ddc 	.word	0x20003ddc
 8007f24:	20003dd8 	.word	0x20003dd8
 8007f28:	20003dd4 	.word	0x20003dd4
 8007f2c:	20003dd0 	.word	0x20003dd0
 8007f30:	20003dcc 	.word	0x20003dcc
 8007f34:	20003dc8 	.word	0x20003dc8
 8007f38:	20003dc4 	.word	0x20003dc4
 8007f3c:	20003dc0 	.word	0x20003dc0
 8007f40:	20003dbc 	.word	0x20003dbc
 8007f44:	20003db8 	.word	0x20003db8
 8007f48:	20003db4 	.word	0x20003db4
 8007f4c:	20003db0 	.word	0x20003db0

08007f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8007f50:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	07d1      	lsls	r1, r2, #31
 8007f56:	bf5c      	itt	pl
 8007f58:	2201      	movpl	r2, #1
 8007f5a:	601a      	strpl	r2, [r3, #0]
 8007f5c:	4b16      	ldr	r3, [pc, #88]	; (8007fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	07d2      	lsls	r2, r2, #31
 8007f62:	bf5c      	itt	pl
 8007f64:	2201      	movpl	r2, #1
 8007f66:	601a      	strpl	r2, [r3, #0]
 8007f68:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	07d0      	lsls	r0, r2, #31
 8007f6e:	bf5c      	itt	pl
 8007f70:	2201      	movpl	r2, #1
 8007f72:	601a      	strpl	r2, [r3, #0]
 8007f74:	4b12      	ldr	r3, [pc, #72]	; (8007fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	07d1      	lsls	r1, r2, #31
 8007f7a:	bf5c      	itt	pl
 8007f7c:	2201      	movpl	r2, #1
 8007f7e:	601a      	strpl	r2, [r3, #0]
 8007f80:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	07d2      	lsls	r2, r2, #31
 8007f86:	bf5c      	itt	pl
 8007f88:	2201      	movpl	r2, #1
 8007f8a:	601a      	strpl	r2, [r3, #0]
 8007f8c:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	07d0      	lsls	r0, r2, #31
 8007f92:	bf5c      	itt	pl
 8007f94:	2201      	movpl	r2, #1
 8007f96:	601a      	strpl	r2, [r3, #0]
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	07d1      	lsls	r1, r2, #31
 8007f9e:	bf5c      	itt	pl
 8007fa0:	2201      	movpl	r2, #1
 8007fa2:	601a      	strpl	r2, [r3, #0]
 8007fa4:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	07d2      	lsls	r2, r2, #31
 8007faa:	bf5c      	itt	pl
 8007fac:	2201      	movpl	r2, #1
 8007fae:	601a      	strpl	r2, [r3, #0]
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20003dfc 	.word	0x20003dfc
 8007fb8:	20003df8 	.word	0x20003df8
 8007fbc:	20003df4 	.word	0x20003df4
 8007fc0:	20003df0 	.word	0x20003df0
 8007fc4:	20003dec 	.word	0x20003dec
 8007fc8:	20003de8 	.word	0x20003de8
 8007fcc:	20003de4 	.word	0x20003de4
 8007fd0:	20003de0 	.word	0x20003de0

08007fd4 <cosf>:
 8007fd4:	ee10 3a10 	vmov	r3, s0
 8007fd8:	b507      	push	{r0, r1, r2, lr}
 8007fda:	4a1c      	ldr	r2, [pc, #112]	; (800804c <cosf+0x78>)
 8007fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	dc04      	bgt.n	8007fee <cosf+0x1a>
 8007fe4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8008050 <cosf+0x7c>
 8007fe8:	f000 fa3a 	bl	8008460 <__kernel_cosf>
 8007fec:	e004      	b.n	8007ff8 <cosf+0x24>
 8007fee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007ff2:	db04      	blt.n	8007ffe <cosf+0x2a>
 8007ff4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007ff8:	b003      	add	sp, #12
 8007ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ffe:	4668      	mov	r0, sp
 8008000:	f000 f8ba 	bl	8008178 <__ieee754_rem_pio2f>
 8008004:	f000 0003 	and.w	r0, r0, #3
 8008008:	2801      	cmp	r0, #1
 800800a:	d007      	beq.n	800801c <cosf+0x48>
 800800c:	2802      	cmp	r0, #2
 800800e:	d00e      	beq.n	800802e <cosf+0x5a>
 8008010:	b9a0      	cbnz	r0, 800803c <cosf+0x68>
 8008012:	eddd 0a01 	vldr	s1, [sp, #4]
 8008016:	ed9d 0a00 	vldr	s0, [sp]
 800801a:	e7e5      	b.n	8007fe8 <cosf+0x14>
 800801c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008020:	ed9d 0a00 	vldr	s0, [sp]
 8008024:	f000 fcd8 	bl	80089d8 <__kernel_sinf>
 8008028:	eeb1 0a40 	vneg.f32	s0, s0
 800802c:	e7e4      	b.n	8007ff8 <cosf+0x24>
 800802e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008032:	ed9d 0a00 	vldr	s0, [sp]
 8008036:	f000 fa13 	bl	8008460 <__kernel_cosf>
 800803a:	e7f5      	b.n	8008028 <cosf+0x54>
 800803c:	2001      	movs	r0, #1
 800803e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008042:	ed9d 0a00 	vldr	s0, [sp]
 8008046:	f000 fcc7 	bl	80089d8 <__kernel_sinf>
 800804a:	e7d5      	b.n	8007ff8 <cosf+0x24>
 800804c:	3f490fd8 	.word	0x3f490fd8
 8008050:	00000000 	.word	0x00000000

08008054 <sinf>:
 8008054:	ee10 3a10 	vmov	r3, s0
 8008058:	b507      	push	{r0, r1, r2, lr}
 800805a:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <sinf+0x7c>)
 800805c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008060:	4293      	cmp	r3, r2
 8008062:	dc05      	bgt.n	8008070 <sinf+0x1c>
 8008064:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80080d4 <sinf+0x80>
 8008068:	2000      	movs	r0, #0
 800806a:	f000 fcb5 	bl	80089d8 <__kernel_sinf>
 800806e:	e004      	b.n	800807a <sinf+0x26>
 8008070:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008074:	db04      	blt.n	8008080 <sinf+0x2c>
 8008076:	ee30 0a40 	vsub.f32	s0, s0, s0
 800807a:	b003      	add	sp, #12
 800807c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008080:	4668      	mov	r0, sp
 8008082:	f000 f879 	bl	8008178 <__ieee754_rem_pio2f>
 8008086:	f000 0003 	and.w	r0, r0, #3
 800808a:	2801      	cmp	r0, #1
 800808c:	d008      	beq.n	80080a0 <sinf+0x4c>
 800808e:	2802      	cmp	r0, #2
 8008090:	d00d      	beq.n	80080ae <sinf+0x5a>
 8008092:	b9b0      	cbnz	r0, 80080c2 <sinf+0x6e>
 8008094:	2001      	movs	r0, #1
 8008096:	eddd 0a01 	vldr	s1, [sp, #4]
 800809a:	ed9d 0a00 	vldr	s0, [sp]
 800809e:	e7e4      	b.n	800806a <sinf+0x16>
 80080a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80080a4:	ed9d 0a00 	vldr	s0, [sp]
 80080a8:	f000 f9da 	bl	8008460 <__kernel_cosf>
 80080ac:	e7e5      	b.n	800807a <sinf+0x26>
 80080ae:	2001      	movs	r0, #1
 80080b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80080b4:	ed9d 0a00 	vldr	s0, [sp]
 80080b8:	f000 fc8e 	bl	80089d8 <__kernel_sinf>
 80080bc:	eeb1 0a40 	vneg.f32	s0, s0
 80080c0:	e7db      	b.n	800807a <sinf+0x26>
 80080c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80080c6:	ed9d 0a00 	vldr	s0, [sp]
 80080ca:	f000 f9c9 	bl	8008460 <__kernel_cosf>
 80080ce:	e7f5      	b.n	80080bc <sinf+0x68>
 80080d0:	3f490fd8 	.word	0x3f490fd8
 80080d4:	00000000 	.word	0x00000000

080080d8 <sqrtf>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	ed2d 8b02 	vpush	{d8}
 80080de:	b08a      	sub	sp, #40	; 0x28
 80080e0:	eeb0 8a40 	vmov.f32	s16, s0
 80080e4:	f000 f974 	bl	80083d0 <__ieee754_sqrtf>
 80080e8:	4b21      	ldr	r3, [pc, #132]	; (8008170 <sqrtf+0x98>)
 80080ea:	f993 4000 	ldrsb.w	r4, [r3]
 80080ee:	1c63      	adds	r3, r4, #1
 80080f0:	d02c      	beq.n	800814c <sqrtf+0x74>
 80080f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	d627      	bvs.n	800814c <sqrtf+0x74>
 80080fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008104:	d522      	bpl.n	800814c <sqrtf+0x74>
 8008106:	2301      	movs	r3, #1
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <sqrtf+0x9c>)
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	ee18 0a10 	vmov	r0, s16
 8008112:	2300      	movs	r3, #0
 8008114:	9308      	str	r3, [sp, #32]
 8008116:	f7f8 f9ed 	bl	80004f4 <__aeabi_f2d>
 800811a:	2200      	movs	r2, #0
 800811c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008124:	2300      	movs	r3, #0
 8008126:	b9ac      	cbnz	r4, 8008154 <sqrtf+0x7c>
 8008128:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800812c:	4668      	mov	r0, sp
 800812e:	f000 fc9b 	bl	8008a68 <matherr>
 8008132:	b1b8      	cbz	r0, 8008164 <sqrtf+0x8c>
 8008134:	9b08      	ldr	r3, [sp, #32]
 8008136:	b11b      	cbz	r3, 8008140 <sqrtf+0x68>
 8008138:	f000 fd5c 	bl	8008bf4 <__errno>
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	6003      	str	r3, [r0, #0]
 8008140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008144:	f7f8 fc3c 	bl	80009c0 <__aeabi_d2f>
 8008148:	ee00 0a10 	vmov	s0, r0
 800814c:	b00a      	add	sp, #40	; 0x28
 800814e:	ecbd 8b02 	vpop	{d8}
 8008152:	bd10      	pop	{r4, pc}
 8008154:	4610      	mov	r0, r2
 8008156:	4619      	mov	r1, r3
 8008158:	f7f8 fb4a 	bl	80007f0 <__aeabi_ddiv>
 800815c:	2c02      	cmp	r4, #2
 800815e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008162:	d1e3      	bne.n	800812c <sqrtf+0x54>
 8008164:	f000 fd46 	bl	8008bf4 <__errno>
 8008168:	2321      	movs	r3, #33	; 0x21
 800816a:	6003      	str	r3, [r0, #0]
 800816c:	e7e2      	b.n	8008134 <sqrtf+0x5c>
 800816e:	bf00      	nop
 8008170:	20000010 	.word	0x20000010
 8008174:	0800a340 	.word	0x0800a340

08008178 <__ieee754_rem_pio2f>:
 8008178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817a:	ee10 6a10 	vmov	r6, s0
 800817e:	4b86      	ldr	r3, [pc, #536]	; (8008398 <__ieee754_rem_pio2f+0x220>)
 8008180:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008184:	429c      	cmp	r4, r3
 8008186:	b087      	sub	sp, #28
 8008188:	4605      	mov	r5, r0
 800818a:	dc05      	bgt.n	8008198 <__ieee754_rem_pio2f+0x20>
 800818c:	2300      	movs	r3, #0
 800818e:	ed85 0a00 	vstr	s0, [r5]
 8008192:	6043      	str	r3, [r0, #4]
 8008194:	2000      	movs	r0, #0
 8008196:	e020      	b.n	80081da <__ieee754_rem_pio2f+0x62>
 8008198:	4b80      	ldr	r3, [pc, #512]	; (800839c <__ieee754_rem_pio2f+0x224>)
 800819a:	429c      	cmp	r4, r3
 800819c:	dc38      	bgt.n	8008210 <__ieee754_rem_pio2f+0x98>
 800819e:	2e00      	cmp	r6, #0
 80081a0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80083a0 <__ieee754_rem_pio2f+0x228>
 80081a4:	4b7f      	ldr	r3, [pc, #508]	; (80083a4 <__ieee754_rem_pio2f+0x22c>)
 80081a6:	f024 040f 	bic.w	r4, r4, #15
 80081aa:	dd18      	ble.n	80081de <__ieee754_rem_pio2f+0x66>
 80081ac:	429c      	cmp	r4, r3
 80081ae:	ee70 7a47 	vsub.f32	s15, s0, s14
 80081b2:	bf09      	itett	eq
 80081b4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80083a8 <__ieee754_rem_pio2f+0x230>
 80081b8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80083ac <__ieee754_rem_pio2f+0x234>
 80081bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80081c0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80083b0 <__ieee754_rem_pio2f+0x238>
 80081c4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80081c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081cc:	edc0 6a00 	vstr	s13, [r0]
 80081d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081d4:	edc0 7a01 	vstr	s15, [r0, #4]
 80081d8:	2001      	movs	r0, #1
 80081da:	b007      	add	sp, #28
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081de:	429c      	cmp	r4, r3
 80081e0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80081e4:	bf09      	itett	eq
 80081e6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80083a8 <__ieee754_rem_pio2f+0x230>
 80081ea:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80083ac <__ieee754_rem_pio2f+0x234>
 80081ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80081f2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80083b0 <__ieee754_rem_pio2f+0x238>
 80081f6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80081fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081fe:	edc0 6a00 	vstr	s13, [r0]
 8008202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008206:	edc0 7a01 	vstr	s15, [r0, #4]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800820e:	e7e4      	b.n	80081da <__ieee754_rem_pio2f+0x62>
 8008210:	4b68      	ldr	r3, [pc, #416]	; (80083b4 <__ieee754_rem_pio2f+0x23c>)
 8008212:	429c      	cmp	r4, r3
 8008214:	dc71      	bgt.n	80082fa <__ieee754_rem_pio2f+0x182>
 8008216:	f000 fc29 	bl	8008a6c <fabsf>
 800821a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80083b8 <__ieee754_rem_pio2f+0x240>
 800821e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008222:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800822a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800822e:	ee17 0a90 	vmov	r0, s15
 8008232:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80083a0 <__ieee754_rem_pio2f+0x228>
 8008236:	eeb1 7a46 	vneg.f32	s14, s12
 800823a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800823e:	281f      	cmp	r0, #31
 8008240:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80083ac <__ieee754_rem_pio2f+0x234>
 8008244:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008248:	ee70 6a67 	vsub.f32	s13, s0, s15
 800824c:	ee16 3a90 	vmov	r3, s13
 8008250:	dc1c      	bgt.n	800828c <__ieee754_rem_pio2f+0x114>
 8008252:	1e47      	subs	r7, r0, #1
 8008254:	4959      	ldr	r1, [pc, #356]	; (80083bc <__ieee754_rem_pio2f+0x244>)
 8008256:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800825a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800825e:	428a      	cmp	r2, r1
 8008260:	d014      	beq.n	800828c <__ieee754_rem_pio2f+0x114>
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	ed95 7a00 	vldr	s14, [r5]
 8008268:	ee30 0a47 	vsub.f32	s0, s0, s14
 800826c:	2e00      	cmp	r6, #0
 800826e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008272:	ed85 0a01 	vstr	s0, [r5, #4]
 8008276:	dab0      	bge.n	80081da <__ieee754_rem_pio2f+0x62>
 8008278:	eeb1 7a47 	vneg.f32	s14, s14
 800827c:	eeb1 0a40 	vneg.f32	s0, s0
 8008280:	ed85 7a00 	vstr	s14, [r5]
 8008284:	ed85 0a01 	vstr	s0, [r5, #4]
 8008288:	4240      	negs	r0, r0
 800828a:	e7a6      	b.n	80081da <__ieee754_rem_pio2f+0x62>
 800828c:	15e4      	asrs	r4, r4, #23
 800828e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008292:	1aa2      	subs	r2, r4, r2
 8008294:	2a08      	cmp	r2, #8
 8008296:	dde4      	ble.n	8008262 <__ieee754_rem_pio2f+0xea>
 8008298:	eddf 7a43 	vldr	s15, [pc, #268]	; 80083a8 <__ieee754_rem_pio2f+0x230>
 800829c:	eef0 6a40 	vmov.f32	s13, s0
 80082a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80082a4:	ee30 0a66 	vsub.f32	s0, s0, s13
 80082a8:	eea7 0a27 	vfma.f32	s0, s14, s15
 80082ac:	eddf 7a40 	vldr	s15, [pc, #256]	; 80083b0 <__ieee754_rem_pio2f+0x238>
 80082b0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80082b4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80082b8:	eef0 7a40 	vmov.f32	s15, s0
 80082bc:	ee15 3a90 	vmov	r3, s11
 80082c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80082c4:	1aa4      	subs	r4, r4, r2
 80082c6:	2c19      	cmp	r4, #25
 80082c8:	dc04      	bgt.n	80082d4 <__ieee754_rem_pio2f+0x15c>
 80082ca:	edc5 5a00 	vstr	s11, [r5]
 80082ce:	eeb0 0a66 	vmov.f32	s0, s13
 80082d2:	e7c7      	b.n	8008264 <__ieee754_rem_pio2f+0xec>
 80082d4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80083c0 <__ieee754_rem_pio2f+0x248>
 80082d8:	eeb0 0a66 	vmov.f32	s0, s13
 80082dc:	eea7 0a25 	vfma.f32	s0, s14, s11
 80082e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80082e4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80082e8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80083c4 <__ieee754_rem_pio2f+0x24c>
 80082ec:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80082f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80082f4:	ed85 7a00 	vstr	s14, [r5]
 80082f8:	e7b4      	b.n	8008264 <__ieee754_rem_pio2f+0xec>
 80082fa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80082fe:	db06      	blt.n	800830e <__ieee754_rem_pio2f+0x196>
 8008300:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008304:	edc0 7a01 	vstr	s15, [r0, #4]
 8008308:	edc0 7a00 	vstr	s15, [r0]
 800830c:	e742      	b.n	8008194 <__ieee754_rem_pio2f+0x1c>
 800830e:	15e2      	asrs	r2, r4, #23
 8008310:	3a86      	subs	r2, #134	; 0x86
 8008312:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800831e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80083c8 <__ieee754_rem_pio2f+0x250>
 8008322:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008326:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800832a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800832e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008332:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008336:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800833a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800833e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008342:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008346:	eef5 7a40 	vcmp.f32	s15, #0.0
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	edcd 7a05 	vstr	s15, [sp, #20]
 8008352:	d11e      	bne.n	8008392 <__ieee754_rem_pio2f+0x21a>
 8008354:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835c:	bf14      	ite	ne
 800835e:	2302      	movne	r3, #2
 8008360:	2301      	moveq	r3, #1
 8008362:	491a      	ldr	r1, [pc, #104]	; (80083cc <__ieee754_rem_pio2f+0x254>)
 8008364:	9101      	str	r1, [sp, #4]
 8008366:	2102      	movs	r1, #2
 8008368:	9100      	str	r1, [sp, #0]
 800836a:	a803      	add	r0, sp, #12
 800836c:	4629      	mov	r1, r5
 800836e:	f000 f8d5 	bl	800851c <__kernel_rem_pio2f>
 8008372:	2e00      	cmp	r6, #0
 8008374:	f6bf af31 	bge.w	80081da <__ieee754_rem_pio2f+0x62>
 8008378:	edd5 7a00 	vldr	s15, [r5]
 800837c:	eef1 7a67 	vneg.f32	s15, s15
 8008380:	edc5 7a00 	vstr	s15, [r5]
 8008384:	edd5 7a01 	vldr	s15, [r5, #4]
 8008388:	eef1 7a67 	vneg.f32	s15, s15
 800838c:	edc5 7a01 	vstr	s15, [r5, #4]
 8008390:	e77a      	b.n	8008288 <__ieee754_rem_pio2f+0x110>
 8008392:	2303      	movs	r3, #3
 8008394:	e7e5      	b.n	8008362 <__ieee754_rem_pio2f+0x1ea>
 8008396:	bf00      	nop
 8008398:	3f490fd8 	.word	0x3f490fd8
 800839c:	4016cbe3 	.word	0x4016cbe3
 80083a0:	3fc90f80 	.word	0x3fc90f80
 80083a4:	3fc90fd0 	.word	0x3fc90fd0
 80083a8:	37354400 	.word	0x37354400
 80083ac:	37354443 	.word	0x37354443
 80083b0:	2e85a308 	.word	0x2e85a308
 80083b4:	43490f80 	.word	0x43490f80
 80083b8:	3f22f984 	.word	0x3f22f984
 80083bc:	0800a348 	.word	0x0800a348
 80083c0:	2e85a300 	.word	0x2e85a300
 80083c4:	248d3132 	.word	0x248d3132
 80083c8:	43800000 	.word	0x43800000
 80083cc:	0800a3c8 	.word	0x0800a3c8

080083d0 <__ieee754_sqrtf>:
 80083d0:	ee10 2a10 	vmov	r2, s0
 80083d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80083d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	d302      	bcc.n	80083e6 <__ieee754_sqrtf+0x16>
 80083e0:	eea0 0a00 	vfma.f32	s0, s0, s0
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	b3b1      	cbz	r1, 8008456 <__ieee754_sqrtf+0x86>
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	da04      	bge.n	80083f6 <__ieee754_sqrtf+0x26>
 80083ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80083f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80083fa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80083fe:	d204      	bcs.n	800840a <__ieee754_sqrtf+0x3a>
 8008400:	2100      	movs	r1, #0
 8008402:	0210      	lsls	r0, r2, #8
 8008404:	d528      	bpl.n	8008458 <__ieee754_sqrtf+0x88>
 8008406:	3901      	subs	r1, #1
 8008408:	1a5b      	subs	r3, r3, r1
 800840a:	3b7f      	subs	r3, #127	; 0x7f
 800840c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008410:	07d9      	lsls	r1, r3, #31
 8008412:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008416:	bf48      	it	mi
 8008418:	0052      	lslmi	r2, r2, #1
 800841a:	1059      	asrs	r1, r3, #1
 800841c:	2300      	movs	r3, #0
 800841e:	0052      	lsls	r2, r2, #1
 8008420:	2419      	movs	r4, #25
 8008422:	461e      	mov	r6, r3
 8008424:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008428:	1835      	adds	r5, r6, r0
 800842a:	4295      	cmp	r5, r2
 800842c:	bfde      	ittt	le
 800842e:	182e      	addle	r6, r5, r0
 8008430:	1b52      	suble	r2, r2, r5
 8008432:	181b      	addle	r3, r3, r0
 8008434:	3c01      	subs	r4, #1
 8008436:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800843a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800843e:	d1f3      	bne.n	8008428 <__ieee754_sqrtf+0x58>
 8008440:	b112      	cbz	r2, 8008448 <__ieee754_sqrtf+0x78>
 8008442:	3301      	adds	r3, #1
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	105b      	asrs	r3, r3, #1
 800844a:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800844e:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8008452:	ee00 3a10 	vmov	s0, r3
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	0052      	lsls	r2, r2, #1
 800845a:	3101      	adds	r1, #1
 800845c:	e7d1      	b.n	8008402 <__ieee754_sqrtf+0x32>
	...

08008460 <__kernel_cosf>:
 8008460:	ee10 3a10 	vmov	r3, s0
 8008464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008468:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800846c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008470:	da05      	bge.n	800847e <__kernel_cosf+0x1e>
 8008472:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008476:	ee17 2a90 	vmov	r2, s15
 800847a:	2a00      	cmp	r2, #0
 800847c:	d03b      	beq.n	80084f6 <__kernel_cosf+0x96>
 800847e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008482:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80084fc <__kernel_cosf+0x9c>
 8008486:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008500 <__kernel_cosf+0xa0>
 800848a:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8008504 <__kernel_cosf+0xa4>
 800848e:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <__kernel_cosf+0xa8>)
 8008490:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008494:	4293      	cmp	r3, r2
 8008496:	ee60 0a20 	vmul.f32	s1, s0, s1
 800849a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800849e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800850c <__kernel_cosf+0xac>
 80084a2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80084a6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8008510 <__kernel_cosf+0xb0>
 80084aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80084ae:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8008514 <__kernel_cosf+0xb4>
 80084b2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80084b6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80084ba:	ee26 6a07 	vmul.f32	s12, s12, s14
 80084be:	dc06      	bgt.n	80084ce <__kernel_cosf+0x6e>
 80084c0:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80084c4:	eed7 0a25 	vfnms.f32	s1, s14, s11
 80084c8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80084cc:	4770      	bx	lr
 80084ce:	4a12      	ldr	r2, [pc, #72]	; (8008518 <__kernel_cosf+0xb8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	bfda      	itte	le
 80084d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80084d8:	ee07 3a90 	vmovle	s15, r3
 80084dc:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 80084e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80084e4:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80084e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80084ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80084f0:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80084f4:	4770      	bx	lr
 80084f6:	eeb0 0a66 	vmov.f32	s0, s13
 80084fa:	4770      	bx	lr
 80084fc:	310f74f6 	.word	0x310f74f6
 8008500:	ad47d74e 	.word	0xad47d74e
 8008504:	b493f27c 	.word	0xb493f27c
 8008508:	3e999999 	.word	0x3e999999
 800850c:	37d00d01 	.word	0x37d00d01
 8008510:	bab60b61 	.word	0xbab60b61
 8008514:	3d2aaaab 	.word	0x3d2aaaab
 8008518:	3f480000 	.word	0x3f480000

0800851c <__kernel_rem_pio2f>:
 800851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	ed2d 8b04 	vpush	{d8-d9}
 8008524:	b0d7      	sub	sp, #348	; 0x15c
 8008526:	468b      	mov	fp, r1
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	9964      	ldr	r1, [sp, #400]	; 0x190
 800852c:	4bcb      	ldr	r3, [pc, #812]	; (800885c <__kernel_rem_pio2f+0x340>)
 800852e:	9002      	str	r0, [sp, #8]
 8008530:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8008538:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800886c <__kernel_rem_pio2f+0x350>
 800853c:	3b01      	subs	r3, #1
 800853e:	1ed0      	subs	r0, r2, #3
 8008540:	2408      	movs	r4, #8
 8008542:	fb90 f0f4 	sdiv	r0, r0, r4
 8008546:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800854a:	1c45      	adds	r5, r0, #1
 800854c:	1ac7      	subs	r7, r0, r3
 800854e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008552:	eb0a 0e03 	add.w	lr, sl, r3
 8008556:	ac1a      	add	r4, sp, #104	; 0x68
 8008558:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 800855c:	2200      	movs	r2, #0
 800855e:	4572      	cmp	r2, lr
 8008560:	dd0f      	ble.n	8008582 <__kernel_rem_pio2f+0x66>
 8008562:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8008566:	2400      	movs	r4, #0
 8008568:	4554      	cmp	r4, sl
 800856a:	dc26      	bgt.n	80085ba <__kernel_rem_pio2f+0x9e>
 800856c:	9a01      	ldr	r2, [sp, #4]
 800856e:	9f02      	ldr	r7, [sp, #8]
 8008570:	eddf 7abe 	vldr	s15, [pc, #760]	; 800886c <__kernel_rem_pio2f+0x350>
 8008574:	4422      	add	r2, r4
 8008576:	a91a      	add	r1, sp, #104	; 0x68
 8008578:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800857c:	f04f 0c00 	mov.w	ip, #0
 8008580:	e015      	b.n	80085ae <__kernel_rem_pio2f+0x92>
 8008582:	42d7      	cmn	r7, r2
 8008584:	bf5d      	ittte	pl
 8008586:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 800858a:	ee07 1a90 	vmovpl	s15, r1
 800858e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008592:	eef0 7a47 	vmovmi.f32	s15, s14
 8008596:	ece4 7a01 	vstmia	r4!, {s15}
 800859a:	3201      	adds	r2, #1
 800859c:	e7df      	b.n	800855e <__kernel_rem_pio2f+0x42>
 800859e:	ecf7 6a01 	vldmia	r7!, {s13}
 80085a2:	ed32 7a01 	vldmdb	r2!, {s14}
 80085a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085aa:	f10c 0c01 	add.w	ip, ip, #1
 80085ae:	459c      	cmp	ip, r3
 80085b0:	ddf5      	ble.n	800859e <__kernel_rem_pio2f+0x82>
 80085b2:	ecee 7a01 	vstmia	lr!, {s15}
 80085b6:	3401      	adds	r4, #1
 80085b8:	e7d6      	b.n	8008568 <__kernel_rem_pio2f+0x4c>
 80085ba:	aa06      	add	r2, sp, #24
 80085bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80085c0:	9204      	str	r2, [sp, #16]
 80085c2:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8008860 <__kernel_rem_pio2f+0x344>
 80085c6:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8008864 <__kernel_rem_pio2f+0x348>
 80085ca:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 80085ce:	9203      	str	r2, [sp, #12]
 80085d0:	4657      	mov	r7, sl
 80085d2:	aa56      	add	r2, sp, #344	; 0x158
 80085d4:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80085d8:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80085dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80085e0:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 80085e4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80085e8:	aa56      	add	r2, sp, #344	; 0x158
 80085ea:	eb02 0008 	add.w	r0, r2, r8
 80085ee:	384c      	subs	r0, #76	; 0x4c
 80085f0:	2200      	movs	r2, #0
 80085f2:	1abc      	subs	r4, r7, r2
 80085f4:	2c00      	cmp	r4, #0
 80085f6:	dc4a      	bgt.n	800868e <__kernel_rem_pio2f+0x172>
 80085f8:	4628      	mov	r0, r5
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	f000 fa80 	bl	8008b00 <scalbnf>
 8008600:	eeb0 8a40 	vmov.f32	s16, s0
 8008604:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008608:	ee28 0a00 	vmul.f32	s0, s16, s0
 800860c:	f000 fa36 	bl	8008a7c <floorf>
 8008610:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008614:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008618:	2d00      	cmp	r5, #0
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008620:	ee17 9a90 	vmov	r9, s15
 8008624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008628:	ee38 8a67 	vsub.f32	s16, s16, s15
 800862c:	dd44      	ble.n	80086b8 <__kernel_rem_pio2f+0x19c>
 800862e:	1e78      	subs	r0, r7, #1
 8008630:	aa06      	add	r2, sp, #24
 8008632:	f1c5 0408 	rsb	r4, r5, #8
 8008636:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800863a:	fa46 f204 	asr.w	r2, r6, r4
 800863e:	4491      	add	r9, r2
 8008640:	40a2      	lsls	r2, r4
 8008642:	1ab6      	subs	r6, r6, r2
 8008644:	aa06      	add	r2, sp, #24
 8008646:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800864a:	f1c5 0207 	rsb	r2, r5, #7
 800864e:	4116      	asrs	r6, r2
 8008650:	2e00      	cmp	r6, #0
 8008652:	dd40      	ble.n	80086d6 <__kernel_rem_pio2f+0x1ba>
 8008654:	2400      	movs	r4, #0
 8008656:	f109 0901 	add.w	r9, r9, #1
 800865a:	4620      	mov	r0, r4
 800865c:	42a7      	cmp	r7, r4
 800865e:	dc75      	bgt.n	800874c <__kernel_rem_pio2f+0x230>
 8008660:	2d00      	cmp	r5, #0
 8008662:	dd05      	ble.n	8008670 <__kernel_rem_pio2f+0x154>
 8008664:	2d01      	cmp	r5, #1
 8008666:	f000 8086 	beq.w	8008776 <__kernel_rem_pio2f+0x25a>
 800866a:	2d02      	cmp	r5, #2
 800866c:	f000 808d 	beq.w	800878a <__kernel_rem_pio2f+0x26e>
 8008670:	2e02      	cmp	r6, #2
 8008672:	d130      	bne.n	80086d6 <__kernel_rem_pio2f+0x1ba>
 8008674:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008678:	ee30 8a48 	vsub.f32	s16, s0, s16
 800867c:	b358      	cbz	r0, 80086d6 <__kernel_rem_pio2f+0x1ba>
 800867e:	4628      	mov	r0, r5
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	f000 fa3d 	bl	8008b00 <scalbnf>
 8008686:	9b05      	ldr	r3, [sp, #20]
 8008688:	ee38 8a40 	vsub.f32	s16, s16, s0
 800868c:	e023      	b.n	80086d6 <__kernel_rem_pio2f+0x1ba>
 800868e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008692:	ac06      	add	r4, sp, #24
 8008694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800869c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80086a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80086a4:	ee10 1a10 	vmov	r1, s0
 80086a8:	ed30 0a01 	vldmdb	r0!, {s0}
 80086ac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80086b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80086b4:	3201      	adds	r2, #1
 80086b6:	e79c      	b.n	80085f2 <__kernel_rem_pio2f+0xd6>
 80086b8:	d105      	bne.n	80086c6 <__kernel_rem_pio2f+0x1aa>
 80086ba:	1e7a      	subs	r2, r7, #1
 80086bc:	a906      	add	r1, sp, #24
 80086be:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80086c2:	1236      	asrs	r6, r6, #8
 80086c4:	e7c4      	b.n	8008650 <__kernel_rem_pio2f+0x134>
 80086c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80086ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80086ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d2:	da39      	bge.n	8008748 <__kernel_rem_pio2f+0x22c>
 80086d4:	2600      	movs	r6, #0
 80086d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80086da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086de:	f040 808d 	bne.w	80087fc <__kernel_rem_pio2f+0x2e0>
 80086e2:	1e7c      	subs	r4, r7, #1
 80086e4:	4620      	mov	r0, r4
 80086e6:	2200      	movs	r2, #0
 80086e8:	4550      	cmp	r0, sl
 80086ea:	da55      	bge.n	8008798 <__kernel_rem_pio2f+0x27c>
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	d164      	bne.n	80087ba <__kernel_rem_pio2f+0x29e>
 80086f0:	2401      	movs	r4, #1
 80086f2:	f06f 0003 	mvn.w	r0, #3
 80086f6:	fb00 f204 	mul.w	r2, r0, r4
 80086fa:	9904      	ldr	r1, [sp, #16]
 80086fc:	588a      	ldr	r2, [r1, r2]
 80086fe:	2a00      	cmp	r2, #0
 8008700:	d050      	beq.n	80087a4 <__kernel_rem_pio2f+0x288>
 8008702:	aa56      	add	r2, sp, #344	; 0x158
 8008704:	4490      	add	r8, r2
 8008706:	9a01      	ldr	r2, [sp, #4]
 8008708:	a91a      	add	r1, sp, #104	; 0x68
 800870a:	443a      	add	r2, r7
 800870c:	1c78      	adds	r0, r7, #1
 800870e:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8008712:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008716:	4427      	add	r7, r4
 8008718:	42b8      	cmp	r0, r7
 800871a:	f73f af5a 	bgt.w	80085d2 <__kernel_rem_pio2f+0xb6>
 800871e:	9903      	ldr	r1, [sp, #12]
 8008720:	9e02      	ldr	r6, [sp, #8]
 8008722:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008726:	9105      	str	r1, [sp, #20]
 8008728:	ee07 1a90 	vmov	s15, r1
 800872c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008730:	2400      	movs	r4, #0
 8008732:	ece2 7a01 	vstmia	r2!, {s15}
 8008736:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800886c <__kernel_rem_pio2f+0x350>
 800873a:	4696      	mov	lr, r2
 800873c:	429c      	cmp	r4, r3
 800873e:	dd33      	ble.n	80087a8 <__kernel_rem_pio2f+0x28c>
 8008740:	ece8 7a01 	vstmia	r8!, {s15}
 8008744:	3001      	adds	r0, #1
 8008746:	e7e7      	b.n	8008718 <__kernel_rem_pio2f+0x1fc>
 8008748:	2602      	movs	r6, #2
 800874a:	e783      	b.n	8008654 <__kernel_rem_pio2f+0x138>
 800874c:	aa06      	add	r2, sp, #24
 800874e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008752:	b948      	cbnz	r0, 8008768 <__kernel_rem_pio2f+0x24c>
 8008754:	b12a      	cbz	r2, 8008762 <__kernel_rem_pio2f+0x246>
 8008756:	a906      	add	r1, sp, #24
 8008758:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800875c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8008760:	2201      	movs	r2, #1
 8008762:	3401      	adds	r4, #1
 8008764:	4610      	mov	r0, r2
 8008766:	e779      	b.n	800865c <__kernel_rem_pio2f+0x140>
 8008768:	a906      	add	r1, sp, #24
 800876a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800876e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8008772:	4602      	mov	r2, r0
 8008774:	e7f5      	b.n	8008762 <__kernel_rem_pio2f+0x246>
 8008776:	1e7c      	subs	r4, r7, #1
 8008778:	aa06      	add	r2, sp, #24
 800877a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800877e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008782:	a906      	add	r1, sp, #24
 8008784:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8008788:	e772      	b.n	8008670 <__kernel_rem_pio2f+0x154>
 800878a:	1e7c      	subs	r4, r7, #1
 800878c:	aa06      	add	r2, sp, #24
 800878e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008792:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008796:	e7f4      	b.n	8008782 <__kernel_rem_pio2f+0x266>
 8008798:	a906      	add	r1, sp, #24
 800879a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800879e:	3801      	subs	r0, #1
 80087a0:	430a      	orrs	r2, r1
 80087a2:	e7a1      	b.n	80086e8 <__kernel_rem_pio2f+0x1cc>
 80087a4:	3401      	adds	r4, #1
 80087a6:	e7a6      	b.n	80086f6 <__kernel_rem_pio2f+0x1da>
 80087a8:	ecf6 6a01 	vldmia	r6!, {s13}
 80087ac:	ed3e 7a01 	vldmdb	lr!, {s14}
 80087b0:	3401      	adds	r4, #1
 80087b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80087b6:	e7c1      	b.n	800873c <__kernel_rem_pio2f+0x220>
 80087b8:	3c01      	subs	r4, #1
 80087ba:	ab06      	add	r3, sp, #24
 80087bc:	3d08      	subs	r5, #8
 80087be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f8      	beq.n	80087b8 <__kernel_rem_pio2f+0x29c>
 80087c6:	4628      	mov	r0, r5
 80087c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087cc:	f000 f998 	bl	8008b00 <scalbnf>
 80087d0:	00a3      	lsls	r3, r4, #2
 80087d2:	aa42      	add	r2, sp, #264	; 0x108
 80087d4:	3304      	adds	r3, #4
 80087d6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008860 <__kernel_rem_pio2f+0x344>
 80087da:	18d0      	adds	r0, r2, r3
 80087dc:	4622      	mov	r2, r4
 80087de:	2a00      	cmp	r2, #0
 80087e0:	da46      	bge.n	8008870 <__kernel_rem_pio2f+0x354>
 80087e2:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80087e6:	2200      	movs	r2, #0
 80087e8:	1aa5      	subs	r5, r4, r2
 80087ea:	d460      	bmi.n	80088ae <__kernel_rem_pio2f+0x392>
 80087ec:	a942      	add	r1, sp, #264	; 0x108
 80087ee:	4f1e      	ldr	r7, [pc, #120]	; (8008868 <__kernel_rem_pio2f+0x34c>)
 80087f0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800886c <__kernel_rem_pio2f+0x350>
 80087f4:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80087f8:	2000      	movs	r0, #0
 80087fa:	e050      	b.n	800889e <__kernel_rem_pio2f+0x382>
 80087fc:	4268      	negs	r0, r5
 80087fe:	eeb0 0a48 	vmov.f32	s0, s16
 8008802:	f000 f97d 	bl	8008b00 <scalbnf>
 8008806:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008864 <__kernel_rem_pio2f+0x348>
 800880a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008812:	db19      	blt.n	8008848 <__kernel_rem_pio2f+0x32c>
 8008814:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008860 <__kernel_rem_pio2f+0x344>
 8008818:	ee60 7a27 	vmul.f32	s15, s0, s15
 800881c:	aa06      	add	r2, sp, #24
 800881e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008822:	1c7c      	adds	r4, r7, #1
 8008824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008828:	3508      	adds	r5, #8
 800882a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800882e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008832:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008836:	ee10 3a10 	vmov	r3, s0
 800883a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800883e:	ee17 3a90 	vmov	r3, s15
 8008842:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008846:	e7be      	b.n	80087c6 <__kernel_rem_pio2f+0x2aa>
 8008848:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800884c:	aa06      	add	r2, sp, #24
 800884e:	ee10 3a10 	vmov	r3, s0
 8008852:	463c      	mov	r4, r7
 8008854:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8008858:	e7b5      	b.n	80087c6 <__kernel_rem_pio2f+0x2aa>
 800885a:	bf00      	nop
 800885c:	0800a70c 	.word	0x0800a70c
 8008860:	3b800000 	.word	0x3b800000
 8008864:	43800000 	.word	0x43800000
 8008868:	0800a6e0 	.word	0x0800a6e0
 800886c:	00000000 	.word	0x00000000
 8008870:	a906      	add	r1, sp, #24
 8008872:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8008876:	9101      	str	r1, [sp, #4]
 8008878:	ee07 1a90 	vmov	s15, r1
 800887c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008880:	3a01      	subs	r2, #1
 8008882:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008886:	ee20 0a07 	vmul.f32	s0, s0, s14
 800888a:	ed60 7a01 	vstmdb	r0!, {s15}
 800888e:	e7a6      	b.n	80087de <__kernel_rem_pio2f+0x2c2>
 8008890:	ecf7 6a01 	vldmia	r7!, {s13}
 8008894:	ecb5 7a01 	vldmia	r5!, {s14}
 8008898:	eee6 7a87 	vfma.f32	s15, s13, s14
 800889c:	3001      	adds	r0, #1
 800889e:	4550      	cmp	r0, sl
 80088a0:	dc01      	bgt.n	80088a6 <__kernel_rem_pio2f+0x38a>
 80088a2:	4290      	cmp	r0, r2
 80088a4:	ddf4      	ble.n	8008890 <__kernel_rem_pio2f+0x374>
 80088a6:	ecee 7a01 	vstmia	lr!, {s15}
 80088aa:	3201      	adds	r2, #1
 80088ac:	e79c      	b.n	80087e8 <__kernel_rem_pio2f+0x2cc>
 80088ae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80088b0:	2a03      	cmp	r2, #3
 80088b2:	d843      	bhi.n	800893c <__kernel_rem_pio2f+0x420>
 80088b4:	e8df f002 	tbb	[pc, r2]
 80088b8:	021d1d37 	.word	0x021d1d37
 80088bc:	aa2e      	add	r2, sp, #184	; 0xb8
 80088be:	4413      	add	r3, r2
 80088c0:	461a      	mov	r2, r3
 80088c2:	4620      	mov	r0, r4
 80088c4:	2800      	cmp	r0, #0
 80088c6:	dc55      	bgt.n	8008974 <__kernel_rem_pio2f+0x458>
 80088c8:	461a      	mov	r2, r3
 80088ca:	4620      	mov	r0, r4
 80088cc:	2801      	cmp	r0, #1
 80088ce:	dc61      	bgt.n	8008994 <__kernel_rem_pio2f+0x478>
 80088d0:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 800886c <__kernel_rem_pio2f+0x350>
 80088d4:	2c01      	cmp	r4, #1
 80088d6:	dc6d      	bgt.n	80089b4 <__kernel_rem_pio2f+0x498>
 80088d8:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80088dc:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80088e0:	2e00      	cmp	r6, #0
 80088e2:	d16d      	bne.n	80089c0 <__kernel_rem_pio2f+0x4a4>
 80088e4:	edcb 6a00 	vstr	s13, [fp]
 80088e8:	ed8b 7a01 	vstr	s14, [fp, #4]
 80088ec:	edcb 7a02 	vstr	s15, [fp, #8]
 80088f0:	e024      	b.n	800893c <__kernel_rem_pio2f+0x420>
 80088f2:	aa2e      	add	r2, sp, #184	; 0xb8
 80088f4:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800886c <__kernel_rem_pio2f+0x350>
 80088f8:	4413      	add	r3, r2
 80088fa:	4622      	mov	r2, r4
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	da2a      	bge.n	8008956 <__kernel_rem_pio2f+0x43a>
 8008900:	b37e      	cbz	r6, 8008962 <__kernel_rem_pio2f+0x446>
 8008902:	eef1 7a47 	vneg.f32	s15, s14
 8008906:	edcb 7a00 	vstr	s15, [fp]
 800890a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800890e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008912:	aa2f      	add	r2, sp, #188	; 0xbc
 8008914:	2301      	movs	r3, #1
 8008916:	429c      	cmp	r4, r3
 8008918:	da26      	bge.n	8008968 <__kernel_rem_pio2f+0x44c>
 800891a:	b10e      	cbz	r6, 8008920 <__kernel_rem_pio2f+0x404>
 800891c:	eef1 7a67 	vneg.f32	s15, s15
 8008920:	edcb 7a01 	vstr	s15, [fp, #4]
 8008924:	e00a      	b.n	800893c <__kernel_rem_pio2f+0x420>
 8008926:	aa2e      	add	r2, sp, #184	; 0xb8
 8008928:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 800886c <__kernel_rem_pio2f+0x350>
 800892c:	4413      	add	r3, r2
 800892e:	2c00      	cmp	r4, #0
 8008930:	da0b      	bge.n	800894a <__kernel_rem_pio2f+0x42e>
 8008932:	b10e      	cbz	r6, 8008938 <__kernel_rem_pio2f+0x41c>
 8008934:	eef1 7a67 	vneg.f32	s15, s15
 8008938:	edcb 7a00 	vstr	s15, [fp]
 800893c:	f009 0007 	and.w	r0, r9, #7
 8008940:	b057      	add	sp, #348	; 0x15c
 8008942:	ecbd 8b04 	vpop	{d8-d9}
 8008946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894a:	ed33 7a01 	vldmdb	r3!, {s14}
 800894e:	3c01      	subs	r4, #1
 8008950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008954:	e7eb      	b.n	800892e <__kernel_rem_pio2f+0x412>
 8008956:	ed73 7a01 	vldmdb	r3!, {s15}
 800895a:	3a01      	subs	r2, #1
 800895c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008960:	e7cc      	b.n	80088fc <__kernel_rem_pio2f+0x3e0>
 8008962:	eef0 7a47 	vmov.f32	s15, s14
 8008966:	e7ce      	b.n	8008906 <__kernel_rem_pio2f+0x3ea>
 8008968:	ecb2 7a01 	vldmia	r2!, {s14}
 800896c:	3301      	adds	r3, #1
 800896e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008972:	e7d0      	b.n	8008916 <__kernel_rem_pio2f+0x3fa>
 8008974:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008978:	ed52 7a02 	vldr	s15, [r2, #-8]
 800897c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008980:	3801      	subs	r0, #1
 8008982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898a:	ed62 7a01 	vstmdb	r2!, {s15}
 800898e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8008992:	e797      	b.n	80088c4 <__kernel_rem_pio2f+0x3a8>
 8008994:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008998:	ed52 7a02 	vldr	s15, [r2, #-8]
 800899c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80089a0:	3801      	subs	r0, #1
 80089a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80089ae:	ed02 7a01 	vstr	s14, [r2, #-4]
 80089b2:	e78b      	b.n	80088cc <__kernel_rem_pio2f+0x3b0>
 80089b4:	ed33 7a01 	vldmdb	r3!, {s14}
 80089b8:	3c01      	subs	r4, #1
 80089ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089be:	e789      	b.n	80088d4 <__kernel_rem_pio2f+0x3b8>
 80089c0:	eef1 6a66 	vneg.f32	s13, s13
 80089c4:	eeb1 7a47 	vneg.f32	s14, s14
 80089c8:	edcb 6a00 	vstr	s13, [fp]
 80089cc:	ed8b 7a01 	vstr	s14, [fp, #4]
 80089d0:	eef1 7a67 	vneg.f32	s15, s15
 80089d4:	e78a      	b.n	80088ec <__kernel_rem_pio2f+0x3d0>
 80089d6:	bf00      	nop

080089d8 <__kernel_sinf>:
 80089d8:	ee10 3a10 	vmov	r3, s0
 80089dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80089e4:	da04      	bge.n	80089f0 <__kernel_sinf+0x18>
 80089e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80089ea:	ee17 3a90 	vmov	r3, s15
 80089ee:	b35b      	cbz	r3, 8008a48 <__kernel_sinf+0x70>
 80089f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80089f4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008a4c <__kernel_sinf+0x74>
 80089f8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008a50 <__kernel_sinf+0x78>
 80089fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a00:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008a54 <__kernel_sinf+0x7c>
 8008a04:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008a08:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008a58 <__kernel_sinf+0x80>
 8008a0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a10:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008a5c <__kernel_sinf+0x84>
 8008a14:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008a18:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008a1c:	b930      	cbnz	r0, 8008a2c <__kernel_sinf+0x54>
 8008a1e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008a60 <__kernel_sinf+0x88>
 8008a22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a26:	eea6 0a86 	vfma.f32	s0, s13, s12
 8008a2a:	4770      	bx	lr
 8008a2c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008a30:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008a34:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008a38:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8008a3c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008a64 <__kernel_sinf+0x8c>
 8008a40:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008a44:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	2f2ec9d3 	.word	0x2f2ec9d3
 8008a50:	b2d72f34 	.word	0xb2d72f34
 8008a54:	3638ef1b 	.word	0x3638ef1b
 8008a58:	b9500d01 	.word	0xb9500d01
 8008a5c:	3c088889 	.word	0x3c088889
 8008a60:	be2aaaab 	.word	0xbe2aaaab
 8008a64:	3e2aaaab 	.word	0x3e2aaaab

08008a68 <matherr>:
 8008a68:	2000      	movs	r0, #0
 8008a6a:	4770      	bx	lr

08008a6c <fabsf>:
 8008a6c:	ee10 3a10 	vmov	r3, s0
 8008a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a74:	ee00 3a10 	vmov	s0, r3
 8008a78:	4770      	bx	lr
	...

08008a7c <floorf>:
 8008a7c:	ee10 3a10 	vmov	r3, s0
 8008a80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a84:	0dca      	lsrs	r2, r1, #23
 8008a86:	3a7f      	subs	r2, #127	; 0x7f
 8008a88:	2a16      	cmp	r2, #22
 8008a8a:	dc2a      	bgt.n	8008ae2 <floorf+0x66>
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	da11      	bge.n	8008ab4 <floorf+0x38>
 8008a90:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008af4 <floorf+0x78>
 8008a94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa0:	dd05      	ble.n	8008aae <floorf+0x32>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	da23      	bge.n	8008aee <floorf+0x72>
 8008aa6:	4a14      	ldr	r2, [pc, #80]	; (8008af8 <floorf+0x7c>)
 8008aa8:	2900      	cmp	r1, #0
 8008aaa:	bf18      	it	ne
 8008aac:	4613      	movne	r3, r2
 8008aae:	ee00 3a10 	vmov	s0, r3
 8008ab2:	4770      	bx	lr
 8008ab4:	4911      	ldr	r1, [pc, #68]	; (8008afc <floorf+0x80>)
 8008ab6:	4111      	asrs	r1, r2
 8008ab8:	420b      	tst	r3, r1
 8008aba:	d0fa      	beq.n	8008ab2 <floorf+0x36>
 8008abc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008af4 <floorf+0x78>
 8008ac0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ac4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008acc:	ddef      	ble.n	8008aae <floorf+0x32>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfbe      	ittt	lt
 8008ad2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008ad6:	fa40 f202 	asrlt.w	r2, r0, r2
 8008ada:	189b      	addlt	r3, r3, r2
 8008adc:	ea23 0301 	bic.w	r3, r3, r1
 8008ae0:	e7e5      	b.n	8008aae <floorf+0x32>
 8008ae2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008ae6:	d3e4      	bcc.n	8008ab2 <floorf+0x36>
 8008ae8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008aec:	4770      	bx	lr
 8008aee:	2300      	movs	r3, #0
 8008af0:	e7dd      	b.n	8008aae <floorf+0x32>
 8008af2:	bf00      	nop
 8008af4:	7149f2ca 	.word	0x7149f2ca
 8008af8:	bf800000 	.word	0xbf800000
 8008afc:	007fffff 	.word	0x007fffff

08008b00 <scalbnf>:
 8008b00:	b508      	push	{r3, lr}
 8008b02:	ee10 2a10 	vmov	r2, s0
 8008b06:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008b0a:	ed2d 8b02 	vpush	{d8}
 8008b0e:	eef0 0a40 	vmov.f32	s1, s0
 8008b12:	d004      	beq.n	8008b1e <scalbnf+0x1e>
 8008b14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008b18:	d306      	bcc.n	8008b28 <scalbnf+0x28>
 8008b1a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008b1e:	ecbd 8b02 	vpop	{d8}
 8008b22:	eeb0 0a60 	vmov.f32	s0, s1
 8008b26:	bd08      	pop	{r3, pc}
 8008b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b2c:	d21c      	bcs.n	8008b68 <scalbnf+0x68>
 8008b2e:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <scalbnf+0xac>)
 8008b30:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008bb0 <scalbnf+0xb0>
 8008b34:	4298      	cmp	r0, r3
 8008b36:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008b3a:	db10      	blt.n	8008b5e <scalbnf+0x5e>
 8008b3c:	ee10 2a90 	vmov	r2, s1
 8008b40:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008b44:	3b19      	subs	r3, #25
 8008b46:	4403      	add	r3, r0
 8008b48:	2bfe      	cmp	r3, #254	; 0xfe
 8008b4a:	dd0f      	ble.n	8008b6c <scalbnf+0x6c>
 8008b4c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008bb4 <scalbnf+0xb4>
 8008b50:	eeb0 0a48 	vmov.f32	s0, s16
 8008b54:	f000 f834 	bl	8008bc0 <copysignf>
 8008b58:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008b5c:	e7df      	b.n	8008b1e <scalbnf+0x1e>
 8008b5e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008bb8 <scalbnf+0xb8>
 8008b62:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008b66:	e7da      	b.n	8008b1e <scalbnf+0x1e>
 8008b68:	0ddb      	lsrs	r3, r3, #23
 8008b6a:	e7ec      	b.n	8008b46 <scalbnf+0x46>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd06      	ble.n	8008b7e <scalbnf+0x7e>
 8008b70:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008b74:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008b78:	ee00 3a90 	vmov	s1, r3
 8008b7c:	e7cf      	b.n	8008b1e <scalbnf+0x1e>
 8008b7e:	f113 0f16 	cmn.w	r3, #22
 8008b82:	da06      	bge.n	8008b92 <scalbnf+0x92>
 8008b84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b88:	4298      	cmp	r0, r3
 8008b8a:	dcdf      	bgt.n	8008b4c <scalbnf+0x4c>
 8008b8c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008bb8 <scalbnf+0xb8>
 8008b90:	e7de      	b.n	8008b50 <scalbnf+0x50>
 8008b92:	3319      	adds	r3, #25
 8008b94:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008b98:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008b9c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008bbc <scalbnf+0xbc>
 8008ba0:	ee07 3a10 	vmov	s14, r3
 8008ba4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008ba8:	e7b9      	b.n	8008b1e <scalbnf+0x1e>
 8008baa:	bf00      	nop
 8008bac:	ffff3cb0 	.word	0xffff3cb0
 8008bb0:	4c000000 	.word	0x4c000000
 8008bb4:	7149f2ca 	.word	0x7149f2ca
 8008bb8:	0da24260 	.word	0x0da24260
 8008bbc:	33000000 	.word	0x33000000

08008bc0 <copysignf>:
 8008bc0:	ee10 3a10 	vmov	r3, s0
 8008bc4:	ee10 2a90 	vmov	r2, s1
 8008bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bcc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	ee00 3a10 	vmov	s0, r3
 8008bd6:	4770      	bx	lr

08008bd8 <abort>:
 8008bd8:	b508      	push	{r3, lr}
 8008bda:	2006      	movs	r0, #6
 8008bdc:	f000 fd5a 	bl	8009694 <raise>
 8008be0:	2001      	movs	r0, #1
 8008be2:	f000 fe07 	bl	80097f4 <_exit>

08008be6 <__cxa_atexit>:
 8008be6:	4613      	mov	r3, r2
 8008be8:	460a      	mov	r2, r1
 8008bea:	4601      	mov	r1, r0
 8008bec:	2002      	movs	r0, #2
 8008bee:	f000 bd6d 	b.w	80096cc <__register_exitproc>
	...

08008bf4 <__errno>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	; (8008bfc <__errno+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000014 	.word	0x20000014

08008c00 <_malloc_trim_r>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	4f25      	ldr	r7, [pc, #148]	; (8008c9c <_malloc_trim_r+0x9c>)
 8008c06:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008ca8 <_malloc_trim_r+0xa8>
 8008c0a:	4689      	mov	r9, r1
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	f000 fb75 	bl	80092fc <__malloc_lock>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	685d      	ldr	r5, [r3, #4]
 8008c16:	f1a8 0411 	sub.w	r4, r8, #17
 8008c1a:	f025 0503 	bic.w	r5, r5, #3
 8008c1e:	eba4 0409 	sub.w	r4, r4, r9
 8008c22:	442c      	add	r4, r5
 8008c24:	fbb4 f4f8 	udiv	r4, r4, r8
 8008c28:	3c01      	subs	r4, #1
 8008c2a:	fb08 f404 	mul.w	r4, r8, r4
 8008c2e:	4544      	cmp	r4, r8
 8008c30:	da05      	bge.n	8008c3e <_malloc_trim_r+0x3e>
 8008c32:	4630      	mov	r0, r6
 8008c34:	f000 fb68 	bl	8009308 <__malloc_unlock>
 8008c38:	2000      	movs	r0, #0
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 fcef 	bl	8009624 <_sbrk_r>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	442b      	add	r3, r5
 8008c4a:	4298      	cmp	r0, r3
 8008c4c:	d1f1      	bne.n	8008c32 <_malloc_trim_r+0x32>
 8008c4e:	4261      	negs	r1, r4
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 fce7 	bl	8009624 <_sbrk_r>
 8008c56:	3001      	adds	r0, #1
 8008c58:	d110      	bne.n	8008c7c <_malloc_trim_r+0x7c>
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 fce1 	bl	8009624 <_sbrk_r>
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	1a83      	subs	r3, r0, r2
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	dde3      	ble.n	8008c32 <_malloc_trim_r+0x32>
 8008c6a:	490d      	ldr	r1, [pc, #52]	; (8008ca0 <_malloc_trim_r+0xa0>)
 8008c6c:	6809      	ldr	r1, [r1, #0]
 8008c6e:	1a40      	subs	r0, r0, r1
 8008c70:	490c      	ldr	r1, [pc, #48]	; (8008ca4 <_malloc_trim_r+0xa4>)
 8008c72:	f043 0301 	orr.w	r3, r3, #1
 8008c76:	6008      	str	r0, [r1, #0]
 8008c78:	6053      	str	r3, [r2, #4]
 8008c7a:	e7da      	b.n	8008c32 <_malloc_trim_r+0x32>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <_malloc_trim_r+0xa4>)
 8008c80:	1b2d      	subs	r5, r5, r4
 8008c82:	f045 0501 	orr.w	r5, r5, #1
 8008c86:	605d      	str	r5, [r3, #4]
 8008c88:	6813      	ldr	r3, [r2, #0]
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	1b1c      	subs	r4, r3, r4
 8008c8e:	6014      	str	r4, [r2, #0]
 8008c90:	f000 fb3a 	bl	8009308 <__malloc_unlock>
 8008c94:	2001      	movs	r0, #1
 8008c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000108 	.word	0x20000108
 8008ca0:	20000510 	.word	0x20000510
 8008ca4:	20003e00 	.word	0x20003e00
 8008ca8:	00001000 	.word	0x00001000

08008cac <_free_r>:
 8008cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	4688      	mov	r8, r1
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	f000 80ab 	beq.w	8008e10 <_free_r+0x164>
 8008cba:	f000 fb1f 	bl	80092fc <__malloc_lock>
 8008cbe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008cc2:	4d54      	ldr	r5, [pc, #336]	; (8008e14 <_free_r+0x168>)
 8008cc4:	f022 0001 	bic.w	r0, r2, #1
 8008cc8:	f1a8 0308 	sub.w	r3, r8, #8
 8008ccc:	181f      	adds	r7, r3, r0
 8008cce:	68a9      	ldr	r1, [r5, #8]
 8008cd0:	687e      	ldr	r6, [r7, #4]
 8008cd2:	428f      	cmp	r7, r1
 8008cd4:	f026 0603 	bic.w	r6, r6, #3
 8008cd8:	f002 0201 	and.w	r2, r2, #1
 8008cdc:	d11b      	bne.n	8008d16 <_free_r+0x6a>
 8008cde:	4430      	add	r0, r6
 8008ce0:	b93a      	cbnz	r2, 8008cf2 <_free_r+0x46>
 8008ce2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8008ce6:	1a9b      	subs	r3, r3, r2
 8008ce8:	4410      	add	r0, r2
 8008cea:	6899      	ldr	r1, [r3, #8]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	60ca      	str	r2, [r1, #12]
 8008cf0:	6091      	str	r1, [r2, #8]
 8008cf2:	f040 0201 	orr.w	r2, r0, #1
 8008cf6:	605a      	str	r2, [r3, #4]
 8008cf8:	60ab      	str	r3, [r5, #8]
 8008cfa:	4b47      	ldr	r3, [pc, #284]	; (8008e18 <_free_r+0x16c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4298      	cmp	r0, r3
 8008d00:	d304      	bcc.n	8008d0c <_free_r+0x60>
 8008d02:	4b46      	ldr	r3, [pc, #280]	; (8008e1c <_free_r+0x170>)
 8008d04:	4620      	mov	r0, r4
 8008d06:	6819      	ldr	r1, [r3, #0]
 8008d08:	f7ff ff7a 	bl	8008c00 <_malloc_trim_r>
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	f000 baf9 	b.w	8009308 <__malloc_unlock>
 8008d16:	607e      	str	r6, [r7, #4]
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	d139      	bne.n	8008d90 <_free_r+0xe4>
 8008d1c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008d20:	1a5b      	subs	r3, r3, r1
 8008d22:	4408      	add	r0, r1
 8008d24:	6899      	ldr	r1, [r3, #8]
 8008d26:	f105 0e08 	add.w	lr, r5, #8
 8008d2a:	4571      	cmp	r1, lr
 8008d2c:	d032      	beq.n	8008d94 <_free_r+0xe8>
 8008d2e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008d32:	f8c1 e00c 	str.w	lr, [r1, #12]
 8008d36:	f8ce 1008 	str.w	r1, [lr, #8]
 8008d3a:	19b9      	adds	r1, r7, r6
 8008d3c:	6849      	ldr	r1, [r1, #4]
 8008d3e:	07c9      	lsls	r1, r1, #31
 8008d40:	d40a      	bmi.n	8008d58 <_free_r+0xac>
 8008d42:	4430      	add	r0, r6
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	bb3a      	cbnz	r2, 8008d98 <_free_r+0xec>
 8008d48:	4e35      	ldr	r6, [pc, #212]	; (8008e20 <_free_r+0x174>)
 8008d4a:	42b1      	cmp	r1, r6
 8008d4c:	d124      	bne.n	8008d98 <_free_r+0xec>
 8008d4e:	616b      	str	r3, [r5, #20]
 8008d50:	612b      	str	r3, [r5, #16]
 8008d52:	2201      	movs	r2, #1
 8008d54:	60d9      	str	r1, [r3, #12]
 8008d56:	6099      	str	r1, [r3, #8]
 8008d58:	f040 0101 	orr.w	r1, r0, #1
 8008d5c:	6059      	str	r1, [r3, #4]
 8008d5e:	5018      	str	r0, [r3, r0]
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	d1d3      	bne.n	8008d0c <_free_r+0x60>
 8008d64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008d68:	d21a      	bcs.n	8008da0 <_free_r+0xf4>
 8008d6a:	08c0      	lsrs	r0, r0, #3
 8008d6c:	1081      	asrs	r1, r0, #2
 8008d6e:	2201      	movs	r2, #1
 8008d70:	408a      	lsls	r2, r1
 8008d72:	6869      	ldr	r1, [r5, #4]
 8008d74:	3001      	adds	r0, #1
 8008d76:	430a      	orrs	r2, r1
 8008d78:	606a      	str	r2, [r5, #4]
 8008d7a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008d7e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8008d82:	6099      	str	r1, [r3, #8]
 8008d84:	3a08      	subs	r2, #8
 8008d86:	60da      	str	r2, [r3, #12]
 8008d88:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008d8c:	60cb      	str	r3, [r1, #12]
 8008d8e:	e7bd      	b.n	8008d0c <_free_r+0x60>
 8008d90:	2200      	movs	r2, #0
 8008d92:	e7d2      	b.n	8008d3a <_free_r+0x8e>
 8008d94:	2201      	movs	r2, #1
 8008d96:	e7d0      	b.n	8008d3a <_free_r+0x8e>
 8008d98:	68fe      	ldr	r6, [r7, #12]
 8008d9a:	60ce      	str	r6, [r1, #12]
 8008d9c:	60b1      	str	r1, [r6, #8]
 8008d9e:	e7db      	b.n	8008d58 <_free_r+0xac>
 8008da0:	0a42      	lsrs	r2, r0, #9
 8008da2:	2a04      	cmp	r2, #4
 8008da4:	d813      	bhi.n	8008dce <_free_r+0x122>
 8008da6:	0982      	lsrs	r2, r0, #6
 8008da8:	3238      	adds	r2, #56	; 0x38
 8008daa:	1c51      	adds	r1, r2, #1
 8008dac:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008db0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8008db4:	428e      	cmp	r6, r1
 8008db6:	d124      	bne.n	8008e02 <_free_r+0x156>
 8008db8:	2001      	movs	r0, #1
 8008dba:	1092      	asrs	r2, r2, #2
 8008dbc:	fa00 f202 	lsl.w	r2, r0, r2
 8008dc0:	6868      	ldr	r0, [r5, #4]
 8008dc2:	4302      	orrs	r2, r0
 8008dc4:	606a      	str	r2, [r5, #4]
 8008dc6:	60de      	str	r6, [r3, #12]
 8008dc8:	6099      	str	r1, [r3, #8]
 8008dca:	60b3      	str	r3, [r6, #8]
 8008dcc:	e7de      	b.n	8008d8c <_free_r+0xe0>
 8008dce:	2a14      	cmp	r2, #20
 8008dd0:	d801      	bhi.n	8008dd6 <_free_r+0x12a>
 8008dd2:	325b      	adds	r2, #91	; 0x5b
 8008dd4:	e7e9      	b.n	8008daa <_free_r+0xfe>
 8008dd6:	2a54      	cmp	r2, #84	; 0x54
 8008dd8:	d802      	bhi.n	8008de0 <_free_r+0x134>
 8008dda:	0b02      	lsrs	r2, r0, #12
 8008ddc:	326e      	adds	r2, #110	; 0x6e
 8008dde:	e7e4      	b.n	8008daa <_free_r+0xfe>
 8008de0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008de4:	d802      	bhi.n	8008dec <_free_r+0x140>
 8008de6:	0bc2      	lsrs	r2, r0, #15
 8008de8:	3277      	adds	r2, #119	; 0x77
 8008dea:	e7de      	b.n	8008daa <_free_r+0xfe>
 8008dec:	f240 5154 	movw	r1, #1364	; 0x554
 8008df0:	428a      	cmp	r2, r1
 8008df2:	bf9a      	itte	ls
 8008df4:	0c82      	lsrls	r2, r0, #18
 8008df6:	327c      	addls	r2, #124	; 0x7c
 8008df8:	227e      	movhi	r2, #126	; 0x7e
 8008dfa:	e7d6      	b.n	8008daa <_free_r+0xfe>
 8008dfc:	6889      	ldr	r1, [r1, #8]
 8008dfe:	428e      	cmp	r6, r1
 8008e00:	d004      	beq.n	8008e0c <_free_r+0x160>
 8008e02:	684a      	ldr	r2, [r1, #4]
 8008e04:	f022 0203 	bic.w	r2, r2, #3
 8008e08:	4290      	cmp	r0, r2
 8008e0a:	d3f7      	bcc.n	8008dfc <_free_r+0x150>
 8008e0c:	68ce      	ldr	r6, [r1, #12]
 8008e0e:	e7da      	b.n	8008dc6 <_free_r+0x11a>
 8008e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e14:	20000108 	.word	0x20000108
 8008e18:	20000514 	.word	0x20000514
 8008e1c:	20003e30 	.word	0x20003e30
 8008e20:	20000110 	.word	0x20000110

08008e24 <__libc_init_array>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	4e0d      	ldr	r6, [pc, #52]	; (8008e5c <__libc_init_array+0x38>)
 8008e28:	4c0d      	ldr	r4, [pc, #52]	; (8008e60 <__libc_init_array+0x3c>)
 8008e2a:	1ba4      	subs	r4, r4, r6
 8008e2c:	10a4      	asrs	r4, r4, #2
 8008e2e:	2500      	movs	r5, #0
 8008e30:	42a5      	cmp	r5, r4
 8008e32:	d109      	bne.n	8008e48 <__libc_init_array+0x24>
 8008e34:	4e0b      	ldr	r6, [pc, #44]	; (8008e64 <__libc_init_array+0x40>)
 8008e36:	4c0c      	ldr	r4, [pc, #48]	; (8008e68 <__libc_init_array+0x44>)
 8008e38:	f000 fcde 	bl	80097f8 <_init>
 8008e3c:	1ba4      	subs	r4, r4, r6
 8008e3e:	10a4      	asrs	r4, r4, #2
 8008e40:	2500      	movs	r5, #0
 8008e42:	42a5      	cmp	r5, r4
 8008e44:	d105      	bne.n	8008e52 <__libc_init_array+0x2e>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
 8008e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e4c:	4798      	blx	r3
 8008e4e:	3501      	adds	r5, #1
 8008e50:	e7ee      	b.n	8008e30 <__libc_init_array+0xc>
 8008e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e56:	4798      	blx	r3
 8008e58:	3501      	adds	r5, #1
 8008e5a:	e7f2      	b.n	8008e42 <__libc_init_array+0x1e>
 8008e5c:	0800acc4 	.word	0x0800acc4
 8008e60:	0800acc4 	.word	0x0800acc4
 8008e64:	0800acc4 	.word	0x0800acc4
 8008e68:	0800acdc 	.word	0x0800acdc

08008e6c <__retarget_lock_acquire_recursive>:
 8008e6c:	4770      	bx	lr

08008e6e <__retarget_lock_release>:
 8008e6e:	4770      	bx	lr

08008e70 <__retarget_lock_release_recursive>:
 8008e70:	4770      	bx	lr
	...

08008e74 <malloc>:
 8008e74:	4b02      	ldr	r3, [pc, #8]	; (8008e80 <malloc+0xc>)
 8008e76:	4601      	mov	r1, r0
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	f000 b80b 	b.w	8008e94 <_malloc_r>
 8008e7e:	bf00      	nop
 8008e80:	20000014 	.word	0x20000014

08008e84 <free>:
 8008e84:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <free+0xc>)
 8008e86:	4601      	mov	r1, r0
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f7ff bf0f 	b.w	8008cac <_free_r>
 8008e8e:	bf00      	nop
 8008e90:	20000014 	.word	0x20000014

08008e94 <_malloc_r>:
 8008e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	f101 040b 	add.w	r4, r1, #11
 8008e9c:	2c16      	cmp	r4, #22
 8008e9e:	4681      	mov	r9, r0
 8008ea0:	d907      	bls.n	8008eb2 <_malloc_r+0x1e>
 8008ea2:	f034 0407 	bics.w	r4, r4, #7
 8008ea6:	d505      	bpl.n	8008eb4 <_malloc_r+0x20>
 8008ea8:	230c      	movs	r3, #12
 8008eaa:	f8c9 3000 	str.w	r3, [r9]
 8008eae:	2600      	movs	r6, #0
 8008eb0:	e131      	b.n	8009116 <_malloc_r+0x282>
 8008eb2:	2410      	movs	r4, #16
 8008eb4:	428c      	cmp	r4, r1
 8008eb6:	d3f7      	bcc.n	8008ea8 <_malloc_r+0x14>
 8008eb8:	4648      	mov	r0, r9
 8008eba:	f000 fa1f 	bl	80092fc <__malloc_lock>
 8008ebe:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8008ec2:	4d9c      	ldr	r5, [pc, #624]	; (8009134 <_malloc_r+0x2a0>)
 8008ec4:	d236      	bcs.n	8008f34 <_malloc_r+0xa0>
 8008ec6:	f104 0208 	add.w	r2, r4, #8
 8008eca:	442a      	add	r2, r5
 8008ecc:	f1a2 0108 	sub.w	r1, r2, #8
 8008ed0:	6856      	ldr	r6, [r2, #4]
 8008ed2:	428e      	cmp	r6, r1
 8008ed4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8008ed8:	d102      	bne.n	8008ee0 <_malloc_r+0x4c>
 8008eda:	68d6      	ldr	r6, [r2, #12]
 8008edc:	42b2      	cmp	r2, r6
 8008ede:	d010      	beq.n	8008f02 <_malloc_r+0x6e>
 8008ee0:	6873      	ldr	r3, [r6, #4]
 8008ee2:	68f2      	ldr	r2, [r6, #12]
 8008ee4:	68b1      	ldr	r1, [r6, #8]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	60ca      	str	r2, [r1, #12]
 8008eec:	4433      	add	r3, r6
 8008eee:	6091      	str	r1, [r2, #8]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	605a      	str	r2, [r3, #4]
 8008ef8:	4648      	mov	r0, r9
 8008efa:	f000 fa05 	bl	8009308 <__malloc_unlock>
 8008efe:	3608      	adds	r6, #8
 8008f00:	e109      	b.n	8009116 <_malloc_r+0x282>
 8008f02:	3302      	adds	r3, #2
 8008f04:	4a8c      	ldr	r2, [pc, #560]	; (8009138 <_malloc_r+0x2a4>)
 8008f06:	692e      	ldr	r6, [r5, #16]
 8008f08:	4296      	cmp	r6, r2
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	d06d      	beq.n	8008fea <_malloc_r+0x156>
 8008f0e:	6870      	ldr	r0, [r6, #4]
 8008f10:	f020 0003 	bic.w	r0, r0, #3
 8008f14:	1b07      	subs	r7, r0, r4
 8008f16:	2f0f      	cmp	r7, #15
 8008f18:	dd47      	ble.n	8008faa <_malloc_r+0x116>
 8008f1a:	1933      	adds	r3, r6, r4
 8008f1c:	f044 0401 	orr.w	r4, r4, #1
 8008f20:	6074      	str	r4, [r6, #4]
 8008f22:	616b      	str	r3, [r5, #20]
 8008f24:	612b      	str	r3, [r5, #16]
 8008f26:	60da      	str	r2, [r3, #12]
 8008f28:	609a      	str	r2, [r3, #8]
 8008f2a:	f047 0201 	orr.w	r2, r7, #1
 8008f2e:	605a      	str	r2, [r3, #4]
 8008f30:	5037      	str	r7, [r6, r0]
 8008f32:	e7e1      	b.n	8008ef8 <_malloc_r+0x64>
 8008f34:	0a63      	lsrs	r3, r4, #9
 8008f36:	d02a      	beq.n	8008f8e <_malloc_r+0xfa>
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d812      	bhi.n	8008f62 <_malloc_r+0xce>
 8008f3c:	09a3      	lsrs	r3, r4, #6
 8008f3e:	3338      	adds	r3, #56	; 0x38
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008f46:	f1a2 0008 	sub.w	r0, r2, #8
 8008f4a:	6856      	ldr	r6, [r2, #4]
 8008f4c:	4286      	cmp	r6, r0
 8008f4e:	d006      	beq.n	8008f5e <_malloc_r+0xca>
 8008f50:	6872      	ldr	r2, [r6, #4]
 8008f52:	f022 0203 	bic.w	r2, r2, #3
 8008f56:	1b11      	subs	r1, r2, r4
 8008f58:	290f      	cmp	r1, #15
 8008f5a:	dd1c      	ble.n	8008f96 <_malloc_r+0x102>
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	3301      	adds	r3, #1
 8008f60:	e7d0      	b.n	8008f04 <_malloc_r+0x70>
 8008f62:	2b14      	cmp	r3, #20
 8008f64:	d801      	bhi.n	8008f6a <_malloc_r+0xd6>
 8008f66:	335b      	adds	r3, #91	; 0x5b
 8008f68:	e7ea      	b.n	8008f40 <_malloc_r+0xac>
 8008f6a:	2b54      	cmp	r3, #84	; 0x54
 8008f6c:	d802      	bhi.n	8008f74 <_malloc_r+0xe0>
 8008f6e:	0b23      	lsrs	r3, r4, #12
 8008f70:	336e      	adds	r3, #110	; 0x6e
 8008f72:	e7e5      	b.n	8008f40 <_malloc_r+0xac>
 8008f74:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008f78:	d802      	bhi.n	8008f80 <_malloc_r+0xec>
 8008f7a:	0be3      	lsrs	r3, r4, #15
 8008f7c:	3377      	adds	r3, #119	; 0x77
 8008f7e:	e7df      	b.n	8008f40 <_malloc_r+0xac>
 8008f80:	f240 5254 	movw	r2, #1364	; 0x554
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d804      	bhi.n	8008f92 <_malloc_r+0xfe>
 8008f88:	0ca3      	lsrs	r3, r4, #18
 8008f8a:	337c      	adds	r3, #124	; 0x7c
 8008f8c:	e7d8      	b.n	8008f40 <_malloc_r+0xac>
 8008f8e:	233f      	movs	r3, #63	; 0x3f
 8008f90:	e7d6      	b.n	8008f40 <_malloc_r+0xac>
 8008f92:	237e      	movs	r3, #126	; 0x7e
 8008f94:	e7d4      	b.n	8008f40 <_malloc_r+0xac>
 8008f96:	2900      	cmp	r1, #0
 8008f98:	68f1      	ldr	r1, [r6, #12]
 8008f9a:	db04      	blt.n	8008fa6 <_malloc_r+0x112>
 8008f9c:	68b3      	ldr	r3, [r6, #8]
 8008f9e:	60d9      	str	r1, [r3, #12]
 8008fa0:	608b      	str	r3, [r1, #8]
 8008fa2:	18b3      	adds	r3, r6, r2
 8008fa4:	e7a4      	b.n	8008ef0 <_malloc_r+0x5c>
 8008fa6:	460e      	mov	r6, r1
 8008fa8:	e7d0      	b.n	8008f4c <_malloc_r+0xb8>
 8008faa:	2f00      	cmp	r7, #0
 8008fac:	616a      	str	r2, [r5, #20]
 8008fae:	612a      	str	r2, [r5, #16]
 8008fb0:	db05      	blt.n	8008fbe <_malloc_r+0x12a>
 8008fb2:	4430      	add	r0, r6
 8008fb4:	6843      	ldr	r3, [r0, #4]
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	6043      	str	r3, [r0, #4]
 8008fbc:	e79c      	b.n	8008ef8 <_malloc_r+0x64>
 8008fbe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008fc2:	d244      	bcs.n	800904e <_malloc_r+0x1ba>
 8008fc4:	08c0      	lsrs	r0, r0, #3
 8008fc6:	1087      	asrs	r7, r0, #2
 8008fc8:	2201      	movs	r2, #1
 8008fca:	fa02 f707 	lsl.w	r7, r2, r7
 8008fce:	686a      	ldr	r2, [r5, #4]
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	433a      	orrs	r2, r7
 8008fd4:	606a      	str	r2, [r5, #4]
 8008fd6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008fda:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8008fde:	60b7      	str	r7, [r6, #8]
 8008fe0:	3a08      	subs	r2, #8
 8008fe2:	60f2      	str	r2, [r6, #12]
 8008fe4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8008fe8:	60fe      	str	r6, [r7, #12]
 8008fea:	2001      	movs	r0, #1
 8008fec:	109a      	asrs	r2, r3, #2
 8008fee:	fa00 f202 	lsl.w	r2, r0, r2
 8008ff2:	6868      	ldr	r0, [r5, #4]
 8008ff4:	4282      	cmp	r2, r0
 8008ff6:	f200 80a1 	bhi.w	800913c <_malloc_r+0x2a8>
 8008ffa:	4202      	tst	r2, r0
 8008ffc:	d106      	bne.n	800900c <_malloc_r+0x178>
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	0052      	lsls	r2, r2, #1
 8009004:	4202      	tst	r2, r0
 8009006:	f103 0304 	add.w	r3, r3, #4
 800900a:	d0fa      	beq.n	8009002 <_malloc_r+0x16e>
 800900c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009010:	46e0      	mov	r8, ip
 8009012:	469e      	mov	lr, r3
 8009014:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009018:	4546      	cmp	r6, r8
 800901a:	d153      	bne.n	80090c4 <_malloc_r+0x230>
 800901c:	f10e 0e01 	add.w	lr, lr, #1
 8009020:	f01e 0f03 	tst.w	lr, #3
 8009024:	f108 0808 	add.w	r8, r8, #8
 8009028:	d1f4      	bne.n	8009014 <_malloc_r+0x180>
 800902a:	0798      	lsls	r0, r3, #30
 800902c:	d179      	bne.n	8009122 <_malloc_r+0x28e>
 800902e:	686b      	ldr	r3, [r5, #4]
 8009030:	ea23 0302 	bic.w	r3, r3, r2
 8009034:	606b      	str	r3, [r5, #4]
 8009036:	6868      	ldr	r0, [r5, #4]
 8009038:	0052      	lsls	r2, r2, #1
 800903a:	4282      	cmp	r2, r0
 800903c:	d87e      	bhi.n	800913c <_malloc_r+0x2a8>
 800903e:	2a00      	cmp	r2, #0
 8009040:	d07c      	beq.n	800913c <_malloc_r+0x2a8>
 8009042:	4673      	mov	r3, lr
 8009044:	4202      	tst	r2, r0
 8009046:	d1e1      	bne.n	800900c <_malloc_r+0x178>
 8009048:	3304      	adds	r3, #4
 800904a:	0052      	lsls	r2, r2, #1
 800904c:	e7fa      	b.n	8009044 <_malloc_r+0x1b0>
 800904e:	0a42      	lsrs	r2, r0, #9
 8009050:	2a04      	cmp	r2, #4
 8009052:	d815      	bhi.n	8009080 <_malloc_r+0x1ec>
 8009054:	0982      	lsrs	r2, r0, #6
 8009056:	3238      	adds	r2, #56	; 0x38
 8009058:	1c57      	adds	r7, r2, #1
 800905a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800905e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009062:	45be      	cmp	lr, r7
 8009064:	d126      	bne.n	80090b4 <_malloc_r+0x220>
 8009066:	2001      	movs	r0, #1
 8009068:	1092      	asrs	r2, r2, #2
 800906a:	fa00 f202 	lsl.w	r2, r0, r2
 800906e:	6868      	ldr	r0, [r5, #4]
 8009070:	4310      	orrs	r0, r2
 8009072:	6068      	str	r0, [r5, #4]
 8009074:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009078:	60b7      	str	r7, [r6, #8]
 800907a:	f8ce 6008 	str.w	r6, [lr, #8]
 800907e:	e7b3      	b.n	8008fe8 <_malloc_r+0x154>
 8009080:	2a14      	cmp	r2, #20
 8009082:	d801      	bhi.n	8009088 <_malloc_r+0x1f4>
 8009084:	325b      	adds	r2, #91	; 0x5b
 8009086:	e7e7      	b.n	8009058 <_malloc_r+0x1c4>
 8009088:	2a54      	cmp	r2, #84	; 0x54
 800908a:	d802      	bhi.n	8009092 <_malloc_r+0x1fe>
 800908c:	0b02      	lsrs	r2, r0, #12
 800908e:	326e      	adds	r2, #110	; 0x6e
 8009090:	e7e2      	b.n	8009058 <_malloc_r+0x1c4>
 8009092:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009096:	d802      	bhi.n	800909e <_malloc_r+0x20a>
 8009098:	0bc2      	lsrs	r2, r0, #15
 800909a:	3277      	adds	r2, #119	; 0x77
 800909c:	e7dc      	b.n	8009058 <_malloc_r+0x1c4>
 800909e:	f240 5754 	movw	r7, #1364	; 0x554
 80090a2:	42ba      	cmp	r2, r7
 80090a4:	bf9a      	itte	ls
 80090a6:	0c82      	lsrls	r2, r0, #18
 80090a8:	327c      	addls	r2, #124	; 0x7c
 80090aa:	227e      	movhi	r2, #126	; 0x7e
 80090ac:	e7d4      	b.n	8009058 <_malloc_r+0x1c4>
 80090ae:	68bf      	ldr	r7, [r7, #8]
 80090b0:	45be      	cmp	lr, r7
 80090b2:	d004      	beq.n	80090be <_malloc_r+0x22a>
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	f022 0203 	bic.w	r2, r2, #3
 80090ba:	4290      	cmp	r0, r2
 80090bc:	d3f7      	bcc.n	80090ae <_malloc_r+0x21a>
 80090be:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80090c2:	e7d7      	b.n	8009074 <_malloc_r+0x1e0>
 80090c4:	6870      	ldr	r0, [r6, #4]
 80090c6:	68f7      	ldr	r7, [r6, #12]
 80090c8:	f020 0003 	bic.w	r0, r0, #3
 80090cc:	eba0 0a04 	sub.w	sl, r0, r4
 80090d0:	f1ba 0f0f 	cmp.w	sl, #15
 80090d4:	dd10      	ble.n	80090f8 <_malloc_r+0x264>
 80090d6:	68b2      	ldr	r2, [r6, #8]
 80090d8:	1933      	adds	r3, r6, r4
 80090da:	f044 0401 	orr.w	r4, r4, #1
 80090de:	6074      	str	r4, [r6, #4]
 80090e0:	60d7      	str	r7, [r2, #12]
 80090e2:	60ba      	str	r2, [r7, #8]
 80090e4:	f04a 0201 	orr.w	r2, sl, #1
 80090e8:	616b      	str	r3, [r5, #20]
 80090ea:	612b      	str	r3, [r5, #16]
 80090ec:	60d9      	str	r1, [r3, #12]
 80090ee:	6099      	str	r1, [r3, #8]
 80090f0:	605a      	str	r2, [r3, #4]
 80090f2:	f846 a000 	str.w	sl, [r6, r0]
 80090f6:	e6ff      	b.n	8008ef8 <_malloc_r+0x64>
 80090f8:	f1ba 0f00 	cmp.w	sl, #0
 80090fc:	db0f      	blt.n	800911e <_malloc_r+0x28a>
 80090fe:	4430      	add	r0, r6
 8009100:	6843      	ldr	r3, [r0, #4]
 8009102:	f043 0301 	orr.w	r3, r3, #1
 8009106:	6043      	str	r3, [r0, #4]
 8009108:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800910c:	4648      	mov	r0, r9
 800910e:	60df      	str	r7, [r3, #12]
 8009110:	60bb      	str	r3, [r7, #8]
 8009112:	f000 f8f9 	bl	8009308 <__malloc_unlock>
 8009116:	4630      	mov	r0, r6
 8009118:	b003      	add	sp, #12
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	463e      	mov	r6, r7
 8009120:	e77a      	b.n	8009018 <_malloc_r+0x184>
 8009122:	f85c 0908 	ldr.w	r0, [ip], #-8
 8009126:	4584      	cmp	ip, r0
 8009128:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800912c:	f43f af7d 	beq.w	800902a <_malloc_r+0x196>
 8009130:	e781      	b.n	8009036 <_malloc_r+0x1a2>
 8009132:	bf00      	nop
 8009134:	20000108 	.word	0x20000108
 8009138:	20000110 	.word	0x20000110
 800913c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009140:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009144:	f026 0603 	bic.w	r6, r6, #3
 8009148:	42b4      	cmp	r4, r6
 800914a:	d803      	bhi.n	8009154 <_malloc_r+0x2c0>
 800914c:	1b33      	subs	r3, r6, r4
 800914e:	2b0f      	cmp	r3, #15
 8009150:	f300 8096 	bgt.w	8009280 <_malloc_r+0x3ec>
 8009154:	4a4f      	ldr	r2, [pc, #316]	; (8009294 <_malloc_r+0x400>)
 8009156:	6817      	ldr	r7, [r2, #0]
 8009158:	4a4f      	ldr	r2, [pc, #316]	; (8009298 <_malloc_r+0x404>)
 800915a:	6811      	ldr	r1, [r2, #0]
 800915c:	3710      	adds	r7, #16
 800915e:	3101      	adds	r1, #1
 8009160:	eb0b 0306 	add.w	r3, fp, r6
 8009164:	4427      	add	r7, r4
 8009166:	d005      	beq.n	8009174 <_malloc_r+0x2e0>
 8009168:	494c      	ldr	r1, [pc, #304]	; (800929c <_malloc_r+0x408>)
 800916a:	3901      	subs	r1, #1
 800916c:	440f      	add	r7, r1
 800916e:	3101      	adds	r1, #1
 8009170:	4249      	negs	r1, r1
 8009172:	400f      	ands	r7, r1
 8009174:	4639      	mov	r1, r7
 8009176:	4648      	mov	r0, r9
 8009178:	9201      	str	r2, [sp, #4]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	f000 fa52 	bl	8009624 <_sbrk_r>
 8009180:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009184:	4680      	mov	r8, r0
 8009186:	d056      	beq.n	8009236 <_malloc_r+0x3a2>
 8009188:	9b00      	ldr	r3, [sp, #0]
 800918a:	9a01      	ldr	r2, [sp, #4]
 800918c:	4283      	cmp	r3, r0
 800918e:	d901      	bls.n	8009194 <_malloc_r+0x300>
 8009190:	45ab      	cmp	fp, r5
 8009192:	d150      	bne.n	8009236 <_malloc_r+0x3a2>
 8009194:	4842      	ldr	r0, [pc, #264]	; (80092a0 <_malloc_r+0x40c>)
 8009196:	6801      	ldr	r1, [r0, #0]
 8009198:	4543      	cmp	r3, r8
 800919a:	eb07 0e01 	add.w	lr, r7, r1
 800919e:	f8c0 e000 	str.w	lr, [r0]
 80091a2:	4940      	ldr	r1, [pc, #256]	; (80092a4 <_malloc_r+0x410>)
 80091a4:	4682      	mov	sl, r0
 80091a6:	d113      	bne.n	80091d0 <_malloc_r+0x33c>
 80091a8:	420b      	tst	r3, r1
 80091aa:	d111      	bne.n	80091d0 <_malloc_r+0x33c>
 80091ac:	68ab      	ldr	r3, [r5, #8]
 80091ae:	443e      	add	r6, r7
 80091b0:	f046 0601 	orr.w	r6, r6, #1
 80091b4:	605e      	str	r6, [r3, #4]
 80091b6:	4a3c      	ldr	r2, [pc, #240]	; (80092a8 <_malloc_r+0x414>)
 80091b8:	f8da 3000 	ldr.w	r3, [sl]
 80091bc:	6811      	ldr	r1, [r2, #0]
 80091be:	428b      	cmp	r3, r1
 80091c0:	bf88      	it	hi
 80091c2:	6013      	strhi	r3, [r2, #0]
 80091c4:	4a39      	ldr	r2, [pc, #228]	; (80092ac <_malloc_r+0x418>)
 80091c6:	6811      	ldr	r1, [r2, #0]
 80091c8:	428b      	cmp	r3, r1
 80091ca:	bf88      	it	hi
 80091cc:	6013      	strhi	r3, [r2, #0]
 80091ce:	e032      	b.n	8009236 <_malloc_r+0x3a2>
 80091d0:	6810      	ldr	r0, [r2, #0]
 80091d2:	3001      	adds	r0, #1
 80091d4:	bf1b      	ittet	ne
 80091d6:	eba8 0303 	subne.w	r3, r8, r3
 80091da:	4473      	addne	r3, lr
 80091dc:	f8c2 8000 	streq.w	r8, [r2]
 80091e0:	f8ca 3000 	strne.w	r3, [sl]
 80091e4:	f018 0007 	ands.w	r0, r8, #7
 80091e8:	bf1c      	itt	ne
 80091ea:	f1c0 0008 	rsbne	r0, r0, #8
 80091ee:	4480      	addne	r8, r0
 80091f0:	4b2a      	ldr	r3, [pc, #168]	; (800929c <_malloc_r+0x408>)
 80091f2:	4447      	add	r7, r8
 80091f4:	4418      	add	r0, r3
 80091f6:	400f      	ands	r7, r1
 80091f8:	1bc7      	subs	r7, r0, r7
 80091fa:	4639      	mov	r1, r7
 80091fc:	4648      	mov	r0, r9
 80091fe:	f000 fa11 	bl	8009624 <_sbrk_r>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	bf08      	it	eq
 8009206:	4640      	moveq	r0, r8
 8009208:	f8da 3000 	ldr.w	r3, [sl]
 800920c:	f8c5 8008 	str.w	r8, [r5, #8]
 8009210:	bf08      	it	eq
 8009212:	2700      	moveq	r7, #0
 8009214:	eba0 0008 	sub.w	r0, r0, r8
 8009218:	443b      	add	r3, r7
 800921a:	4407      	add	r7, r0
 800921c:	f047 0701 	orr.w	r7, r7, #1
 8009220:	45ab      	cmp	fp, r5
 8009222:	f8ca 3000 	str.w	r3, [sl]
 8009226:	f8c8 7004 	str.w	r7, [r8, #4]
 800922a:	d0c4      	beq.n	80091b6 <_malloc_r+0x322>
 800922c:	2e0f      	cmp	r6, #15
 800922e:	d810      	bhi.n	8009252 <_malloc_r+0x3be>
 8009230:	2301      	movs	r3, #1
 8009232:	f8c8 3004 	str.w	r3, [r8, #4]
 8009236:	68ab      	ldr	r3, [r5, #8]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	f022 0203 	bic.w	r2, r2, #3
 800923e:	4294      	cmp	r4, r2
 8009240:	eba2 0304 	sub.w	r3, r2, r4
 8009244:	d801      	bhi.n	800924a <_malloc_r+0x3b6>
 8009246:	2b0f      	cmp	r3, #15
 8009248:	dc1a      	bgt.n	8009280 <_malloc_r+0x3ec>
 800924a:	4648      	mov	r0, r9
 800924c:	f000 f85c 	bl	8009308 <__malloc_unlock>
 8009250:	e62d      	b.n	8008eae <_malloc_r+0x1a>
 8009252:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009256:	3e0c      	subs	r6, #12
 8009258:	f026 0607 	bic.w	r6, r6, #7
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	4333      	orrs	r3, r6
 8009262:	f8cb 3004 	str.w	r3, [fp, #4]
 8009266:	eb0b 0306 	add.w	r3, fp, r6
 800926a:	2205      	movs	r2, #5
 800926c:	2e0f      	cmp	r6, #15
 800926e:	605a      	str	r2, [r3, #4]
 8009270:	609a      	str	r2, [r3, #8]
 8009272:	d9a0      	bls.n	80091b6 <_malloc_r+0x322>
 8009274:	f10b 0108 	add.w	r1, fp, #8
 8009278:	4648      	mov	r0, r9
 800927a:	f7ff fd17 	bl	8008cac <_free_r>
 800927e:	e79a      	b.n	80091b6 <_malloc_r+0x322>
 8009280:	68ae      	ldr	r6, [r5, #8]
 8009282:	f044 0201 	orr.w	r2, r4, #1
 8009286:	4434      	add	r4, r6
 8009288:	f043 0301 	orr.w	r3, r3, #1
 800928c:	6072      	str	r2, [r6, #4]
 800928e:	60ac      	str	r4, [r5, #8]
 8009290:	6063      	str	r3, [r4, #4]
 8009292:	e631      	b.n	8008ef8 <_malloc_r+0x64>
 8009294:	20003e30 	.word	0x20003e30
 8009298:	20000510 	.word	0x20000510
 800929c:	00001000 	.word	0x00001000
 80092a0:	20003e00 	.word	0x20003e00
 80092a4:	00000fff 	.word	0x00000fff
 80092a8:	20003e28 	.word	0x20003e28
 80092ac:	20003e2c 	.word	0x20003e2c

080092b0 <memcpy>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	1e43      	subs	r3, r0, #1
 80092b4:	440a      	add	r2, r1
 80092b6:	4291      	cmp	r1, r2
 80092b8:	d100      	bne.n	80092bc <memcpy+0xc>
 80092ba:	bd10      	pop	{r4, pc}
 80092bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092c4:	e7f7      	b.n	80092b6 <memcpy+0x6>

080092c6 <memmove>:
 80092c6:	4288      	cmp	r0, r1
 80092c8:	b510      	push	{r4, lr}
 80092ca:	eb01 0302 	add.w	r3, r1, r2
 80092ce:	d803      	bhi.n	80092d8 <memmove+0x12>
 80092d0:	1e42      	subs	r2, r0, #1
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d10c      	bne.n	80092f0 <memmove+0x2a>
 80092d6:	bd10      	pop	{r4, pc}
 80092d8:	4298      	cmp	r0, r3
 80092da:	d2f9      	bcs.n	80092d0 <memmove+0xa>
 80092dc:	1881      	adds	r1, r0, r2
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	42d3      	cmn	r3, r2
 80092e2:	d100      	bne.n	80092e6 <memmove+0x20>
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80092ee:	e7f7      	b.n	80092e0 <memmove+0x1a>
 80092f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80092f8:	e7eb      	b.n	80092d2 <memmove+0xc>
	...

080092fc <__malloc_lock>:
 80092fc:	4801      	ldr	r0, [pc, #4]	; (8009304 <__malloc_lock+0x8>)
 80092fe:	f7ff bdb5 	b.w	8008e6c <__retarget_lock_acquire_recursive>
 8009302:	bf00      	nop
 8009304:	20003f40 	.word	0x20003f40

08009308 <__malloc_unlock>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__malloc_unlock+0x8>)
 800930a:	f7ff bdb1 	b.w	8008e70 <__retarget_lock_release_recursive>
 800930e:	bf00      	nop
 8009310:	20003f40 	.word	0x20003f40

08009314 <realloc>:
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <realloc+0xc>)
 8009316:	460a      	mov	r2, r1
 8009318:	4601      	mov	r1, r0
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	f000 b802 	b.w	8009324 <_realloc_r>
 8009320:	20000014 	.word	0x20000014

08009324 <_realloc_r>:
 8009324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	4682      	mov	sl, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b929      	cbnz	r1, 800933a <_realloc_r+0x16>
 800932e:	4611      	mov	r1, r2
 8009330:	b003      	add	sp, #12
 8009332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009336:	f7ff bdad 	b.w	8008e94 <_malloc_r>
 800933a:	9201      	str	r2, [sp, #4]
 800933c:	f7ff ffde 	bl	80092fc <__malloc_lock>
 8009340:	9a01      	ldr	r2, [sp, #4]
 8009342:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009346:	f102 080b 	add.w	r8, r2, #11
 800934a:	f1b8 0f16 	cmp.w	r8, #22
 800934e:	f1a4 0908 	sub.w	r9, r4, #8
 8009352:	f025 0603 	bic.w	r6, r5, #3
 8009356:	d90a      	bls.n	800936e <_realloc_r+0x4a>
 8009358:	f038 0807 	bics.w	r8, r8, #7
 800935c:	d509      	bpl.n	8009372 <_realloc_r+0x4e>
 800935e:	230c      	movs	r3, #12
 8009360:	f8ca 3000 	str.w	r3, [sl]
 8009364:	2700      	movs	r7, #0
 8009366:	4638      	mov	r0, r7
 8009368:	b003      	add	sp, #12
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	f04f 0810 	mov.w	r8, #16
 8009372:	4590      	cmp	r8, r2
 8009374:	d3f3      	bcc.n	800935e <_realloc_r+0x3a>
 8009376:	45b0      	cmp	r8, r6
 8009378:	f340 8145 	ble.w	8009606 <_realloc_r+0x2e2>
 800937c:	4ba8      	ldr	r3, [pc, #672]	; (8009620 <_realloc_r+0x2fc>)
 800937e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8009382:	eb09 0106 	add.w	r1, r9, r6
 8009386:	4571      	cmp	r1, lr
 8009388:	469b      	mov	fp, r3
 800938a:	684b      	ldr	r3, [r1, #4]
 800938c:	d005      	beq.n	800939a <_realloc_r+0x76>
 800938e:	f023 0001 	bic.w	r0, r3, #1
 8009392:	4408      	add	r0, r1
 8009394:	6840      	ldr	r0, [r0, #4]
 8009396:	07c7      	lsls	r7, r0, #31
 8009398:	d447      	bmi.n	800942a <_realloc_r+0x106>
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	4571      	cmp	r1, lr
 80093a0:	eb06 0703 	add.w	r7, r6, r3
 80093a4:	d119      	bne.n	80093da <_realloc_r+0xb6>
 80093a6:	f108 0010 	add.w	r0, r8, #16
 80093aa:	4287      	cmp	r7, r0
 80093ac:	db3f      	blt.n	800942e <_realloc_r+0x10a>
 80093ae:	eb09 0308 	add.w	r3, r9, r8
 80093b2:	eba7 0708 	sub.w	r7, r7, r8
 80093b6:	f047 0701 	orr.w	r7, r7, #1
 80093ba:	f8cb 3008 	str.w	r3, [fp, #8]
 80093be:	605f      	str	r7, [r3, #4]
 80093c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	ea43 0308 	orr.w	r3, r3, r8
 80093cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80093d0:	4650      	mov	r0, sl
 80093d2:	f7ff ff99 	bl	8009308 <__malloc_unlock>
 80093d6:	4627      	mov	r7, r4
 80093d8:	e7c5      	b.n	8009366 <_realloc_r+0x42>
 80093da:	45b8      	cmp	r8, r7
 80093dc:	dc27      	bgt.n	800942e <_realloc_r+0x10a>
 80093de:	68cb      	ldr	r3, [r1, #12]
 80093e0:	688a      	ldr	r2, [r1, #8]
 80093e2:	60d3      	str	r3, [r2, #12]
 80093e4:	609a      	str	r2, [r3, #8]
 80093e6:	eba7 0008 	sub.w	r0, r7, r8
 80093ea:	280f      	cmp	r0, #15
 80093ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80093f0:	eb09 0207 	add.w	r2, r9, r7
 80093f4:	f240 8109 	bls.w	800960a <_realloc_r+0x2e6>
 80093f8:	eb09 0108 	add.w	r1, r9, r8
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	ea43 0308 	orr.w	r3, r3, r8
 8009404:	f040 0001 	orr.w	r0, r0, #1
 8009408:	f8c9 3004 	str.w	r3, [r9, #4]
 800940c:	6048      	str	r0, [r1, #4]
 800940e:	6853      	ldr	r3, [r2, #4]
 8009410:	f043 0301 	orr.w	r3, r3, #1
 8009414:	6053      	str	r3, [r2, #4]
 8009416:	3108      	adds	r1, #8
 8009418:	4650      	mov	r0, sl
 800941a:	f7ff fc47 	bl	8008cac <_free_r>
 800941e:	4650      	mov	r0, sl
 8009420:	f7ff ff72 	bl	8009308 <__malloc_unlock>
 8009424:	f109 0708 	add.w	r7, r9, #8
 8009428:	e79d      	b.n	8009366 <_realloc_r+0x42>
 800942a:	2300      	movs	r3, #0
 800942c:	4619      	mov	r1, r3
 800942e:	07e8      	lsls	r0, r5, #31
 8009430:	f100 8084 	bmi.w	800953c <_realloc_r+0x218>
 8009434:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009438:	eba9 0505 	sub.w	r5, r9, r5
 800943c:	6868      	ldr	r0, [r5, #4]
 800943e:	f020 0003 	bic.w	r0, r0, #3
 8009442:	4430      	add	r0, r6
 8009444:	2900      	cmp	r1, #0
 8009446:	d076      	beq.n	8009536 <_realloc_r+0x212>
 8009448:	4571      	cmp	r1, lr
 800944a:	d150      	bne.n	80094ee <_realloc_r+0x1ca>
 800944c:	4403      	add	r3, r0
 800944e:	f108 0110 	add.w	r1, r8, #16
 8009452:	428b      	cmp	r3, r1
 8009454:	db6f      	blt.n	8009536 <_realloc_r+0x212>
 8009456:	462f      	mov	r7, r5
 8009458:	68ea      	ldr	r2, [r5, #12]
 800945a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800945e:	60ca      	str	r2, [r1, #12]
 8009460:	6091      	str	r1, [r2, #8]
 8009462:	1f32      	subs	r2, r6, #4
 8009464:	2a24      	cmp	r2, #36	; 0x24
 8009466:	d83b      	bhi.n	80094e0 <_realloc_r+0x1bc>
 8009468:	2a13      	cmp	r2, #19
 800946a:	d936      	bls.n	80094da <_realloc_r+0x1b6>
 800946c:	6821      	ldr	r1, [r4, #0]
 800946e:	60a9      	str	r1, [r5, #8]
 8009470:	6861      	ldr	r1, [r4, #4]
 8009472:	60e9      	str	r1, [r5, #12]
 8009474:	2a1b      	cmp	r2, #27
 8009476:	d81c      	bhi.n	80094b2 <_realloc_r+0x18e>
 8009478:	f105 0210 	add.w	r2, r5, #16
 800947c:	f104 0108 	add.w	r1, r4, #8
 8009480:	6808      	ldr	r0, [r1, #0]
 8009482:	6010      	str	r0, [r2, #0]
 8009484:	6848      	ldr	r0, [r1, #4]
 8009486:	6050      	str	r0, [r2, #4]
 8009488:	6889      	ldr	r1, [r1, #8]
 800948a:	6091      	str	r1, [r2, #8]
 800948c:	eb05 0208 	add.w	r2, r5, r8
 8009490:	eba3 0308 	sub.w	r3, r3, r8
 8009494:	f043 0301 	orr.w	r3, r3, #1
 8009498:	f8cb 2008 	str.w	r2, [fp, #8]
 800949c:	6053      	str	r3, [r2, #4]
 800949e:	686b      	ldr	r3, [r5, #4]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	ea43 0308 	orr.w	r3, r3, r8
 80094a8:	606b      	str	r3, [r5, #4]
 80094aa:	4650      	mov	r0, sl
 80094ac:	f7ff ff2c 	bl	8009308 <__malloc_unlock>
 80094b0:	e759      	b.n	8009366 <_realloc_r+0x42>
 80094b2:	68a1      	ldr	r1, [r4, #8]
 80094b4:	6129      	str	r1, [r5, #16]
 80094b6:	68e1      	ldr	r1, [r4, #12]
 80094b8:	6169      	str	r1, [r5, #20]
 80094ba:	2a24      	cmp	r2, #36	; 0x24
 80094bc:	bf01      	itttt	eq
 80094be:	6922      	ldreq	r2, [r4, #16]
 80094c0:	61aa      	streq	r2, [r5, #24]
 80094c2:	6960      	ldreq	r0, [r4, #20]
 80094c4:	61e8      	streq	r0, [r5, #28]
 80094c6:	bf19      	ittee	ne
 80094c8:	f105 0218 	addne.w	r2, r5, #24
 80094cc:	f104 0110 	addne.w	r1, r4, #16
 80094d0:	f105 0220 	addeq.w	r2, r5, #32
 80094d4:	f104 0118 	addeq.w	r1, r4, #24
 80094d8:	e7d2      	b.n	8009480 <_realloc_r+0x15c>
 80094da:	463a      	mov	r2, r7
 80094dc:	4621      	mov	r1, r4
 80094de:	e7cf      	b.n	8009480 <_realloc_r+0x15c>
 80094e0:	4621      	mov	r1, r4
 80094e2:	4638      	mov	r0, r7
 80094e4:	9301      	str	r3, [sp, #4]
 80094e6:	f7ff feee 	bl	80092c6 <memmove>
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	e7ce      	b.n	800948c <_realloc_r+0x168>
 80094ee:	18c7      	adds	r7, r0, r3
 80094f0:	45b8      	cmp	r8, r7
 80094f2:	dc20      	bgt.n	8009536 <_realloc_r+0x212>
 80094f4:	68cb      	ldr	r3, [r1, #12]
 80094f6:	688a      	ldr	r2, [r1, #8]
 80094f8:	60d3      	str	r3, [r2, #12]
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	4628      	mov	r0, r5
 80094fe:	68eb      	ldr	r3, [r5, #12]
 8009500:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009504:	60d3      	str	r3, [r2, #12]
 8009506:	609a      	str	r2, [r3, #8]
 8009508:	1f32      	subs	r2, r6, #4
 800950a:	2a24      	cmp	r2, #36	; 0x24
 800950c:	d842      	bhi.n	8009594 <_realloc_r+0x270>
 800950e:	2a13      	cmp	r2, #19
 8009510:	d93e      	bls.n	8009590 <_realloc_r+0x26c>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	60ab      	str	r3, [r5, #8]
 8009516:	6863      	ldr	r3, [r4, #4]
 8009518:	60eb      	str	r3, [r5, #12]
 800951a:	2a1b      	cmp	r2, #27
 800951c:	d824      	bhi.n	8009568 <_realloc_r+0x244>
 800951e:	f105 0010 	add.w	r0, r5, #16
 8009522:	f104 0308 	add.w	r3, r4, #8
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	6002      	str	r2, [r0, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	6042      	str	r2, [r0, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	6083      	str	r3, [r0, #8]
 8009532:	46a9      	mov	r9, r5
 8009534:	e757      	b.n	80093e6 <_realloc_r+0xc2>
 8009536:	4580      	cmp	r8, r0
 8009538:	4607      	mov	r7, r0
 800953a:	dddf      	ble.n	80094fc <_realloc_r+0x1d8>
 800953c:	4611      	mov	r1, r2
 800953e:	4650      	mov	r0, sl
 8009540:	f7ff fca8 	bl	8008e94 <_malloc_r>
 8009544:	4607      	mov	r7, r0
 8009546:	2800      	cmp	r0, #0
 8009548:	d0af      	beq.n	80094aa <_realloc_r+0x186>
 800954a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	f1a0 0208 	sub.w	r2, r0, #8
 8009556:	444b      	add	r3, r9
 8009558:	429a      	cmp	r2, r3
 800955a:	d11f      	bne.n	800959c <_realloc_r+0x278>
 800955c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009560:	f027 0703 	bic.w	r7, r7, #3
 8009564:	4437      	add	r7, r6
 8009566:	e73e      	b.n	80093e6 <_realloc_r+0xc2>
 8009568:	68a3      	ldr	r3, [r4, #8]
 800956a:	612b      	str	r3, [r5, #16]
 800956c:	68e3      	ldr	r3, [r4, #12]
 800956e:	616b      	str	r3, [r5, #20]
 8009570:	2a24      	cmp	r2, #36	; 0x24
 8009572:	bf01      	itttt	eq
 8009574:	6923      	ldreq	r3, [r4, #16]
 8009576:	61ab      	streq	r3, [r5, #24]
 8009578:	6962      	ldreq	r2, [r4, #20]
 800957a:	61ea      	streq	r2, [r5, #28]
 800957c:	bf19      	ittee	ne
 800957e:	f105 0018 	addne.w	r0, r5, #24
 8009582:	f104 0310 	addne.w	r3, r4, #16
 8009586:	f105 0020 	addeq.w	r0, r5, #32
 800958a:	f104 0318 	addeq.w	r3, r4, #24
 800958e:	e7ca      	b.n	8009526 <_realloc_r+0x202>
 8009590:	4623      	mov	r3, r4
 8009592:	e7c8      	b.n	8009526 <_realloc_r+0x202>
 8009594:	4621      	mov	r1, r4
 8009596:	f7ff fe96 	bl	80092c6 <memmove>
 800959a:	e7ca      	b.n	8009532 <_realloc_r+0x20e>
 800959c:	1f32      	subs	r2, r6, #4
 800959e:	2a24      	cmp	r2, #36	; 0x24
 80095a0:	d82d      	bhi.n	80095fe <_realloc_r+0x2da>
 80095a2:	2a13      	cmp	r2, #19
 80095a4:	d928      	bls.n	80095f8 <_realloc_r+0x2d4>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	6863      	ldr	r3, [r4, #4]
 80095ac:	6043      	str	r3, [r0, #4]
 80095ae:	2a1b      	cmp	r2, #27
 80095b0:	d80e      	bhi.n	80095d0 <_realloc_r+0x2ac>
 80095b2:	f100 0308 	add.w	r3, r0, #8
 80095b6:	f104 0208 	add.w	r2, r4, #8
 80095ba:	6811      	ldr	r1, [r2, #0]
 80095bc:	6019      	str	r1, [r3, #0]
 80095be:	6851      	ldr	r1, [r2, #4]
 80095c0:	6059      	str	r1, [r3, #4]
 80095c2:	6892      	ldr	r2, [r2, #8]
 80095c4:	609a      	str	r2, [r3, #8]
 80095c6:	4621      	mov	r1, r4
 80095c8:	4650      	mov	r0, sl
 80095ca:	f7ff fb6f 	bl	8008cac <_free_r>
 80095ce:	e76c      	b.n	80094aa <_realloc_r+0x186>
 80095d0:	68a3      	ldr	r3, [r4, #8]
 80095d2:	6083      	str	r3, [r0, #8]
 80095d4:	68e3      	ldr	r3, [r4, #12]
 80095d6:	60c3      	str	r3, [r0, #12]
 80095d8:	2a24      	cmp	r2, #36	; 0x24
 80095da:	bf01      	itttt	eq
 80095dc:	6923      	ldreq	r3, [r4, #16]
 80095de:	6103      	streq	r3, [r0, #16]
 80095e0:	6961      	ldreq	r1, [r4, #20]
 80095e2:	6141      	streq	r1, [r0, #20]
 80095e4:	bf19      	ittee	ne
 80095e6:	f100 0310 	addne.w	r3, r0, #16
 80095ea:	f104 0210 	addne.w	r2, r4, #16
 80095ee:	f100 0318 	addeq.w	r3, r0, #24
 80095f2:	f104 0218 	addeq.w	r2, r4, #24
 80095f6:	e7e0      	b.n	80095ba <_realloc_r+0x296>
 80095f8:	4603      	mov	r3, r0
 80095fa:	4622      	mov	r2, r4
 80095fc:	e7dd      	b.n	80095ba <_realloc_r+0x296>
 80095fe:	4621      	mov	r1, r4
 8009600:	f7ff fe61 	bl	80092c6 <memmove>
 8009604:	e7df      	b.n	80095c6 <_realloc_r+0x2a2>
 8009606:	4637      	mov	r7, r6
 8009608:	e6ed      	b.n	80093e6 <_realloc_r+0xc2>
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	431f      	orrs	r7, r3
 8009610:	f8c9 7004 	str.w	r7, [r9, #4]
 8009614:	6853      	ldr	r3, [r2, #4]
 8009616:	f043 0301 	orr.w	r3, r3, #1
 800961a:	6053      	str	r3, [r2, #4]
 800961c:	e6ff      	b.n	800941e <_realloc_r+0xfa>
 800961e:	bf00      	nop
 8009620:	20000108 	.word	0x20000108

08009624 <_sbrk_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4c06      	ldr	r4, [pc, #24]	; (8009640 <_sbrk_r+0x1c>)
 8009628:	2300      	movs	r3, #0
 800962a:	4605      	mov	r5, r0
 800962c:	4608      	mov	r0, r1
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	f000 f8d2 	bl	80097d8 <_sbrk>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_sbrk_r+0x1a>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	b103      	cbz	r3, 800963e <_sbrk_r+0x1a>
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	20003f4c 	.word	0x20003f4c

08009644 <_raise_r>:
 8009644:	291f      	cmp	r1, #31
 8009646:	b538      	push	{r3, r4, r5, lr}
 8009648:	4604      	mov	r4, r0
 800964a:	460d      	mov	r5, r1
 800964c:	d904      	bls.n	8009658 <_raise_r+0x14>
 800964e:	2316      	movs	r3, #22
 8009650:	6003      	str	r3, [r0, #0]
 8009652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800965a:	b112      	cbz	r2, 8009662 <_raise_r+0x1e>
 800965c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009660:	b94b      	cbnz	r3, 8009676 <_raise_r+0x32>
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f830 	bl	80096c8 <_getpid_r>
 8009668:	462a      	mov	r2, r5
 800966a:	4601      	mov	r1, r0
 800966c:	4620      	mov	r0, r4
 800966e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009672:	f000 b817 	b.w	80096a4 <_kill_r>
 8009676:	2b01      	cmp	r3, #1
 8009678:	d00a      	beq.n	8009690 <_raise_r+0x4c>
 800967a:	1c59      	adds	r1, r3, #1
 800967c:	d103      	bne.n	8009686 <_raise_r+0x42>
 800967e:	2316      	movs	r3, #22
 8009680:	6003      	str	r3, [r0, #0]
 8009682:	2001      	movs	r0, #1
 8009684:	bd38      	pop	{r3, r4, r5, pc}
 8009686:	2400      	movs	r4, #0
 8009688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800968c:	4628      	mov	r0, r5
 800968e:	4798      	blx	r3
 8009690:	2000      	movs	r0, #0
 8009692:	bd38      	pop	{r3, r4, r5, pc}

08009694 <raise>:
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <raise+0xc>)
 8009696:	4601      	mov	r1, r0
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f7ff bfd3 	b.w	8009644 <_raise_r>
 800969e:	bf00      	nop
 80096a0:	20000014 	.word	0x20000014

080096a4 <_kill_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4c07      	ldr	r4, [pc, #28]	; (80096c4 <_kill_r+0x20>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4605      	mov	r5, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	f000 f889 	bl	80097c8 <_kill>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d102      	bne.n	80096c0 <_kill_r+0x1c>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	b103      	cbz	r3, 80096c0 <_kill_r+0x1c>
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	bd38      	pop	{r3, r4, r5, pc}
 80096c2:	bf00      	nop
 80096c4:	20003f4c 	.word	0x20003f4c

080096c8 <_getpid_r>:
 80096c8:	f000 b876 	b.w	80097b8 <_getpid>

080096cc <__register_exitproc>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	4d35      	ldr	r5, [pc, #212]	; (80097a8 <__register_exitproc+0xdc>)
 80096d2:	4680      	mov	r8, r0
 80096d4:	6828      	ldr	r0, [r5, #0]
 80096d6:	4699      	mov	r9, r3
 80096d8:	460f      	mov	r7, r1
 80096da:	4692      	mov	sl, r2
 80096dc:	f7ff fbc6 	bl	8008e6c <__retarget_lock_acquire_recursive>
 80096e0:	4b32      	ldr	r3, [pc, #200]	; (80097ac <__register_exitproc+0xe0>)
 80096e2:	681e      	ldr	r6, [r3, #0]
 80096e4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80096e6:	b93c      	cbnz	r4, 80096f8 <__register_exitproc+0x2c>
 80096e8:	4b31      	ldr	r3, [pc, #196]	; (80097b0 <__register_exitproc+0xe4>)
 80096ea:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 80096ee:	64b4      	str	r4, [r6, #72]	; 0x48
 80096f0:	b113      	cbz	r3, 80096f8 <__register_exitproc+0x2c>
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 80096f8:	6863      	ldr	r3, [r4, #4]
 80096fa:	2b1f      	cmp	r3, #31
 80096fc:	dd46      	ble.n	800978c <__register_exitproc+0xc0>
 80096fe:	4b2d      	ldr	r3, [pc, #180]	; (80097b4 <__register_exitproc+0xe8>)
 8009700:	b933      	cbnz	r3, 8009710 <__register_exitproc+0x44>
 8009702:	6828      	ldr	r0, [r5, #0]
 8009704:	f7ff fbb4 	bl	8008e70 <__retarget_lock_release_recursive>
 8009708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009710:	208c      	movs	r0, #140	; 0x8c
 8009712:	f7ff fbaf 	bl	8008e74 <malloc>
 8009716:	4604      	mov	r4, r0
 8009718:	2800      	cmp	r0, #0
 800971a:	d0f2      	beq.n	8009702 <__register_exitproc+0x36>
 800971c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800971e:	6003      	str	r3, [r0, #0]
 8009720:	2200      	movs	r2, #0
 8009722:	6042      	str	r2, [r0, #4]
 8009724:	64b0      	str	r0, [r6, #72]	; 0x48
 8009726:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800972a:	f1b8 0f00 	cmp.w	r8, #0
 800972e:	d021      	beq.n	8009774 <__register_exitproc+0xa8>
 8009730:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009734:	f7ff fb9e 	bl	8008e74 <malloc>
 8009738:	b390      	cbz	r0, 80097a0 <__register_exitproc+0xd4>
 800973a:	2300      	movs	r3, #0
 800973c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8009740:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8009744:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8009748:	6862      	ldr	r2, [r4, #4]
 800974a:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 800974e:	2301      	movs	r3, #1
 8009750:	4093      	lsls	r3, r2
 8009752:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8009756:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800975a:	431a      	orrs	r2, r3
 800975c:	f1b8 0f02 	cmp.w	r8, #2
 8009760:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8009764:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 8009768:	bf02      	ittt	eq
 800976a:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800976e:	4313      	orreq	r3, r2
 8009770:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8009774:	6863      	ldr	r3, [r4, #4]
 8009776:	6828      	ldr	r0, [r5, #0]
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	3302      	adds	r3, #2
 800977c:	6062      	str	r2, [r4, #4]
 800977e:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8009782:	f7ff fb75 	bl	8008e70 <__retarget_lock_release_recursive>
 8009786:	2000      	movs	r0, #0
 8009788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978c:	f1b8 0f00 	cmp.w	r8, #0
 8009790:	d0f0      	beq.n	8009774 <__register_exitproc+0xa8>
 8009792:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009796:	2800      	cmp	r0, #0
 8009798:	d1d6      	bne.n	8009748 <__register_exitproc+0x7c>
 800979a:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <__register_exitproc+0xe8>)
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1c7      	bne.n	8009730 <__register_exitproc+0x64>
 80097a0:	6828      	ldr	r0, [r5, #0]
 80097a2:	f7ff fb64 	bl	8008e6e <__retarget_lock_release>
 80097a6:	e7af      	b.n	8009708 <__register_exitproc+0x3c>
 80097a8:	20000518 	.word	0x20000518
 80097ac:	0800a778 	.word	0x0800a778
 80097b0:	0800a77c 	.word	0x0800a77c
 80097b4:	08008e75 	.word	0x08008e75

080097b8 <_getpid>:
 80097b8:	4b02      	ldr	r3, [pc, #8]	; (80097c4 <_getpid+0xc>)
 80097ba:	2258      	movs	r2, #88	; 0x58
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097c2:	4770      	bx	lr
 80097c4:	20003f4c 	.word	0x20003f4c

080097c8 <_kill>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <_kill+0xc>)
 80097ca:	2258      	movs	r2, #88	; 0x58
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097d2:	4770      	bx	lr
 80097d4:	20003f4c 	.word	0x20003f4c

080097d8 <_sbrk>:
 80097d8:	4b04      	ldr	r3, [pc, #16]	; (80097ec <_sbrk+0x14>)
 80097da:	6819      	ldr	r1, [r3, #0]
 80097dc:	4602      	mov	r2, r0
 80097de:	b909      	cbnz	r1, 80097e4 <_sbrk+0xc>
 80097e0:	4903      	ldr	r1, [pc, #12]	; (80097f0 <_sbrk+0x18>)
 80097e2:	6019      	str	r1, [r3, #0]
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	4402      	add	r2, r0
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	4770      	bx	lr
 80097ec:	20003f3c 	.word	0x20003f3c
 80097f0:	20003f50 	.word	0x20003f50

080097f4 <_exit>:
 80097f4:	e7fe      	b.n	80097f4 <_exit>
	...

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
