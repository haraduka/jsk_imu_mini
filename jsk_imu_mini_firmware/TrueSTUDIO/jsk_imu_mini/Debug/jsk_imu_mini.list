
jsk_imu_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a1c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000108  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000398  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08009ce4  08009ce4  00019ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000518  20000000  08009cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003954  20000518  0800a208  00020518  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e6c  0800a208  00023e6c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 11 .debug_line   00009d67  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00035e48  00000000  00000000  0002a2af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000570a  00000000  00000000  000600f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00065808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017f0  00000000  00000000  000667f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00009145  00000000  00000000  00067fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000ff5d  00000000  00000000  00071125  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fa  00000000  00000000  00081082  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000045b4  00000000  00000000  0008117c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  00085730  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  0008576c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000518 	.word	0x20000518
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008bcc 	.word	0x08008bcc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000051c 	.word	0x2000051c
 8000204:	08008bcc 	.word	0x08008bcc

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800023c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000240:	f001 b8f6 	b.w	8001430 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	468c      	mov	ip, r1
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	9e08      	ldr	r6, [sp, #32]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d151      	bne.n	8000310 <__udivmoddi4+0xb4>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d96d      	bls.n	800034e <__udivmoddi4+0xf2>
 8000272:	fab2 fe82 	clz	lr, r2
 8000276:	f1be 0f00 	cmp.w	lr, #0
 800027a:	d00b      	beq.n	8000294 <__udivmoddi4+0x38>
 800027c:	f1ce 0c20 	rsb	ip, lr, #32
 8000280:	fa01 f50e 	lsl.w	r5, r1, lr
 8000284:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000288:	fa02 f70e 	lsl.w	r7, r2, lr
 800028c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000290:	fa00 f40e 	lsl.w	r4, r0, lr
 8000294:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	fbbc f8fa 	udiv	r8, ip, sl
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fb0a cc18 	mls	ip, sl, r8, ip
 80002a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002aa:	fb08 f309 	mul.w	r3, r8, r9
 80002ae:	42ab      	cmp	r3, r5
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x6c>
 80002b2:	19ed      	adds	r5, r5, r7
 80002b4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002b8:	f080 8123 	bcs.w	8000502 <__udivmoddi4+0x2a6>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	f240 8120 	bls.w	8000502 <__udivmoddi4+0x2a6>
 80002c2:	f1a8 0802 	sub.w	r8, r8, #2
 80002c6:	443d      	add	r5, r7
 80002c8:	1aed      	subs	r5, r5, r3
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb5 f0fa 	udiv	r0, r5, sl
 80002d0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d8:	fb00 f909 	mul.w	r9, r0, r9
 80002dc:	45a1      	cmp	r9, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x98>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 810a 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80002ea:	45a1      	cmp	r9, r4
 80002ec:	f240 8107 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	eba4 0409 	sub.w	r4, r4, r9
 80002f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d061      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000302:	fa24 f40e 	lsr.w	r4, r4, lr
 8000306:	2300      	movs	r3, #0
 8000308:	6034      	str	r4, [r6, #0]
 800030a:	6073      	str	r3, [r6, #4]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xc8>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d054      	beq.n	80003c2 <__udivmoddi4+0x166>
 8000318:	2100      	movs	r1, #0
 800031a:	e886 0021 	stmia.w	r6, {r0, r5}
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	f040 808e 	bne.w	800044a <__udivmoddi4+0x1ee>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xdc>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2d0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0503 	sbc.w	r5, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	46ac      	mov	ip, r5
 8000342:	2e00      	cmp	r6, #0
 8000344:	d03f      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000346:	e886 1010 	stmia.w	r6, {r4, ip}
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	b912      	cbnz	r2, 8000356 <__udivmoddi4+0xfa>
 8000350:	2701      	movs	r7, #1
 8000352:	fbb7 f7f2 	udiv	r7, r7, r2
 8000356:	fab7 fe87 	clz	lr, r7
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d134      	bne.n	80003ca <__udivmoddi4+0x16e>
 8000360:	1beb      	subs	r3, r5, r7
 8000362:	0c3a      	lsrs	r2, r7, #16
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb3 f8f2 	udiv	r8, r3, r2
 800036e:	0c25      	lsrs	r5, r4, #16
 8000370:	fb02 3318 	mls	r3, r2, r8, r3
 8000374:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000378:	fb0c f308 	mul.w	r3, ip, r8
 800037c:	42ab      	cmp	r3, r5
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x134>
 8000380:	19ed      	adds	r5, r5, r7
 8000382:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x132>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f200 80d1 	bhi.w	8000530 <__udivmoddi4+0x2d4>
 800038e:	4680      	mov	r8, r0
 8000390:	1aed      	subs	r5, r5, r3
 8000392:	b2a3      	uxth	r3, r4
 8000394:	fbb5 f0f2 	udiv	r0, r5, r2
 8000398:	fb02 5510 	mls	r5, r2, r0, r5
 800039c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003a0:	fb0c fc00 	mul.w	ip, ip, r0
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x15c>
 80003a8:	19e4      	adds	r4, r4, r7
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x15a>
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	f200 80b8 	bhi.w	8000526 <__udivmoddi4+0x2ca>
 80003b6:	4618      	mov	r0, r3
 80003b8:	eba4 040c 	sub.w	r4, r4, ip
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	e79d      	b.n	80002fe <__udivmoddi4+0xa2>
 80003c2:	4631      	mov	r1, r6
 80003c4:	4630      	mov	r0, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1ce 0420 	rsb	r4, lr, #32
 80003ce:	fa05 f30e 	lsl.w	r3, r5, lr
 80003d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003d6:	fa20 f804 	lsr.w	r8, r0, r4
 80003da:	0c3a      	lsrs	r2, r7, #16
 80003dc:	fa25 f404 	lsr.w	r4, r5, r4
 80003e0:	ea48 0803 	orr.w	r8, r8, r3
 80003e4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ec:	fb02 4411 	mls	r4, r2, r1, r4
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003f8:	fb01 f30c 	mul.w	r3, r1, ip
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1bc>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800040a:	f080 808a 	bcs.w	8000522 <__udivmoddi4+0x2c6>
 800040e:	42ab      	cmp	r3, r5
 8000410:	f240 8087 	bls.w	8000522 <__udivmoddi4+0x2c6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	1aeb      	subs	r3, r5, r3
 800041a:	fa1f f588 	uxth.w	r5, r8
 800041e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000422:	fb02 3310 	mls	r3, r2, r0, r3
 8000426:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042a:	fb00 f30c 	mul.w	r3, r0, ip
 800042e:	42ab      	cmp	r3, r5
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1e6>
 8000432:	19ed      	adds	r5, r5, r7
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000438:	d26f      	bcs.n	800051a <__udivmoddi4+0x2be>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d96d      	bls.n	800051a <__udivmoddi4+0x2be>
 800043e:	3802      	subs	r0, #2
 8000440:	443d      	add	r5, r7
 8000442:	1aeb      	subs	r3, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e78f      	b.n	800036a <__udivmoddi4+0x10e>
 800044a:	f1c1 0720 	rsb	r7, r1, #32
 800044e:	fa22 f807 	lsr.w	r8, r2, r7
 8000452:	408b      	lsls	r3, r1
 8000454:	fa05 f401 	lsl.w	r4, r5, r1
 8000458:	ea48 0303 	orr.w	r3, r8, r3
 800045c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000460:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000464:	40fd      	lsrs	r5, r7
 8000466:	ea4e 0e04 	orr.w	lr, lr, r4
 800046a:	fbb5 f9fc 	udiv	r9, r5, ip
 800046e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000472:	fb0c 5519 	mls	r5, ip, r9, r5
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800047e:	fb09 f408 	mul.w	r4, r9, r8
 8000482:	42ac      	cmp	r4, r5
 8000484:	fa02 f201 	lsl.w	r2, r2, r1
 8000488:	fa00 fa01 	lsl.w	sl, r0, r1
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x244>
 800048e:	18ed      	adds	r5, r5, r3
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000494:	d243      	bcs.n	800051e <__udivmoddi4+0x2c2>
 8000496:	42ac      	cmp	r4, r5
 8000498:	d941      	bls.n	800051e <__udivmoddi4+0x2c2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	441d      	add	r5, r3
 80004a0:	1b2d      	subs	r5, r5, r4
 80004a2:	fa1f fe8e 	uxth.w	lr, lr
 80004a6:	fbb5 f0fc 	udiv	r0, r5, ip
 80004aa:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x26e>
 80004ba:	18e4      	adds	r4, r4, r3
 80004bc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004c0:	d229      	bcs.n	8000516 <__udivmoddi4+0x2ba>
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d927      	bls.n	8000516 <__udivmoddi4+0x2ba>
 80004c6:	3802      	subs	r0, #2
 80004c8:	441c      	add	r4, r3
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba4 0408 	sub.w	r4, r4, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	464d      	mov	r5, r9
 80004dc:	d315      	bcc.n	800050a <__udivmoddi4+0x2ae>
 80004de:	d012      	beq.n	8000506 <__udivmoddi4+0x2aa>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x29c>
 80004e2:	ebba 030e 	subs.w	r3, sl, lr
 80004e6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40cb      	lsrs	r3, r1
 80004f0:	431f      	orrs	r7, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	6037      	str	r7, [r6, #0]
 80004f6:	6074      	str	r4, [r6, #4]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	4618      	mov	r0, r3
 8000500:	e6f8      	b.n	80002f4 <__udivmoddi4+0x98>
 8000502:	4690      	mov	r8, r2
 8000504:	e6e0      	b.n	80002c8 <__udivmoddi4+0x6c>
 8000506:	45c2      	cmp	sl, r8
 8000508:	d2ea      	bcs.n	80004e0 <__udivmoddi4+0x284>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb69 0503 	sbc.w	r5, r9, r3
 8000512:	3801      	subs	r0, #1
 8000514:	e7e4      	b.n	80004e0 <__udivmoddi4+0x284>
 8000516:	4628      	mov	r0, r5
 8000518:	e7d7      	b.n	80004ca <__udivmoddi4+0x26e>
 800051a:	4640      	mov	r0, r8
 800051c:	e791      	b.n	8000442 <__udivmoddi4+0x1e6>
 800051e:	4681      	mov	r9, r0
 8000520:	e7be      	b.n	80004a0 <__udivmoddi4+0x244>
 8000522:	4601      	mov	r1, r0
 8000524:	e778      	b.n	8000418 <__udivmoddi4+0x1bc>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e745      	b.n	80003b8 <__udivmoddi4+0x15c>
 800052c:	4608      	mov	r0, r1
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xe6>
 8000530:	f1a8 0802 	sub.w	r8, r8, #2
 8000534:	443d      	add	r5, r7
 8000536:	e72b      	b.n	8000390 <__udivmoddi4+0x134>

08000538 <selfrel_offset31>:
 8000538:	6803      	ldr	r3, [r0, #0]
 800053a:	005a      	lsls	r2, r3, #1
 800053c:	bf4c      	ite	mi
 800053e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000542:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000546:	4418      	add	r0, r3
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <search_EIT_table>:
 800054c:	b361      	cbz	r1, 80005a8 <search_EIT_table+0x5c>
 800054e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000552:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8000556:	4690      	mov	r8, r2
 8000558:	4606      	mov	r6, r0
 800055a:	46d1      	mov	r9, sl
 800055c:	2700      	movs	r7, #0
 800055e:	eb07 0409 	add.w	r4, r7, r9
 8000562:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000566:	1064      	asrs	r4, r4, #1
 8000568:	00e5      	lsls	r5, r4, #3
 800056a:	1971      	adds	r1, r6, r5
 800056c:	4608      	mov	r0, r1
 800056e:	f7ff ffe3 	bl	8000538 <selfrel_offset31>
 8000572:	45a2      	cmp	sl, r4
 8000574:	4683      	mov	fp, r0
 8000576:	f105 0008 	add.w	r0, r5, #8
 800057a:	4430      	add	r0, r6
 800057c:	d009      	beq.n	8000592 <search_EIT_table+0x46>
 800057e:	f7ff ffdb 	bl	8000538 <selfrel_offset31>
 8000582:	45c3      	cmp	fp, r8
 8000584:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000588:	d805      	bhi.n	8000596 <search_EIT_table+0x4a>
 800058a:	4540      	cmp	r0, r8
 800058c:	d209      	bcs.n	80005a2 <search_EIT_table+0x56>
 800058e:	1c67      	adds	r7, r4, #1
 8000590:	e7e5      	b.n	800055e <search_EIT_table+0x12>
 8000592:	45c3      	cmp	fp, r8
 8000594:	d905      	bls.n	80005a2 <search_EIT_table+0x56>
 8000596:	42a7      	cmp	r7, r4
 8000598:	d002      	beq.n	80005a0 <search_EIT_table+0x54>
 800059a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800059e:	e7de      	b.n	800055e <search_EIT_table+0x12>
 80005a0:	2100      	movs	r1, #0
 80005a2:	4608      	mov	r0, r1
 80005a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a8:	4608      	mov	r0, r1
 80005aa:	4770      	bx	lr

080005ac <__gnu_unwind_get_pr_addr>:
 80005ac:	2801      	cmp	r0, #1
 80005ae:	d007      	beq.n	80005c0 <__gnu_unwind_get_pr_addr+0x14>
 80005b0:	2802      	cmp	r0, #2
 80005b2:	d007      	beq.n	80005c4 <__gnu_unwind_get_pr_addr+0x18>
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__gnu_unwind_get_pr_addr+0x1c>)
 80005b6:	2800      	cmp	r0, #0
 80005b8:	bf0c      	ite	eq
 80005ba:	4618      	moveq	r0, r3
 80005bc:	2000      	movne	r0, #0
 80005be:	4770      	bx	lr
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <__gnu_unwind_get_pr_addr+0x20>)
 80005c2:	4770      	bx	lr
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <__gnu_unwind_get_pr_addr+0x24>)
 80005c6:	4770      	bx	lr
 80005c8:	08000cb1 	.word	0x08000cb1
 80005cc:	08000cb5 	.word	0x08000cb5
 80005d0:	08000cb9 	.word	0x08000cb9

080005d4 <get_eit_entry>:
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <get_eit_entry+0x94>)
 80005d8:	b083      	sub	sp, #12
 80005da:	4604      	mov	r4, r0
 80005dc:	1e8d      	subs	r5, r1, #2
 80005de:	b37b      	cbz	r3, 8000640 <get_eit_entry+0x6c>
 80005e0:	a901      	add	r1, sp, #4
 80005e2:	4628      	mov	r0, r5
 80005e4:	f3af 8000 	nop.w
 80005e8:	b320      	cbz	r0, 8000634 <get_eit_entry+0x60>
 80005ea:	9901      	ldr	r1, [sp, #4]
 80005ec:	462a      	mov	r2, r5
 80005ee:	f7ff ffad 	bl	800054c <search_EIT_table>
 80005f2:	4601      	mov	r1, r0
 80005f4:	b1f0      	cbz	r0, 8000634 <get_eit_entry+0x60>
 80005f6:	f7ff ff9f 	bl	8000538 <selfrel_offset31>
 80005fa:	684b      	ldr	r3, [r1, #4]
 80005fc:	64a0      	str	r0, [r4, #72]	; 0x48
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d012      	beq.n	8000628 <get_eit_entry+0x54>
 8000602:	2b00      	cmp	r3, #0
 8000604:	f101 0004 	add.w	r0, r1, #4
 8000608:	db20      	blt.n	800064c <get_eit_entry+0x78>
 800060a:	f7ff ff95 	bl	8000538 <selfrel_offset31>
 800060e:	2300      	movs	r3, #0
 8000610:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000612:	6523      	str	r3, [r4, #80]	; 0x50
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	db1c      	blt.n	8000654 <get_eit_entry+0x80>
 800061a:	f7ff ff8d 	bl	8000538 <selfrel_offset31>
 800061e:	2300      	movs	r3, #0
 8000620:	6120      	str	r0, [r4, #16]
 8000622:	4618      	mov	r0, r3
 8000624:	b003      	add	sp, #12
 8000626:	bd30      	pop	{r4, r5, pc}
 8000628:	2300      	movs	r3, #0
 800062a:	6123      	str	r3, [r4, #16]
 800062c:	2305      	movs	r3, #5
 800062e:	4618      	mov	r0, r3
 8000630:	b003      	add	sp, #12
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	2300      	movs	r3, #0
 8000636:	6123      	str	r3, [r4, #16]
 8000638:	2309      	movs	r3, #9
 800063a:	4618      	mov	r0, r3
 800063c:	b003      	add	sp, #12
 800063e:	bd30      	pop	{r4, r5, pc}
 8000640:	490a      	ldr	r1, [pc, #40]	; (800066c <get_eit_entry+0x98>)
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <get_eit_entry+0x9c>)
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	10c9      	asrs	r1, r1, #3
 8000648:	9101      	str	r1, [sp, #4]
 800064a:	e7cf      	b.n	80005ec <get_eit_entry+0x18>
 800064c:	2301      	movs	r3, #1
 800064e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000650:	6523      	str	r3, [r4, #80]	; 0x50
 8000652:	e7df      	b.n	8000614 <get_eit_entry+0x40>
 8000654:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000658:	f7ff ffa8 	bl	80005ac <__gnu_unwind_get_pr_addr>
 800065c:	2800      	cmp	r0, #0
 800065e:	6120      	str	r0, [r4, #16]
 8000660:	bf14      	ite	ne
 8000662:	2300      	movne	r3, #0
 8000664:	2309      	moveq	r3, #9
 8000666:	e7dc      	b.n	8000622 <get_eit_entry+0x4e>
 8000668:	00000000 	.word	0x00000000
 800066c:	08009ce4 	.word	0x08009ce4
 8000670:	0800994c 	.word	0x0800994c

08000674 <restore_non_core_regs>:
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	07da      	lsls	r2, r3, #31
 8000678:	b510      	push	{r4, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	d406      	bmi.n	800068c <restore_non_core_regs+0x18>
 800067e:	079b      	lsls	r3, r3, #30
 8000680:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000684:	d509      	bpl.n	800069a <restore_non_core_regs+0x26>
 8000686:	f000 fc51 	bl	8000f2c <__gnu_Unwind_Restore_VFP_D>
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	d509      	bpl.n	80006a4 <restore_non_core_regs+0x30>
 8000690:	071a      	lsls	r2, r3, #28
 8000692:	d50e      	bpl.n	80006b2 <restore_non_core_regs+0x3e>
 8000694:	06db      	lsls	r3, r3, #27
 8000696:	d513      	bpl.n	80006c0 <restore_non_core_regs+0x4c>
 8000698:	bd10      	pop	{r4, pc}
 800069a:	f000 fc3f 	bl	8000f1c <__gnu_Unwind_Restore_VFP>
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	0759      	lsls	r1, r3, #29
 80006a2:	d4f5      	bmi.n	8000690 <restore_non_core_regs+0x1c>
 80006a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006a8:	f000 fc48 	bl	8000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	071a      	lsls	r2, r3, #28
 80006b0:	d4f0      	bmi.n	8000694 <restore_non_core_regs+0x20>
 80006b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006b6:	f000 fc49 	bl	8000f4c <__gnu_Unwind_Restore_WMMXD>
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	06db      	lsls	r3, r3, #27
 80006be:	d4eb      	bmi.n	8000698 <restore_non_core_regs+0x24>
 80006c0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c8:	f000 bc84 	b.w	8000fd4 <__gnu_Unwind_Restore_WMMXC>

080006cc <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	b103      	cbz	r3, 80006d2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006d0:	4403      	add	r3, r0
 80006d2:	4618      	mov	r0, r3
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__gnu_unwind_24bit.isra.1>:
 80006d8:	2009      	movs	r0, #9
 80006da:	4770      	bx	lr

080006dc <_Unwind_DebugHook>:
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <unwind_phase2>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	4604      	mov	r4, r0
 80006e4:	460d      	mov	r5, r1
 80006e6:	e008      	b.n	80006fa <unwind_phase2+0x1a>
 80006e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006ea:	6163      	str	r3, [r4, #20]
 80006ec:	462a      	mov	r2, r5
 80006ee:	6923      	ldr	r3, [r4, #16]
 80006f0:	4621      	mov	r1, r4
 80006f2:	2001      	movs	r0, #1
 80006f4:	4798      	blx	r3
 80006f6:	2808      	cmp	r0, #8
 80006f8:	d108      	bne.n	800070c <unwind_phase2+0x2c>
 80006fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006fc:	4620      	mov	r0, r4
 80006fe:	f7ff ff69 	bl	80005d4 <get_eit_entry>
 8000702:	4606      	mov	r6, r0
 8000704:	2800      	cmp	r0, #0
 8000706:	d0ef      	beq.n	80006e8 <unwind_phase2+0x8>
 8000708:	f007 fc56 	bl	8007fb8 <abort>
 800070c:	2807      	cmp	r0, #7
 800070e:	d1fb      	bne.n	8000708 <unwind_phase2+0x28>
 8000710:	4630      	mov	r0, r6
 8000712:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000714:	f7ff ffe2 	bl	80006dc <_Unwind_DebugHook>
 8000718:	1d28      	adds	r0, r5, #4
 800071a:	f000 fbf3 	bl	8000f04 <__restore_core_regs>
 800071e:	bf00      	nop

08000720 <unwind_phase2_forced>:
 8000720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000724:	1d0c      	adds	r4, r1, #4
 8000726:	4605      	mov	r5, r0
 8000728:	4692      	mov	sl, r2
 800072a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800072c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000730:	ae03      	add	r6, sp, #12
 8000732:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000736:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800073c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000740:	ac02      	add	r4, sp, #8
 8000742:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000746:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800074a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800074e:	2300      	movs	r3, #0
 8000750:	4628      	mov	r0, r5
 8000752:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000754:	6023      	str	r3, [r4, #0]
 8000756:	f7ff ff3d 	bl	80005d4 <get_eit_entry>
 800075a:	f1ba 0f00 	cmp.w	sl, #0
 800075e:	4607      	mov	r7, r0
 8000760:	bf14      	ite	ne
 8000762:	260a      	movne	r6, #10
 8000764:	2609      	moveq	r6, #9
 8000766:	b17f      	cbz	r7, 8000788 <unwind_phase2_forced+0x68>
 8000768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800076a:	f046 0110 	orr.w	r1, r6, #16
 800076e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000772:	462a      	mov	r2, r5
 8000774:	6463      	str	r3, [r4, #68]	; 0x44
 8000776:	2001      	movs	r0, #1
 8000778:	462b      	mov	r3, r5
 800077a:	47c0      	blx	r8
 800077c:	bb78      	cbnz	r0, 80007de <unwind_phase2_forced+0xbe>
 800077e:	4638      	mov	r0, r7
 8000780:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000788:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800078a:	616b      	str	r3, [r5, #20]
 800078c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000790:	4621      	mov	r1, r4
 8000792:	a87a      	add	r0, sp, #488	; 0x1e8
 8000794:	f007 fe60 	bl	8008458 <memcpy>
 8000798:	692b      	ldr	r3, [r5, #16]
 800079a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800079c:	4629      	mov	r1, r5
 800079e:	4630      	mov	r0, r6
 80007a0:	4798      	blx	r3
 80007a2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007a4:	4682      	mov	sl, r0
 80007a6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007aa:	4631      	mov	r1, r6
 80007ac:	6463      	str	r3, [r4, #68]	; 0x44
 80007ae:	462a      	mov	r2, r5
 80007b0:	462b      	mov	r3, r5
 80007b2:	2001      	movs	r0, #1
 80007b4:	47c0      	blx	r8
 80007b6:	b990      	cbnz	r0, 80007de <unwind_phase2_forced+0xbe>
 80007b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007bc:	a97a      	add	r1, sp, #488	; 0x1e8
 80007be:	4620      	mov	r0, r4
 80007c0:	f007 fe4a 	bl	8008458 <memcpy>
 80007c4:	f1ba 0f08 	cmp.w	sl, #8
 80007c8:	d106      	bne.n	80007d8 <unwind_phase2_forced+0xb8>
 80007ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007cc:	4628      	mov	r0, r5
 80007ce:	f7ff ff01 	bl	80005d4 <get_eit_entry>
 80007d2:	2609      	movs	r6, #9
 80007d4:	4607      	mov	r7, r0
 80007d6:	e7c6      	b.n	8000766 <unwind_phase2_forced+0x46>
 80007d8:	f1ba 0f07 	cmp.w	sl, #7
 80007dc:	d005      	beq.n	80007ea <unwind_phase2_forced+0xca>
 80007de:	2709      	movs	r7, #9
 80007e0:	4638      	mov	r0, r7
 80007e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	4638      	mov	r0, r7
 80007ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007ee:	f7ff ff75 	bl	80006dc <_Unwind_DebugHook>
 80007f2:	a803      	add	r0, sp, #12
 80007f4:	f000 fb86 	bl	8000f04 <__restore_core_regs>

080007f8 <_Unwind_GetCFA>:
 80007f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007fa:	4770      	bx	lr

080007fc <__gnu_Unwind_RaiseException>:
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000800:	640b      	str	r3, [r1, #64]	; 0x40
 8000802:	1d0e      	adds	r6, r1, #4
 8000804:	460f      	mov	r7, r1
 8000806:	4604      	mov	r4, r0
 8000808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080a:	b0f9      	sub	sp, #484	; 0x1e4
 800080c:	ad01      	add	r5, sp, #4
 800080e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000810:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000814:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000818:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800081c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000820:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000824:	9600      	str	r6, [sp, #0]
 8000826:	e006      	b.n	8000836 <__gnu_Unwind_RaiseException+0x3a>
 8000828:	6923      	ldr	r3, [r4, #16]
 800082a:	466a      	mov	r2, sp
 800082c:	4621      	mov	r1, r4
 800082e:	4798      	blx	r3
 8000830:	2808      	cmp	r0, #8
 8000832:	4605      	mov	r5, r0
 8000834:	d108      	bne.n	8000848 <__gnu_Unwind_RaiseException+0x4c>
 8000836:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000838:	4620      	mov	r0, r4
 800083a:	f7ff fecb 	bl	80005d4 <get_eit_entry>
 800083e:	2800      	cmp	r0, #0
 8000840:	d0f2      	beq.n	8000828 <__gnu_Unwind_RaiseException+0x2c>
 8000842:	2009      	movs	r0, #9
 8000844:	b079      	add	sp, #484	; 0x1e4
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000848:	4668      	mov	r0, sp
 800084a:	f7ff ff13 	bl	8000674 <restore_non_core_regs>
 800084e:	2d06      	cmp	r5, #6
 8000850:	d1f7      	bne.n	8000842 <__gnu_Unwind_RaiseException+0x46>
 8000852:	4639      	mov	r1, r7
 8000854:	4620      	mov	r0, r4
 8000856:	f7ff ff43 	bl	80006e0 <unwind_phase2>
 800085a:	bf00      	nop

0800085c <__gnu_Unwind_ForcedUnwind>:
 800085c:	b430      	push	{r4, r5}
 800085e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000860:	60c1      	str	r1, [r0, #12]
 8000862:	6182      	str	r2, [r0, #24]
 8000864:	4619      	mov	r1, r3
 8000866:	641d      	str	r5, [r3, #64]	; 0x40
 8000868:	2200      	movs	r2, #0
 800086a:	bc30      	pop	{r4, r5}
 800086c:	e758      	b.n	8000720 <unwind_phase2_forced>
 800086e:	bf00      	nop

08000870 <__gnu_Unwind_Resume>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	68c6      	ldr	r6, [r0, #12]
 8000874:	6943      	ldr	r3, [r0, #20]
 8000876:	640b      	str	r3, [r1, #64]	; 0x40
 8000878:	b126      	cbz	r6, 8000884 <__gnu_Unwind_Resume+0x14>
 800087a:	2201      	movs	r2, #1
 800087c:	f7ff ff50 	bl	8000720 <unwind_phase2_forced>
 8000880:	f007 fb9a 	bl	8007fb8 <abort>
 8000884:	6903      	ldr	r3, [r0, #16]
 8000886:	460a      	mov	r2, r1
 8000888:	4604      	mov	r4, r0
 800088a:	460d      	mov	r5, r1
 800088c:	4601      	mov	r1, r0
 800088e:	2002      	movs	r0, #2
 8000890:	4798      	blx	r3
 8000892:	2807      	cmp	r0, #7
 8000894:	d007      	beq.n	80008a6 <__gnu_Unwind_Resume+0x36>
 8000896:	2808      	cmp	r0, #8
 8000898:	d103      	bne.n	80008a2 <__gnu_Unwind_Resume+0x32>
 800089a:	4629      	mov	r1, r5
 800089c:	4620      	mov	r0, r4
 800089e:	f7ff ff1f 	bl	80006e0 <unwind_phase2>
 80008a2:	f007 fb89 	bl	8007fb8 <abort>
 80008a6:	4630      	mov	r0, r6
 80008a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008aa:	f7ff ff17 	bl	80006dc <_Unwind_DebugHook>
 80008ae:	1d28      	adds	r0, r5, #4
 80008b0:	f000 fb28 	bl	8000f04 <__restore_core_regs>

080008b4 <__gnu_Unwind_Resume_or_Rethrow>:
 80008b4:	68c2      	ldr	r2, [r0, #12]
 80008b6:	b11a      	cbz	r2, 80008c0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008b8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008ba:	640a      	str	r2, [r1, #64]	; 0x40
 80008bc:	2200      	movs	r2, #0
 80008be:	e72f      	b.n	8000720 <unwind_phase2_forced>
 80008c0:	e79c      	b.n	80007fc <__gnu_Unwind_RaiseException>
 80008c2:	bf00      	nop

080008c4 <_Unwind_Complete>:
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <_Unwind_DeleteException>:
 80008c8:	6883      	ldr	r3, [r0, #8]
 80008ca:	b113      	cbz	r3, 80008d2 <_Unwind_DeleteException+0xa>
 80008cc:	4601      	mov	r1, r0
 80008ce:	2001      	movs	r0, #1
 80008d0:	4718      	bx	r3
 80008d2:	4770      	bx	lr

080008d4 <_Unwind_VRS_Get>:
 80008d4:	b500      	push	{lr}
 80008d6:	2904      	cmp	r1, #4
 80008d8:	d807      	bhi.n	80008ea <_Unwind_VRS_Get+0x16>
 80008da:	e8df f001 	tbb	[pc, r1]
 80008de:	0903      	.short	0x0903
 80008e0:	0906      	.short	0x0906
 80008e2:	09          	.byte	0x09
 80008e3:	00          	.byte	0x00
 80008e4:	b90b      	cbnz	r3, 80008ea <_Unwind_VRS_Get+0x16>
 80008e6:	2a0f      	cmp	r2, #15
 80008e8:	d905      	bls.n	80008f6 <_Unwind_VRS_Get+0x22>
 80008ea:	2002      	movs	r0, #2
 80008ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f0:	2001      	movs	r0, #1
 80008f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	6853      	ldr	r3, [r2, #4]
 80008fe:	9a01      	ldr	r2, [sp, #4]
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	f85d fb04 	ldr.w	pc, [sp], #4
 8000906:	bf00      	nop

08000908 <_Unwind_GetGR>:
 8000908:	b510      	push	{r4, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	2300      	movs	r3, #0
 800090e:	ac03      	add	r4, sp, #12
 8000910:	460a      	mov	r2, r1
 8000912:	9400      	str	r4, [sp, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff ffdd 	bl	80008d4 <_Unwind_VRS_Get>
 800091a:	9803      	ldr	r0, [sp, #12]
 800091c:	b004      	add	sp, #16
 800091e:	bd10      	pop	{r4, pc}

08000920 <_Unwind_VRS_Set>:
 8000920:	b500      	push	{lr}
 8000922:	2904      	cmp	r1, #4
 8000924:	d807      	bhi.n	8000936 <_Unwind_VRS_Set+0x16>
 8000926:	e8df f001 	tbb	[pc, r1]
 800092a:	0903      	.short	0x0903
 800092c:	0906      	.short	0x0906
 800092e:	09          	.byte	0x09
 800092f:	00          	.byte	0x00
 8000930:	b90b      	cbnz	r3, 8000936 <_Unwind_VRS_Set+0x16>
 8000932:	2a0f      	cmp	r2, #15
 8000934:	d905      	bls.n	8000942 <_Unwind_VRS_Set+0x22>
 8000936:	2002      	movs	r0, #2
 8000938:	f85d fb04 	ldr.w	pc, [sp], #4
 800093c:	2001      	movs	r0, #1
 800093e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000942:	9901      	ldr	r1, [sp, #4]
 8000944:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000948:	6809      	ldr	r1, [r1, #0]
 800094a:	6051      	str	r1, [r2, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000952:	bf00      	nop

08000954 <_Unwind_SetGR>:
 8000954:	b510      	push	{r4, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	ac04      	add	r4, sp, #16
 800095a:	2300      	movs	r3, #0
 800095c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000960:	460a      	mov	r2, r1
 8000962:	9400      	str	r4, [sp, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f7ff ffdb 	bl	8000920 <_Unwind_VRS_Set>
 800096a:	b004      	add	sp, #16
 800096c:	bd10      	pop	{r4, pc}
 800096e:	bf00      	nop

08000970 <__gnu_Unwind_Backtrace>:
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	1d15      	adds	r5, r2, #4
 8000978:	4607      	mov	r7, r0
 800097a:	460e      	mov	r6, r1
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000982:	ac17      	add	r4, sp, #92	; 0x5c
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000992:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800099a:	9516      	str	r5, [sp, #88]	; 0x58
 800099c:	e010      	b.n	80009c0 <__gnu_Unwind_Backtrace+0x50>
 800099e:	a816      	add	r0, sp, #88	; 0x58
 80009a0:	f7ff ffd8 	bl	8000954 <_Unwind_SetGR>
 80009a4:	4631      	mov	r1, r6
 80009a6:	a816      	add	r0, sp, #88	; 0x58
 80009a8:	47b8      	blx	r7
 80009aa:	aa16      	add	r2, sp, #88	; 0x58
 80009ac:	4669      	mov	r1, sp
 80009ae:	b978      	cbnz	r0, 80009d0 <__gnu_Unwind_Backtrace+0x60>
 80009b0:	9b04      	ldr	r3, [sp, #16]
 80009b2:	2008      	movs	r0, #8
 80009b4:	4798      	blx	r3
 80009b6:	2805      	cmp	r0, #5
 80009b8:	4604      	mov	r4, r0
 80009ba:	d00a      	beq.n	80009d2 <__gnu_Unwind_Backtrace+0x62>
 80009bc:	2809      	cmp	r0, #9
 80009be:	d007      	beq.n	80009d0 <__gnu_Unwind_Backtrace+0x60>
 80009c0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009c2:	4668      	mov	r0, sp
 80009c4:	f7ff fe06 	bl	80005d4 <get_eit_entry>
 80009c8:	466a      	mov	r2, sp
 80009ca:	210c      	movs	r1, #12
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d0e6      	beq.n	800099e <__gnu_Unwind_Backtrace+0x2e>
 80009d0:	2409      	movs	r4, #9
 80009d2:	a816      	add	r0, sp, #88	; 0x58
 80009d4:	f7ff fe4e 	bl	8000674 <restore_non_core_regs>
 80009d8:	4620      	mov	r0, r4
 80009da:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009e0 <__gnu_unwind_pr_common>:
 80009e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e4:	460d      	mov	r5, r1
 80009e6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009e8:	b08b      	sub	sp, #44	; 0x2c
 80009ea:	1d0c      	adds	r4, r1, #4
 80009ec:	6809      	ldr	r1, [r1, #0]
 80009ee:	9107      	str	r1, [sp, #28]
 80009f0:	4691      	mov	r9, r2
 80009f2:	9408      	str	r4, [sp, #32]
 80009f4:	f000 0b03 	and.w	fp, r0, #3
 80009f8:	461e      	mov	r6, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d160      	bne.n	8000ac0 <__gnu_unwind_pr_common+0xe0>
 80009fe:	0209      	lsls	r1, r1, #8
 8000a00:	2303      	movs	r3, #3
 8000a02:	9107      	str	r1, [sp, #28]
 8000a04:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a0e:	f1bb 0f02 	cmp.w	fp, #2
 8000a12:	bf08      	it	eq
 8000a14:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a16:	f013 0301 	ands.w	r3, r3, #1
 8000a1a:	d140      	bne.n	8000a9e <__gnu_unwind_pr_common+0xbe>
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f000 0308 	and.w	r3, r0, #8
 8000a22:	9303      	str	r3, [sp, #12]
 8000a24:	f8d4 8000 	ldr.w	r8, [r4]
 8000a28:	f1b8 0f00 	cmp.w	r8, #0
 8000a2c:	d039      	beq.n	8000aa2 <__gnu_unwind_pr_common+0xc2>
 8000a2e:	2e02      	cmp	r6, #2
 8000a30:	d043      	beq.n	8000aba <__gnu_unwind_pr_common+0xda>
 8000a32:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a36:	8867      	ldrh	r7, [r4, #2]
 8000a38:	3404      	adds	r4, #4
 8000a3a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a3c:	f027 0a01 	bic.w	sl, r7, #1
 8000a40:	210f      	movs	r1, #15
 8000a42:	4648      	mov	r0, r9
 8000a44:	449a      	add	sl, r3
 8000a46:	f7ff ff5f 	bl	8000908 <_Unwind_GetGR>
 8000a4a:	4582      	cmp	sl, r0
 8000a4c:	d833      	bhi.n	8000ab6 <__gnu_unwind_pr_common+0xd6>
 8000a4e:	f028 0301 	bic.w	r3, r8, #1
 8000a52:	449a      	add	sl, r3
 8000a54:	4550      	cmp	r0, sl
 8000a56:	bf2c      	ite	cs
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	007f      	lsls	r7, r7, #1
 8000a5e:	f007 0702 	and.w	r7, r7, #2
 8000a62:	f008 0801 	and.w	r8, r8, #1
 8000a66:	ea47 0708 	orr.w	r7, r7, r8
 8000a6a:	2f01      	cmp	r7, #1
 8000a6c:	d03e      	beq.n	8000aec <__gnu_unwind_pr_common+0x10c>
 8000a6e:	d335      	bcc.n	8000adc <__gnu_unwind_pr_common+0xfc>
 8000a70:	2f02      	cmp	r7, #2
 8000a72:	d11c      	bne.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a7a:	9202      	str	r2, [sp, #8]
 8000a7c:	f1bb 0f00 	cmp.w	fp, #0
 8000a80:	d176      	bne.n	8000b70 <__gnu_unwind_pr_common+0x190>
 8000a82:	b128      	cbz	r0, 8000a90 <__gnu_unwind_pr_common+0xb0>
 8000a84:	9903      	ldr	r1, [sp, #12]
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d07e      	beq.n	8000b88 <__gnu_unwind_pr_common+0x1a8>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	f000 80a6 	beq.w	8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db77      	blt.n	8000b84 <__gnu_unwind_pr_common+0x1a4>
 8000a94:	9b02      	ldr	r3, [sp, #8]
 8000a96:	3301      	adds	r3, #1
 8000a98:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a9c:	e7c2      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	2e02      	cmp	r6, #2
 8000aa4:	dd3e      	ble.n	8000b24 <__gnu_unwind_pr_common+0x144>
 8000aa6:	f7ff fe17 	bl	80006d8 <__gnu_unwind_24bit.isra.1>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d040      	beq.n	8000b30 <__gnu_unwind_pr_common+0x150>
 8000aae:	2009      	movs	r0, #9
 8000ab0:	b00b      	add	sp, #44	; 0x2c
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	e7d0      	b.n	8000a5c <__gnu_unwind_pr_common+0x7c>
 8000aba:	6867      	ldr	r7, [r4, #4]
 8000abc:	3408      	adds	r4, #8
 8000abe:	e7bc      	b.n	8000a3a <__gnu_unwind_pr_common+0x5a>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	dca3      	bgt.n	8000a0c <__gnu_unwind_pr_common+0x2c>
 8000ac4:	0c0b      	lsrs	r3, r1, #16
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	0409      	lsls	r1, r1, #16
 8000aca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000ace:	2302      	movs	r3, #2
 8000ad0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000ad4:	9107      	str	r1, [sp, #28]
 8000ad6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ada:	e797      	b.n	8000a0c <__gnu_unwind_pr_common+0x2c>
 8000adc:	f1bb 0f00 	cmp.w	fp, #0
 8000ae0:	d002      	beq.n	8000ae8 <__gnu_unwind_pr_common+0x108>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	f040 80bd 	bne.w	8000c62 <__gnu_unwind_pr_common+0x282>
 8000ae8:	3404      	adds	r4, #4
 8000aea:	e79b      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000aec:	f1bb 0f00 	cmp.w	fp, #0
 8000af0:	d125      	bne.n	8000b3e <__gnu_unwind_pr_common+0x15e>
 8000af2:	b1a8      	cbz	r0, 8000b20 <__gnu_unwind_pr_common+0x140>
 8000af4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000af8:	1c99      	adds	r1, r3, #2
 8000afa:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000afe:	d0d6      	beq.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000b00:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b04:	3301      	adds	r3, #1
 8000b06:	9106      	str	r1, [sp, #24]
 8000b08:	f000 80a3 	beq.w	8000c52 <__gnu_unwind_pr_common+0x272>
 8000b0c:	1d20      	adds	r0, r4, #4
 8000b0e:	f7ff fddd 	bl	80006cc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b12:	ab06      	add	r3, sp, #24
 8000b14:	4601      	mov	r1, r0
 8000b16:	4628      	mov	r0, r5
 8000b18:	f005 fef8 	bl	800690c <__cxa_type_match>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d177      	bne.n	8000c10 <__gnu_unwind_pr_common+0x230>
 8000b20:	3408      	adds	r4, #8
 8000b22:	e77f      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000b24:	a907      	add	r1, sp, #28
 8000b26:	4648      	mov	r0, r9
 8000b28:	f000 faee 	bl	8001108 <__gnu_unwind_execute>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1be      	bne.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000b30:	9b01      	ldr	r3, [sp, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d15c      	bne.n	8000bf0 <__gnu_unwind_pr_common+0x210>
 8000b36:	2008      	movs	r0, #8
 8000b38:	b00b      	add	sp, #44	; 0x2c
 8000b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3e:	210d      	movs	r1, #13
 8000b40:	4648      	mov	r0, r9
 8000b42:	6a2f      	ldr	r7, [r5, #32]
 8000b44:	f7ff fee0 	bl	8000908 <_Unwind_GetGR>
 8000b48:	4287      	cmp	r7, r0
 8000b4a:	d1e9      	bne.n	8000b20 <__gnu_unwind_pr_common+0x140>
 8000b4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d1e6      	bne.n	8000b20 <__gnu_unwind_pr_common+0x140>
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff fcf0 	bl	8000538 <selfrel_offset31>
 8000b58:	210f      	movs	r1, #15
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	4648      	mov	r0, r9
 8000b5e:	f7ff fef9 	bl	8000954 <_Unwind_SetGR>
 8000b62:	4648      	mov	r0, r9
 8000b64:	462a      	mov	r2, r5
 8000b66:	2100      	movs	r1, #0
 8000b68:	f7ff fef4 	bl	8000954 <_Unwind_SetGR>
 8000b6c:	2007      	movs	r0, #7
 8000b6e:	e79f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000b70:	210d      	movs	r1, #13
 8000b72:	4648      	mov	r0, r9
 8000b74:	6a2f      	ldr	r7, [r5, #32]
 8000b76:	f7ff fec7 	bl	8000908 <_Unwind_GetGR>
 8000b7a:	4287      	cmp	r7, r0
 8000b7c:	d058      	beq.n	8000c30 <__gnu_unwind_pr_common+0x250>
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	da87      	bge.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000b84:	3404      	adds	r4, #4
 8000b86:	e785      	b.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000b88:	9b02      	ldr	r3, [sp, #8]
 8000b8a:	b33b      	cbz	r3, 8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000b8c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b90:	1d27      	adds	r7, r4, #4
 8000b92:	f8cd b010 	str.w	fp, [sp, #16]
 8000b96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b9a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b9e:	9605      	str	r6, [sp, #20]
 8000ba0:	46a3      	mov	fp, r4
 8000ba2:	461c      	mov	r4, r3
 8000ba4:	e002      	b.n	8000bac <__gnu_unwind_pr_common+0x1cc>
 8000ba6:	45b2      	cmp	sl, r6
 8000ba8:	46b0      	mov	r8, r6
 8000baa:	d016      	beq.n	8000bda <__gnu_unwind_pr_common+0x1fa>
 8000bac:	4638      	mov	r0, r7
 8000bae:	9406      	str	r4, [sp, #24]
 8000bb0:	f7ff fd8c 	bl	80006cc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bb4:	ab06      	add	r3, sp, #24
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f005 fea6 	bl	800690c <__cxa_type_match>
 8000bc0:	f108 0601 	add.w	r6, r8, #1
 8000bc4:	3704      	adds	r7, #4
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d0ed      	beq.n	8000ba6 <__gnu_unwind_pr_common+0x1c6>
 8000bca:	9b02      	ldr	r3, [sp, #8]
 8000bcc:	9e05      	ldr	r6, [sp, #20]
 8000bce:	4543      	cmp	r3, r8
 8000bd0:	465c      	mov	r4, fp
 8000bd2:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bd6:	d1d2      	bne.n	8000b7e <__gnu_unwind_pr_common+0x19e>
 8000bd8:	e000      	b.n	8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000bda:	465c      	mov	r4, fp
 8000bdc:	4648      	mov	r0, r9
 8000bde:	210d      	movs	r1, #13
 8000be0:	f7ff fe92 	bl	8000908 <_Unwind_GetGR>
 8000be4:	9b06      	ldr	r3, [sp, #24]
 8000be6:	6228      	str	r0, [r5, #32]
 8000be8:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bea:	626b      	str	r3, [r5, #36]	; 0x24
 8000bec:	2006      	movs	r0, #6
 8000bee:	e75f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	f7ff fe88 	bl	8000908 <_Unwind_GetGR>
 8000bf8:	210e      	movs	r1, #14
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4648      	mov	r0, r9
 8000bfe:	f7ff fea9 	bl	8000954 <_Unwind_SetGR>
 8000c02:	4648      	mov	r0, r9
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <__gnu_unwind_pr_common+0x2cc>)
 8000c06:	210f      	movs	r1, #15
 8000c08:	f7ff fea4 	bl	8000954 <_Unwind_SetGR>
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	e74f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c10:	4607      	mov	r7, r0
 8000c12:	210d      	movs	r1, #13
 8000c14:	4648      	mov	r0, r9
 8000c16:	f7ff fe77 	bl	8000908 <_Unwind_GetGR>
 8000c1a:	2f02      	cmp	r7, #2
 8000c1c:	6228      	str	r0, [r5, #32]
 8000c1e:	d11d      	bne.n	8000c5c <__gnu_unwind_pr_common+0x27c>
 8000c20:	462b      	mov	r3, r5
 8000c22:	9a06      	ldr	r2, [sp, #24]
 8000c24:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c28:	626b      	str	r3, [r5, #36]	; 0x24
 8000c2a:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c2c:	2006      	movs	r0, #6
 8000c2e:	e73f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c32:	429c      	cmp	r4, r3
 8000c34:	d1a3      	bne.n	8000b7e <__gnu_unwind_pr_common+0x19e>
 8000c36:	2204      	movs	r2, #4
 8000c38:	2700      	movs	r7, #0
 8000c3a:	18a3      	adds	r3, r4, r2
 8000c3c:	9902      	ldr	r1, [sp, #8]
 8000c3e:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c40:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c42:	632a      	str	r2, [r5, #48]	; 0x30
 8000c44:	636b      	str	r3, [r5, #52]	; 0x34
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	42bb      	cmp	r3, r7
 8000c4a:	db1d      	blt.n	8000c88 <__gnu_unwind_pr_common+0x2a8>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	e720      	b.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000c52:	4648      	mov	r0, r9
 8000c54:	210d      	movs	r1, #13
 8000c56:	f7ff fe57 	bl	8000908 <_Unwind_GetGR>
 8000c5a:	6228      	str	r0, [r5, #32]
 8000c5c:	9b06      	ldr	r3, [sp, #24]
 8000c5e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c60:	e7e3      	b.n	8000c2a <__gnu_unwind_pr_common+0x24a>
 8000c62:	4620      	mov	r0, r4
 8000c64:	f7ff fc68 	bl	8000538 <selfrel_offset31>
 8000c68:	3404      	adds	r4, #4
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f005 feaa 	bl	80069c8 <__cxa_begin_cleanup>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	f43f af1a 	beq.w	8000aae <__gnu_unwind_pr_common+0xce>
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	4632      	mov	r2, r6
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f7ff fe68 	bl	8000954 <_Unwind_SetGR>
 8000c84:	2007      	movs	r0, #7
 8000c86:	e713      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	3001      	adds	r0, #1
 8000c8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c90:	f7ff fc52 	bl	8000538 <selfrel_offset31>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4602      	mov	r2, r0
 8000c98:	4648      	mov	r0, r9
 8000c9a:	f7ff fe5b 	bl	8000954 <_Unwind_SetGR>
 8000c9e:	4648      	mov	r0, r9
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fe56 	bl	8000954 <_Unwind_SetGR>
 8000ca8:	2007      	movs	r0, #7
 8000caa:	e701      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000cac:	080070dd 	.word	0x080070dd

08000cb0 <__aeabi_unwind_cpp_pr0>:
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e695      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cb4 <__aeabi_unwind_cpp_pr1>:
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e693      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cb8 <__aeabi_unwind_cpp_pr2>:
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e691      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cbc <_Unwind_VRS_Pop>:
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b0c5      	sub	sp, #276	; 0x114
 8000cc2:	2904      	cmp	r1, #4
 8000cc4:	d80d      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cc6:	e8df f001 	tbb	[pc, r1]
 8000cca:	0353      	.short	0x0353
 8000ccc:	310c      	.short	0x310c
 8000cce:	0f          	.byte	0x0f
 8000ccf:	00          	.byte	0x00
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000cd6:	b295      	uxth	r5, r2
 8000cd8:	d162      	bne.n	8000da0 <_Unwind_VRS_Pop+0xe4>
 8000cda:	1972      	adds	r2, r6, r5
 8000cdc:	2a10      	cmp	r2, #16
 8000cde:	f240 809b 	bls.w	8000e18 <_Unwind_VRS_Pop+0x15c>
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	b045      	add	sp, #276	; 0x114
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1fa      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cec:	2a10      	cmp	r2, #16
 8000cee:	d8f8      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	06d8      	lsls	r0, r3, #27
 8000cf4:	f100 80c6 	bmi.w	8000e84 <_Unwind_VRS_Pop+0x1c8>
 8000cf8:	ae22      	add	r6, sp, #136	; 0x88
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	9201      	str	r2, [sp, #4]
 8000cfe:	f000 f973 	bl	8000fe8 <__gnu_Unwind_Save_WMMXC>
 8000d02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d04:	9a01      	ldr	r2, [sp, #4]
 8000d06:	2300      	movs	r3, #0
 8000d08:	2501      	movs	r5, #1
 8000d0a:	fa05 f103 	lsl.w	r1, r5, r3
 8000d0e:	4211      	tst	r1, r2
 8000d10:	d003      	beq.n	8000d1a <_Unwind_VRS_Pop+0x5e>
 8000d12:	6801      	ldr	r1, [r0, #0]
 8000d14:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d18:	3004      	adds	r0, #4
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d1f4      	bne.n	8000d0a <_Unwind_VRS_Pop+0x4e>
 8000d20:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d22:	4630      	mov	r0, r6
 8000d24:	f000 f956 	bl	8000fd4 <__gnu_Unwind_Restore_WMMXC>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7db      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d1d8      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d30:	0c15      	lsrs	r5, r2, #16
 8000d32:	b297      	uxth	r7, r2
 8000d34:	19eb      	adds	r3, r5, r7
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	d8d3      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	071e      	lsls	r6, r3, #28
 8000d3e:	f100 80b5 	bmi.w	8000eac <_Unwind_VRS_Pop+0x1f0>
 8000d42:	ae22      	add	r6, sp, #136	; 0x88
 8000d44:	4630      	mov	r0, r6
 8000d46:	f000 f923 	bl	8000f90 <__gnu_Unwind_Save_WMMXD>
 8000d4a:	00ed      	lsls	r5, r5, #3
 8000d4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d4e:	b14f      	cbz	r7, 8000d64 <_Unwind_VRS_Pop+0xa8>
 8000d50:	3d04      	subs	r5, #4
 8000d52:	1971      	adds	r1, r6, r5
 8000d54:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d60:	4283      	cmp	r3, r0
 8000d62:	d1f9      	bne.n	8000d58 <_Unwind_VRS_Pop+0x9c>
 8000d64:	4630      	mov	r0, r6
 8000d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d68:	f000 f8f0 	bl	8000f4c <__gnu_Unwind_Restore_WMMXD>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e7b9      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1b6      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d74:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d76:	b297      	uxth	r7, r2
 8000d78:	1d20      	adds	r0, r4, #4
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	fa06 f103 	lsl.w	r1, r6, r3
 8000d80:	4239      	tst	r1, r7
 8000d82:	f103 0301 	add.w	r3, r3, #1
 8000d86:	d002      	beq.n	8000d8e <_Unwind_VRS_Pop+0xd2>
 8000d88:	6829      	ldr	r1, [r5, #0]
 8000d8a:	6001      	str	r1, [r0, #0]
 8000d8c:	3504      	adds	r5, #4
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	f100 0004 	add.w	r0, r0, #4
 8000d94:	d1f2      	bne.n	8000d7c <_Unwind_VRS_Pop+0xc0>
 8000d96:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d9a:	d13b      	bne.n	8000e14 <_Unwind_VRS_Pop+0x158>
 8000d9c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d9e:	e7a1      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d19e      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000da4:	1977      	adds	r7, r6, r5
 8000da6:	2f20      	cmp	r7, #32
 8000da8:	d89b      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000daa:	2e0f      	cmp	r6, #15
 8000dac:	d966      	bls.n	8000e7c <_Unwind_VRS_Pop+0x1c0>
 8000dae:	462f      	mov	r7, r5
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d13a      	bne.n	8000e2a <_Unwind_VRS_Pop+0x16e>
 8000db4:	462a      	mov	r2, r5
 8000db6:	2700      	movs	r7, #0
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000dbc:	dd72      	ble.n	8000ea4 <_Unwind_VRS_Pop+0x1e8>
 8000dbe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	a844      	add	r0, sp, #272	; 0x110
 8000dc6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000dca:	388c      	subs	r0, #140	; 0x8c
 8000dcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dd0:	f840 5f04 	str.w	r5, [r0, #4]!
 8000dd4:	4291      	cmp	r1, r2
 8000dd6:	d1f9      	bne.n	8000dcc <_Unwind_VRS_Pop+0x110>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	b197      	cbz	r7, 8000e02 <_Unwind_VRS_Pop+0x146>
 8000ddc:	2e10      	cmp	r6, #16
 8000dde:	4632      	mov	r2, r6
 8000de0:	a944      	add	r1, sp, #272	; 0x110
 8000de2:	bf38      	it	cc
 8000de4:	2210      	movcc	r2, #16
 8000de6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000dea:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000dee:	0079      	lsls	r1, r7, #1
 8000df0:	3a04      	subs	r2, #4
 8000df2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000df6:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dfa:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d1f9      	bne.n	8000df6 <_Unwind_VRS_Pop+0x13a>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d048      	beq.n	8000e98 <_Unwind_VRS_Pop+0x1dc>
 8000e06:	2e0f      	cmp	r6, #15
 8000e08:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e0a:	d933      	bls.n	8000e74 <_Unwind_VRS_Pop+0x1b8>
 8000e0c:	b117      	cbz	r7, 8000e14 <_Unwind_VRS_Pop+0x158>
 8000e0e:	a802      	add	r0, sp, #8
 8000e10:	f000 f894 	bl	8000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e14:	2000      	movs	r0, #0
 8000e16:	e765      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000e18:	2e0f      	cmp	r6, #15
 8000e1a:	f63f af62 	bhi.w	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000e1e:	2700      	movs	r7, #0
 8000e20:	6822      	ldr	r2, [r4, #0]
 8000e22:	07d1      	lsls	r1, r2, #31
 8000e24:	d417      	bmi.n	8000e56 <_Unwind_VRS_Pop+0x19a>
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d060      	beq.n	8000eec <_Unwind_VRS_Pop+0x230>
 8000e2a:	6822      	ldr	r2, [r4, #0]
 8000e2c:	0751      	lsls	r1, r2, #29
 8000e2e:	d445      	bmi.n	8000ebc <_Unwind_VRS_Pop+0x200>
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d04d      	beq.n	8000ed0 <_Unwind_VRS_Pop+0x214>
 8000e34:	2e0f      	cmp	r6, #15
 8000e36:	d806      	bhi.n	8000e46 <_Unwind_VRS_Pop+0x18a>
 8000e38:	a822      	add	r0, sp, #136	; 0x88
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f000 f87a 	bl	8000f34 <__gnu_Unwind_Save_VFP_D>
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	2f00      	cmp	r7, #0
 8000e44:	d0b6      	beq.n	8000db4 <_Unwind_VRS_Pop+0xf8>
 8000e46:	a802      	add	r0, sp, #8
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f000 f87b 	bl	8000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e4e:	9b01      	ldr	r3, [sp, #4]
 8000e50:	f1c6 0210 	rsb	r2, r6, #16
 8000e54:	e7b0      	b.n	8000db8 <_Unwind_VRS_Pop+0xfc>
 8000e56:	f022 0101 	bic.w	r1, r2, #1
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	6021      	str	r1, [r4, #0]
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	4620      	mov	r0, r4
 8000e62:	d03b      	beq.n	8000edc <_Unwind_VRS_Pop+0x220>
 8000e64:	f022 0203 	bic.w	r2, r2, #3
 8000e68:	f840 2b48 	str.w	r2, [r0], #72
 8000e6c:	f000 f85a 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	e7d8      	b.n	8000e26 <_Unwind_VRS_Pop+0x16a>
 8000e74:	a822      	add	r0, sp, #136	; 0x88
 8000e76:	f000 f859 	bl	8000f2c <__gnu_Unwind_Restore_VFP_D>
 8000e7a:	e7c7      	b.n	8000e0c <_Unwind_VRS_Pop+0x150>
 8000e7c:	2f10      	cmp	r7, #16
 8000e7e:	d9ce      	bls.n	8000e1e <_Unwind_VRS_Pop+0x162>
 8000e80:	3f10      	subs	r7, #16
 8000e82:	e7cd      	b.n	8000e20 <_Unwind_VRS_Pop+0x164>
 8000e84:	f023 0310 	bic.w	r3, r3, #16
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e8e:	9201      	str	r2, [sp, #4]
 8000e90:	f000 f8aa 	bl	8000fe8 <__gnu_Unwind_Save_WMMXC>
 8000e94:	9a01      	ldr	r2, [sp, #4]
 8000e96:	e72f      	b.n	8000cf8 <_Unwind_VRS_Pop+0x3c>
 8000e98:	3104      	adds	r1, #4
 8000e9a:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e9c:	a822      	add	r0, sp, #136	; 0x88
 8000e9e:	f000 f83d 	bl	8000f1c <__gnu_Unwind_Restore_VFP>
 8000ea2:	e7b7      	b.n	8000e14 <_Unwind_VRS_Pop+0x158>
 8000ea4:	2f00      	cmp	r7, #0
 8000ea6:	d199      	bne.n	8000ddc <_Unwind_VRS_Pop+0x120>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	e7aa      	b.n	8000e02 <_Unwind_VRS_Pop+0x146>
 8000eac:	f023 0308 	bic.w	r3, r3, #8
 8000eb0:	6023      	str	r3, [r4, #0]
 8000eb2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000eb6:	f000 f86b 	bl	8000f90 <__gnu_Unwind_Save_WMMXD>
 8000eba:	e742      	b.n	8000d42 <_Unwind_VRS_Pop+0x86>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f022 0204 	bic.w	r2, r2, #4
 8000ec2:	f840 2bd0 	str.w	r2, [r0], #208
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	f000 f83c 	bl	8000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	e7af      	b.n	8000e30 <_Unwind_VRS_Pop+0x174>
 8000ed0:	a822      	add	r0, sp, #136	; 0x88
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f000 f826 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	e7b9      	b.n	8000e50 <_Unwind_VRS_Pop+0x194>
 8000edc:	f041 0102 	orr.w	r1, r1, #2
 8000ee0:	f840 1b48 	str.w	r1, [r0], #72
 8000ee4:	f000 f826 	bl	8000f34 <__gnu_Unwind_Save_VFP_D>
 8000ee8:	9b01      	ldr	r3, [sp, #4]
 8000eea:	e79c      	b.n	8000e26 <_Unwind_VRS_Pop+0x16a>
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d003      	beq.n	8000ef8 <_Unwind_VRS_Pop+0x23c>
 8000ef0:	2e0f      	cmp	r6, #15
 8000ef2:	f63f af5f 	bhi.w	8000db4 <_Unwind_VRS_Pop+0xf8>
 8000ef6:	e79f      	b.n	8000e38 <_Unwind_VRS_Pop+0x17c>
 8000ef8:	a822      	add	r0, sp, #136	; 0x88
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	f000 f812 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000f00:	9b01      	ldr	r3, [sp, #4]
 8000f02:	e757      	b.n	8000db4 <_Unwind_VRS_Pop+0xf8>

08000f04 <__restore_core_regs>:
 8000f04:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f08:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f14:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f18:	46e5      	mov	sp, ip
 8000f1a:	bd00      	pop	{pc}

08000f1c <__gnu_Unwind_Restore_VFP>:
 8000f1c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Save_VFP>:
 8000f24:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__gnu_Unwind_Restore_VFP_D>:
 8000f2c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <__gnu_Unwind_Save_VFP_D>:
 8000f34:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f3c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f44:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__gnu_Unwind_Restore_WMMXD>:
 8000f4c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f50:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f54:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f58:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f5c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f60:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f64:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f68:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f6c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f70:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f74:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f78:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f7c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f80:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f84:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f88:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Save_WMMXD>:
 8000f90:	ece0 0102 	stfe	f0, [r0], #8
 8000f94:	ece0 1102 	stfe	f1, [r0], #8
 8000f98:	ece0 2102 	stfe	f2, [r0], #8
 8000f9c:	ece0 3102 	stfe	f3, [r0], #8
 8000fa0:	ece0 4102 	stfe	f4, [r0], #8
 8000fa4:	ece0 5102 	stfe	f5, [r0], #8
 8000fa8:	ece0 6102 	stfe	f6, [r0], #8
 8000fac:	ece0 7102 	stfe	f7, [r0], #8
 8000fb0:	ece0 8102 	stfp	f0, [r0], #8
 8000fb4:	ece0 9102 	stfp	f1, [r0], #8
 8000fb8:	ece0 a102 	stfp	f2, [r0], #8
 8000fbc:	ece0 b102 	stfp	f3, [r0], #8
 8000fc0:	ece0 c102 	stfp	f4, [r0], #8
 8000fc4:	ece0 d102 	stfp	f5, [r0], #8
 8000fc8:	ece0 e102 	stfp	f6, [r0], #8
 8000fcc:	ece0 f102 	stfp	f7, [r0], #8
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__gnu_Unwind_Restore_WMMXC>:
 8000fd4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fd8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fdc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fe0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_WMMXC>:
 8000fe8:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fec:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000ff0:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ff4:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_Unwind_RaiseException>:
 8000ffc:	46ec      	mov	ip, sp
 8000ffe:	b500      	push	{lr}
 8001000:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001004:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001010:	a901      	add	r1, sp, #4
 8001012:	f7ff fbf3 	bl	80007fc <__gnu_Unwind_RaiseException>
 8001016:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800101a:	b012      	add	sp, #72	; 0x48
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_Unwind_Resume>:
 8001020:	46ec      	mov	ip, sp
 8001022:	b500      	push	{lr}
 8001024:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001028:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001034:	a901      	add	r1, sp, #4
 8001036:	f7ff fc1b 	bl	8000870 <__gnu_Unwind_Resume>
 800103a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103e:	b012      	add	sp, #72	; 0x48
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_Unwind_Resume_or_Rethrow>:
 8001044:	46ec      	mov	ip, sp
 8001046:	b500      	push	{lr}
 8001048:	e92d 5000 	stmdb	sp!, {ip, lr}
 800104c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001058:	a901      	add	r1, sp, #4
 800105a:	f7ff fc2b 	bl	80008b4 <__gnu_Unwind_Resume_or_Rethrow>
 800105e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001062:	b012      	add	sp, #72	; 0x48
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <_Unwind_ForcedUnwind>:
 8001068:	46ec      	mov	ip, sp
 800106a:	b500      	push	{lr}
 800106c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001070:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e92d 000c 	stmdb	sp!, {r2, r3}
 800107c:	ab01      	add	r3, sp, #4
 800107e:	f7ff fbed 	bl	800085c <__gnu_Unwind_ForcedUnwind>
 8001082:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001086:	b012      	add	sp, #72	; 0x48
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <_Unwind_Backtrace>:
 800108c:	46ec      	mov	ip, sp
 800108e:	b500      	push	{lr}
 8001090:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001094:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010a0:	aa01      	add	r2, sp, #4
 80010a2:	f7ff fc65 	bl	8000970 <__gnu_Unwind_Backtrace>
 80010a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010aa:	b012      	add	sp, #72	; 0x48
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <next_unwind_byte>:
 80010b0:	7a02      	ldrb	r2, [r0, #8]
 80010b2:	b91a      	cbnz	r2, 80010bc <next_unwind_byte+0xc>
 80010b4:	7a43      	ldrb	r3, [r0, #9]
 80010b6:	b943      	cbnz	r3, 80010ca <next_unwind_byte+0x1a>
 80010b8:	20b0      	movs	r0, #176	; 0xb0
 80010ba:	4770      	bx	lr
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	3a01      	subs	r2, #1
 80010c0:	7202      	strb	r2, [r0, #8]
 80010c2:	021a      	lsls	r2, r3, #8
 80010c4:	6002      	str	r2, [r0, #0]
 80010c6:	0e18      	lsrs	r0, r3, #24
 80010c8:	4770      	bx	lr
 80010ca:	6842      	ldr	r2, [r0, #4]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b410      	push	{r4}
 80010d0:	7243      	strb	r3, [r0, #9]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	2103      	movs	r1, #3
 80010d6:	1d14      	adds	r4, r2, #4
 80010d8:	7201      	strb	r1, [r0, #8]
 80010da:	021a      	lsls	r2, r3, #8
 80010dc:	6044      	str	r4, [r0, #4]
 80010de:	6002      	str	r2, [r0, #0]
 80010e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e4:	0e18      	lsrs	r0, r3, #24
 80010e6:	4770      	bx	lr

080010e8 <_Unwind_GetGR.constprop.0>:
 80010e8:	b500      	push	{lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	aa03      	add	r2, sp, #12
 80010ee:	2300      	movs	r3, #0
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	220c      	movs	r2, #12
 80010f6:	f7ff fbed 	bl	80008d4 <_Unwind_VRS_Get>
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	b005      	add	sp, #20
 80010fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001102:	bf00      	nop

08001104 <unwind_UCB_from_context>:
 8001104:	e7f0      	b.n	80010e8 <_Unwind_GetGR.constprop.0>
 8001106:	bf00      	nop

08001108 <__gnu_unwind_execute>:
 8001108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110c:	4606      	mov	r6, r0
 800110e:	b085      	sub	sp, #20
 8001110:	460f      	mov	r7, r1
 8001112:	f04f 0800 	mov.w	r8, #0
 8001116:	4638      	mov	r0, r7
 8001118:	f7ff ffca 	bl	80010b0 <next_unwind_byte>
 800111c:	28b0      	cmp	r0, #176	; 0xb0
 800111e:	4604      	mov	r4, r0
 8001120:	d023      	beq.n	800116a <__gnu_unwind_execute+0x62>
 8001122:	0605      	lsls	r5, r0, #24
 8001124:	d427      	bmi.n	8001176 <__gnu_unwind_execute+0x6e>
 8001126:	2300      	movs	r3, #0
 8001128:	f10d 090c 	add.w	r9, sp, #12
 800112c:	4619      	mov	r1, r3
 800112e:	0085      	lsls	r5, r0, #2
 8001130:	220d      	movs	r2, #13
 8001132:	f8cd 9000 	str.w	r9, [sp]
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff fbcc 	bl	80008d4 <_Unwind_VRS_Get>
 800113c:	b2ed      	uxtb	r5, r5
 800113e:	9b03      	ldr	r3, [sp, #12]
 8001140:	f8cd 9000 	str.w	r9, [sp]
 8001144:	0660      	lsls	r0, r4, #25
 8001146:	f105 0504 	add.w	r5, r5, #4
 800114a:	bf4c      	ite	mi
 800114c:	1b5d      	submi	r5, r3, r5
 800114e:	18ed      	addpl	r5, r5, r3
 8001150:	2300      	movs	r3, #0
 8001152:	4619      	mov	r1, r3
 8001154:	220d      	movs	r2, #13
 8001156:	4630      	mov	r0, r6
 8001158:	9503      	str	r5, [sp, #12]
 800115a:	f7ff fbe1 	bl	8000920 <_Unwind_VRS_Set>
 800115e:	4638      	mov	r0, r7
 8001160:	f7ff ffa6 	bl	80010b0 <next_unwind_byte>
 8001164:	28b0      	cmp	r0, #176	; 0xb0
 8001166:	4604      	mov	r4, r0
 8001168:	d1db      	bne.n	8001122 <__gnu_unwind_execute+0x1a>
 800116a:	f1b8 0f00 	cmp.w	r8, #0
 800116e:	f000 8095 	beq.w	800129c <__gnu_unwind_execute+0x194>
 8001172:	2000      	movs	r0, #0
 8001174:	e01c      	b.n	80011b0 <__gnu_unwind_execute+0xa8>
 8001176:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800117a:	2b80      	cmp	r3, #128	; 0x80
 800117c:	d05d      	beq.n	800123a <__gnu_unwind_execute+0x132>
 800117e:	2b90      	cmp	r3, #144	; 0x90
 8001180:	d019      	beq.n	80011b6 <__gnu_unwind_execute+0xae>
 8001182:	2ba0      	cmp	r3, #160	; 0xa0
 8001184:	d02c      	beq.n	80011e0 <__gnu_unwind_execute+0xd8>
 8001186:	2bb0      	cmp	r3, #176	; 0xb0
 8001188:	d03f      	beq.n	800120a <__gnu_unwind_execute+0x102>
 800118a:	2bc0      	cmp	r3, #192	; 0xc0
 800118c:	d06c      	beq.n	8001268 <__gnu_unwind_execute+0x160>
 800118e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001192:	2bd0      	cmp	r3, #208	; 0xd0
 8001194:	d10b      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001196:	f000 0207 	and.w	r2, r0, #7
 800119a:	3201      	adds	r2, #1
 800119c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011a0:	2305      	movs	r3, #5
 80011a2:	2101      	movs	r1, #1
 80011a4:	4630      	mov	r0, r6
 80011a6:	f7ff fd89 	bl	8000cbc <_Unwind_VRS_Pop>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d0b3      	beq.n	8001116 <__gnu_unwind_execute+0xe>
 80011ae:	2009      	movs	r0, #9
 80011b0:	b005      	add	sp, #20
 80011b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b6:	f000 030d 	and.w	r3, r0, #13
 80011ba:	2b0d      	cmp	r3, #13
 80011bc:	d0f7      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 80011be:	ad03      	add	r5, sp, #12
 80011c0:	2300      	movs	r3, #0
 80011c2:	f000 020f 	and.w	r2, r0, #15
 80011c6:	4619      	mov	r1, r3
 80011c8:	9500      	str	r5, [sp, #0]
 80011ca:	4630      	mov	r0, r6
 80011cc:	f7ff fb82 	bl	80008d4 <_Unwind_VRS_Get>
 80011d0:	2300      	movs	r3, #0
 80011d2:	9500      	str	r5, [sp, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	220d      	movs	r2, #13
 80011d8:	4630      	mov	r0, r6
 80011da:	f7ff fba1 	bl	8000920 <_Unwind_VRS_Set>
 80011de:	e79a      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80011e0:	43c2      	mvns	r2, r0
 80011e2:	f002 0307 	and.w	r3, r2, #7
 80011e6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011ea:	411a      	asrs	r2, r3
 80011ec:	0701      	lsls	r1, r0, #28
 80011ee:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	bf48      	it	mi
 80011f8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011fc:	4619      	mov	r1, r3
 80011fe:	4630      	mov	r0, r6
 8001200:	f7ff fd5c 	bl	8000cbc <_Unwind_VRS_Pop>
 8001204:	2800      	cmp	r0, #0
 8001206:	d1d2      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001208:	e785      	b.n	8001116 <__gnu_unwind_execute+0xe>
 800120a:	28b1      	cmp	r0, #177	; 0xb1
 800120c:	d057      	beq.n	80012be <__gnu_unwind_execute+0x1b6>
 800120e:	28b2      	cmp	r0, #178	; 0xb2
 8001210:	d068      	beq.n	80012e4 <__gnu_unwind_execute+0x1dc>
 8001212:	28b3      	cmp	r0, #179	; 0xb3
 8001214:	f000 8095 	beq.w	8001342 <__gnu_unwind_execute+0x23a>
 8001218:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800121c:	2bb4      	cmp	r3, #180	; 0xb4
 800121e:	d0c6      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 8001220:	f000 0207 	and.w	r2, r0, #7
 8001224:	3201      	adds	r2, #1
 8001226:	2301      	movs	r3, #1
 8001228:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800122c:	4619      	mov	r1, r3
 800122e:	4630      	mov	r0, r6
 8001230:	f7ff fd44 	bl	8000cbc <_Unwind_VRS_Pop>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1ba      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001238:	e76d      	b.n	8001116 <__gnu_unwind_execute+0xe>
 800123a:	4638      	mov	r0, r7
 800123c:	f7ff ff38 	bl	80010b0 <next_unwind_byte>
 8001240:	0224      	lsls	r4, r4, #8
 8001242:	4304      	orrs	r4, r0
 8001244:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001248:	d0b1      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 800124a:	0124      	lsls	r4, r4, #4
 800124c:	2300      	movs	r3, #0
 800124e:	b2a2      	uxth	r2, r4
 8001250:	4619      	mov	r1, r3
 8001252:	4630      	mov	r0, r6
 8001254:	f7ff fd32 	bl	8000cbc <_Unwind_VRS_Pop>
 8001258:	2800      	cmp	r0, #0
 800125a:	d1a8      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 800125c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001260:	bf18      	it	ne
 8001262:	f04f 0801 	movne.w	r8, #1
 8001266:	e756      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001268:	28c6      	cmp	r0, #198	; 0xc6
 800126a:	d07d      	beq.n	8001368 <__gnu_unwind_execute+0x260>
 800126c:	28c7      	cmp	r0, #199	; 0xc7
 800126e:	f000 8086 	beq.w	800137e <__gnu_unwind_execute+0x276>
 8001272:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001276:	2bc0      	cmp	r3, #192	; 0xc0
 8001278:	f000 8094 	beq.w	80013a4 <__gnu_unwind_execute+0x29c>
 800127c:	28c8      	cmp	r0, #200	; 0xc8
 800127e:	f000 809f 	beq.w	80013c0 <__gnu_unwind_execute+0x2b8>
 8001282:	28c9      	cmp	r0, #201	; 0xc9
 8001284:	d193      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001286:	4638      	mov	r0, r7
 8001288:	f7ff ff12 	bl	80010b0 <next_unwind_byte>
 800128c:	0302      	lsls	r2, r0, #12
 800128e:	f000 000f 	and.w	r0, r0, #15
 8001292:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001296:	3001      	adds	r0, #1
 8001298:	4302      	orrs	r2, r0
 800129a:	e781      	b.n	80011a0 <__gnu_unwind_execute+0x98>
 800129c:	ac03      	add	r4, sp, #12
 800129e:	4643      	mov	r3, r8
 80012a0:	220e      	movs	r2, #14
 80012a2:	4641      	mov	r1, r8
 80012a4:	9400      	str	r4, [sp, #0]
 80012a6:	4630      	mov	r0, r6
 80012a8:	f7ff fb14 	bl	80008d4 <_Unwind_VRS_Get>
 80012ac:	9400      	str	r4, [sp, #0]
 80012ae:	4630      	mov	r0, r6
 80012b0:	4643      	mov	r3, r8
 80012b2:	220f      	movs	r2, #15
 80012b4:	4641      	mov	r1, r8
 80012b6:	f7ff fb33 	bl	8000920 <_Unwind_VRS_Set>
 80012ba:	4640      	mov	r0, r8
 80012bc:	e778      	b.n	80011b0 <__gnu_unwind_execute+0xa8>
 80012be:	4638      	mov	r0, r7
 80012c0:	f7ff fef6 	bl	80010b0 <next_unwind_byte>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	f43f af72 	beq.w	80011ae <__gnu_unwind_execute+0xa6>
 80012ca:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012ce:	f47f af6e 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4630      	mov	r0, r6
 80012d8:	f7ff fcf0 	bl	8000cbc <_Unwind_VRS_Pop>
 80012dc:	2800      	cmp	r0, #0
 80012de:	f47f af66 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80012e2:	e718      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80012e4:	2300      	movs	r3, #0
 80012e6:	f10d 090c 	add.w	r9, sp, #12
 80012ea:	220d      	movs	r2, #13
 80012ec:	4619      	mov	r1, r3
 80012ee:	f8cd 9000 	str.w	r9, [sp]
 80012f2:	4630      	mov	r0, r6
 80012f4:	f7ff faee 	bl	80008d4 <_Unwind_VRS_Get>
 80012f8:	4638      	mov	r0, r7
 80012fa:	f7ff fed9 	bl	80010b0 <next_unwind_byte>
 80012fe:	0602      	lsls	r2, r0, #24
 8001300:	f04f 0402 	mov.w	r4, #2
 8001304:	d50c      	bpl.n	8001320 <__gnu_unwind_execute+0x218>
 8001306:	9b03      	ldr	r3, [sp, #12]
 8001308:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800130c:	40a0      	lsls	r0, r4
 800130e:	4403      	add	r3, r0
 8001310:	4638      	mov	r0, r7
 8001312:	9303      	str	r3, [sp, #12]
 8001314:	f7ff fecc 	bl	80010b0 <next_unwind_byte>
 8001318:	0603      	lsls	r3, r0, #24
 800131a:	f104 0407 	add.w	r4, r4, #7
 800131e:	d4f2      	bmi.n	8001306 <__gnu_unwind_execute+0x1fe>
 8001320:	9b03      	ldr	r3, [sp, #12]
 8001322:	f8cd 9000 	str.w	r9, [sp]
 8001326:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800132a:	40a2      	lsls	r2, r4
 800132c:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001330:	2300      	movs	r3, #0
 8001332:	4414      	add	r4, r2
 8001334:	4619      	mov	r1, r3
 8001336:	220d      	movs	r2, #13
 8001338:	4630      	mov	r0, r6
 800133a:	9403      	str	r4, [sp, #12]
 800133c:	f7ff faf0 	bl	8000920 <_Unwind_VRS_Set>
 8001340:	e6e9      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001342:	4638      	mov	r0, r7
 8001344:	f7ff feb4 	bl	80010b0 <next_unwind_byte>
 8001348:	0301      	lsls	r1, r0, #12
 800134a:	f000 000f 	and.w	r0, r0, #15
 800134e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001352:	1c42      	adds	r2, r0, #1
 8001354:	2301      	movs	r3, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	4630      	mov	r0, r6
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fcae 	bl	8000cbc <_Unwind_VRS_Pop>
 8001360:	2800      	cmp	r0, #0
 8001362:	f47f af24 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 8001366:	e6d6      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001368:	4638      	mov	r0, r7
 800136a:	f7ff fea1 	bl	80010b0 <next_unwind_byte>
 800136e:	0301      	lsls	r1, r0, #12
 8001370:	f000 000f 	and.w	r0, r0, #15
 8001374:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001378:	1c42      	adds	r2, r0, #1
 800137a:	2303      	movs	r3, #3
 800137c:	e7eb      	b.n	8001356 <__gnu_unwind_execute+0x24e>
 800137e:	4638      	mov	r0, r7
 8001380:	f7ff fe96 	bl	80010b0 <next_unwind_byte>
 8001384:	2800      	cmp	r0, #0
 8001386:	f43f af12 	beq.w	80011ae <__gnu_unwind_execute+0xa6>
 800138a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800138e:	f47f af0e 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 8001392:	4602      	mov	r2, r0
 8001394:	2104      	movs	r1, #4
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff fc90 	bl	8000cbc <_Unwind_VRS_Pop>
 800139c:	2800      	cmp	r0, #0
 800139e:	f47f af06 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80013a2:	e6b8      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80013a4:	f000 020f 	and.w	r2, r0, #15
 80013a8:	3201      	adds	r2, #1
 80013aa:	2303      	movs	r3, #3
 80013ac:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013b0:	4619      	mov	r1, r3
 80013b2:	4630      	mov	r0, r6
 80013b4:	f7ff fc82 	bl	8000cbc <_Unwind_VRS_Pop>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	f47f aef8 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80013be:	e6aa      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff fe75 	bl	80010b0 <next_unwind_byte>
 80013c6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013ca:	f000 030f 	and.w	r3, r0, #15
 80013ce:	3210      	adds	r2, #16
 80013d0:	3301      	adds	r3, #1
 80013d2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013d6:	e6e3      	b.n	80011a0 <__gnu_unwind_execute+0x98>

080013d8 <__gnu_unwind_frame>:
 80013d8:	b510      	push	{r4, lr}
 80013da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013dc:	b084      	sub	sp, #16
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	2003      	movs	r0, #3
 80013e2:	f88d 000c 	strb.w	r0, [sp, #12]
 80013e6:	79dc      	ldrb	r4, [r3, #7]
 80013e8:	f88d 400d 	strb.w	r4, [sp, #13]
 80013ec:	0212      	lsls	r2, r2, #8
 80013ee:	3308      	adds	r3, #8
 80013f0:	4608      	mov	r0, r1
 80013f2:	a901      	add	r1, sp, #4
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	f7ff fe86 	bl	8001108 <__gnu_unwind_execute>
 80013fc:	b004      	add	sp, #16
 80013fe:	bd10      	pop	{r4, pc}

08001400 <_Unwind_GetRegionStart>:
 8001400:	b508      	push	{r3, lr}
 8001402:	f7ff fe7f 	bl	8001104 <unwind_UCB_from_context>
 8001406:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001408:	bd08      	pop	{r3, pc}
 800140a:	bf00      	nop

0800140c <_Unwind_GetLanguageSpecificData>:
 800140c:	b508      	push	{r3, lr}
 800140e:	f7ff fe79 	bl	8001104 <unwind_UCB_from_context>
 8001412:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001414:	79c3      	ldrb	r3, [r0, #7]
 8001416:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800141a:	3008      	adds	r0, #8
 800141c:	bd08      	pop	{r3, pc}
 800141e:	bf00      	nop

08001420 <_Unwind_GetTextRelBase>:
 8001420:	b508      	push	{r3, lr}
 8001422:	f006 fdc9 	bl	8007fb8 <abort>
 8001426:	bf00      	nop

08001428 <_Unwind_GetDataRelBase>:
 8001428:	b508      	push	{r3, lr}
 800142a:	f7ff fff9 	bl	8001420 <_Unwind_GetTextRelBase>
 800142e:	bf00      	nop

08001430 <__aeabi_idiv0>:
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143a:	e003      	b.n	8001444 <LoopCopyDataInit>

0800143c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800143e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001442:	3104      	adds	r1, #4

08001444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800144c:	d3f6      	bcc.n	800143c <CopyDataInit>
  ldr  r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001450:	e002      	b.n	8001458 <LoopFillZerobss>

08001452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001454:	f842 3b04 	str.w	r3, [r2], #4

08001458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800145c:	d3f9      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145e:	f002 fe09 	bl	8004074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f006 fdb7 	bl	8007fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f001 f9b5 	bl	80027d4 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800146c:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 8001470:	08009cf0 	.word	0x08009cf0
  ldr  r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001478:	20000518 	.word	0x20000518
  ldr  r2, =_sbss
 800147c:	20000518 	.word	0x20000518
  ldr  r3, = _ebss
 8001480:	20003e6c 	.word	0x20003e6c

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800148a:	4826      	ldr	r0, [pc, #152]	; (8001524 <MX_ADC1_Init+0x9c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_ADC1_Init+0xa0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4a27      	ldr	r2, [pc, #156]	; (800152c <MX_ADC1_Init+0xa4>)
 8001490:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001492:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8001496:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 800149a:	2204      	movs	r2, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800149c:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800149e:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014a2:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a4:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a6:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 80014ac:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ae:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b0:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b2:	f002 fe51 	bl	8004158 <HAL_ADC_Init>
 80014b6:	b118      	cbz	r0, 80014c0 <MX_ADC1_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014b8:	2148      	movs	r1, #72	; 0x48
 80014ba:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_ADC1_Init+0xa8>)
 80014bc:	f001 f900 	bl	80026c0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c0:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 80014c2:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014c6:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	4816      	ldr	r0, [pc, #88]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014ca:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014cc:	f002 ffb8 	bl	8004440 <HAL_ADC_ConfigChannel>
 80014d0:	b118      	cbz	r0, 80014da <MX_ADC1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014d2:	2152      	movs	r1, #82	; 0x52
 80014d4:	4816      	ldr	r0, [pc, #88]	; (8001530 <MX_ADC1_Init+0xa8>)
 80014d6:	f001 f8f3 	bl	80026c0 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	4669      	mov	r1, sp
 80014dc:	4811      	ldr	r0, [pc, #68]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_2;
 80014de:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 2;
 80014e0:	9401      	str	r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	f002 ffad 	bl	8004440 <HAL_ADC_ConfigChannel>
 80014e6:	b118      	cbz	r0, 80014f0 <MX_ADC1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014e8:	215b      	movs	r1, #91	; 0x5b
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <MX_ADC1_Init+0xa8>)
 80014ec:	f001 f8e8 	bl	80026c0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80014f0:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f2:	4669      	mov	r1, sp
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_3;
 80014f6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 80014f8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fa:	f002 ffa1 	bl	8004440 <HAL_ADC_ConfigChannel>
 80014fe:	b118      	cbz	r0, 8001508 <MX_ADC1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001500:	2164      	movs	r1, #100	; 0x64
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <MX_ADC1_Init+0xa8>)
 8001504:	f001 f8dc 	bl	80026c0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001508:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	4669      	mov	r1, sp
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_4;
 800150e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8001510:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	f002 ff95 	bl	8004440 <HAL_ADC_ConfigChannel>
 8001516:	b118      	cbz	r0, 8001520 <MX_ADC1_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001518:	216d      	movs	r1, #109	; 0x6d
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_ADC1_Init+0xa8>)
 800151c:	f001 f8d0 	bl	80026c0 <_Error_Handler>
  }

}
 8001520:	b004      	add	sp, #16
 8001522:	bd10      	pop	{r4, pc}
 8001524:	20000a2c 	.word	0x20000a2c
 8001528:	40012000 	.word	0x40012000
 800152c:	0f000001 	.word	0x0f000001
 8001530:	08008c00 	.word	0x08008c00

08001534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001536:	6802      	ldr	r2, [r0, #0]
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_ADC_MspInit+0x3c>)
 800153a:	429a      	cmp	r2, r3
 800153c:	d114      	bne.n	8001568 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153e:	2100      	movs	r1, #0
 8001540:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001544:	9100      	str	r1, [sp, #0]
 8001546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800154a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154e:	645a      	str	r2, [r3, #68]	; 0x44
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800155a:	231e      	movs	r3, #30
 800155c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001560:	2303      	movs	r3, #3
 8001562:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f003 fbd4 	bl	8004d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001568:	b007      	add	sp, #28
 800156a:	f85d fb04 	ldr.w	pc, [sp], #4
 800156e:	bf00      	nop
 8001570:	40012000 	.word	0x40012000
 8001574:	40020000 	.word	0x40020000

08001578 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001578:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_DMA_Init+0x40>)
 8001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001582:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 800158a:	2201      	movs	r2, #1
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001590:	2102      	movs	r1, #2
 8001592:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001594:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001596:	f002 fff9 	bl	800458c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800159a:	203a      	movs	r0, #58	; 0x3a
 800159c:	f003 f82a 	bl	80045f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2102      	movs	r1, #2
 80015a4:	2046      	movs	r0, #70	; 0x46
 80015a6:	f002 fff1 	bl	800458c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015aa:	2046      	movs	r0, #70	; 0x46
 80015ac:	f003 f822 	bl	80045f4 <HAL_NVIC_EnableIRQ>

}
 80015b0:	b003      	add	sp, #12
 80015b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 80015c2:	4f26      	ldr	r7, [pc, #152]	; (800165c <MX_GPIO_Init+0xa0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80015c4:	4e26      	ldr	r6, [pc, #152]	; (8001660 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2400      	movs	r4, #0
 80015c8:	9401      	str	r4, [sp, #4]
 80015ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015cc:	f042 0204 	orr.w	r2, r2, #4
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d4:	f002 0204 	and.w	r2, r2, #4
 80015d8:	9201      	str	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015da:	9402      	str	r4, [sp, #8]
 80015dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
 80015e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015ea:	9202      	str	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	9403      	str	r4, [sp, #12]
 80015ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
 80015f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f8:	f002 0201 	and.w	r2, r2, #1
 80015fc:	9203      	str	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	9404      	str	r4, [sp, #16]
 8001600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001602:	f042 0202 	orr.w	r2, r2, #2
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 800160a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001610:	4638      	mov	r0, r7
 8001612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001618:	f003 fc34 	bl	8004e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800161c:	4622      	mov	r2, r4
 800161e:	4630      	mov	r0, r6
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	f003 fc2f 	bl	8004e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 8001626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 800162c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 800162e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001630:	2311      	movs	r3, #17
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 8001632:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001634:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001636:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 800163a:	f003 fb69 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001642:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001646:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800164e:	f003 fb5f 	bl	8004d10 <HAL_GPIO_Init>

}
 8001652:	b00b      	add	sp, #44	; 0x2c
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020400 	.word	0x40020400

08001664 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001664:	6843      	ldr	r3, [r0, #4]
 8001666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001668:	6843      	ldr	r3, [r0, #4]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800166e:	88c3      	ldrh	r3, [r0, #6]
 8001670:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001672:	79c3      	ldrb	r3, [r0, #7]
 8001674:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001676:	6883      	ldr	r3, [r0, #8]
 8001678:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800167a:	6883      	ldr	r3, [r0, #8]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001680:	8943      	ldrh	r3, [r0, #10]
 8001682:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001684:	7ac3      	ldrb	r3, [r0, #11]
 8001686:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8001688:	2008      	movs	r0, #8
 800168a:	4770      	bx	lr

0800168c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800168c:	780b      	ldrb	r3, [r1, #0]
 800168e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001690:	784a      	ldrb	r2, [r1, #1]
 8001692:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001696:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001698:	788a      	ldrb	r2, [r1, #2]
 800169a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800169e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016a0:	78ca      	ldrb	r2, [r1, #3]
 80016a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016a6:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80016a8:	790b      	ldrb	r3, [r1, #4]
 80016aa:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016ac:	794a      	ldrb	r2, [r1, #5]
 80016ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016b2:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016b4:	798a      	ldrb	r2, [r1, #6]
 80016b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016ba:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016bc:	79ca      	ldrb	r2, [r1, #7]
 80016be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016c2:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 80016c4:	2008      	movs	r0, #8
 80016c6:	4770      	bx	lr

080016c8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80016c8:	4800      	ldr	r0, [pc, #0]	; (80016cc <_ZN8std_msgs4Time7getTypeEv+0x4>)
 80016ca:	4770      	bx	lr
 80016cc:	080091fa 	.word	0x080091fa

080016d0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80016d0:	4800      	ldr	r0, [pc, #0]	; (80016d4 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 80016d2:	4770      	bx	lr
 80016d4:	080091d9 	.word	0x080091d9

080016d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80016d8:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80016da:	780b      	ldrb	r3, [r1, #0]
 80016dc:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016de:	784a      	ldrb	r2, [r1, #1]
 80016e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e4:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 80016e6:	f8d1 2002 	ldr.w	r2, [r1, #2]
 80016ea:	1d8b      	adds	r3, r1, #6
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016ec:	1d94      	adds	r4, r2, #6
 80016ee:	1a5d      	subs	r5, r3, r1
 80016f0:	42ac      	cmp	r4, r5
 80016f2:	d904      	bls.n	80016fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x26>
          inbuffer[k-1]=inbuffer[k];
 80016f4:	f813 5b01 	ldrb.w	r5, [r3], #1
 80016f8:	f803 5c02 	strb.w	r5, [r3, #-2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016fc:	e7f7      	b.n	80016ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x16>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80016fe:	188b      	adds	r3, r1, r2
 8001700:	2500      	movs	r5, #0
 8001702:	715d      	strb	r5, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001704:	1d4b      	adds	r3, r1, #5
 8001706:	6083      	str	r3, [r0, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 8001708:	590b      	ldr	r3, [r1, r4]
      offset += 4;
 800170a:	320a      	adds	r2, #10
 800170c:	188c      	adds	r4, r1, r2
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800170e:	4413      	add	r3, r2
 8001710:	1a65      	subs	r5, r4, r1
 8001712:	42ab      	cmp	r3, r5
 8001714:	d904      	bls.n	8001720 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x48>
          inbuffer[k-1]=inbuffer[k];
 8001716:	f814 5b01 	ldrb.w	r5, [r4], #1
 800171a:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800171e:	e7f7      	b.n	8001710 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x38>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001720:	18cc      	adds	r4, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 8001722:	3a01      	subs	r2, #1
 8001724:	440a      	add	r2, r1
      inbuffer[offset+length_message_type-1]=0;
 8001726:	2500      	movs	r5, #0
 8001728:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 800172c:	60c2      	str	r2, [r0, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800172e:	58ca      	ldr	r2, [r1, r3]
      offset += 4;
 8001730:	3304      	adds	r3, #4
 8001732:	18cc      	adds	r4, r1, r3
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001734:	441a      	add	r2, r3
 8001736:	1a65      	subs	r5, r4, r1
 8001738:	42aa      	cmp	r2, r5
 800173a:	d904      	bls.n	8001746 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x6e>
          inbuffer[k-1]=inbuffer[k];
 800173c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001740:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001744:	e7f7      	b.n	8001736 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001746:	188c      	adds	r4, r1, r2
      this->md5sum = (char *)(inbuffer + offset-1);
 8001748:	3b01      	subs	r3, #1
 800174a:	440b      	add	r3, r1
      inbuffer[offset+length_md5sum-1]=0;
 800174c:	2500      	movs	r5, #0
 800174e:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001752:	6103      	str	r3, [r0, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001754:	78a3      	ldrb	r3, [r4, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001756:	7865      	ldrb	r5, [r4, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001758:	5c89      	ldrb	r1, [r1, r2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001760:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001762:	78e1      	ldrb	r1, [r4, #3]
 8001764:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->buffer_size = u_buffer_size.real;
 8001768:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800176a:	1d10      	adds	r0, r2, #4
 800176c:	bd30      	pop	{r4, r5, pc}
	...

08001770 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001770:	4800      	ldr	r0, [pc, #0]	; (8001774 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8001772:	4770      	bx	lr
 8001774:	0800904a 	.word	0x0800904a

08001778 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001778:	4800      	ldr	r0, [pc, #0]	; (800177c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 800177a:	4770      	bx	lr
 800177c:	08009029 	.word	0x08009029

08001780 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8001780:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001782:	780b      	ldrb	r3, [r1, #0]
 8001784:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 8001786:	f8d1 3001 	ldr.w	r3, [r1, #1]
    virtual int deserialize(unsigned char *inbuffer)
 800178a:	4604      	mov	r4, r0
 800178c:	1d4a      	adds	r2, r1, #5
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800178e:	1d58      	adds	r0, r3, #5
 8001790:	1a55      	subs	r5, r2, r1
 8001792:	42a8      	cmp	r0, r5
 8001794:	d904      	bls.n	80017a0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
          inbuffer[k-1]=inbuffer[k];
 8001796:	f812 5b01 	ldrb.w	r5, [r2], #1
 800179a:	f802 5c02 	strb.w	r5, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800179e:	e7f7      	b.n	8001790 <_ZN14rosserial_msgs3Log11deserializeEPh+0x10>
      }
      inbuffer[offset+length_msg-1]=0;
 80017a0:	440b      	add	r3, r1
 80017a2:	2200      	movs	r2, #0
 80017a4:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 80017a6:	3104      	adds	r1, #4
 80017a8:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 80017aa:	bd30      	pop	{r4, r5, pc}

080017ac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80017ac:	4800      	ldr	r0, [pc, #0]	; (80017b0 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 80017ae:	4770      	bx	lr
 80017b0:	08009016 	.word	0x08009016

080017b4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80017b4:	4800      	ldr	r0, [pc, #0]	; (80017b8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 80017b6:	4770      	bx	lr
 80017b8:	08008ff5 	.word	0x08008ff5

080017bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 80017bc:	4800      	ldr	r0, [pc, #0]	; (80017c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 80017be:	4770      	bx	lr
 80017c0:	08008be4 	.word	0x08008be4

080017c4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80017c4:	4800      	ldr	r0, [pc, #0]	; (80017c8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 80017c6:	4770      	bx	lr
 80017c8:	08008fd4 	.word	0x08008fd4

080017cc <_ZNK17jsk_imu_mini_msgs8Potentio9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80017cc:	6843      	ldr	r3, [r0, #4]
 80017ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80017d0:	6843      	ldr	r3, [r0, #4]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80017d6:	88c3      	ldrh	r3, [r0, #6]
 80017d8:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80017da:	79c3      	ldrb	r3, [r0, #7]
 80017dc:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80017de:	6883      	ldr	r3, [r0, #8]
 80017e0:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80017e2:	6883      	ldr	r3, [r0, #8]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	714b      	strb	r3, [r1, #5]
    virtual int serialize(unsigned char *outbuffer) const
 80017e8:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80017ea:	8943      	ldrh	r3, [r0, #10]
 80017ec:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80017ee:	7ac3      	ldrb	r3, [r0, #11]
 80017f0:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.nsec);
      *(outbuffer + offset++) = potentio_length;
 80017f2:	7b03      	ldrb	r3, [r0, #12]
 80017f4:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset++) = 0;
 80017f6:	2300      	movs	r3, #0
    virtual int serialize(unsigned char *outbuffer) const
 80017f8:	4602      	mov	r2, r0
      *(outbuffer + offset++) = 0;
 80017fa:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset++) = 0;
 80017fc:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset++) = 0;
 80017fe:	72cb      	strb	r3, [r1, #11]
 8001800:	f101 040c 	add.w	r4, r1, #12
      for( uint8_t i = 0; i < potentio_length; i++){
 8001804:	7b16      	ldrb	r6, [r2, #12]
 8001806:	1c5d      	adds	r5, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	42b3      	cmp	r3, r6
 800180c:	eba4 0001 	sub.w	r0, r4, r1
 8001810:	f104 0402 	add.w	r4, r4, #2
 8001814:	da0c      	bge.n	8001830 <_ZNK17jsk_imu_mini_msgs8Potentio9serializeEPh+0x64>
      *(outbuffer + offset + 0) = (this->potentio[i] >> (8 * 0)) & 0xFF;
 8001816:	6910      	ldr	r0, [r2, #16]
 8001818:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800181c:	f804 0c02 	strb.w	r0, [r4, #-2]
      *(outbuffer + offset + 1) = (this->potentio[i] >> (8 * 1)) & 0xFF;
 8001820:	6910      	ldr	r0, [r2, #16]
 8001822:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f804 3c01 	strb.w	r3, [r4, #-1]
      for( uint8_t i = 0; i < potentio_length; i++){
 800182c:	462b      	mov	r3, r5
 800182e:	e7e9      	b.n	8001804 <_ZNK17jsk_imu_mini_msgs8Potentio9serializeEPh+0x38>
      offset += sizeof(this->potentio[i]);
      }
      return offset;
    }
 8001830:	bd70      	pop	{r4, r5, r6, pc}
	...

08001834 <_ZN17jsk_imu_mini_msgs8Potentio7getTypeEv>:
        memcpy( &(this->potentio[i]), &(this->st_potentio), sizeof(uint16_t));
      }
     return offset;
    }

    const char * getType(){ return "jsk_imu_mini_msgs/Potentio"; };
 8001834:	4800      	ldr	r0, [pc, #0]	; (8001838 <_ZN17jsk_imu_mini_msgs8Potentio7getTypeEv+0x4>)
 8001836:	4770      	bx	lr
 8001838:	08009185 	.word	0x08009185

0800183c <_ZN17jsk_imu_mini_msgs8Potentio6getMD5Ev>:
    const char * getMD5(){ return "3c38bfc62efc8af1fef221b81830300a"; };
 800183c:	4800      	ldr	r0, [pc, #0]	; (8001840 <_ZN17jsk_imu_mini_msgs8Potentio6getMD5Ev+0x4>)
 800183e:	4770      	bx	lr
 8001840:	08009164 	.word	0x08009164

08001844 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001844:	6843      	ldr	r3, [r0, #4]
 8001846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001848:	6843      	ldr	r3, [r0, #4]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800184e:	88c3      	ldrh	r3, [r0, #6]
 8001850:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001852:	79c3      	ldrb	r3, [r0, #7]
 8001854:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001856:	6883      	ldr	r3, [r0, #8]
 8001858:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800185a:	6883      	ldr	r3, [r0, #8]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001860:	8943      	ldrh	r3, [r0, #10]
 8001862:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001864:	7ac3      	ldrb	r3, [r0, #11]
 8001866:	71cb      	strb	r3, [r1, #7]
    virtual int serialize(unsigned char *outbuffer) const
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	f101 0208 	add.w	r2, r1, #8
 800186e:	f100 050c 	add.w	r5, r0, #12
      offset += sizeof(this->stamp.nsec);
 8001872:	2408      	movs	r4, #8
      for( uint8_t i = 0; i < 3; i++){
 8001874:	2c14      	cmp	r4, #20
 8001876:	f102 0204 	add.w	r2, r2, #4
 800187a:	d00e      	beq.n	800189a <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x56>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.real = this->acc_data[i];
 800187c:	f855 3b04 	ldr.w	r3, [r5], #4
      *(outbuffer + offset + 0) = (u_acc_datai.base >> (8 * 0)) & 0xFF;
 8001880:	f802 3c04 	strb.w	r3, [r2, #-4]
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
 8001884:	0a1e      	lsrs	r6, r3, #8
 8001886:	f802 6c03 	strb.w	r6, [r2, #-3]
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 800188a:	0c1e      	lsrs	r6, r3, #16
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 800188c:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 800188e:	f802 6c02 	strb.w	r6, [r2, #-2]
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 8001892:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001896:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 3; i++){
 8001898:	e7ec      	b.n	8001874 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x30>
 800189a:	f100 0418 	add.w	r4, r0, #24
 800189e:	f101 0214 	add.w	r2, r1, #20
 80018a2:	f100 0624 	add.w	r6, r0, #36	; 0x24
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 80018a6:	42b4      	cmp	r4, r6
 80018a8:	eba2 0301 	sub.w	r3, r2, r1
 80018ac:	f102 0204 	add.w	r2, r2, #4
 80018b0:	d00d      	beq.n	80018ce <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x8a>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.real = this->gyro_data[i];
 80018b2:	f854 3b04 	ldr.w	r3, [r4], #4
      *(outbuffer + offset + 0) = (u_gyro_datai.base >> (8 * 0)) & 0xFF;
 80018b6:	f802 3c04 	strb.w	r3, [r2, #-4]
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
 80018ba:	0a1d      	lsrs	r5, r3, #8
 80018bc:	f802 5c03 	strb.w	r5, [r2, #-3]
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 80018c0:	0c1d      	lsrs	r5, r3, #16
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 80018c2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 80018c4:	f802 5c02 	strb.w	r5, [r2, #-2]
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 80018c8:	f802 3c01 	strb.w	r3, [r2, #-1]
      for( uint8_t i = 0; i < 3; i++){
 80018cc:	e7eb      	b.n	80018a6 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x62>
 80018ce:	440b      	add	r3, r1
 80018d0:	f100 0630 	add.w	r6, r0, #48	; 0x30
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 80018d4:	42b4      	cmp	r4, r6
 80018d6:	eba3 0201 	sub.w	r2, r3, r1
 80018da:	f103 0304 	add.w	r3, r3, #4
 80018de:	d00d      	beq.n	80018fc <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0xb8>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.real = this->mag_data[i];
 80018e0:	f854 2b04 	ldr.w	r2, [r4], #4
      *(outbuffer + offset + 0) = (u_mag_datai.base >> (8 * 0)) & 0xFF;
 80018e4:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
 80018e8:	0a15      	lsrs	r5, r2, #8
 80018ea:	f803 5c03 	strb.w	r5, [r3, #-3]
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 80018ee:	0c15      	lsrs	r5, r2, #16
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 80018f0:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 80018f2:	f803 5c02 	strb.w	r5, [r3, #-2]
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 80018f6:	f803 2c01 	strb.w	r2, [r3, #-1]
      for( uint8_t i = 0; i < 3; i++){
 80018fa:	e7eb      	b.n	80018d4 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0x90>
 80018fc:	440a      	add	r2, r1
 80018fe:	f100 033c 	add.w	r3, r0, #60	; 0x3c
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 8001902:	429c      	cmp	r4, r3
 8001904:	eba2 0001 	sub.w	r0, r2, r1
 8001908:	f102 0204 	add.w	r2, r2, #4
 800190c:	d00d      	beq.n	800192a <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0xe6>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.real = this->angles[i];
 800190e:	f854 0b04 	ldr.w	r0, [r4], #4
      *(outbuffer + offset + 0) = (u_anglesi.base >> (8 * 0)) & 0xFF;
 8001912:	f802 0c04 	strb.w	r0, [r2, #-4]
      *(outbuffer + offset + 1) = (u_anglesi.base >> (8 * 1)) & 0xFF;
 8001916:	0a05      	lsrs	r5, r0, #8
 8001918:	f802 5c03 	strb.w	r5, [r2, #-3]
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
 800191c:	0c05      	lsrs	r5, r0, #16
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
 800191e:	0e00      	lsrs	r0, r0, #24
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
 8001920:	f802 5c02 	strb.w	r5, [r2, #-2]
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
 8001924:	f802 0c01 	strb.w	r0, [r2, #-1]
      for( uint8_t i = 0; i < 3; i++){
 8001928:	e7eb      	b.n	8001902 <_ZNK17jsk_imu_mini_msgs3Imu9serializeEPh+0xbe>
      offset += sizeof(this->angles[i]);
      }
      return offset;
    }
 800192a:	bd70      	pop	{r4, r5, r6, pc}

0800192c <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800192c:	b570      	push	{r4, r5, r6, lr}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800192e:	780a      	ldrb	r2, [r1, #0]
 8001930:	6042      	str	r2, [r0, #4]
    virtual int deserialize(unsigned char *inbuffer)
 8001932:	4603      	mov	r3, r0
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001934:	7848      	ldrb	r0, [r1, #1]
 8001936:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800193a:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800193c:	7888      	ldrb	r0, [r1, #2]
 800193e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001942:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001944:	78c8      	ldrb	r0, [r1, #3]
 8001946:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800194a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800194c:	790a      	ldrb	r2, [r1, #4]
 800194e:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001950:	7948      	ldrb	r0, [r1, #5]
 8001952:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001956:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001958:	7988      	ldrb	r0, [r1, #6]
 800195a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800195e:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001960:	79c8      	ldrb	r0, [r1, #7]
 8001962:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	f101 0408 	add.w	r4, r1, #8
 800196c:	f103 050c 	add.w	r5, r3, #12
      offset += sizeof(this->stamp.nsec);
 8001970:	2008      	movs	r0, #8
      for( uint8_t i = 0; i < 3; i++){
 8001972:	2814      	cmp	r0, #20
 8001974:	f104 0404 	add.w	r4, r4, #4
 8001978:	d011      	beq.n	800199e <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x72>
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.base = 0;
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800197a:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800197e:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001982:	0412      	lsls	r2, r2, #16
 8001984:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001988:	f814 6c04 	ldrb.w	r6, [r4, #-4]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800198c:	4332      	orrs	r2, r6
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800198e:	f814 6c01 	ldrb.w	r6, [r4, #-1]
      this->acc_data[i] = u_acc_datai.real;
 8001992:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8001996:	f845 2b04 	str.w	r2, [r5], #4
 800199a:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 800199c:	e7e9      	b.n	8001972 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x46>
 800199e:	f101 0414 	add.w	r4, r1, #20
 80019a2:	f103 0518 	add.w	r5, r3, #24
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 80019a6:	2820      	cmp	r0, #32
 80019a8:	f104 0404 	add.w	r4, r4, #4
 80019ac:	d011      	beq.n	80019d2 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xa6>
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.base = 0;
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ae:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019b2:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019b6:	0412      	lsls	r2, r2, #16
 80019b8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019bc:	f814 6c04 	ldrb.w	r6, [r4, #-4]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019c0:	4332      	orrs	r2, r6
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019c2:	f814 6c01 	ldrb.w	r6, [r4, #-1]
      this->gyro_data[i] = u_gyro_datai.real;
 80019c6:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 80019ca:	f845 2b04 	str.w	r2, [r5], #4
 80019ce:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 80019d0:	e7e9      	b.n	80019a6 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x7a>
 80019d2:	f101 0420 	add.w	r4, r1, #32
 80019d6:	f103 0524 	add.w	r5, r3, #36	; 0x24
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 80019da:	282c      	cmp	r0, #44	; 0x2c
 80019dc:	f104 0404 	add.w	r4, r4, #4
 80019e0:	d011      	beq.n	8001a06 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xda>
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.base = 0;
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019e2:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019e6:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ea:	0412      	lsls	r2, r2, #16
 80019ec:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019f0:	f814 6c04 	ldrb.w	r6, [r4, #-4]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019f4:	4332      	orrs	r2, r6
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019f6:	f814 6c01 	ldrb.w	r6, [r4, #-1]
      this->mag_data[i] = u_mag_datai.real;
 80019fa:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 80019fe:	f845 2b04 	str.w	r2, [r5], #4
 8001a02:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 8001a04:	e7e9      	b.n	80019da <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xae>
 8001a06:	312c      	adds	r1, #44	; 0x2c
 8001a08:	3330      	adds	r3, #48	; 0x30
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 8001a0a:	2838      	cmp	r0, #56	; 0x38
 8001a0c:	f101 0104 	add.w	r1, r1, #4
 8001a10:	d011      	beq.n	8001a36 <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0x10a>
        uint32_t base;
      } u_anglesi;
      u_anglesi.base = 0;
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a12:	f811 2c02 	ldrb.w	r2, [r1, #-2]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a16:	f811 4c03 	ldrb.w	r4, [r1, #-3]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a1a:	0412      	lsls	r2, r2, #16
 8001a1c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a20:	f811 4c04 	ldrb.w	r4, [r1, #-4]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a24:	4322      	orrs	r2, r4
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a26:	f811 4c01 	ldrb.w	r4, [r1, #-1]
      this->angles[i] = u_anglesi.real;
 8001a2a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8001a2e:	f843 2b04 	str.w	r2, [r3], #4
 8001a32:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 8001a34:	e7e9      	b.n	8001a0a <_ZN17jsk_imu_mini_msgs3Imu11deserializeEPh+0xde>
      offset += sizeof(this->angles[i]);
      }
     return offset;
    }
 8001a36:	bd70      	pop	{r4, r5, r6, pc}

08001a38 <_ZN17jsk_imu_mini_msgs3Imu7getTypeEv>:

    const char * getType(){ return "jsk_imu_mini_msgs/Imu"; };
 8001a38:	4800      	ldr	r0, [pc, #0]	; (8001a3c <_ZN17jsk_imu_mini_msgs3Imu7getTypeEv+0x4>)
 8001a3a:	4770      	bx	lr
 8001a3c:	0800914e 	.word	0x0800914e

08001a40 <_ZN17jsk_imu_mini_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "68b769ca85e5d9c44dbce51dc60e4be7"; };
 8001a40:	4800      	ldr	r0, [pc, #0]	; (8001a44 <_ZN17jsk_imu_mini_msgs3Imu6getMD5Ev+0x4>)
 8001a42:	4770      	bx	lr
 8001a44:	0800912d 	.word	0x0800912d

08001a48 <_ZNK17jsk_imu_mini_msgs11DesireCoord9serializeEPh>:
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8001a48:	6843      	ldr	r3, [r0, #4]
 8001a4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8001a4c:	0a1a      	lsrs	r2, r3, #8
 8001a4e:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8001a50:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8001a52:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8001a54:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8001a56:	70cb      	strb	r3, [r1, #3]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 8001a58:	6883      	ldr	r3, [r0, #8]
 8001a5a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 8001a5c:	0a1a      	lsrs	r2, r3, #8
 8001a5e:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8001a60:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8001a62:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8001a64:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8001a66:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 8001a68:	68c3      	ldr	r3, [r0, #12]
 8001a6a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 8001a6c:	0a1a      	lsrs	r2, r3, #8
 8001a6e:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8001a70:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8001a72:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8001a74:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8001a76:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->yaw);
      *(outbuffer + offset + 0) = (this->coord_type >> (8 * 0)) & 0xFF;
 8001a78:	7c03      	ldrb	r3, [r0, #16]
 8001a7a:	730b      	strb	r3, [r1, #12]
      offset += sizeof(this->coord_type);
      return offset;
    }
 8001a7c:	200d      	movs	r0, #13
 8001a7e:	4770      	bx	lr

08001a80 <_ZN17jsk_imu_mini_msgs11DesireCoord11deserializeEPh>:
      u_roll.base = 0;
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->roll = u_roll.real;
 8001a80:	680b      	ldr	r3, [r1, #0]
 8001a82:	6043      	str	r3, [r0, #4]
      u_pitch.base = 0;
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->pitch = u_pitch.real;
 8001a84:	684b      	ldr	r3, [r1, #4]
 8001a86:	6083      	str	r3, [r0, #8]
      u_yaw.base = 0;
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->yaw = u_yaw.real;
 8001a88:	688b      	ldr	r3, [r1, #8]
 8001a8a:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->yaw);
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 8001a8c:	7b0b      	ldrb	r3, [r1, #12]
 8001a8e:	7403      	strb	r3, [r0, #16]
      offset += sizeof(this->coord_type);
     return offset;
    }
 8001a90:	200d      	movs	r0, #13
 8001a92:	4770      	bx	lr

08001a94 <_ZN17jsk_imu_mini_msgs11DesireCoord7getTypeEv>:

    const char * getType(){ return "jsk_imu_mini_msgs/DesireCoord"; };
 8001a94:	4800      	ldr	r0, [pc, #0]	; (8001a98 <_ZN17jsk_imu_mini_msgs11DesireCoord7getTypeEv+0x4>)
 8001a96:	4770      	bx	lr
 8001a98:	0800910f 	.word	0x0800910f

08001a9c <_ZN17jsk_imu_mini_msgs11DesireCoord6getMD5Ev>:
    const char * getMD5(){ return "6ccf1a68453182818d4a1d0d5013bd0d"; };
 8001a9c:	4800      	ldr	r0, [pc, #0]	; (8001aa0 <_ZN17jsk_imu_mini_msgs11DesireCoord6getMD5Ev+0x4>)
 8001a9e:	4770      	bx	lr
 8001aa0:	080090ee 	.word	0x080090ee

08001aa4 <_ZNK17aerial_robot_msgs9Barometer9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001aa4:	6843      	ldr	r3, [r0, #4]
 8001aa6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001aa8:	6843      	ldr	r3, [r0, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001aae:	88c3      	ldrh	r3, [r0, #6]
 8001ab0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001ab2:	79c3      	ldrb	r3, [r0, #7]
 8001ab4:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001ab6:	6883      	ldr	r3, [r0, #8]
 8001ab8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8001aba:	6883      	ldr	r3, [r0, #8]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001ac0:	8943      	ldrh	r3, [r0, #10]
 8001ac2:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001ac4:	7ac3      	ldrb	r3, [r0, #11]
 8001ac6:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.real = this->altitude;
      *(outbuffer + offset + 0) = (u_altitude.base >> (8 * 0)) & 0xFF;
 8001ac8:	68c3      	ldr	r3, [r0, #12]
 8001aca:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_altitude.base >> (8 * 1)) & 0xFF;
 8001acc:	0a1a      	lsrs	r2, r3, #8
 8001ace:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 8001ad0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 8001ad2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 8001ad4:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 8001ad6:	72cb      	strb	r3, [r1, #11]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.real = this->pressure;
      *(outbuffer + offset + 0) = (u_pressure.base >> (8 * 0)) & 0xFF;
 8001ad8:	6903      	ldr	r3, [r0, #16]
 8001ada:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_pressure.base >> (8 * 1)) & 0xFF;
 8001adc:	0a1a      	lsrs	r2, r3, #8
 8001ade:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 8001ae0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 8001ae2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 8001ae4:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 8001ae6:	73cb      	strb	r3, [r1, #15]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 8001ae8:	6943      	ldr	r3, [r0, #20]
 8001aea:	740b      	strb	r3, [r1, #16]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8001aec:	0a1a      	lsrs	r2, r3, #8
 8001aee:	744a      	strb	r2, [r1, #17]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8001af0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8001af2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8001af4:	748a      	strb	r2, [r1, #18]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8001af6:	74cb      	strb	r3, [r1, #19]
      offset += sizeof(this->temperature);
      return offset;
    }
 8001af8:	2014      	movs	r0, #20
 8001afa:	4770      	bx	lr

08001afc <_ZN17aerial_robot_msgs9Barometer11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001afc:	780b      	ldrb	r3, [r1, #0]
 8001afe:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b00:	784a      	ldrb	r2, [r1, #1]
 8001b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b06:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b08:	788a      	ldrb	r2, [r1, #2]
 8001b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b0e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b10:	78ca      	ldrb	r2, [r1, #3]
 8001b12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b16:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001b18:	790b      	ldrb	r3, [r1, #4]
 8001b1a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b1c:	794a      	ldrb	r2, [r1, #5]
 8001b1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b22:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b24:	798a      	ldrb	r2, [r1, #6]
 8001b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b2a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b2c:	79ca      	ldrb	r2, [r1, #7]
 8001b2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b32:	6083      	str	r3, [r0, #8]
      u_altitude.base = 0;
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->altitude = u_altitude.real;
 8001b34:	688b      	ldr	r3, [r1, #8]
 8001b36:	60c3      	str	r3, [r0, #12]
      u_pressure.base = 0;
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->pressure = u_pressure.real;
 8001b38:	68cb      	ldr	r3, [r1, #12]
 8001b3a:	6103      	str	r3, [r0, #16]
      u_temperature.base = 0;
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->temperature = u_temperature.real;
 8001b3c:	690b      	ldr	r3, [r1, #16]
 8001b3e:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->temperature);
     return offset;
    }
 8001b40:	2014      	movs	r0, #20
 8001b42:	4770      	bx	lr

08001b44 <_ZN17aerial_robot_msgs9Barometer7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Barometer"; };
 8001b44:	4800      	ldr	r0, [pc, #0]	; (8001b48 <_ZN17aerial_robot_msgs9Barometer7getTypeEv+0x4>)
 8001b46:	4770      	bx	lr
 8001b48:	080090d2 	.word	0x080090d2

08001b4c <_ZN17aerial_robot_msgs9Barometer6getMD5Ev>:
    const char * getMD5(){ return "b732c389660333d48fe976feb5768402"; };
 8001b4c:	4800      	ldr	r0, [pc, #0]	; (8001b50 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev+0x4>)
 8001b4e:	4770      	bx	lr
 8001b50:	080090b1 	.word	0x080090b1

08001b54 <_ZNK17aerial_robot_msgs3Gps9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001b54:	6843      	ldr	r3, [r0, #4]
 8001b56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001b58:	6843      	ldr	r3, [r0, #4]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001b5e:	88c3      	ldrh	r3, [r0, #6]
 8001b60:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001b62:	79c3      	ldrb	r3, [r0, #7]
 8001b64:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001b66:	6883      	ldr	r3, [r0, #8]
 8001b68:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8001b6a:	6883      	ldr	r3, [r0, #8]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001b70:	8943      	ldrh	r3, [r0, #10]
 8001b72:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001b74:	7ac3      	ldrb	r3, [r0, #11]
 8001b76:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.real = this->location[i];
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 8001b78:	68c3      	ldr	r3, [r0, #12]
 8001b7a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 8001b7c:	0a1a      	lsrs	r2, r3, #8
 8001b7e:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001b80:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001b82:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001b84:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001b86:	72cb      	strb	r3, [r1, #11]
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 8001b88:	6903      	ldr	r3, [r0, #16]
 8001b8a:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 8001b8c:	0a1a      	lsrs	r2, r3, #8
 8001b8e:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001b90:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001b92:	0e1b      	lsrs	r3, r3, #24
    virtual int serialize(unsigned char *outbuffer) const
 8001b94:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001b96:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001b98:	73cb      	strb	r3, [r1, #15]
 8001b9a:	f100 0514 	add.w	r5, r0, #20
 8001b9e:	f101 0210 	add.w	r2, r1, #16
 8001ba2:	2410      	movs	r4, #16
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 8001ba4:	2c18      	cmp	r4, #24
 8001ba6:	f102 0204 	add.w	r2, r2, #4
 8001baa:	d00e      	beq.n	8001bca <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x76>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8001bac:	f855 3b04 	ldr.w	r3, [r5], #4
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8001bb0:	f802 3c04 	strb.w	r3, [r2, #-4]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8001bb4:	0a1e      	lsrs	r6, r3, #8
 8001bb6:	f802 6c03 	strb.w	r6, [r2, #-3]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8001bba:	0c1e      	lsrs	r6, r3, #16
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8001bbc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8001bbe:	f802 6c02 	strb.w	r6, [r2, #-2]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8001bc2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001bc6:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 2; i++){
 8001bc8:	e7ec      	b.n	8001ba4 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x50>
      offset += sizeof(this->velocity[i]);
      }
      *(outbuffer + offset + 0) = (this->sat_num >> (8 * 0)) & 0xFF;
 8001bca:	7f03      	ldrb	r3, [r0, #28]
 8001bcc:	760b      	strb	r3, [r1, #24]
      offset += sizeof(this->sat_num);
      return offset;
    }
 8001bce:	2019      	movs	r0, #25
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}

08001bd2 <_ZN17aerial_robot_msgs3Gps11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001bd2:	780b      	ldrb	r3, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer)
 8001bd4:	b570      	push	{r4, r5, r6, lr}
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001bd6:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bd8:	784a      	ldrb	r2, [r1, #1]
 8001bda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bde:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001be0:	788a      	ldrb	r2, [r1, #2]
 8001be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001be6:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001be8:	78ca      	ldrb	r2, [r1, #3]
 8001bea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bee:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001bf0:	790b      	ldrb	r3, [r1, #4]
 8001bf2:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bf4:	794a      	ldrb	r2, [r1, #5]
 8001bf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bfa:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bfc:	798a      	ldrb	r2, [r1, #6]
 8001bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c02:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c04:	79ca      	ldrb	r2, [r1, #7]
 8001c06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c0a:	6083      	str	r3, [r0, #8]
        uint32_t base;
      } u_locationi;
      u_locationi.base = 0;
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c0c:	7a8b      	ldrb	r3, [r1, #10]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c0e:	7a4a      	ldrb	r2, [r1, #9]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c16:	7a0a      	ldrb	r2, [r1, #8]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c18:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c1a:	7aca      	ldrb	r2, [r1, #11]
      this->location[i] = u_locationi.real;
 8001c1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c20:	60c3      	str	r3, [r0, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c22:	7b8b      	ldrb	r3, [r1, #14]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c24:	7b4a      	ldrb	r2, [r1, #13]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c2c:	7b0a      	ldrb	r2, [r1, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c2e:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c30:	7bca      	ldrb	r2, [r1, #15]
      this->location[i] = u_locationi.real;
 8001c32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c36:	6103      	str	r3, [r0, #16]
 8001c38:	f101 0210 	add.w	r2, r1, #16
 8001c3c:	f100 0514 	add.w	r5, r0, #20
 8001c40:	2410      	movs	r4, #16
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 8001c42:	2c18      	cmp	r4, #24
 8001c44:	f102 0204 	add.w	r2, r2, #4
 8001c48:	d011      	beq.n	8001c6e <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x9c>
        uint32_t base;
      } u_velocityi;
      u_velocityi.base = 0;
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c4a:	f812 3c02 	ldrb.w	r3, [r2, #-2]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c4e:	f812 6c03 	ldrb.w	r6, [r2, #-3]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c58:	f812 6c04 	ldrb.w	r6, [r2, #-4]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c5c:	4333      	orrs	r3, r6
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c5e:	f812 6c01 	ldrb.w	r6, [r2, #-1]
      this->velocity[i] = u_velocityi.real;
 8001c62:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8001c66:	f845 3b04 	str.w	r3, [r5], #4
 8001c6a:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 2; i++){
 8001c6c:	e7e9      	b.n	8001c42 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x70>
      offset += sizeof(this->velocity[i]);
      }
      this->sat_num =  ((uint8_t) (*(inbuffer + offset)));
 8001c6e:	7e0b      	ldrb	r3, [r1, #24]
 8001c70:	7703      	strb	r3, [r0, #28]
      offset += sizeof(this->sat_num);
     return offset;
    }
 8001c72:	2019      	movs	r0, #25
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c78 <_ZN17aerial_robot_msgs3Gps7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Gps"; };
 8001c78:	4800      	ldr	r0, [pc, #0]	; (8001c7c <_ZN17aerial_robot_msgs3Gps7getTypeEv+0x4>)
 8001c7a:	4770      	bx	lr
 8001c7c:	0800909b 	.word	0x0800909b

08001c80 <_ZN17aerial_robot_msgs3Gps6getMD5Ev>:
    const char * getMD5(){ return "b9b55701ff5240f76ada29af2827853c"; };
 8001c80:	4800      	ldr	r0, [pc, #0]	; (8001c84 <_ZN17aerial_robot_msgs3Gps6getMD5Ev+0x4>)
 8001c82:	4770      	bx	lr
 8001c84:	0800907a 	.word	0x0800907a

08001c88 <_ZN13StateEstimateD1Ev>:
{
public:
  StateEstimate()
  {
  }
  ~StateEstimate(){}
 8001c88:	4770      	bx	lr

08001c8a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9connectedEv>:


    /* Are we connected to the PC? */
    virtual bool connected() {
      return configured_;
    };
 8001c8a:	f890 02d0 	ldrb.w	r0, [r0, #720]	; 0x2d0
 8001c8e:	4770      	bx	lr

08001c90 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef>:

  static void TransmitCplt(DMA_HandleTypeDef *hdma)
  {
    Hardware* huart = ( Hardware* )(hdma)->Parent;
    /* DMA Normal mode*/
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001c90:	6803      	ldr	r3, [r0, #0]
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 8001c92:	6b81      	ldr	r1, [r0, #56]	; 0x38
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	680a      	ldr	r2, [r1, #0]
 8001c98:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  static void TransmitCplt(DMA_HandleTypeDef *hdma)
 8001c9c:	b530      	push	{r4, r5, lr}
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001c9e:	d109      	bne.n	8001cb4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x24>
      {
        huart->TxXferCount = 0;
 8001ca0:	84cb      	strh	r3, [r1, #38]	; 0x26

        /* Disable the DMA transfer for transmit request by setting the DMAT bit
           in the UART CR3 register */
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8001ca2:	6953      	ldr	r3, [r2, #20]
 8001ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca8:	6153      	str	r3, [r2, #20]
 /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001caa:	68d3      	ldr	r3, [r2, #12]
 8001cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
              {
                idle_flag_ = true;
              }

          }
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8001cb0:	60d3      	str	r3, [r2, #12]
 8001cb2:	bd30      	pop	{r4, r5, pc}
        if(!idle_flag_)
 8001cb4:	4847      	ldr	r0, [pc, #284]	; (8001dd4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x144>)
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8001cb6:	6953      	ldr	r3, [r2, #20]
        if(!idle_flag_)
 8001cb8:	7805      	ldrb	r5, [r0, #0]
 8001cba:	6b0c      	ldr	r4, [r1, #48]	; 0x30
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8001cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cc0:	6153      	str	r3, [r2, #20]
        if(!idle_flag_)
 8001cc2:	bb3d      	cbnz	r5, 8001d14 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x84>
            subscript_in_progress_++;
 8001cc4:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x148>)
 8001cc6:	7819      	ldrb	r1, [r3, #0]
 8001cc8:	3101      	adds	r1, #1
 8001cca:	b2c9      	uxtb	r1, r1
            if (subscript_in_progress_ == TX_SIZE)
 8001ccc:	2932      	cmp	r1, #50	; 0x32
            subscript_in_progress_++;
 8001cce:	bf18      	it	ne
 8001cd0:	7019      	strbne	r1, [r3, #0]
            if (subscript_in_progress_ != subscript_to_add_)
 8001cd2:	4942      	ldr	r1, [pc, #264]	; (8001ddc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x14c>)
                subscript_in_progress_ = 0;
 8001cd4:	bf08      	it	eq
 8001cd6:	701d      	strbeq	r5, [r3, #0]
            if (subscript_in_progress_ != subscript_to_add_)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	7809      	ldrb	r1, [r1, #0]
 8001cdc:	4299      	cmp	r1, r3
 8001cde:	d02c      	beq.n	8001d3a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xaa>
                __HAL_DMA_DISABLE(huart->hdmatx);
 8001ce0:	6821      	ldr	r1, [r4, #0]
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8001ce2:	4d3f      	ldr	r5, [pc, #252]	; (8001de0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x150>)
                __HAL_DMA_DISABLE(huart->hdmatx);
 8001ce4:	6808      	ldr	r0, [r1, #0]
 8001ce6:	f020 0001 	bic.w	r0, r0, #1
 8001cea:	6008      	str	r0, [r1, #0]
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8001cec:	20fb      	movs	r0, #251	; 0xfb
 8001cee:	fb00 5003 	mla	r0, r0, r3, r5
 8001cf2:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
 8001cf6:	6048      	str	r0, [r1, #4]
                uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 8001cf8:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 8001cfc:	ebc3 0380 	rsb	r3, r3, r0, lsl #2
 8001d00:	442b      	add	r3, r5
                huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 8001d02:	60cb      	str	r3, [r1, #12]
                huart->Instance->CR3 |= USART_CR3_DMAT; //enable dma request in hsuart side
 8001d04:	6953      	ldr	r3, [r2, #20]
 8001d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0a:	6153      	str	r3, [r2, #20]
                __HAL_DMA_ENABLE(huart->hdmatx);
 8001d0c:	680b      	ldr	r3, [r1, #0]
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	600b      	str	r3, [r1, #0]
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x154>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d916      	bls.n	8001d4a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xba>
 8001d1c:	3218      	adds	r2, #24
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xb0>
 8001d22:	3218      	adds	r2, #24
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00d      	beq.n	8001d44 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xb4>
 8001d28:	3218      	adds	r2, #24
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	bf0c      	ite	eq
 8001d2e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001d32:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x158>)
 8001d38:	e7ba      	b.n	8001cb0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20>
                idle_flag_ = true;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	7003      	strb	r3, [r0, #0]
 8001d3e:	e7e9      	b.n	8001d14 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x84>
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8001d40:	2320      	movs	r3, #32
 8001d42:	e7f8      	b.n	8001d36 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa6>
 8001d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d48:	e7f5      	b.n	8001d36 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa6>
 8001d4a:	4a28      	ldr	r2, [pc, #160]	; (8001dec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x15c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d915      	bls.n	8001d7c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xec>
 8001d50:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00c      	beq.n	8001d72 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xe2>
 8001d58:	3218      	adds	r2, #24
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00b      	beq.n	8001d76 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xe6>
 8001d5e:	3218      	adds	r2, #24
 8001d60:	4293      	cmp	r3, r2
 8001d62:	bf0c      	ite	eq
 8001d64:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001d68:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x158>)
 8001d6e:	6093      	str	r3, [r2, #8]
 8001d70:	bd30      	pop	{r4, r5, pc}
 8001d72:	2320      	movs	r3, #32
 8001d74:	e7fa      	b.n	8001d6c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xdc>
 8001d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d7a:	e7f7      	b.n	8001d6c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xdc>
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x160>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d913      	bls.n	8001daa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11a>
 8001d82:	3218      	adds	r2, #24
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00b      	beq.n	8001da0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x110>
 8001d88:	3218      	adds	r2, #24
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00a      	beq.n	8001da4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x114>
 8001d8e:	3218      	adds	r2, #24
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bf0c      	ite	eq
 8001d94:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001d98:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x164>)
 8001d9e:	e787      	b.n	8001cb0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20>
 8001da0:	2320      	movs	r3, #32
 8001da2:	e7fb      	b.n	8001d9c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x10c>
 8001da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001da8:	e7f8      	b.n	8001d9c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x10c>
 8001daa:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x168>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00b      	beq.n	8001dc8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x138>
 8001db0:	3218      	adds	r2, #24
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00a      	beq.n	8001dcc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x13c>
 8001db6:	3218      	adds	r2, #24
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf0c      	ite	eq
 8001dbc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001dc0:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x164>)
 8001dc6:	e7d2      	b.n	8001d6e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xde>
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e7fb      	b.n	8001dc4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x134>
 8001dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd0:	e7f8      	b.n	8001dc4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x134>
 8001dd2:	bf00      	nop
 8001dd4:	20000a74 	.word	0x20000a74
 8001dd8:	20000a76 	.word	0x20000a76
 8001ddc:	20000a75 	.word	0x20000a75
 8001de0:	20000a77 	.word	0x20000a77
 8001de4:	40026458 	.word	0x40026458
 8001de8:	40026400 	.word	0x40026400
 8001dec:	400260b8 	.word	0x400260b8
 8001df0:	40026058 	.word	0x40026058
 8001df4:	40026000 	.word	0x40026000
 8001df8:	40026010 	.word	0x40026010

08001dfc <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef>:
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001dfc:	6803      	ldr	r3, [r0, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f412 7280 	ands.w	r2, r2, #256	; 0x100
  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
 8001e04:	b530      	push	{r4, r5, lr}
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001e06:	d10e      	bne.n	8001e26 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x2a>
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 8001e08:	6b83      	ldr	r3, [r0, #56]	; 0x38
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8001e0a:	6819      	ldr	r1, [r3, #0]
        huart->RxXferCount = 0;
 8001e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8001e0e:	694a      	ldr	r2, [r1, #20]
 8001e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e14:	614a      	str	r2, [r1, #20]
        if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8001e16:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001e1a:	2a23      	cmp	r2, #35	; 0x23
          huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2221      	moveq	r2, #33	; 0x21
          huart->gState = HAL_UART_STATE_READY;
 8001e20:	2220      	movne	r2, #32
 8001e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    ring_buf_->push(rx_value_[i]);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x54>)
 8001e28:	4d0a      	ldr	r5, [pc, #40]	; (8001e54 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x58>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f9b2 3192 	ldrsh.w	r3, [r2, #402]	; 0x192
    if (byte_to_add_ == buffer_length_)
 8001e30:	f8b2 0194 	ldrh.w	r0, [r2, #404]	; 0x194
 8001e34:	2100      	movs	r1, #0
    buf_[byte_to_add_] = new_value;
 8001e36:	5d4c      	ldrb	r4, [r1, r5]
 8001e38:	54d4      	strb	r4, [r2, r3]
    byte_to_add_++;
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b21b      	sxth	r3, r3
for(int i = 0; i < RX_BURST_SIZE; i++)
 8001e3e:	3101      	adds	r1, #1
        byte_to_add_ = 0;
 8001e40:	4283      	cmp	r3, r0
 8001e42:	bf08      	it	eq
 8001e44:	2300      	moveq	r3, #0
for(int i = 0; i < RX_BURST_SIZE; i++)
 8001e46:	2908      	cmp	r1, #8
 8001e48:	d1f5      	bne.n	8001e36 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x3a>
 8001e4a:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
 8001e4e:	bd30      	pop	{r4, r5, pc}
 8001e50:	20003b88 	.word	0x20003b88
 8001e54:	20003b7d 	.word	0x20003b7d

08001e58 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE15getEndpointTypeEv>:
        this->fun_obj_(obj_, msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 8001e58:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001e5a:	4770      	bx	lr

08001e5c <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 8001e5c:	4800      	ldr	r0, [pc, #0]	; (8001e60 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE10getMsgTypeEv+0x4>)
 8001e5e:	4770      	bx	lr
 8001e60:	0800910f 	.word	0x0800910f

08001e64 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8001e64:	4800      	ldr	r0, [pc, #0]	; (8001e68 <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev+0x4>)
 8001e66:	4770      	bx	lr
 8001e68:	080090ee 	.word	0x080090ee

08001e6c <_ZN3ros11Subscriber2IN17jsk_imu_mini_msgs11DesireCoordE16AttitudeEstimateE8callbackEPh>:
      virtual void callback(unsigned char* data){
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	4604      	mov	r4, r0
        msg.deserialize(data);
 8001e70:	f100 050c 	add.w	r5, r0, #12
 8001e74:	4628      	mov	r0, r5
 8001e76:	f7ff fe03 	bl	8001a80 <_ZN17jsk_imu_mini_msgs11DesireCoord11deserializeEPh>
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
 8001e7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        this->fun_obj_(obj_, msg);
 8001e7c:	6a20      	ldr	r0, [r4, #32]
 8001e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e80:	f012 0f01 	tst.w	r2, #1
 8001e84:	ea4f 0262 	mov.w	r2, r2, asr #1
 8001e88:	bf18      	it	ne
 8001e8a:	5881      	ldrne	r1, [r0, r2]
 8001e8c:	4410      	add	r0, r2
 8001e8e:	bf18      	it	ne
 8001e90:	58cb      	ldrne	r3, [r1, r3]
 8001e92:	4629      	mov	r1, r5
      }
 8001e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001e98:	4718      	bx	r3

08001e9a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8001e9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      *(outbuffer + offset++) = ints_length;
 8001e9e:	7903      	ldrb	r3, [r0, #4]
 8001ea0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 8001ea2:	2300      	movs	r3, #0
    virtual int serialize(unsigned char *outbuffer) const
 8001ea4:	460c      	mov	r4, r1
      *(outbuffer + offset++) = 0;
 8001ea6:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 8001ea8:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 8001eaa:	70cb      	strb	r3, [r1, #3]
    virtual int serialize(unsigned char *outbuffer) const
 8001eac:	4607      	mov	r7, r0
 8001eae:	3104      	adds	r1, #4
      *(outbuffer + offset++) = 0;
 8001eb0:	461a      	mov	r2, r3
      for( uint8_t i = 0; i < ints_length; i++){
 8001eb2:	793d      	ldrb	r5, [r7, #4]
 8001eb4:	1c50      	adds	r0, r2, #1
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	42aa      	cmp	r2, r5
 8001eba:	eba1 0304 	sub.w	r3, r1, r4
 8001ebe:	f101 0104 	add.w	r1, r1, #4
 8001ec2:	da0f      	bge.n	8001ee4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x4a>
      u_intsi.real = this->ints[i];
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001eca:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001ece:	0a1a      	lsrs	r2, r3, #8
 8001ed0:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001ed4:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ed6:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001ed8:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001edc:	f801 3c01 	strb.w	r3, [r1, #-1]
      for( uint8_t i = 0; i < ints_length; i++){
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	e7e6      	b.n	8001eb2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x18>
      *(outbuffer + offset++) = floats_length;
 8001ee4:	7c3a      	ldrb	r2, [r7, #16]
 8001ee6:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 8001ee8:	18e1      	adds	r1, r4, r3
 8001eea:	2200      	movs	r2, #0
      *(outbuffer + offset++) = 0;
 8001eec:	3304      	adds	r3, #4
      *(outbuffer + offset++) = 0;
 8001eee:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 8001ef0:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 8001ef2:	70ca      	strb	r2, [r1, #3]
 8001ef4:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 8001ef6:	7c38      	ldrb	r0, [r7, #16]
 8001ef8:	1c51      	adds	r1, r2, #1
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4282      	cmp	r2, r0
 8001efe:	eba3 0604 	sub.w	r6, r3, r4
 8001f02:	f103 0304 	add.w	r3, r3, #4
 8001f06:	da0f      	bge.n	8001f28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8e>
      u_floatsi.real = this->floats[i];
 8001f08:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f0a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001f0e:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f12:	0a10      	lsrs	r0, r2, #8
 8001f14:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f18:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f1a:	0e12      	lsrs	r2, r2, #24
 8001f1c:	f803 2c01 	strb.w	r2, [r3, #-1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f20:	f803 0c02 	strb.w	r0, [r3, #-2]
      for( uint8_t i = 0; i < floats_length; i++){
 8001f24:	460a      	mov	r2, r1
 8001f26:	e7e6      	b.n	8001ef6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      *(outbuffer + offset++) = strings_length;
 8001f28:	7f3b      	ldrb	r3, [r7, #28]
 8001f2a:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 8001f2c:	19a2      	adds	r2, r4, r6
 8001f2e:	2300      	movs	r3, #0
 8001f30:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 8001f32:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 8001f34:	3604      	adds	r6, #4
 8001f36:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 8001f38:	b2dd      	uxtb	r5, r3
 8001f3a:	f103 0901 	add.w	r9, r3, #1
 8001f3e:	7f3b      	ldrb	r3, [r7, #28]
 8001f40:	429d      	cmp	r5, r3
 8001f42:	da11      	bge.n	8001f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xce>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001f4a:	f7fe f967 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 8001f4e:	51a0      	str	r0, [r4, r6]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 8001f52:	3604      	adds	r6, #4
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f54:	4680      	mov	r8, r0
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f56:	4602      	mov	r2, r0
 8001f58:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8001f5c:	19a0      	adds	r0, r4, r6
 8001f5e:	f006 fa7b 	bl	8008458 <memcpy>
      offset += length_stringsi;
 8001f62:	4446      	add	r6, r8
      for( uint8_t i = 0; i < strings_length; i++){
 8001f64:	464b      	mov	r3, r9
 8001f66:	e7e7      	b.n	8001f38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x9e>
    }
 8001f68:	4630      	mov	r0, r6
 8001f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001f6e <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8001f6e:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001f70:	7903      	ldrb	r3, [r0, #4]
 8001f72:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 8001f74:	4606      	mov	r6, r0
      uint32_t length_msg = strlen(this->msg);
 8001f76:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8001f78:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 8001f7a:	f7fe f94f 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 8001f7e:	f8c5 0001 	str.w	r0, [r5, #1]
      uint32_t length_msg = strlen(this->msg);
 8001f82:	4604      	mov	r4, r0
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001f84:	4602      	mov	r2, r0
 8001f86:	68b1      	ldr	r1, [r6, #8]
 8001f88:	1d68      	adds	r0, r5, #5
 8001f8a:	f006 fa65 	bl	8008458 <memcpy>
    }
 8001f8e:	1d60      	adds	r0, r4, #5
 8001f90:	bd70      	pop	{r4, r5, r6, pc}

08001f92 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f92:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8001f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f9a:	8883      	ldrh	r3, [r0, #4]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	704b      	strb	r3, [r1, #1]
    virtual int serialize(unsigned char *outbuffer) const
 8001fa0:	4605      	mov	r5, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8001fa2:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8001fa4:	460c      	mov	r4, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 8001fa6:	f7fe f939 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 8001faa:	f8c4 0002 	str.w	r0, [r4, #2]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68a9      	ldr	r1, [r5, #8]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001fb2:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001fb4:	1da0      	adds	r0, r4, #6
 8001fb6:	f006 fa4f 	bl	8008458 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8001fba:	68e8      	ldr	r0, [r5, #12]
 8001fbc:	f7fe f92e 	bl	800021c <strlen>
      offset += length_topic_name;
 8001fc0:	f107 0806 	add.w	r8, r7, #6
      offset += 4;
 8001fc4:	370a      	adds	r7, #10
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 8001fc6:	f844 0008 	str.w	r0, [r4, r8]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68e9      	ldr	r1, [r5, #12]
      uint32_t length_message_type = strlen(this->message_type);
 8001fce:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fd0:	19e0      	adds	r0, r4, r7
 8001fd2:	f006 fa41 	bl	8008458 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fd6:	6928      	ldr	r0, [r5, #16]
 8001fd8:	f7fe f920 	bl	800021c <strlen>
      offset += length_message_type;
 8001fdc:	443e      	add	r6, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fde:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 8001fe0:	51a0      	str	r0, [r4, r6]
      offset += 4;
 8001fe2:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6929      	ldr	r1, [r5, #16]
 8001fe8:	19a0      	adds	r0, r4, r6
      offset += length_md5sum;
 8001fea:	443e      	add	r6, r7
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001fec:	f006 fa34 	bl	8008458 <memcpy>
      u_buffer_size.real = this->buffer_size;
 8001ff0:	696b      	ldr	r3, [r5, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ff2:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001ff4:	4434      	add	r4, r6
 8001ff6:	0a1a      	lsrs	r2, r3, #8
 8001ff8:	7062      	strb	r2, [r4, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001ffa:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ffc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001ffe:	70a2      	strb	r2, [r4, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002000:	70e3      	strb	r3, [r4, #3]
    }
 8002002:	1d30      	adds	r0, r6, #4
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002008 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      uint8_t ints_lengthT = *(inbuffer + offset++);
 800200a:	780e      	ldrb	r6, [r1, #0]
      if(ints_lengthT > ints_length)
 800200c:	7903      	ldrb	r3, [r0, #4]
 800200e:	429e      	cmp	r6, r3
    virtual int deserialize(unsigned char *inbuffer)
 8002010:	4604      	mov	r4, r0
 8002012:	460d      	mov	r5, r1
      if(ints_lengthT > ints_length)
 8002014:	dd04      	ble.n	8002020 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002016:	00b1      	lsls	r1, r6, #2
 8002018:	68c0      	ldr	r0, [r0, #12]
 800201a:	f006 fa35 	bl	8008488 <realloc>
 800201e:	60e0      	str	r0, [r4, #12]
      ints_length = ints_lengthT;
 8002020:	7126      	strb	r6, [r4, #4]
 8002022:	1d2a      	adds	r2, r5, #4
 8002024:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 8002026:	7923      	ldrb	r3, [r4, #4]
 8002028:	1c48      	adds	r0, r1, #1
 800202a:	b2c9      	uxtb	r1, r1
 800202c:	4299      	cmp	r1, r3
 800202e:	eba2 0605 	sub.w	r6, r2, r5
 8002032:	f102 0204 	add.w	r2, r2, #4
 8002036:	da13      	bge.n	8002060 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x58>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002038:	f812 3c02 	ldrb.w	r3, [r2, #-2]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800203c:	f812 6c03 	ldrb.w	r6, [r2, #-3]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002046:	f812 6c04 	ldrb.w	r6, [r2, #-4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800204a:	4333      	orrs	r3, r6
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800204c:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 8002050:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002054:	68e6      	ldr	r6, [r4, #12]
      this->st_ints = u_st_ints.real;
 8002056:	60a3      	str	r3, [r4, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002058:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < ints_length; i++){
 800205c:	4601      	mov	r1, r0
 800205e:	e7e2      	b.n	8002026 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e>
      uint8_t floats_lengthT = *(inbuffer + offset++);
 8002060:	5daf      	ldrb	r7, [r5, r6]
      if(floats_lengthT > floats_length)
 8002062:	7c23      	ldrb	r3, [r4, #16]
 8002064:	429f      	cmp	r7, r3
 8002066:	dd04      	ble.n	8002072 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x6a>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002068:	00b9      	lsls	r1, r7, #2
 800206a:	69a0      	ldr	r0, [r4, #24]
 800206c:	f006 fa0c 	bl	8008488 <realloc>
 8002070:	61a0      	str	r0, [r4, #24]
      offset += 3;
 8002072:	1d33      	adds	r3, r6, #4
      floats_length = floats_lengthT;
 8002074:	7427      	strb	r7, [r4, #16]
 8002076:	442b      	add	r3, r5
 8002078:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 800207a:	b2d1      	uxtb	r1, r2
 800207c:	1c50      	adds	r0, r2, #1
 800207e:	7c22      	ldrb	r2, [r4, #16]
 8002080:	4291      	cmp	r1, r2
 8002082:	eba3 0605 	sub.w	r6, r3, r5
 8002086:	f103 0304 	add.w	r3, r3, #4
 800208a:	da13      	bge.n	80020b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xac>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800208c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002090:	f813 6c03 	ldrb.w	r6, [r3, #-3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002094:	0412      	lsls	r2, r2, #16
 8002096:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800209a:	f813 6c04 	ldrb.w	r6, [r3, #-4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800209e:	4332      	orrs	r2, r6
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020a0:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 80020a4:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020a8:	69a6      	ldr	r6, [r4, #24]
      this->st_floats = u_st_floats.real;
 80020aa:	6162      	str	r2, [r4, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020ac:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < floats_length; i++){
 80020b0:	4602      	mov	r2, r0
 80020b2:	e7e2      	b.n	800207a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
      uint8_t strings_lengthT = *(inbuffer + offset++);
 80020b4:	5daf      	ldrb	r7, [r5, r6]
      if(strings_lengthT > strings_length)
 80020b6:	7f23      	ldrb	r3, [r4, #28]
 80020b8:	429f      	cmp	r7, r3
 80020ba:	dd04      	ble.n	80020c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xbe>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80020bc:	00b9      	lsls	r1, r7, #2
 80020be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80020c0:	f006 f9e2 	bl	8008488 <realloc>
 80020c4:	6260      	str	r0, [r4, #36]	; 0x24
      strings_length = strings_lengthT;
 80020c6:	2100      	movs	r1, #0
 80020c8:	7727      	strb	r7, [r4, #28]
      offset += 3;
 80020ca:	1d30      	adds	r0, r6, #4
      inbuffer[offset+length_st_strings-1]=0;
 80020cc:	460f      	mov	r7, r1
      for( uint8_t i = 0; i < strings_length; i++){
 80020ce:	7f23      	ldrb	r3, [r4, #28]
 80020d0:	b2ce      	uxtb	r6, r1
 80020d2:	429e      	cmp	r6, r3
 80020d4:	da19      	bge.n	800210a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x102>
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 80020d6:	f855 e000 	ldr.w	lr, [r5, r0]
      offset += 4;
 80020da:	1d03      	adds	r3, r0, #4
 80020dc:	18ea      	adds	r2, r5, r3
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020de:	eb0e 0003 	add.w	r0, lr, r3
 80020e2:	eba2 0e05 	sub.w	lr, r2, r5
 80020e6:	4570      	cmp	r0, lr
 80020e8:	d904      	bls.n	80020f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
          inbuffer[k-1]=inbuffer[k];
 80020ea:	f812 eb01 	ldrb.w	lr, [r2], #1
 80020ee:	f802 ec02 	strb.w	lr, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020f2:	e7f6      	b.n	80020e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xda>
      inbuffer[offset+length_st_strings-1]=0;
 80020f4:	182a      	adds	r2, r5, r0
      this->st_strings = (char *)(inbuffer + offset-1);
 80020f6:	3b01      	subs	r3, #1
      inbuffer[offset+length_st_strings-1]=0;
 80020f8:	f802 7c01 	strb.w	r7, [r2, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80020fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 80020fe:	442b      	add	r3, r5
 8002100:	6223      	str	r3, [r4, #32]
 8002102:	3101      	adds	r1, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002104:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      for( uint8_t i = 0; i < strings_length; i++){
 8002108:	e7e1      	b.n	80020ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc6>
    }
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800210c <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 800210c:	b570      	push	{r4, r5, r6, lr}
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800210e:	780b      	ldrb	r3, [r1, #0]
 8002110:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002112:	784a      	ldrb	r2, [r1, #1]
 8002114:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002118:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800211a:	788a      	ldrb	r2, [r1, #2]
 800211c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002120:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002122:	78ca      	ldrb	r2, [r1, #3]
 8002124:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002128:	6043      	str	r3, [r0, #4]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800212a:	790b      	ldrb	r3, [r1, #4]
 800212c:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800212e:	794a      	ldrb	r2, [r1, #5]
 8002130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002134:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002136:	798a      	ldrb	r2, [r1, #6]
 8002138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800213c:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800213e:	79ca      	ldrb	r2, [r1, #7]
 8002140:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002144:	6083      	str	r3, [r0, #8]
      uint8_t potentio_lengthT = *(inbuffer + offset++);
 8002146:	7a0e      	ldrb	r6, [r1, #8]
      if(potentio_lengthT > potentio_length)
 8002148:	7b03      	ldrb	r3, [r0, #12]
 800214a:	429e      	cmp	r6, r3
    virtual int deserialize(unsigned char *inbuffer)
 800214c:	4604      	mov	r4, r0
 800214e:	460d      	mov	r5, r1
      if(potentio_lengthT > potentio_length)
 8002150:	dd04      	ble.n	800215c <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh+0x50>
        this->potentio = (uint16_t*)realloc(this->potentio, potentio_lengthT * sizeof(uint16_t));
 8002152:	0071      	lsls	r1, r6, #1
 8002154:	6900      	ldr	r0, [r0, #16]
 8002156:	f006 f997 	bl	8008488 <realloc>
 800215a:	6120      	str	r0, [r4, #16]
      potentio_length = potentio_lengthT;
 800215c:	7326      	strb	r6, [r4, #12]
 800215e:	f105 010c 	add.w	r1, r5, #12
 8002162:	2300      	movs	r3, #0
      for( uint8_t i = 0; i < potentio_length; i++){
 8002164:	7b22      	ldrb	r2, [r4, #12]
 8002166:	1c5e      	adds	r6, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4293      	cmp	r3, r2
 800216c:	eba1 0005 	sub.w	r0, r1, r5
 8002170:	f101 0102 	add.w	r1, r1, #2
 8002174:	da0c      	bge.n	8002190 <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh+0x84>
      this->st_potentio =  ((uint16_t) (*(inbuffer + offset)));
 8002176:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 800217a:	81e2      	strh	r2, [r4, #14]
      this->st_potentio |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800217c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8002180:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
        memcpy( &(this->potentio[i]), &(this->st_potentio), sizeof(uint16_t));
 8002184:	6920      	ldr	r0, [r4, #16]
      this->st_potentio |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002186:	81e2      	strh	r2, [r4, #14]
        memcpy( &(this->potentio[i]), &(this->st_potentio), sizeof(uint16_t));
 8002188:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      for( uint8_t i = 0; i < potentio_length; i++){
 800218c:	4633      	mov	r3, r6
 800218e:	e7e9      	b.n	8002164 <_ZN17jsk_imu_mini_msgs8Potentio11deserializeEPh+0x58>
    }
 8002190:	bd70      	pop	{r4, r5, r6, pc}
	...

08002194 <_ZN17ComplementaryAHRS10estimationEv>:
    v->y +=  delta[X]  * v_tmp.z - delta[Z]   * v_tmp.x;
  }
  */

  /* core esitmation process, using body frame */
  virtual void estimation() 
 8002194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002198:	ed2d 8b04 	vpush	{d8-d9}
 800219c:	4604      	mov	r4, r0

      rotateV(&EstGb_.V,delta_gyro_angle);
      rotateV(&EstMb_.V,delta_gyro_angle);
 #endif

    float acc_magnitude = acc_b_ * acc_b_; //norm?
 800219e:	f100 0b04 	add.w	fp, r0, #4
  virtual void estimation() 
 80021a2:	b08d      	sub	sp, #52	; 0x34
    float acc_magnitude = acc_b_ * acc_b_; //norm?
 80021a4:	4659      	mov	r1, fp
 80021a6:	4658      	mov	r0, fp
    Vector3f est_g_b_tmp = est_g_b_;
 80021a8:	f104 06b0 	add.w	r6, r4, #176	; 0xb0
    float acc_magnitude = acc_b_ * acc_b_; //norm?
 80021ac:	f003 ffb6 	bl	800611c <_ZNK7Vector3IfEmlERKS0_>
    Vector3f est_g_b_tmp = est_g_b_;
 80021b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_b_;
 80021b4:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    Vector3f est_g_b_tmp = est_g_b_;
 80021b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_b_;
 80021bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c0:	af03      	add	r7, sp, #12
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 80021c2:	f104 091c 	add.w	r9, r4, #28
    Vector3f est_m_b_tmp = est_m_b_;
 80021c6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    float acc_magnitude = acc_b_ * acc_b_; //norm?
 80021ca:	eeb0 8a40 	vmov.f32	s16, s0
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 80021ce:	4648      	mov	r0, r9
 80021d0:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80023f0 <_ZN17ComplementaryAHRS10estimationEv+0x25c>
 80021d4:	f004 f892 	bl	80062fc <_ZNK7Vector3IfEmlEf>
 80021d8:	a906      	add	r1, sp, #24
 80021da:	4668      	mov	r0, sp
 80021dc:	edcd 0a07 	vstr	s1, [sp, #28]
 80021e0:	ed8d 1a08 	vstr	s2, [sp, #32]
 80021e4:	ed8d 0a06 	vstr	s0, [sp, #24]
 80021e8:	f003 ff38 	bl	800605c <_ZNK7Vector3IfErmERKS0_>
 80021ec:	a909      	add	r1, sp, #36	; 0x24
 80021ee:	4630      	mov	r0, r6
 80021f0:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80021f4:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80021f8:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 80021fc:	f004 f810 	bl	8006220 <_ZN7Vector3IfEpLERKS0_>
    est_m_b_ += (est_m_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 8002200:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80023f0 <_ZN17ComplementaryAHRS10estimationEv+0x25c>
 8002204:	4648      	mov	r0, r9
 8002206:	f004 f879 	bl	80062fc <_ZNK7Vector3IfEmlEf>
 800220a:	a906      	add	r1, sp, #24
 800220c:	4638      	mov	r0, r7
 800220e:	ed8d 0a06 	vstr	s0, [sp, #24]
 8002212:	edcd 0a07 	vstr	s1, [sp, #28]
 8002216:	ed8d 1a08 	vstr	s2, [sp, #32]
 800221a:	f003 ff1f 	bl	800605c <_ZNK7Vector3IfErmERKS0_>
 800221e:	a909      	add	r1, sp, #36	; 0x24
 8002220:	4628      	mov	r0, r5
 8002222:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8002226:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 800222a:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800222e:	f003 fff7 	bl	8006220 <_ZN7Vector3IfEpLERKS0_>



    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 8002232:	eddf 7a70 	vldr	s15, [pc, #448]	; 80023f4 <_ZN17ComplementaryAHRS10estimationEv+0x260>
 8002236:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Vector3f est_g_b_tmp = est_g_b_;
 800223e:	46e8      	mov	r8, sp
    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 8002240:	f340 80d2 	ble.w	80023e8 <_ZN17ComplementaryAHRS10estimationEv+0x254>
 8002244:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80023f8 <_ZN17ComplementaryAHRS10estimationEv+0x264>
 8002248:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002250:	bf4c      	ite	mi
 8002252:	f04f 0a01 	movmi.w	sl, #1
 8002256:	f04f 0a00 	movpl.w	sl, #0
    rpy_[Z] = atan2f( EstMv_.V.z * EstGv_.V.y - EstMv_.V.y * EstGv_.V.z,
                      EstMv_.V.x * invG * sqGY_sqGZ  - (EstMv_.V.y * EstGv_.V.y + EstMv_.V.z * EstGv_.V.z) * invG * EstGv_.V.x ) ;//+ MAG_DECLINIATION;
#endif


    est_g_b_tmp = est_g_b_;
 800225a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800225e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    est_m_b_tmp = est_m_b_;
 8002262:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002266:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002408 <_ZN17ComplementaryAHRS10estimationEv+0x274>
 800226a:	e887 0007 	stmia.w	r7, {r0, r1, r2}

    if ( valid_acc == 1 && cnt == 0)
 800226e:	f1ba 0f00 	cmp.w	sl, #0
 8002272:	d022      	beq.n	80022ba <_ZN17ComplementaryAHRS10estimationEv+0x126>
 8002274:	f8d9 3000 	ldr.w	r3, [r9]
 8002278:	b9fb      	cbnz	r3, 80022ba <_ZN17ComplementaryAHRS10estimationEv+0x126>
      est_g_b_ = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_b_) * INV_GYR_CMPF_FACTOR;
 800227a:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80023fc <_ZN17ComplementaryAHRS10estimationEv+0x268>
 800227e:	4640      	mov	r0, r8
 8002280:	f004 f83c 	bl	80062fc <_ZNK7Vector3IfEmlEf>
 8002284:	4659      	mov	r1, fp
 8002286:	a806      	add	r0, sp, #24
 8002288:	ed8d 0a06 	vstr	s0, [sp, #24]
 800228c:	edcd 0a07 	vstr	s1, [sp, #28]
 8002290:	ed8d 1a08 	vstr	s2, [sp, #32]
 8002294:	f004 f872 	bl	800637c <_ZNK7Vector3IfEplERKS0_>
 8002298:	a809      	add	r0, sp, #36	; 0x24
 800229a:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 800229e:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002400 <_ZN17ComplementaryAHRS10estimationEv+0x26c>
 80022a2:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80022a6:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80022aa:	f004 f827 	bl	80062fc <_ZNK7Vector3IfEmlEf>
 80022ae:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 80022b2:	edc4 0a2d 	vstr	s1, [r4, #180]	; 0xb4
 80022b6:	ed84 1a2e 	vstr	s2, [r4, #184]	; 0xb8
    est_m_b_ = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_b_) * INV_GYR_CMPFM_FACTOR;
 80022ba:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 80022be:	4638      	mov	r0, r7
 80022c0:	f004 f81c 	bl	80062fc <_ZNK7Vector3IfEmlEf>
 80022c4:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80022c8:	a806      	add	r0, sp, #24
 80022ca:	ed8d 1a08 	vstr	s2, [sp, #32]
 80022ce:	edcd 0a07 	vstr	s1, [sp, #28]
 80022d2:	ed8d 0a06 	vstr	s0, [sp, #24]
 80022d6:	f004 f851 	bl	800637c <_ZNK7Vector3IfEplERKS0_>
 80022da:	a809      	add	r0, sp, #36	; 0x24
 80022dc:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 80022e0:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002404 <_ZN17ComplementaryAHRS10estimationEv+0x270>
 80022e4:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80022e8:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80022ec:	f004 f806 	bl	80062fc <_ZNK7Vector3IfEmlEf>

    est_g_v_ = r_ * est_g_b_;
 80022f0:	f104 074c 	add.w	r7, r4, #76	; 0x4c
    est_m_b_ = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_b_) * INV_GYR_CMPFM_FACTOR;
 80022f4:	ed84 1a31 	vstr	s2, [r4, #196]	; 0xc4
 80022f8:	edc4 0a30 	vstr	s1, [r4, #192]	; 0xc0
 80022fc:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
    est_g_v_ = r_ * est_g_b_;
 8002300:	4631      	mov	r1, r6
 8002302:	4638      	mov	r0, r7
 8002304:	f004 f98a 	bl	800661c <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    est_m_v_ = r_ * est_m_b_;
 8002308:	4629      	mov	r1, r5
    est_g_v_ = r_ * est_g_b_;
 800230a:	ed84 1a28 	vstr	s2, [r4, #160]	; 0xa0
    est_m_v_ = r_ * est_m_b_;
 800230e:	4638      	mov	r0, r7
    est_g_v_ = r_ * est_g_b_;
 8002310:	edc4 0a27 	vstr	s1, [r4, #156]	; 0x9c
 8002314:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
    est_m_v_ = r_ * est_m_b_;
 8002318:	f004 f980 	bl	800661c <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 800231c:	ed84 0a29 	vstr	s0, [r4, #164]	; 0xa4

    // Attitude of the estimated vector
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 8002320:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 8002324:	ed94 7a26 	vldr	s14, [r4, #152]	; 0x98
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 8002328:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
    est_m_v_ = r_ * est_m_b_;
 800232c:	ed84 1a2b 	vstr	s2, [r4, #172]	; 0xac
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 8002330:	ee20 0a00 	vmul.f32	s0, s0, s0
    est_m_v_ = r_ * est_m_b_;
 8002334:	edc4 0a2a 	vstr	s1, [r4, #168]	; 0xa8
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 8002338:	eef0 8a40 	vmov.f32	s17, s0
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 800233c:	eea7 0a07 	vfma.f32	s0, s14, s14
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 8002340:	eee7 8aa7 	vfma.f32	s17, s15, s15
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);
 8002344:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002348:	f004 f9e6 	bl	8006718 <_Z8inv_sqrtf>

    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
 800234c:	edd4 0a28 	vldr	s1, [r4, #160]	; 0xa0
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);
 8002350:	eeb0 8a40 	vmov.f32	s16, s0
    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
 8002354:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
 8002358:	f004 ffc6 	bl	80072e8 <atan2f>
 800235c:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
 8002360:	eeb0 0a68 	vmov.f32	s0, s17
 8002364:	ed94 9a26 	vldr	s18, [r4, #152]	; 0x98
 8002368:	f004 f9d6 	bl	8006718 <_Z8inv_sqrtf>
 800236c:	eeb1 9a49 	vneg.f32	s18, s18
 8002370:	ee68 0a80 	vmul.f32	s1, s17, s0
 8002374:	eeb0 0a49 	vmov.f32	s0, s18
 8002378:	f004 ffb6 	bl	80072e8 <atan2f>
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 800237c:	edd4 6a2b 	vldr	s13, [r4, #172]	; 0xac
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
 8002380:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8002384:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 8002388:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
 800238c:	ed94 6a2a 	vldr	s12, [r4, #168]	; 0xa8
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8002390:	edd4 7a26 	vldr	s15, [r4, #152]	; 0x98
 8002394:	ee66 0a80 	vmul.f32	s1, s13, s0
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8002398:	ee20 0a46 	vnmul.f32	s0, s0, s12
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 800239c:	eee7 0a06 	vfma.f32	s1, s14, s12
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 80023a0:	eea6 0a87 	vfma.f32	s0, s13, s14
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 80023a4:	ee60 0a88 	vmul.f32	s1, s1, s16
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 80023a8:	ee67 0ae0 	vnmul.f32	s1, s15, s1
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 80023ac:	edd4 7a29 	vldr	s15, [r4, #164]	; 0xa4
 80023b0:	ee28 8a27 	vmul.f32	s16, s16, s15
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 80023b4:	eee8 0a88 	vfma.f32	s1, s17, s16
 80023b8:	f004 ff96 	bl	80072e8 <atan2f>
 80023bc:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
     //********************************************************************************:
     //** refrence1: https://sites.google.com/site/myimuestimationexperience/sensors/magnetometer
     //** refrence2: http://uav.xenocross.net/hdg.html
     //********************************************************************************
    /* update */
    if(valid_acc) cnt++;
 80023c0:	f1ba 0f00 	cmp.w	sl, #0
 80023c4:	d004      	beq.n	80023d0 <_ZN17ComplementaryAHRS10estimationEv+0x23c>
 80023c6:	f8d9 3000 	ldr.w	r3, [r9]
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c9 3000 	str.w	r3, [r9]
    if(cnt == PRESCLAER_ACC) cnt = 0;
 80023d0:	f8d9 3000 	ldr.w	r3, [r9]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	bf04      	itt	eq
 80023d8:	2300      	moveq	r3, #0
 80023da:	f8c9 3000 	streq.w	r3, [r9]
  }
 80023de:	b00d      	add	sp, #52	; 0x34
 80023e0:	ecbd 8b04 	vpop	{d8-d9}
 80023e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e8:	f04f 0a00 	mov.w	sl, #0
 80023ec:	e735      	b.n	800225a <_ZN17ComplementaryAHRS10estimationEv+0xc6>
 80023ee:	bf00      	nop
 80023f0:	3c3ab218 	.word	0x3c3ab218
 80023f4:	42900000 	.word	0x42900000
 80023f8:	43050000 	.word	0x43050000
 80023fc:	42700000 	.word	0x42700000
 8002400:	3c864b8a 	.word	0x3c864b8a
 8002404:	3d1d89d9 	.word	0x3d1d89d9
 8002408:	20003b8c 	.word	0x20003b8c

0800240c <_ZN16AttitudeEstimate19desireCoordCallbackERKN17jsk_imu_mini_msgs11DesireCoordE>:
  uint32_t last_pub_time_;

  //void desireCoordCallback(const aerial_robot_base::DesireCoord& coord_msg)
  void desireCoordCallback(const jsk_imu_mini_msgs::DesireCoord& coord_msg)
  {
    estimator_->coordinateUpdate(coord_msg.roll, coord_msg.pitch);
 800240c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800240e:	ed91 0a01 	vldr	s0, [r1, #4]
 8002412:	edd1 0a02 	vldr	s1, [r1, #8]
  void coordinateUpdate(float desire_attitude_roll, float desire_attitude_pitch)
  {
    desire_attitude_roll_ = desire_attitude_roll; 
    desire_attitude_pitch_ = desire_attitude_pitch; 

    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 8002416:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8002428 <_ZN16AttitudeEstimate19desireCoordCallbackERKN17jsk_imu_mini_msgs11DesireCoordE+0x1c>
    desire_attitude_roll_ = desire_attitude_roll; 
 800241a:	ed80 0a23 	vstr	s0, [r0, #140]	; 0x8c
    desire_attitude_pitch_ = desire_attitude_pitch; 
 800241e:	edc0 0a24 	vstr	s1, [r0, #144]	; 0x90
    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 8002422:	304c      	adds	r0, #76	; 0x4c
 8002424:	f004 b848 	b.w	80064b8 <_ZN7Matrix3IfE10from_eulerEfff>
 8002428:	00000000 	.word	0x00000000

0800242c <_ZN3IMUD1Ev>:
class IMU : public SENSOR_<Imugyro>
{
public:
	IMU(SPI_HandleTypeDef* hspi, ros::NodeHandle* nh);
	IMU(){};
	~IMU(){}
 800242c:	b510      	push	{r4, lr}
 800242e:	4604      	mov	r4, r0
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002430:	68c0      	ldr	r0, [r0, #12]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8002432:	b108      	cbz	r0, 8002438 <_ZN3IMUD1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8002434:	f004 fa2f 	bl	8006896 <_ZdlPv>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002438:	6820      	ldr	r0, [r4, #0]
	if (__p)
 800243a:	b108      	cbz	r0, 8002440 <_ZN3IMUD1Ev+0x14>
 800243c:	f004 fa2b 	bl	8006896 <_ZdlPv>
 8002440:	4620      	mov	r0, r4
 8002442:	bd10      	pop	{r4, pc}

08002444 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 8002444:	68c3      	ldr	r3, [r0, #12]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	b410      	push	{r4}
 800244a:	6814      	ldr	r4, [r2, #0]
 800244c:	460a      	mov	r2, r1
 800244e:	6881      	ldr	r1, [r0, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	4623      	mov	r3, r4
 8002454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002458:	4718      	bx	r3
	...

0800245c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
  void init(IMU* imu, ros::NodeHandle* nh)
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nh_ = nh;
 800245e:	4604      	mov	r4, r0
  void init(IMU* imu, ros::NodeHandle* nh)
 8002460:	4605      	mov	r5, r0
    nh_ = nh;
 8002462:	f844 2b08 	str.w	r2, [r4], #8
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8002466:	2014      	movs	r0, #20
  void init(IMU* imu, ros::NodeHandle* nh)
 8002468:	460e      	mov	r6, r1
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 800246a:	f004 fa1b 	bl	80068a4 <_Znwj>
        endpoint_(endpoint) {};
 800246e:	4b48      	ldr	r3, [pc, #288]	; (8002590 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x134>)
    nh_->advertise(*imu_pub_);
 8002470:	682a      	ldr	r2, [r5, #0]
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8002472:	6068      	str	r0, [r5, #4]
 8002474:	e880 0018 	stmia.w	r0, {r3, r4}
 8002478:	2300      	movs	r3, #0
 800247a:	6103      	str	r3, [r0, #16]
 800247c:	f502 7107 	add.w	r1, r2, #540	; 0x21c

    /* Register a new publisher */
    bool advertise(Publisher & p)
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
        if(publishers[i] == 0){ // empty slot
 8002480:	f851 4b04 	ldr.w	r4, [r1], #4
 8002484:	2c00      	cmp	r4, #0
 8002486:	d17a      	bne.n	800257e <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x122>
          publishers[i] = &p;
 8002488:	eb02 0183 	add.w	r1, r2, r3, lsl #2
          p.id_ = i+100+MAX_SUBSCRIBERS;
 800248c:	3378      	adds	r3, #120	; 0x78
          publishers[i] = &p;
 800248e:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8002492:	6083      	str	r3, [r0, #8]
          p.nh_ = this;
 8002494:	60c2      	str	r2, [r0, #12]
    desire_coord_sub_ = new ros::Subscriber2<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 8002496:	2030      	movs	r0, #48	; 0x30
 8002498:	f004 fa04 	bl	80068a4 <_Znwj>
      : _M_f(__pf) { }
 800249c:	4a3d      	ldr	r2, [pc, #244]	; (8002594 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x138>)
 800249e:	6242      	str	r2, [r0, #36]	; 0x24
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 80024a0:	2201      	movs	r2, #1
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x13c>)
 80024a4:	62c2      	str	r2, [r0, #44]	; 0x2c
        topic_ = topic_name;
 80024a6:	4a3d      	ldr	r2, [pc, #244]	; (800259c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x140>)
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 80024a8:	6003      	str	r3, [r0, #0]
        topic_ = topic_name;
 80024aa:	6082      	str	r2, [r0, #8]
      coord_type(0)
 80024ac:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x144>)
    nh_->subscribe<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate>(*desire_coord_sub_);
 80024ae:	682a      	ldr	r2, [r5, #0]
 80024b0:	60c3      	str	r3, [r0, #12]
 80024b2:	2400      	movs	r4, #0
 80024b4:	2300      	movs	r3, #0
 80024b6:	6104      	str	r4, [r0, #16]
 80024b8:	6144      	str	r4, [r0, #20]
 80024ba:	6184      	str	r4, [r0, #24]
 80024bc:	7703      	strb	r3, [r0, #28]
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 80024be:	6205      	str	r5, [r0, #32]
 80024c0:	6283      	str	r3, [r0, #40]	; 0x28
    desire_coord_sub_ = new ros::Subscriber2<jsk_imu_mini_msgs::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 80024c2:	6468      	str	r0, [r5, #68]	; 0x44
 80024c4:	f502 711b 	add.w	r1, r2, #620	; 0x26c
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
        if(subscribers[i] == 0){ // empty slot
 80024c8:	f851 7b04 	ldr.w	r7, [r1], #4
 80024cc:	2f00      	cmp	r7, #0
 80024ce:	d15b      	bne.n	8002588 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x12c>
          subscribers[i] = (Subscriber_*) &s;
 80024d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          s.id_ = i+100;
 80024d4:	3364      	adds	r3, #100	; 0x64
          subscribers[i] = (Subscriber_*) &s;
 80024d6:	f8c2 026c 	str.w	r0, [r2, #620]	; 0x26c
          s.id_ = i+100;
 80024da:	6043      	str	r3, [r0, #4]
    imu_ = imu;
 80024dc:	64ee      	str	r6, [r5, #76]	; 0x4c
    last_pub_time_ = HAL_GetTick();
 80024de:	f001 fe25 	bl	800412c <HAL_GetTick>
 80024e2:	6528      	str	r0, [r5, #80]	; 0x50
    estimator_ = new ComplementaryAHRS();
 80024e4:	20c8      	movs	r0, #200	; 0xc8
 80024e6:	f004 f9dd 	bl	80068a4 <_Znwj>
    float        q1, q2, q3, q4;

    // constructor creates a quaternion equivalent
    // to roll=0, pitch=0, yaw=0
    Quaternion() {
        q1 = 1; q2 = q3 = q4 = 0;
 80024ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    abs_rel_(ABSOLUTE_COORD)
 80024ee:	2200      	movs	r2, #0
 80024f0:	67c3      	str	r3, [r0, #124]	; 0x7c
public:
    T        x, y, z;

    // trivial ctor
    Vector3<T>() {
        x = y = z = 0;
 80024f2:	60c4      	str	r4, [r0, #12]
 80024f4:	6084      	str	r4, [r0, #8]
 80024f6:	6044      	str	r4, [r0, #4]
 80024f8:	6184      	str	r4, [r0, #24]
 80024fa:	6144      	str	r4, [r0, #20]
 80024fc:	6104      	str	r4, [r0, #16]
 80024fe:	6244      	str	r4, [r0, #36]	; 0x24
 8002500:	6204      	str	r4, [r0, #32]
 8002502:	61c4      	str	r4, [r0, #28]
 8002504:	6304      	str	r4, [r0, #48]	; 0x30
 8002506:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002508:	6284      	str	r4, [r0, #40]	; 0x28
 800250a:	63c4      	str	r4, [r0, #60]	; 0x3c
 800250c:	6384      	str	r4, [r0, #56]	; 0x38
 800250e:	6344      	str	r4, [r0, #52]	; 0x34
 8002510:	6484      	str	r4, [r0, #72]	; 0x48
 8002512:	6444      	str	r4, [r0, #68]	; 0x44
 8002514:	6404      	str	r4, [r0, #64]	; 0x40
 8002516:	6544      	str	r4, [r0, #84]	; 0x54
 8002518:	6504      	str	r4, [r0, #80]	; 0x50
 800251a:	6604      	str	r4, [r0, #96]	; 0x60
 800251c:	6584      	str	r4, [r0, #88]	; 0x58
 800251e:	6684      	str	r4, [r0, #104]	; 0x68
 8002520:	6644      	str	r4, [r0, #100]	; 0x64
 8002522:	6784      	str	r4, [r0, #120]	; 0x78
 8002524:	6744      	str	r4, [r0, #116]	; 0x74
 8002526:	6704      	str	r4, [r0, #112]	; 0x70
 8002528:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
 800252c:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8002530:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8002534:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
 8002538:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
    // zero the matrix
    void        zero(void);

    // setup the identity matrix
    void        identity(void) {
        a.x = b.y = c.z = 1;
 800253c:	66c3      	str	r3, [r0, #108]	; 0x6c
 800253e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8002540:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002542:	f880 2094 	strb.w	r2, [r0, #148]	; 0x94
                       est_g_b_(), est_m_b_()
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x148>)
 8002548:	6003      	str	r3, [r0, #0]
 800254a:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
 800254e:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
 8002552:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
 8002556:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
 800255a:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
 800255e:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
 8002562:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
 8002566:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
 800256a:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
 800256e:	f8c0 40c4 	str.w	r4, [r0, #196]	; 0xc4
 8002572:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
 8002576:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 800257a:	64a8      	str	r0, [r5, #72]	; 0x48
 800257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 800257e:	3301      	adds	r3, #1
 8002580:	2b14      	cmp	r3, #20
 8002582:	f47f af7d 	bne.w	8002480 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x24>
 8002586:	e786      	b.n	8002496 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x3a>
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8002588:	3301      	adds	r3, #1
 800258a:	2b14      	cmp	r3, #20
 800258c:	d19c      	bne.n	80024c8 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x6c>
 800258e:	e7a5      	b.n	80024dc <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x80>
 8002590:	08009063 	.word	0x08009063
 8002594:	0800240d 	.word	0x0800240d
 8002598:	08008f94 	.word	0x08008f94
 800259c:	08009067 	.word	0x08009067
 80025a0:	08008f70 	.word	0x08008f70
 80025a4:	08008f88 	.word	0x08008f88

080025a8 <_ZN13StateEstimateC1Ev>:
  StateEstimate()
 80025a8:	b510      	push	{r4, lr}
      angles()
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <_ZN13StateEstimateC1Ev+0x5c>)
      temperature(0)
 80025ac:	4c16      	ldr	r4, [pc, #88]	; (8002608 <_ZN13StateEstimateC1Ev+0x60>)
 80025ae:	6182      	str	r2, [r0, #24]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 80025b0:	2100      	movs	r1, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	66c4      	str	r4, [r0, #108]	; 0x6c
      sat_num(0)
 80025b6:	4c15      	ldr	r4, [pc, #84]	; (800260c <_ZN13StateEstimateC1Ev+0x64>)
 80025b8:	61c1      	str	r1, [r0, #28]
 80025ba:	6201      	str	r1, [r0, #32]
 80025bc:	6242      	str	r2, [r0, #36]	; 0x24
 80025be:	6282      	str	r2, [r0, #40]	; 0x28
 80025c0:	62c2      	str	r2, [r0, #44]	; 0x2c
 80025c2:	6302      	str	r2, [r0, #48]	; 0x30
 80025c4:	6342      	str	r2, [r0, #52]	; 0x34
 80025c6:	6382      	str	r2, [r0, #56]	; 0x38
 80025c8:	63c2      	str	r2, [r0, #60]	; 0x3c
 80025ca:	6402      	str	r2, [r0, #64]	; 0x40
 80025cc:	6442      	str	r2, [r0, #68]	; 0x44
 80025ce:	6482      	str	r2, [r0, #72]	; 0x48
 80025d0:	64c2      	str	r2, [r0, #76]	; 0x4c
 80025d2:	6502      	str	r2, [r0, #80]	; 0x50
 80025d4:	6701      	str	r1, [r0, #112]	; 0x70
 80025d6:	6741      	str	r1, [r0, #116]	; 0x74
 80025d8:	6782      	str	r2, [r0, #120]	; 0x78
 80025da:	67c2      	str	r2, [r0, #124]	; 0x7c
 80025dc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80025e0:	f8c0 4094 	str.w	r4, [r0, #148]	; 0x94
 80025e4:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 80025e8:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 80025ec:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 80025f0:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 80025f4:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 80025f8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
 80025fc:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
  }
 8002600:	bd10      	pop	{r4, pc}
 8002602:	bf00      	nop
 8002604:	08008f58 	.word	0x08008f58
 8002608:	08008fac 	.word	0x08008fac
 800260c:	08008fc4 	.word	0x08008fc4

08002610 <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002610:	b530      	push	{r4, r5, lr}
 8002612:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <_Z18SystemClock_Configv+0xa8>)
 8002616:	2100      	movs	r1, #0
 8002618:	9100      	str	r1, [sp, #0]
 800261a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <_Z18SystemClock_Configv+0xac>)
 800262e:	9101      	str	r1, [sp, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002642:	2309      	movs	r3, #9
 8002644:	9307      	str	r3, [sp, #28]
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264a:	9308      	str	r3, [sp, #32]
   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800264c:	2301      	movs	r3, #1
 800264e:	930c      	str	r3, [sp, #48]	; 0x30
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002650:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002654:	2402      	movs	r4, #2
   RCC_OscInitStruct.PLL.PLLM = 4;
 8002656:	2504      	movs	r5, #4
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002658:	930e      	str	r3, [sp, #56]	; 0x38
   RCC_OscInitStruct.PLL.PLLN = 100;
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   RCC_OscInitStruct.PLL.PLLQ = 4;
   RCC_OscInitStruct.PLL.PLLR = 2;
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265a:	a807      	add	r0, sp, #28
   RCC_OscInitStruct.PLL.PLLN = 100;
 800265c:	2364      	movs	r3, #100	; 0x64
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265e:	940d      	str	r4, [sp, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLM = 4;
 8002660:	950f      	str	r5, [sp, #60]	; 0x3c
   RCC_OscInitStruct.PLL.PLLN = 100;
 8002662:	9310      	str	r3, [sp, #64]	; 0x40
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002664:	9411      	str	r4, [sp, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8002666:	9512      	str	r5, [sp, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLR = 2;
 8002668:	9413      	str	r4, [sp, #76]	; 0x4c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266a:	f002 fd03 	bl	8005074 <HAL_RCC_OscConfig>
 800266e:	b100      	cbz	r0, 8002672 <_Z18SystemClock_Configv+0x62>
 8002670:	e7fe      	b.n	8002670 <_Z18SystemClock_Configv+0x60>
   }


    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002672:	230f      	movs	r3, #15
 8002674:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002676:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800267c:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800267e:	2103      	movs	r1, #3
 8002680:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002682:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002684:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002686:	f002 fc35 	bl	8004ef4 <HAL_RCC_ClockConfig>
 800268a:	4604      	mov	r4, r0
 800268c:	b100      	cbz	r0, 8002690 <_Z18SystemClock_Configv+0x80>
 800268e:	e7fe      	b.n	800268e <_Z18SystemClock_Configv+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002690:	f002 fcca 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8002694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002698:	fbb0 f0f3 	udiv	r0, r0, r3
 800269c:	f001 ffb6 	bl	800460c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026a0:	4628      	mov	r0, r5
 80026a2:	f001 ffc9 	bl	8004638 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026a6:	4622      	mov	r2, r4
 80026a8:	4621      	mov	r1, r4
 80026aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ae:	f001 ff6d 	bl	800458c <HAL_NVIC_SetPriority>
}
 80026b2:	b015      	add	sp, #84	; 0x54
 80026b4:	bd30      	pop	{r4, r5, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40007000 	.word	0x40007000

080026c0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80026c0:	e7fe      	b.n	80026c0 <_Error_Handler>
	...

080026c4 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>:
         int MAX_RX_BUFFER=400,
			int RX_BURST_SIZE=RX_BURST_MODE>
class UartDriver{
public:

  UartDriver(Hardware *huart): huart_(huart)
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	4604      	mov	r4, r0
 80026c8:	6001      	str	r1, [r0, #0]
  {
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 80026ca:	2004      	movs	r0, #4
 80026cc:	f004 f8ea 	bl	80068a4 <_Znwj>
  RxBuffer(Hardware *huart):huart_(huart)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	6003      	str	r3, [r0, #0]
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 80026d4:	4605      	mov	r5, r0
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 80026d6:	f44f 70cb 	mov.w	r0, #406	; 0x196
 80026da:	f004 f8e3 	bl	80068a4 <_Znwj>
    byte_in_progress_ = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
    byte_to_add_ = 0;
 80026e4:	f8a0 3192 	strh.w	r3, [r0, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
 80026e8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80026ec:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xb8>)
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 80026f2:	4923      	ldr	r1, [pc, #140]	; (8002780 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xbc>)
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 80026f4:	6018      	str	r0, [r3, #0]
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 80026f6:	2208      	movs	r2, #8
 80026f8:	6828      	ldr	r0, [r5, #0]
 80026fa:	f003 fb17 	bl	8005d2c <HAL_UART_Receive_DMA>
    huart_->hdmarx->XferCpltCallback = ReceiveCplt;
 80026fe:	682b      	ldr	r3, [r5, #0]
 8002700:	4920      	ldr	r1, [pc, #128]	; (8002784 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc0>)
 8002702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002704:	4e20      	ldr	r6, [pc, #128]	; (8002788 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc4>)
 8002706:	63d1      	str	r1, [r2, #60]	; 0x3c
    __HAL_UART_DISABLE_IT(huart_, UART_IT_RXNE);
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68d3      	ldr	r3, [r2, #12]
 800270c:	f023 0320 	bic.w	r3, r3, #32
 8002710:	60d3      	str	r3, [r2, #12]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002712:	2004      	movs	r0, #4
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8002714:	6065      	str	r5, [r4, #4]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002716:	f004 f8c5 	bl	80068a4 <_Znwj>
    idle_flag_ = true;
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc8>)
    subscript_in_progress_ = 0;
 800271c:	491c      	ldr	r1, [pc, #112]	; (8002790 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xcc>)
    idle_flag_ = true;
 800271e:	2201      	movs	r2, #1
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002720:	4605      	mov	r5, r0
 8002722:	6820      	ldr	r0, [r4, #0]
    idle_flag_ = true;
 8002724:	701a      	strb	r2, [r3, #0]
    subscript_in_progress_ = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	700b      	strb	r3, [r1, #0]
    subscript_to_add_ = 0;
 800272a:	491a      	ldr	r1, [pc, #104]	; (8002794 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xd0>)
  TxBuffer(Hardware *huart): huart_(huart)
 800272c:	6028      	str	r0, [r5, #0]
    subscript_to_add_ = 0;
 800272e:	700b      	strb	r3, [r1, #0]
 8002730:	46b6      	mov	lr, r6
    for(int i = 0; i < TX_SIZE; i++) 
 8002732:	f243 1c06 	movw	ip, #12550	; 0x3106
 8002736:	199f      	adds	r7, r3, r6
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8002738:	2100      	movs	r1, #0
        tx_buffer_unit_[i].tx_len_ = 1;
 800273a:	f887 20fa 	strb.w	r2, [r7, #250]	; 0xfa
          tx_buffer_unit_[i].tx_data_[j]  = 1;
 800273e:	547a      	strb	r2, [r7, r1]
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8002740:	3101      	adds	r1, #1
 8002742:	29fa      	cmp	r1, #250	; 0xfa
 8002744:	d1fb      	bne.n	800273e <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x7a>
 8002746:	33fb      	adds	r3, #251	; 0xfb
    for(int i = 0; i < TX_SIZE; i++) 
 8002748:	4563      	cmp	r3, ip
 800274a:	d1f4      	bne.n	8002736 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x72>
    HAL_UART_Transmit_DMA(huart_, (uint8_t*)tx_buffer_unit_[0].tx_data_, tx_buffer_unit_[0].tx_len_);
 800274c:	f89e 20fa 	ldrb.w	r2, [lr, #250]	; 0xfa
 8002750:	490d      	ldr	r1, [pc, #52]	; (8002788 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc4>)
 8002752:	f003 fab1 	bl	8005cb8 <HAL_UART_Transmit_DMA>
 8002756:	e005      	b.n	8002764 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xa0>
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002758:	4628      	mov	r0, r5
 800275a:	f004 f89c 	bl	8006896 <_ZdlPv>
 800275e:	f004 f8b2 	bl	80068c6 <__cxa_end_cleanup>
 8002762:	e7f9      	b.n	8002758 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x94>
    huart_->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8002764:	682a      	ldr	r2, [r5, #0]
 8002766:	6811      	ldr	r1, [r2, #0]
 8002768:	694b      	ldr	r3, [r1, #20]
 800276a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276e:	614b      	str	r3, [r1, #20]
    huart_->hdmatx->XferCpltCallback = TransmitCplt;
 8002770:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xd4>)
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 8002776:	4620      	mov	r0, r4
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002778:	60a5      	str	r5, [r4, #8]
  }
 800277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277c:	20003b88 	.word	0x20003b88
 8002780:	20003b7d 	.word	0x20003b7d
 8002784:	08001dfd 	.word	0x08001dfd
 8002788:	20000a77 	.word	0x20000a77
 800278c:	20000a74 	.word	0x20000a74
 8002790:	20000a76 	.word	0x20000a76
 8002794:	20000a75 	.word	0x20000a75
 8002798:	08001c91 	.word	0x08001c91

0800279c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>:
    Time now()
 800279c:	b538      	push	{r3, r4, r5, lr}
 800279e:	460d      	mov	r5, r1
 80027a0:	4604      	mov	r4, r0

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}
 80027a2:	f001 fcc3 	bl	800412c <HAL_GetTick>
      current_time.sec = ms/1000 + sec_offset;
 80027a6:	696a      	ldr	r2, [r5, #20]
 80027a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027ac:	fbb0 f3f1 	udiv	r3, r0, r1
 80027b0:	441a      	add	r2, r3
 80027b2:	6022      	str	r2, [r4, #0]
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 80027b4:	fb01 0313 	mls	r3, r1, r3, r0
 80027b8:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv+0x34>)
 80027ba:	69a8      	ldr	r0, [r5, #24]
 80027bc:	4621      	mov	r1, r4
 80027be:	fb02 0303 	mla	r3, r2, r3, r0
 80027c2:	f841 3f04 	str.w	r3, [r1, #4]!
      normalizeSecNSec(current_time.sec, current_time.nsec);
 80027c6:	4620      	mov	r0, r4
 80027c8:	f001 fc46 	bl	8004058 <_ZN3ros16normalizeSecNSecERmS0_>
    }
 80027cc:	4620      	mov	r0, r4
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
 80027d0:	000f4240 	.word	0x000f4240

080027d4 <main>:
{
 80027d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027d8:	b085      	sub	sp, #20
  HAL_Init();
 80027da:	f001 fc85 	bl	80040e8 <HAL_Init>
  SystemClock_Config();
 80027de:	f7ff ff17 	bl	8002610 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80027e2:	f7fe feeb 	bl	80015bc <MX_GPIO_Init>
  MX_DMA_Init();
 80027e6:	f7fe fec7 	bl	8001578 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80027ea:	f000 fea7 	bl	800353c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80027ee:	f000 fdf9 	bl	80033e4 <MX_SPI1_Init>
  MX_ADC1_Init();
 80027f2:	f7fe fe49 	bl	8001488 <MX_ADC1_Init>
    iostream_ = new UartDriver<serial_class>(huart);
 80027f6:	200c      	movs	r0, #12
 80027f8:	f004 f854 	bl	80068a4 <_Znwj>
 80027fc:	4959      	ldr	r1, [pc, #356]	; (8002964 <main+0x190>)
 80027fe:	4605      	mov	r5, r0
 8002800:	f7ff ff60 	bl	80026c4 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>
 8002804:	4c58      	ldr	r4, [pc, #352]	; (8002968 <main+0x194>)
 8002806:	6828      	ldr	r0, [r5, #0]
    huart_->Init.BaudRate = baud_rate;
 8002808:	68e3      	ldr	r3, [r4, #12]
    iostream_ = new UartDriver<serial_class>(huart);
 800280a:	60a5      	str	r5, [r4, #8]
    huart_->Init.BaudRate = baud_rate;
 800280c:	6043      	str	r3, [r0, #4]
      mode_ = 0;
 800280e:	2600      	movs	r6, #0
    HAL_UART_Init(huart_);
 8002810:	f003 fa24 	bl	8005c5c <HAL_UART_Init>
	  testnode = new RosNode(&nh_);
 8002814:	201c      	movs	r0, #28
 8002816:	f8c4 62bc 	str.w	r6, [r4, #700]	; 0x2bc
      bytes_ = 0;
 800281a:	f8c4 62c0 	str.w	r6, [r4, #704]	; 0x2c0
      index_ = 0;
 800281e:	f8c4 62c8 	str.w	r6, [r4, #712]	; 0x2c8
      topic_ = 0;
 8002822:	f8c4 62c4 	str.w	r6, [r4, #708]	; 0x2c4
 8002826:	f004 f83d 	bl	80068a4 <_Znwj>
      potentio_length(0), potentio(NULL)
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <main+0x198>)
 800282c:	6083      	str	r3, [r0, #8]
 800282e:	4605      	mov	r5, r0

class RosNode
{
public:
	RosNode(ros::NodeHandle* nh)
	{
 8002830:	f100 0708 	add.w	r7, r0, #8
 8002834:	60c6      	str	r6, [r0, #12]
 8002836:	6106      	str	r6, [r0, #16]
 8002838:	7506      	strb	r6, [r0, #20]
 800283a:	6186      	str	r6, [r0, #24]
		/* ros node initialize */
		nh_ = nh;
 800283c:	6004      	str	r4, [r0, #0]

		/* ros publisher initialize */
		//radioflag_pub_ = new ros::Publisher("radioflag",&radioflag_msg);
		//odom_pub_ = new ros::Publisher("odometry/raw",&odom_msg);
		potentio_pub = new ros::Publisher("potentio/raw", &potentio_msg);
 800283e:	2014      	movs	r0, #20
 8002840:	f004 f830 	bl	80068a4 <_Znwj>
 8002844:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <main+0x19c>)
		//publish the msgs
		//nh_->advertise(*radioflag_pub_);
		//nh_->advertise(*odom_pub_);
		nh_->advertise(*potentio_pub);
 8002846:	682a      	ldr	r2, [r5, #0]
 8002848:	6106      	str	r6, [r0, #16]
 800284a:	e880 0088 	stmia.w	r0, {r3, r7}
		potentio_pub = new ros::Publisher("potentio/raw", &potentio_msg);
 800284e:	6068      	str	r0, [r5, #4]
 8002850:	4633      	mov	r3, r6
 8002852:	f502 7107 	add.w	r1, r2, #540	; 0x21c
        if(publishers[i] == 0){ // empty slot
 8002856:	f851 6b04 	ldr.w	r6, [r1], #4
 800285a:	2e00      	cmp	r6, #0
 800285c:	d17c      	bne.n	8002958 <main+0x184>
          publishers[i] = &p;
 800285e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8002862:	3378      	adds	r3, #120	; 0x78
          publishers[i] = &p;
 8002864:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8002868:	6083      	str	r3, [r0, #8]
          p.nh_ = this;
 800286a:	60c2      	str	r2, [r0, #12]
		potentio_msg.potentio_length = 4;
 800286c:	2304      	movs	r3, #4
 800286e:	752b      	strb	r3, [r5, #20]
		potentio_msg.potentio = (uint16_t*)malloc(sizeof(uint16_t)*4);
 8002870:	2008      	movs	r0, #8
 8002872:	f005 fbd3 	bl	800801c <malloc>
 8002876:	f8c4 530c 	str.w	r5, [r4, #780]	; 0x30c
 800287a:	61a8      	str	r0, [r5, #24]
	  imu_.init(&hspi1, &nh_);
 800287c:	4d3d      	ldr	r5, [pc, #244]	; (8002974 <main+0x1a0>)
 800287e:	493e      	ldr	r1, [pc, #248]	; (8002978 <main+0x1a4>)
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002880:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002980 <main+0x1ac>
	  imu_.init(&hspi1, &nh_);
 8002884:	f5a5 7244 	sub.w	r2, r5, #784	; 0x310
 8002888:	4628      	mov	r0, r5
 800288a:	f001 f89b 	bl	80039c4 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }
    else
      {
        attitude_estimate_flag_ = true;
        imu_ = imu;
        attitude_estimator_.init(imu_, nh_);
 800288e:	f5a5 7244 	sub.w	r2, r5, #784	; 0x310
        attitude_estimate_flag_ = true;
 8002892:	2601      	movs	r6, #1
        attitude_estimator_.init(imu_, nh_);
 8002894:	4629      	mov	r1, r5
 8002896:	f202 4034 	addw	r0, r2, #1076	; 0x434
        imu_ = imu;
 800289a:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
    nh_ = nh;
 800289e:	f8c4 4424 	str.w	r4, [r4, #1060]	; 0x424
        attitude_estimate_flag_ = true;
 80028a2:	f884 64e0 	strb.w	r6, [r4, #1248]	; 0x4e0
	  HAL_ADC_Start(&hadc1);
 80028a6:	4d35      	ldr	r5, [pc, #212]	; (800297c <main+0x1a8>)
        attitude_estimator_.init(imu_, nh_);
 80028a8:	f7ff fdd8 	bl	800245c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }

    if(baro == NULL)
      {
        altitude_estimate_flag_ = false;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f884 34e1 	strb.w	r3, [r4, #1249]	; 0x4e1
        altitude_estimator_.init(imu_, baro_, nh_);
      }

    if(gps == NULL)
      {
        pos_estimate_flag_ = false;
 80028b2:	f884 34e2 	strb.w	r3, [r4, #1250]	; 0x4e2
	  start_process_flag_ = true;
 80028b6:	f884 64e4 	strb.w	r6, [r4, #1252]	; 0x4e4
	  if(start_process_flag_){
 80028ba:	f894 34e4 	ldrb.w	r3, [r4, #1252]	; 0x4e4
 80028be:	b183      	cbz	r3, 80028e2 <main+0x10e>
		  if(LEDcounter >= 10){
 80028c0:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	dd07      	ble.n	80028d8 <main+0x104>
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80028c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028cc:	4648      	mov	r0, r9
 80028ce:	f002 fade 	bl	8004e8e <HAL_GPIO_TogglePin>
			  LEDcounter = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
		  LEDcounter++;
 80028d8:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 80028dc:	3301      	adds	r3, #1
 80028de:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
	  HAL_Delay(9);
 80028e2:	2009      	movs	r0, #9
 80028e4:	f001 fc28 	bl	8004138 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80028e8:	4628      	mov	r0, r5
 80028ea:	f001 fcd9 	bl	80042a0 <HAL_ADC_Start>
 80028ee:	2600      	movs	r6, #0
		  ADC_value[i] = HAL_ADC_GetValue(&hadc1);
 80028f0:	af02      	add	r7, sp, #8
		  HAL_ADC_PollForConversion(&hadc1, 1);
 80028f2:	2101      	movs	r1, #1
 80028f4:	4628      	mov	r0, r5
 80028f6:	f001 fd51 	bl	800439c <HAL_ADC_PollForConversion>
		  ADC_value[i] = HAL_ADC_GetValue(&hadc1);
 80028fa:	4628      	mov	r0, r5
 80028fc:	f001 fd9d 	bl	800443a <HAL_ADC_GetValue>
 8002900:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
	  for(int i=0; i<4; i++){
 8002904:	3601      	adds	r6, #1
 8002906:	2e04      	cmp	r6, #4
 8002908:	d1f3      	bne.n	80028f2 <main+0x11e>
	  testnode->publish(ADC_value);
 800290a:	f8d4 630c 	ldr.w	r6, [r4, #780]	; 0x30c

		/* ros subscriber initialize */
	}

	void publish(uint16_t arr[]){
		potentio_msg.stamp = nh_->now();
 800290e:	4637      	mov	r7, r6
 8002910:	4668      	mov	r0, sp
 8002912:	f857 1b0c 	ldr.w	r1, [r7], #12
 8002916:	f7ff ff41 	bl	800279c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 800291a:	e89d 0003 	ldmia.w	sp, {r0, r1}
		for(int i=0; i<4; i++)
			potentio_msg.potentio[i] = arr[i];
 800291e:	69b3      	ldr	r3, [r6, #24]
 8002920:	f8bd 2008 	ldrh.w	r2, [sp, #8]
		potentio_msg.stamp = nh_->now();
 8002924:	e887 0003 	stmia.w	r7, {r0, r1}
			potentio_msg.potentio[i] = arr[i];
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800292e:	805a      	strh	r2, [r3, #2]
 8002930:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002934:	809a      	strh	r2, [r3, #4]
 8002936:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800293a:	80da      	strh	r2, [r3, #6]
		potentio_pub->publish(&potentio_msg);
 800293c:	f106 0108 	add.w	r1, r6, #8
 8002940:	6870      	ldr	r0, [r6, #4]
 8002942:	f7ff fd7f 	bl	8002444 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  HAL_ADC_Stop(&hadc1);
 8002946:	4628      	mov	r0, r5
 8002948:	f001 fd0a 	bl	8004360 <HAL_ADC_Stop>
 800294c:	e7b5      	b.n	80028ba <main+0xe6>
	  testnode = new RosNode(&nh_);
 800294e:	4628      	mov	r0, r5
 8002950:	f003 ffa1 	bl	8006896 <_ZdlPv>
 8002954:	f003 ffb7 	bl	80068c6 <__cxa_end_cleanup>
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8002958:	3301      	adds	r3, #1
 800295a:	2b14      	cmp	r3, #20
 800295c:	f47f af7b 	bne.w	8002856 <main+0x82>
 8002960:	e784      	b.n	800286c <main+0x98>
 8002962:	e7f4      	b.n	800294e <main+0x17a>
 8002964:	20003ca8 	.word	0x20003ca8
 8002968:	20000534 	.word	0x20000534
 800296c:	08008f2c 	.word	0x08008f2c
 8002970:	08009208 	.word	0x08009208
 8002974:	20000844 	.word	0x20000844
 8002978:	20003b90 	.word	0x20003b90
 800297c:	20000a2c 	.word	0x20000a2c
 8002980:	40020800 	.word	0x40020800

08002984 <_ZN16AttitudeEstimate7publishEv>:
  void publish()
 8002984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002988:	4604      	mov	r4, r0
 800298a:	b0ab      	sub	sp, #172	; 0xac
    uint32_t now_time = HAL_GetTick();
 800298c:	f001 fbce 	bl	800412c <HAL_GetTick>
    if( now_time - last_pub_time_ >= PUB_INTERVAL)
 8002990:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002992:	1ac3      	subs	r3, r0, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d969      	bls.n	8002a6c <_ZN16AttitudeEstimate7publishEv+0xe8>
        imu_msg_.stamp = nh_->now();
 8002998:	4625      	mov	r5, r4
 800299a:	ae04      	add	r6, sp, #16
 800299c:	f855 1b0c 	ldr.w	r1, [r5], #12
        last_pub_time_ = now_time;
 80029a0:	6520      	str	r0, [r4, #80]	; 0x50
        imu_msg_.stamp = nh_->now();
 80029a2:	4630      	mov	r0, r6
 80029a4:	f7ff fefa 	bl	800279c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 80029a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80029ac:	ab09      	add	r3, sp, #36	; 0x24
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	ab0f      	add	r3, sp, #60	; 0x3c
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	f104 0320 	add.w	r3, r4, #32
 80029b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029bc:	af06      	add	r7, sp, #24
 80029be:	f104 0514 	add.w	r5, r4, #20
 80029c2:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80029c6:	9303      	str	r3, [sp, #12]
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
	Vector3f  getGyro(){return gyro_;}
 80029c8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
 80029cc:	f10d 0990 	add.w	r9, sp, #144	; 0x90
	Vector3f  getMag(){return mag_;}
 80029d0:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 80029d4:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
	Vector3f  getAcc(){return acc_;}
 80029d8:	f10d 0e6c 	add.w	lr, sp, #108	; 0x6c
            imu_msg_.gyro_data[i] = imu_->getGyro()[i];
 80029dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
	Vector3f  getGyro(){return gyro_;}
 80029de:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80029e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029e4:	ae06      	add	r6, sp, #24
 80029e6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80029ea:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 80029ee:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 80029f2:	f857 2b04 	ldr.w	r2, [r7], #4
 80029f6:	60ea      	str	r2, [r5, #12]
	Vector3f  getMag(){return mag_;}
 80029f8:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80029fc:	ca07      	ldmia	r2, {r0, r1, r2}
            imu_msg_.mag_data[i] = imu_->getMag()[i];
 80029fe:	ae09      	add	r6, sp, #36	; 0x24
 8002a00:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002a04:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8002a08:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002a0c:	9901      	ldr	r1, [sp, #4]
 8002a0e:	f851 2b04 	ldr.w	r2, [r1], #4
 8002a12:	61aa      	str	r2, [r5, #24]
	Vector3f  getAcc(){return acc_;}
 8002a14:	3388      	adds	r3, #136	; 0x88
 8002a16:	9101      	str	r1, [sp, #4]
 8002a18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a1c:	ab18      	add	r3, sp, #96	; 0x60
 8002a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            imu_msg_.acc_data[i] = imu_->getAcc()[i];
 8002a22:	ab0c      	add	r3, sp, #48	; 0x30
 8002a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a28:	f85b 3b04 	ldr.w	r3, [fp], #4
 8002a2c:	f845 3b04 	str.w	r3, [r5], #4
  static const uint8_t RELATIVE_COORD = 1;
  static const uint8_t X = 0;
  static const uint8_t Y = 1;
  static const uint8_t Z = 2;

  Vector3f getAngles(){return rpy_;}
 8002a30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a32:	3370      	adds	r3, #112	; 0x70
 8002a34:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002a38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a3c:	ab15      	add	r3, sp, #84	; 0x54
 8002a3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a42:	ab12      	add	r3, sp, #72	; 0x48
 8002a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            imu_msg_.angles[i] = estimator_->getAngles()[i];
 8002a48:	aa12      	add	r2, sp, #72	; 0x48
 8002a4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a4c:	ab0f      	add	r3, sp, #60	; 0x3c
 8002a4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a52:	9a02      	ldr	r2, [sp, #8]
 8002a54:	f852 3b04 	ldr.w	r3, [r2], #4
 8002a58:	9202      	str	r2, [sp, #8]
 8002a5a:	622b      	str	r3, [r5, #32]
        for(int i = 0; i < 3 ; i ++)
 8002a5c:	9b03      	ldr	r3, [sp, #12]
 8002a5e:	429d      	cmp	r5, r3
 8002a60:	d1bc      	bne.n	80029dc <_ZN16AttitudeEstimate7publishEv+0x58>
        imu_pub_->publish(&imu_msg_);
 8002a62:	f104 0108 	add.w	r1, r4, #8
 8002a66:	6860      	ldr	r0, [r4, #4]
 8002a68:	f7ff fcec 	bl	8002444 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8002a6c:	b02b      	add	sp, #172	; 0xac
 8002a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a72 <_ZN13StateEstimate6updateEv>:
        gps_ = gps;
        pos_estimator_.init(imu_, gps_, nh_);
      }
  }

  void update()
 8002a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    if(attitude_estimate_flag_) attitude_estimator_.update();
 8002a76:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
  void update()
 8002a7a:	b09e      	sub	sp, #120	; 0x78
 8002a7c:	4604      	mov	r4, r0
    if(attitude_estimate_flag_) attitude_estimator_.update();
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d074      	beq.n	8002b6c <_ZN13StateEstimate6updateEv+0xfa>
    if(imu_->getUpdate())
 8002a82:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002a84:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d06f      	beq.n	8002b6c <_ZN13StateEstimate6updateEv+0xfa>
        if(!imu_->getCalibrated()) return;
 8002a8c:	f000 fe42 	bl	8003714 <_ZN3IMU13getCalibratedEv>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d06b      	beq.n	8002b6c <_ZN13StateEstimate6updateEv+0xfa>
        estimator_->update(imu_->getGyro(), imu_->getAcc(), imu_->getMag());
 8002a94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a96:	6da5      	ldr	r5, [r4, #88]	; 0x58
	Vector3f  getGyro(){return gyro_;}
 8002a98:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9e:	ae1b      	add	r6, sp, #108	; 0x6c
 8002aa0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002aa4:	af18      	add	r7, sp, #96	; 0x60
 8002aa6:	ae03      	add	r6, sp, #12
 8002aa8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002aac:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	Vector3f  getAcc(){return acc_;}
 8002ab0:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8002ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab6:	af15      	add	r7, sp, #84	; 0x54
 8002ab8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002abc:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8002ac0:	af06      	add	r7, sp, #24
	Vector3f  getMag(){return mag_;}
 8002ac2:	33a0      	adds	r3, #160	; 0xa0
 8002ac4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002ac8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002acc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ad0:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8002ad4:	ab09      	add	r3, sp, #36	; 0x24
 8002ad6:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8002ada:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002ade:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    acc_b_ = acc;
 8002ae6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002aea:	f105 0e04 	add.w	lr, r5, #4
 8002aee:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    gyro_b_ = gyro;
 8002af2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002af6:	f105 071c 	add.w	r7, r5, #28
 8002afa:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    mag_b_ = mag;
 8002afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    acc_v_ = r_* acc_b_;
 8002b02:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    mag_b_ = mag;
 8002b06:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8002b0a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    acc_v_ = r_* acc_b_;
 8002b0e:	4671      	mov	r1, lr
 8002b10:	4640      	mov	r0, r8
 8002b12:	f003 fd83 	bl	800661c <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    gyro_v_ = r_*  gyro_b_;
 8002b16:	4639      	mov	r1, r7
    acc_v_ = r_* acc_b_;
 8002b18:	ed85 0a04 	vstr	s0, [r5, #16]
 8002b1c:	edc5 0a05 	vstr	s1, [r5, #20]
 8002b20:	ed85 1a06 	vstr	s2, [r5, #24]
    gyro_v_ = r_*  gyro_b_;
 8002b24:	4640      	mov	r0, r8
 8002b26:	f003 fd79 	bl	800661c <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    mag_v_ = r_ * mag_b_;
 8002b2a:	4631      	mov	r1, r6
    gyro_v_ = r_*  gyro_b_;
 8002b2c:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
 8002b30:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c
 8002b34:	ed85 1a0c 	vstr	s2, [r5, #48]	; 0x30
    mag_v_ = r_ * mag_b_;
 8002b38:	4640      	mov	r0, r8
 8002b3a:	f003 fd6f 	bl	800661c <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    estimation();
 8002b3e:	682b      	ldr	r3, [r5, #0]
    mag_v_ = r_ * mag_b_;
 8002b40:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
    estimation();
 8002b44:	681b      	ldr	r3, [r3, #0]
    mag_v_ = r_ * mag_b_;
 8002b46:	edc5 0a11 	vstr	s1, [r5, #68]	; 0x44
    estimation();
 8002b4a:	4628      	mov	r0, r5
    mag_v_ = r_ * mag_b_;
 8002b4c:	ed85 1a12 	vstr	s2, [r5, #72]	; 0x48
    estimation();
 8002b50:	4798      	blx	r3
        if(nh_->connected())  publish();
 8002b52:	6920      	ldr	r0, [r4, #16]
 8002b54:	6803      	ldr	r3, [r0, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4798      	blx	r3
 8002b5a:	b118      	cbz	r0, 8002b64 <_ZN13StateEstimate6updateEv+0xf2>
 8002b5c:	f104 0010 	add.w	r0, r4, #16
 8002b60:	f7ff ff10 	bl	8002984 <_ZN16AttitudeEstimate7publishEv>
	void setUpdate(bool update) { update_ = update; }
 8002b64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    if(altitude_estimate_flag_) altitude_estimator_.update();
 8002b6c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 8002b70:	b30b      	cbz	r3, 8002bb6 <_ZN13StateEstimate6updateEv+0x144>
    baro_= baro;
  }

  void update()
  {
    if(baro_->getUpdate())
 8002b72:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b7a:	b1e3      	cbz	r3, 8002bb6 <_ZN13StateEstimate6updateEv+0x144>
  //nav-ekf


  void publish()
  {
    baro_msg_.stamp = nh_->now();
 8002b7c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002b7e:	4668      	mov	r0, sp
 8002b80:	f7ff fe0c 	bl	800279c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8002b84:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002b88:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8002b8c:	e883 0003 	stmia.w	r3, {r0, r1}
    baro_msg_.pressure = baro_->getPressure();
 8002b90:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    baro_msg_.temperature = baro_->getTemperature();
    baro_msg_.altitude = baro_->getAltitude();
    baro_pub_->publish(&baro_msg_);
 8002b94:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002b96:	681a      	ldr	r2, [r3, #0]
    baro_msg_.pressure = baro_->getPressure();
 8002b98:	67e2      	str	r2, [r4, #124]	; 0x7c
 8002b9a:	689a      	ldr	r2, [r3, #8]
    baro_msg_.temperature = baro_->getTemperature();
 8002b9c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8002ba0:	68db      	ldr	r3, [r3, #12]
    baro_msg_.altitude = baro_->getAltitude();
 8002ba2:	67a3      	str	r3, [r4, #120]	; 0x78
    baro_pub_->publish(&baro_msg_);
 8002ba4:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8002ba8:	f7ff fc4c 	bl	8002444 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
  void setUpdate(bool update) { update_ = update; }
 8002bac:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if(pos_estimate_flag_) pos_estimator_.update();
 8002bb6:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 8002bba:	b3b3      	cbz	r3, 8002c2a <_ZN13StateEstimate6updateEv+0x1b8>
    gps_ = gps;
  }

  void update()
  {
    if(gps_->getUpdate())
 8002bbc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002bc0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002bc4:	b38b      	cbz	r3, 8002c2a <_ZN13StateEstimate6updateEv+0x1b8>
  GPS* gps_;
  //nav-ekf2

  void publish()
  {
    gps_msg_.stamp = nh_->now();
 8002bc6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002bca:	4668      	mov	r0, sp
 8002bcc:	f7ff fde6 	bl	800279c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8002bd0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002bd4:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8002bd8:	e883 0003 	stmia.w	r3, {r0, r1}

    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8002bdc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;

    gps_msg_.sat_num = gps_->getGosState().num_sats;

    gps_pub_->publish(&gps_msg_);
 8002be0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
  virtual bool is_configured(void) { return true; }
  virtual void inject_data(uint8_t *data, uint8_t len) { return; }

  GPS_State getGosState()
  {
    return state;
 8002be4:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8002be8:	ee07 2a90 	vmov	s15, r2
 8002bec:	f8d3 2022 	ldr.w	r2, [r3, #34]	; 0x22
    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8002bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gps_pub_->publish(&gps_msg_);
 8002bf4:	f104 0194 	add.w	r1, r4, #148	; 0x94
    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8002bf8:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
 8002bfc:	ee07 2a90 	vmov	s15, r2
    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
 8002c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c02:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 8002c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 8002c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8002c0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 8002c10:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8002c14:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 8002c18:	edc4 7a29 	vstr	s15, [r4, #164]	; 0xa4
    gps_pub_->publish(&gps_msg_);
 8002c1c:	f7ff fc12 	bl	8002444 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  {
    return (uint16_t)GPS_RX_SIZE;
  }

  bool getUpdate() { return update_; }
  void setUpdate(bool update) { update_ = update; }
 8002c20:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
  }
 8002c2a:	b01e      	add	sp, #120	; 0x78
 8002c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c30 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>:
  void write(uint8_t * new_data, uint8_t new_size)
 8002c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 8002c34:	4e56      	ldr	r6, [pc, #344]	; (8002d90 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x160>)
 8002c36:	4b57      	ldr	r3, [pc, #348]	; (8002d94 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x164>)
  void write(uint8_t * new_data, uint8_t new_size)
 8002c38:	4607      	mov	r7, r0
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 8002c3a:	7830      	ldrb	r0, [r6, #0]
 8002c3c:	781c      	ldrb	r4, [r3, #0]
 8002c3e:	1c45      	adds	r5, r0, #1
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	d0fd      	beq.n	8002c40 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x10>
 8002c44:	2831      	cmp	r0, #49	; 0x31
 8002c46:	d101      	bne.n	8002c4c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x1c>
 8002c48:	2c00      	cmp	r4, #0
 8002c4a:	d0f9      	beq.n	8002c40 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x10>
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 8002c4c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8002db4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x184>
 8002c50:	23fb      	movs	r3, #251	; 0xfb
 8002c52:	fb03 8300 	mla	r3, r3, r0, r8
    subscript_to_add_++;
 8002c56:	b2ed      	uxtb	r5, r5
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 8002c58:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    memcpy(tx_buffer_unit_[subscript_to_add_].tx_data_, new_data, new_size);
 8002c5c:	ebc0 1380 	rsb	r3, r0, r0, lsl #6
 8002c60:	ebc0 0083 	rsb	r0, r0, r3, lsl #2
 8002c64:	4440      	add	r0, r8
 8002c66:	f005 fbf7 	bl	8008458 <memcpy>
    if (subscript_to_add_ == TX_SIZE)
 8002c6a:	2d32      	cmp	r5, #50	; 0x32
      subscript_to_add_ = 0;
 8002c6c:	bf04      	itt	eq
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	7033      	strbeq	r3, [r6, #0]
    if (idle_flag_ )
 8002c72:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x168>)
    subscript_to_add_++;
 8002c74:	bf18      	it	ne
 8002c76:	7035      	strbne	r5, [r6, #0]
    if (idle_flag_ )
 8002c78:	7819      	ldrb	r1, [r3, #0]
 8002c7a:	4642      	mov	r2, r8
 8002c7c:	2900      	cmp	r1, #0
 8002c7e:	d054      	beq.n	8002d2a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xfa>
        if ((subscript_in_progress_ == (subscript_to_add_-1)) || (subscript_in_progress_ == TX_SIZE -1 && subscript_to_add_ == 0)) idle_flag_= false;
 8002c80:	7831      	ldrb	r1, [r6, #0]
 8002c82:	1e48      	subs	r0, r1, #1
 8002c84:	4284      	cmp	r4, r0
 8002c86:	d002      	beq.n	8002c8e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x5e>
 8002c88:	2c31      	cmp	r4, #49	; 0x31
 8002c8a:	d102      	bne.n	8002c92 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x62>
 8002c8c:	b909      	cbnz	r1, 8002c92 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x62>
 8002c8e:	2100      	movs	r1, #0
 8002c90:	7019      	strb	r1, [r3, #0]
        huart_->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8002c92:	6838      	ldr	r0, [r7, #0]
 8002c94:	6801      	ldr	r1, [r0, #0]
 8002c96:	694b      	ldr	r3, [r1, #20]
 8002c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c9c:	614b      	str	r3, [r1, #20]
        __HAL_DMA_DISABLE(huart_->hdmatx);
 8002c9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	f020 0001 	bic.w	r0, r0, #1
 8002ca8:	6018      	str	r0, [r3, #0]
        huart_->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8002caa:	20fb      	movs	r0, #251	; 0xfb
 8002cac:	fb00 2004 	mla	r0, r0, r4, r2
 8002cb0:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
 8002cb4:	6058      	str	r0, [r3, #4]
        uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 8002cb6:	ebc4 1084 	rsb	r0, r4, r4, lsl #6
 8002cba:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 8002cbe:	4414      	add	r4, r2
        huart_->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 8002cc0:	60dc      	str	r4, [r3, #12]
        huart_->Instance->CR3 |= USART_CR3_DMAT;
 8002cc2:	694a      	ldr	r2, [r1, #20]
 8002cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cc8:	614a      	str	r2, [r1, #20]
        __HAL_DMA_ENABLE(huart_->hdmatx);
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 8002cd2:	4a32      	ldr	r2, [pc, #200]	; (8002d9c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x16c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d915      	bls.n	8002d04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xd4>
 8002cd8:	3218      	adds	r2, #24
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xca>
 8002cde:	3218      	adds	r2, #24
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00c      	beq.n	8002cfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xce>
 8002ce4:	3218      	adds	r2, #24
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	bf0c      	ite	eq
 8002cea:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002cee:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002cf2:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x170>)
 8002cf4:	60d3      	str	r3, [r2, #12]
 8002cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e7f9      	b.n	8002cf2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc2>
 8002cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d02:	e7f6      	b.n	8002cf2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc2>
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x174>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d916      	bls.n	8002d38 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x108>
 8002d0a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00d      	beq.n	8002d2e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xfe>
 8002d12:	3218      	adds	r2, #24
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00c      	beq.n	8002d32 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x102>
 8002d18:	3218      	adds	r2, #24
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	bf0c      	ite	eq
 8002d1e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002d22:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x170>)
 8002d28:	6093      	str	r3, [r2, #8]
 8002d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e7f9      	b.n	8002d26 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf6>
 8002d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d36:	e7f6      	b.n	8002d26 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf6>
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x178>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d913      	bls.n	8002d66 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x136>
 8002d3e:	3218      	adds	r2, #24
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x12c>
 8002d44:	3218      	adds	r2, #24
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00a      	beq.n	8002d60 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x130>
 8002d4a:	3218      	adds	r2, #24
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	bf0c      	ite	eq
 8002d50:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002d54:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x17c>)
 8002d5a:	e7cb      	b.n	8002cf4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc4>
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e7fb      	b.n	8002d58 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x128>
 8002d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d64:	e7f8      	b.n	8002d58 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x128>
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x180>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00b      	beq.n	8002d84 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x154>
 8002d6c:	3218      	adds	r2, #24
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00a      	beq.n	8002d88 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x158>
 8002d72:	3218      	adds	r2, #24
 8002d74:	4293      	cmp	r3, r2
 8002d76:	bf0c      	ite	eq
 8002d78:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002d7c:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x17c>)
 8002d82:	e7d1      	b.n	8002d28 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf8>
 8002d84:	2320      	movs	r3, #32
 8002d86:	e7fb      	b.n	8002d80 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x150>
 8002d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8c:	e7f8      	b.n	8002d80 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x150>
 8002d8e:	bf00      	nop
 8002d90:	20000a75 	.word	0x20000a75
 8002d94:	20000a76 	.word	0x20000a76
 8002d98:	20000a74 	.word	0x20000a74
 8002d9c:	40026458 	.word	0x40026458
 8002da0:	40026400 	.word	0x40026400
 8002da4:	400260b8 	.word	0x400260b8
 8002da8:	40026058 	.word	0x40026058
 8002dac:	40026000 	.word	0x40026000
 8002db0:	40026010 	.word	0x40026010
 8002db4:	20000a77 	.word	0x20000a77

08002db8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE>:
      configured_ = true;
    }

    virtual int publish(int id, const Msg * msg)
    {
      if(id >= 100 && !configured_)
 8002db8:	2963      	cmp	r1, #99	; 0x63
    virtual int publish(int id, const Msg * msg)
 8002dba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	460e      	mov	r6, r1
      if(id >= 100 && !configured_)
 8002dc0:	dd03      	ble.n	8002dca <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x12>
 8002dc2:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 8002dc6:	2d00      	cmp	r5, #0
 8002dc8:	d03b      	beq.n	8002e42 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8a>
        return 0;

      /* serialize message */
      uint16_t l = msg->serialize(message_out+7);
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	f504 7191 	add.w	r1, r4, #290	; 0x122
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4798      	blx	r3

      /* setup the header */
      message_out[0] = 0xff;
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
      message_out[1] = PROTOCOL_VER;
 8002ddc:	22fe      	movs	r2, #254	; 0xfe
      uint16_t l = msg->serialize(message_out+7);
 8002dde:	b283      	uxth	r3, r0
      message_out[1] = PROTOCOL_VER;
 8002de0:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 8002de4:	b2c2      	uxtb	r2, r0
      message_out[3] = (uint8_t) ((uint16_t)l>>8);
 8002de6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002dea:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8002dee:	4410      	add	r0, r2
 8002df0:	43c0      	mvns	r0, r0
      message_out[5] = (uint8_t) ((int16_t)id&255);
 8002df2:	f884 6120 	strb.w	r6, [r4, #288]	; 0x120
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 8002df6:	f346 2607 	sbfx	r6, r6, #8, #8
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 8002dfa:	f884 211d 	strb.w	r2, [r4, #285]	; 0x11d
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8002dfe:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 8002e02:	f884 6121 	strb.w	r6, [r4, #289]	; 0x121

      /* calculate checksum */
      int chk = 0;
      for(int i =5; i<l+7; i++)
 8002e06:	2105      	movs	r1, #5
 8002e08:	f504 7690 	add.w	r6, r4, #288	; 0x120
      int chk = 0;
 8002e0c:	2200      	movs	r2, #0
      for(int i =5; i<l+7; i++)
 8002e0e:	1d98      	adds	r0, r3, #6
 8002e10:	4281      	cmp	r1, r0
 8002e12:	dc04      	bgt.n	8002e1e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x66>
        chk += message_out[i];
 8002e14:	f816 5b01 	ldrb.w	r5, [r6], #1
      for(int i =5; i<l+7; i++)
 8002e18:	3101      	adds	r1, #1
        chk += message_out[i];
 8002e1a:	442a      	add	r2, r5
      for(int i =5; i<l+7; i++)
 8002e1c:	e7f8      	b.n	8002e10 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x58>
      l += 7;
      message_out[l++] = 255 - (chk%256);
 8002e1e:	f103 0508 	add.w	r5, r3, #8
      l += 7;
 8002e22:	3307      	adds	r3, #7
      message_out[l++] = 255 - (chk%256);
 8002e24:	fa14 f383 	uxtah	r3, r4, r3
        {
          uint8_t reminder = l % DMA_TX_BURST_SIZE;
          if(reminder != 0) l = (l / DMA_TX_BURST_SIZE + 1) * DMA_TX_BURST_SIZE;
        }

      if( l <= OUTPUT_SIZE ){
 8002e28:	b2ad      	uxth	r5, r5
      message_out[l++] = 255 - (chk%256);
 8002e2a:	43d2      	mvns	r2, r2
      if( l <= OUTPUT_SIZE ){
 8002e2c:	2dff      	cmp	r5, #255	; 0xff
      message_out[l++] = 255 - (chk%256);
 8002e2e:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
      if( l <= OUTPUT_SIZE ){
 8002e32:	d809      	bhi.n	8002e48 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x90>
    tx_->write(data_byte, size);
 8002e34:	68a3      	ldr	r3, [r4, #8]
 8002e36:	b2ea      	uxtb	r2, r5
 8002e38:	f204 111b 	addw	r1, r4, #283	; 0x11b
 8002e3c:	6898      	ldr	r0, [r3, #8]
 8002e3e:	f7ff fef7 	bl	8002c30 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>
        return l;
      }else{
        logerror("Message from device dropped: message larger than buffer.");
        return -1;
      }
    }
 8002e42:	4628      	mov	r0, r5
 8002e44:	b004      	add	sp, #16
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
      msg("")
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb0>)
 8002e4a:	9301      	str	r3, [sp, #4]
     */

  private:
    void log(char byte, const char * msg){
      rosserial_msgs::Log l;
      l.level= byte;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	f88d 3008 	strb.w	r3, [sp, #8]
      l.msg = (char*)msg;
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb4>)
 8002e54:	9303      	str	r3, [sp, #12]
      publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	aa01      	add	r2, sp, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2107      	movs	r1, #7
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4798      	blx	r3
        return -1;
 8002e62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002e66:	e7ec      	b.n	8002e42 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8a>
 8002e68:	08008efc 	.word	0x08008efc
 8002e6c:	080091a0 	.word	0x080091a0

08002e70 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>:
    void requestSyncTime()
 8002e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      data()
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv+0x24>)
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9302      	str	r3, [sp, #8]
 8002e7a:	9303      	str	r3, [sp, #12]
      publish(TopicInfo::ID_TIME, &t);
 8002e7c:	6803      	ldr	r3, [r0, #0]
 8002e7e:	aa01      	add	r2, sp, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	210a      	movs	r1, #10
    void requestSyncTime()
 8002e84:	4604      	mov	r4, r0
      publish(TopicInfo::ID_TIME, &t);
 8002e86:	4798      	blx	r3
  uint32_t time(){return HAL_GetTick();}
 8002e88:	f001 f950 	bl	800412c <HAL_GetTick>
      rt_time = hardware_.time();
 8002e8c:	6120      	str	r0, [r4, #16]
    }
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd10      	pop	{r4, pc}
 8002e92:	bf00      	nop
 8002e94:	08008ecc 	.word	0x08008ecc

08002e98 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>:
    void negotiateTopics()
 8002e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9c:	b086      	sub	sp, #24
      buffer_size(0)
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xb0>)
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xb4>)
 8002ea6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8002eaa:	4605      	mov	r5, r0
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	9303      	str	r3, [sp, #12]
 8002eb0:	9304      	str	r3, [sp, #16]
 8002eb2:	9205      	str	r2, [sp, #20]
 8002eb4:	f500 7407 	add.w	r4, r0, #540	; 0x21c
 8002eb8:	f500 761b 	add.w	r6, r0, #620	; 0x26c
              ti.buffer_size = OUTPUT_SIZE;
 8002ebc:	27ff      	movs	r7, #255	; 0xff
          if(publishers[i] != 0) // non-empty slot
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	b1bb      	cbz	r3, 8002ef2 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x5a>
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002ec2:	6858      	ldr	r0, [r3, #4]
              ti.topic_id = publishers[i]->id_;
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	f8ad 2004 	strh.w	r2, [sp, #4]
              ti.topic_name = (char *) publishers[i]->topic_;
 8002eca:	681a      	ldr	r2, [r3, #0]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002ecc:	6803      	ldr	r3, [r0, #0]
              ti.topic_name = (char *) publishers[i]->topic_;
 8002ece:	9202      	str	r2, [sp, #8]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4798      	blx	r3
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002ed4:	6823      	ldr	r3, [r4, #0]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002ed6:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002ed8:	6858      	ldr	r0, [r3, #4]
 8002eda:	6803      	ldr	r3, [r0, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4798      	blx	r3
              publish( publishers[i]->getEndpointType(), &ti );
 8002ee0:	6821      	ldr	r1, [r4, #0]
 8002ee2:	682b      	ldr	r3, [r5, #0]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002ee4:	9004      	str	r0, [sp, #16]
              ti.buffer_size = OUTPUT_SIZE;
 8002ee6:	9705      	str	r7, [sp, #20]
              publish( publishers[i]->getEndpointType(), &ti );
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6909      	ldr	r1, [r1, #16]
 8002eec:	466a      	mov	r2, sp
 8002eee:	4628      	mov	r0, r5
 8002ef0:	4798      	blx	r3
 8002ef2:	3404      	adds	r4, #4
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8002ef4:	42b4      	cmp	r4, r6
 8002ef6:	d1e2      	bne.n	8002ebe <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x26>
 8002ef8:	f505 762f 	add.w	r6, r5, #700	; 0x2bc
              ti.buffer_size = INPUT_SIZE;
 8002efc:	27ff      	movs	r7, #255	; 0xff
          if(subscribers[i] != 0) // non-empty slot
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	b1c8      	cbz	r0, 8002f36 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x9e>
              ti.topic_id = subscribers[i]->id_;
 8002f02:	6843      	ldr	r3, [r0, #4]
 8002f04:	f8ad 3004 	strh.w	r3, [sp, #4]
              ti.topic_name = (char *) subscribers[i]->topic_;
 8002f08:	6883      	ldr	r3, [r0, #8]
 8002f0a:	9302      	str	r3, [sp, #8]
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4798      	blx	r3
 8002f12:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002f14:	6820      	ldr	r0, [r4, #0]
 8002f16:	6803      	ldr	r3, [r0, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4798      	blx	r3
              publish( subscribers[i]->getEndpointType(), &ti );
 8002f1c:	682b      	ldr	r3, [r5, #0]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002f1e:	9004      	str	r0, [sp, #16]
              publish( subscribers[i]->getEndpointType(), &ti );
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	f8d3 8000 	ldr.w	r8, [r3]
 8002f26:	6803      	ldr	r3, [r0, #0]
              ti.buffer_size = INPUT_SIZE;
 8002f28:	9705      	str	r7, [sp, #20]
              publish( subscribers[i]->getEndpointType(), &ti );
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4798      	blx	r3
 8002f2e:	466a      	mov	r2, sp
 8002f30:	4601      	mov	r1, r0
 8002f32:	4628      	mov	r0, r5
 8002f34:	47c0      	blx	r8
 8002f36:	3404      	adds	r4, #4
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f38:	42a6      	cmp	r6, r4
 8002f3a:	d1e0      	bne.n	8002efe <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x66>
      configured_ = true;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
    }
 8002f42:	b006      	add	sp, #24
 8002f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f48:	08008ee4 	.word	0x08008ee4
 8002f4c:	080091d8 	.word	0x080091d8

08002f50 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>:
    void syncTime(uint8_t * data)
 8002f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002f52:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x74>)
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	4604      	mov	r4, r0
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	9303      	str	r3, [sp, #12]
 8002f5e:	460d      	mov	r5, r1
 8002f60:	f001 f8e4 	bl	800412c <HAL_GetTick>
      uint32_t offset = hardware_.time() - rt_time;
 8002f64:	6922      	ldr	r2, [r4, #16]
      t.deserialize(data);
 8002f66:	4629      	mov	r1, r5
      uint32_t offset = hardware_.time() - rt_time;
 8002f68:	1a86      	subs	r6, r0, r2
      t.deserialize(data);
 8002f6a:	a801      	add	r0, sp, #4
 8002f6c:	f7fe fb8e 	bl	800168c <_ZN8std_msgs4Time11deserializeEPh>
      t.data.sec += offset/1000;
 8002f70:	9b02      	ldr	r3, [sp, #8]
 8002f72:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002f76:	fbb6 f2f5 	udiv	r2, r6, r5
 8002f7a:	4413      	add	r3, r2
 8002f7c:	9302      	str	r3, [sp, #8]
      t.data.nsec += (offset%1000)*1000000UL;
 8002f7e:	fb05 6212 	mls	r2, r5, r2, r6
 8002f82:	9b03      	ldr	r3, [sp, #12]
 8002f84:	4e10      	ldr	r6, [pc, #64]	; (8002fc8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x78>)
 8002f86:	fb06 3202 	mla	r2, r6, r2, r3
 8002f8a:	9203      	str	r2, [sp, #12]
 8002f8c:	f001 f8ce 	bl	800412c <HAL_GetTick>
      sec_offset = new_now.sec - ms/1000 - 1;
 8002f90:	9a02      	ldr	r2, [sp, #8]
 8002f92:	fbb0 f3f5 	udiv	r3, r0, r5
 8002f96:	3a01      	subs	r2, #1
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	6162      	str	r2, [r4, #20]
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8002f9c:	9903      	ldr	r1, [sp, #12]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x7c>)
 8002fa0:	fb05 0313 	mls	r3, r5, r3, r0
 8002fa4:	440a      	add	r2, r1
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	fb06 2313 	mls	r3, r6, r3, r2
 8002fac:	f841 3f18 	str.w	r3, [r1, #24]!
      normalizeSecNSec(sec_offset, nsec_offset);
 8002fb0:	f104 0014 	add.w	r0, r4, #20
 8002fb4:	f001 f850 	bl	8004058 <_ZN3ros16normalizeSecNSecERmS0_>
 8002fb8:	f001 f8b8 	bl	800412c <HAL_GetTick>
      last_sync_receive_time = hardware_.time();
 8002fbc:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
    }
 8002fc0:	b004      	add	sp, #16
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	08008ecc 	.word	0x08008ecc
 8002fc8:	000f4240 	.word	0x000f4240
 8002fcc:	3b9aca00 	.word	0x3b9aca00

08002fd0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>:
    virtual int spinOnce(){
 8002fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	f001 f8a9 	bl	800412c <HAL_GetTick>
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 8002fda:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8002fde:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002fe2:	1ac3      	subs	r3, r0, r3
 8002fe4:	4293      	cmp	r3, r2
        configured_ = false;
 8002fe6:	bf84      	itt	hi
 8002fe8:	2300      	movhi	r3, #0
 8002fea:	f884 32d0 	strbhi.w	r3, [r4, #720]	; 0x2d0
      if ( mode_ != MODE_FIRST_FF){
 8002fee:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002ff2:	4607      	mov	r7, r0
 8002ff4:	b133      	cbz	r3, 8003004 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x34>
        if (c_time > last_msg_timeout_time){
 8002ff6:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 8002ffa:	4283      	cmp	r3, r0
          mode_ = MODE_FIRST_FF;
 8002ffc:	bf3c      	itt	cc
 8002ffe:	2300      	movcc	r3, #0
 8003000:	f8c4 32bc 	strcc.w	r3, [r4, #700]	; 0x2bc
  bool available() { return ring_buf_->length(); }
 8003004:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80031e4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x214>
          byte_in_progress_ = 0;
 8003008:	f04f 0800 	mov.w	r8, #0
                  subscribers[topic_-100]->callback( message_in );
 800300c:	f104 091c 	add.w	r9, r4, #28
  bool available() { return ring_buf_->length(); }
 8003010:	f8da 2000 	ldr.w	r2, [sl]
    if(byte_to_add_ - byte_in_progress_ >= 0)
 8003014:	f9b2 1192 	ldrsh.w	r1, [r2, #402]	; 0x192
 8003018:	f9b2 3190 	ldrsh.w	r3, [r2, #400]	; 0x190
 800301c:	1acd      	subs	r5, r1, r3
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 800301e:	bf42      	ittt	mi
 8003020:	f8b2 0194 	ldrhmi.w	r0, [r2, #404]	; 0x194
 8003024:	18cd      	addmi	r5, r1, r3
 8003026:	1a2d      	submi	r5, r5, r0
 8003028:	b2ad      	uxth	r5, r5
    if(!available()) return -1;
 800302a:	2d00      	cmp	r5, #0
 800302c:	f000 80c7 	beq.w	80031be <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1ee>
    if (byte_in_progress_ != byte_to_add_)
 8003030:	4299      	cmp	r1, r3
 8003032:	d00a      	beq.n	800304a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x7a>
        pop_value =  buf_[byte_in_progress_];
 8003034:	5cd6      	ldrb	r6, [r2, r3]
        if (byte_in_progress_ == buffer_length_)
 8003036:	f8b2 1194 	ldrh.w	r1, [r2, #404]	; 0x194
        byte_in_progress_++;
 800303a:	3301      	adds	r3, #1
 800303c:	b21b      	sxth	r3, r3
        if (byte_in_progress_ == buffer_length_)
 800303e:	428b      	cmp	r3, r1
        byte_in_progress_++;
 8003040:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
          byte_in_progress_ = 0;
 8003044:	bf08      	it	eq
 8003046:	f8a2 8190 	strheq.w	r8, [r2, #400]	; 0x190
          checksum_ += data;
 800304a:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800304e:	f8d4 52bc 	ldr.w	r5, [r4, #700]	; 0x2bc
          checksum_ += data;
 8003052:	4433      	add	r3, r6
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8003054:	2d07      	cmp	r5, #7
          checksum_ += data;
 8003056:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800305a:	d111      	bne.n	8003080 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xb0>
            message_in[index_++] = data;
 800305c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	4423      	add	r3, r4
 8003064:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 8003068:	771e      	strb	r6, [r3, #28]
            bytes_--;
 800306a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800306e:	3b01      	subs	r3, #1
 8003070:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1cb      	bne.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              mode_ = MODE_MSG_CHECKSUM;
 8003078:	2308      	movs	r3, #8
              mode_++;
 800307a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 800307e:	e7c7      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_FIRST_FF ){
 8003080:	b9ad      	cbnz	r5, 80030ae <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xde>
            if(data == 0xff){
 8003082:	2eff      	cmp	r6, #255	; 0xff
 8003084:	d107      	bne.n	8003096 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xc6>
              mode_++;
 8003086:	2301      	movs	r3, #1
 8003088:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 8003094:	e7bc      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
  uint32_t time(){return HAL_GetTick();}
 8003096:	f001 f849 	bl	800412c <HAL_GetTick>
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 800309a:	1bc0      	subs	r0, r0, r7
 800309c:	2805      	cmp	r0, #5
 800309e:	d9b7      	bls.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              configured_=false;
 80030a0:	f884 52d0 	strb.w	r5, [r4, #720]	; 0x2d0
              return -2;
 80030a4:	f06f 0501 	mvn.w	r5, #1
    }
 80030a8:	4628      	mov	r0, r5
 80030aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          }else if( mode_ == MODE_PROTOCOL_VER ){
 80030ae:	2d01      	cmp	r5, #1
 80030b0:	d10d      	bne.n	80030ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xfe>
            if(data == PROTOCOL_VER){
 80030b2:	2efe      	cmp	r6, #254	; 0xfe
 80030b4:	d101      	bne.n	80030ba <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xea>
              mode_++;
 80030b6:	2302      	movs	r3, #2
 80030b8:	e7df      	b.n	800307a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
              if (configured_ == false)
 80030ba:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
              mode_ = MODE_FIRST_FF;
 80030be:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
              if (configured_ == false)
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1a4      	bne.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                requestSyncTime(); 	/* send a msg back showing our protocol version */
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff fed2 	bl	8002e70 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
 80030cc:	e7a0      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 80030ce:	2d02      	cmp	r5, #2
 80030d0:	d109      	bne.n	80030e6 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x116>
            bytes_ = data;
 80030d2:	f8c4 62c0 	str.w	r6, [r4, #704]	; 0x2c0
            index_ = 0;
 80030d6:	f8c4 82c8 	str.w	r8, [r4, #712]	; 0x2c8
            mode_++;
 80030da:	2303      	movs	r3, #3
            mode_++;
 80030dc:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            checksum_ = data;               /* first byte included in checksum */
 80030e0:	f8c4 62cc 	str.w	r6, [r4, #716]	; 0x2cc
 80030e4:	e794      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 80030e6:	2d03      	cmp	r5, #3
 80030e8:	d107      	bne.n	80030fa <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x12a>
            bytes_ += data<<8;
 80030ea:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80030ee:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 80030f2:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            mode_++;
 80030f6:	2304      	movs	r3, #4
 80030f8:	e7bf      	b.n	800307a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 80030fa:	2d04      	cmp	r5, #4
 80030fc:	d10b      	bne.n	8003116 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x146>
            if( (checksum_%256) == 255)
 80030fe:	425a      	negs	r2, r3
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	b2db      	uxtb	r3, r3
 8003104:	bf58      	it	pl
 8003106:	4253      	negpl	r3, r2
 8003108:	2bff      	cmp	r3, #255	; 0xff
 800310a:	d101      	bne.n	8003110 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x140>
              mode_++;
 800310c:	2305      	movs	r3, #5
 800310e:	e7b4      	b.n	800307a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003110:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
 8003114:	e77c      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 8003116:	2d05      	cmp	r5, #5
 8003118:	d103      	bne.n	8003122 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x152>
            topic_ = data;
 800311a:	f8c4 62c4 	str.w	r6, [r4, #708]	; 0x2c4
            mode_++;
 800311e:	2306      	movs	r3, #6
 8003120:	e7dc      	b.n	80030dc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x10c>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8003122:	2d06      	cmp	r5, #6
 8003124:	d10b      	bne.n	800313e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x16e>
            topic_ += data<<8;
 8003126:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 800312a:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800312e:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
            mode_ = MODE_MESSAGE;
 8003132:	2307      	movs	r3, #7
 8003134:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            if(bytes_ == 0)
 8003138:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800313c:	e79a      	b.n	8003074 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xa4>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 800313e:	2d08      	cmp	r5, #8
 8003140:	f47f af66 	bne.w	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
            if( (checksum_%256) == 255){
 8003144:	425a      	negs	r2, r3
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	b2db      	uxtb	r3, r3
 800314a:	bf58      	it	pl
 800314c:	4253      	negpl	r3, r2
 800314e:	2bff      	cmp	r3, #255	; 0xff
            mode_ = MODE_FIRST_FF;
 8003150:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
            if( (checksum_%256) == 255){
 8003154:	f47f af5c 	bne.w	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 8003158:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 800315c:	b963      	cbnz	r3, 8003178 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1a8>
                requestSyncTime();
 800315e:	4620      	mov	r0, r4
 8003160:	f7ff fe86 	bl	8002e70 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
                negotiateTopics();
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff fe97 	bl	8002e98 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>
                return -1;
 800316a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
                last_sync_time = c_time;
 800316e:	f8c4 72d4 	str.w	r7, [r4, #724]	; 0x2d4
                last_sync_receive_time = c_time;
 8003172:	f8c4 72d8 	str.w	r7, [r4, #728]	; 0x2d8
                return -1;
 8003176:	e797      	b.n	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
              }else if(topic_ == TopicInfo::ID_TIME){
 8003178:	2b0a      	cmp	r3, #10
 800317a:	d104      	bne.n	8003186 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1b6>
                syncTime(message_in);
 800317c:	4649      	mov	r1, r9
 800317e:	4620      	mov	r0, r4
 8003180:	f7ff fee6 	bl	8002f50 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>
 8003184:	e744      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 8003186:	2b06      	cmp	r3, #6
 8003188:	d108      	bne.n	800319c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1cc>
                req_param_resp.deserialize(message_in);
 800318a:	4649      	mov	r1, r9
 800318c:	f504 7039 	add.w	r0, r4, #740	; 0x2e4
 8003190:	f7fe ff3a 	bl	8002008 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                param_recieved= true;
 8003194:	2301      	movs	r3, #1
 8003196:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
 800319a:	e739      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 800319c:	2b0b      	cmp	r3, #11
 800319e:	d102      	bne.n	80031a6 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1d6>
                configured_ = false;
 80031a0:	f884 82d0 	strb.w	r8, [r4, #720]	; 0x2d0
 80031a4:	e734      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                if(subscribers[topic_-100])
 80031a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80031aa:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f43f af2e 	beq.w	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                  subscribers[topic_-100]->callback( message_in );
 80031b4:	6803      	ldr	r3, [r0, #0]
 80031b6:	4649      	mov	r1, r9
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4798      	blx	r3
 80031bc:	e728      	b.n	8003010 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 80031be:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f43f af70 	beq.w	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
 80031c8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80031cc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80031d0:	1afb      	subs	r3, r7, r3
 80031d2:	4293      	cmp	r3, r2
 80031d4:	f67f af68 	bls.w	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
        requestSyncTime();
 80031d8:	4620      	mov	r0, r4
 80031da:	f7ff fe49 	bl	8002e70 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
        last_sync_time = c_time;
 80031de:	f8c4 72d4 	str.w	r7, [r4, #724]	; 0x2d4
 80031e2:	e761      	b.n	80030a8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
 80031e4:	20003b88 	.word	0x20003b88

080031e8 <HAL_SYSTICK_Callback>:
{
 80031e8:	b510      	push	{r4, lr}
	static uint32_t last_time = HAL_GetTick();
 80031ea:	4c14      	ldr	r4, [pc, #80]	; (800323c <HAL_SYSTICK_Callback+0x54>)
 80031ec:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 80031f0:	07db      	lsls	r3, r3, #31
 80031f2:	d404      	bmi.n	80031fe <HAL_SYSTICK_Callback+0x16>
 80031f4:	f000 ff9a 	bl	800412c <HAL_GetTick>
 80031f8:	2301      	movs	r3, #1
 80031fa:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
	uint32_t now_time = HAL_GetTick();
 80031fe:	f000 ff95 	bl	800412c <HAL_GetTick>
	nh_.spinOnce();
 8003202:	480e      	ldr	r0, [pc, #56]	; (800323c <HAL_SYSTICK_Callback+0x54>)
 8003204:	f7ff fee4 	bl	8002fd0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>
	if(!start_process_flag_)
 8003208:	f894 34e4 	ldrb.w	r3, [r4, #1252]	; 0x4e4
 800320c:	b1a3      	cbz	r3, 8003238 <HAL_SYSTICK_Callback+0x50>
	if(nh_.connected())
 800320e:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 8003212:	b18b      	cbz	r3, 8003238 <HAL_SYSTICK_Callback+0x50>
		if(counter++>8)
 8003214:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8003218:	2b08      	cmp	r3, #8
 800321a:	dc03      	bgt.n	8003224 <HAL_SYSTICK_Callback+0x3c>
 800321c:	3301      	adds	r3, #1
 800321e:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
 8003222:	bd10      	pop	{r4, pc}
			counter = 0;
 8003224:	2300      	movs	r3, #0
			imu_.update();
 8003226:	210a      	movs	r1, #10
 8003228:	4805      	ldr	r0, [pc, #20]	; (8003240 <HAL_SYSTICK_Callback+0x58>)
			counter = 0;
 800322a:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
			imu_.update();
 800322e:	f000 fef9 	bl	8004024 <_ZN3IMU6updateEt>
			estimator_.update();
 8003232:	4804      	ldr	r0, [pc, #16]	; (8003244 <HAL_SYSTICK_Callback+0x5c>)
 8003234:	f7ff fc1d 	bl	8002a72 <_ZN13StateEstimate6updateEv>
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	20000534 	.word	0x20000534
 8003240:	20000844 	.word	0x20000844
 8003244:	20000958 	.word	0x20000958

08003248 <_GLOBAL__sub_I_nh_>:
    NodeHandle_() : configured_(false) {
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <_GLOBAL__sub_I_nh_+0x17c>)
 800324a:	4a5f      	ldr	r2, [pc, #380]	; (80033c8 <_GLOBAL__sub_I_nh_+0x180>)
      strings_length(0), strings(NULL)
 800324c:	495f      	ldr	r1, [pc, #380]	; (80033cc <_GLOBAL__sub_I_nh_+0x184>)
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}
 800324e:	b510      	push	{r4, lr}
 8003250:	601a      	str	r2, [r3, #0]
    baud_ = 961200;
 8003252:	4a5f      	ldr	r2, [pc, #380]	; (80033d0 <_GLOBAL__sub_I_nh_+0x188>)
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 800325c:	f8c3 12e4 	str.w	r1, [r3, #740]	; 0x2e4
 8003260:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8003264:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
 8003268:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 800326c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003274:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        publishers[i] = 0;
 8003278:	4610      	mov	r0, r2
 800327a:	1899      	adds	r1, r3, r2
 800327c:	3204      	adds	r2, #4
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 800327e:	2a50      	cmp	r2, #80	; 0x50
        publishers[i] = 0;
 8003280:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8003284:	d1f9      	bne.n	800327a <_GLOBAL__sub_I_nh_+0x32>
 8003286:	2200      	movs	r2, #0
        subscribers[i] = 0;
 8003288:	4610      	mov	r0, r2
 800328a:	1899      	adds	r1, r3, r2
 800328c:	3204      	adds	r2, #4
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 800328e:	2a50      	cmp	r2, #80	; 0x50
        subscribers[i] = 0;
 8003290:	f8c1 026c 	str.w	r0, [r1, #620]	; 0x26c
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8003294:	d1f9      	bne.n	800328a <_GLOBAL__sub_I_nh_+0x42>
 8003296:	2200      	movs	r2, #0
        message_in[i] = 0;
 8003298:	4610      	mov	r0, r2
 800329a:	1899      	adds	r1, r3, r2
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 800329c:	3201      	adds	r2, #1
 800329e:	2aff      	cmp	r2, #255	; 0xff
        message_in[i] = 0;
 80032a0:	7708      	strb	r0, [r1, #28]
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 80032a2:	d1fa      	bne.n	800329a <_GLOBAL__sub_I_nh_+0x52>
 80032a4:	2100      	movs	r1, #0
        message_out[i] = 0;
 80032a6:	460a      	mov	r2, r1
 80032a8:	1858      	adds	r0, r3, r1
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 80032aa:	3101      	adds	r1, #1
 80032ac:	29ff      	cmp	r1, #255	; 0xff
        message_out[i] = 0;
 80032ae:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 80032b2:	d1f9      	bne.n	80032a8 <_GLOBAL__sub_I_nh_+0x60>
 80032b4:	4c47      	ldr	r4, [pc, #284]	; (80033d4 <_GLOBAL__sub_I_nh_+0x18c>)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80032b6:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 80032ba:	4621      	mov	r1, r4
 80032bc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
 80032c0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 80032c4:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 80032c8:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 80032cc:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
 80032d6:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 80032da:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 80032de:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 80032e2:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
 80032e6:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
 80032ea:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
 80032ee:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 80032f2:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 80032f6:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
 80032fa:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
 80032fe:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
 8003302:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8003306:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 800330a:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
 800330e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8003312:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 8003316:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 800331a:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
 800331e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 8003322:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8003326:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
 800332a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
 800332e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
 8003332:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
 8003336:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
 800333a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
 800333e:	f841 2b0c 	str.w	r2, [r1], #12
 8003342:	60a2      	str	r2, [r4, #8]
 8003344:	600a      	str	r2, [r1, #0]
 8003346:	6062      	str	r2, [r4, #4]
 8003348:	61a2      	str	r2, [r4, #24]
 800334a:	6162      	str	r2, [r4, #20]
 800334c:	6122      	str	r2, [r4, #16]
//ros node  ugvnode
static RosNode *testnode;

/* sensors */
#if IMU_FLAG
IMU imu_;
 800334e:	4922      	ldr	r1, [pc, #136]	; (80033d8 <_GLOBAL__sub_I_nh_+0x190>)
 8003350:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
 8003354:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
 8003358:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
 800335c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8003360:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
 8003364:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
 8003368:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 800336c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 8003370:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 8003374:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
 8003378:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 800337c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 8003380:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
 8003384:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 8003388:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
 800338c:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
 8003390:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 8003394:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8003398:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 800339c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
 80033a0:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
 80033a4:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <_GLOBAL__sub_I_nh_+0x194>)
 80033a6:	f003 fa78 	bl	800689a <__aeabi_atexit>
#if GPS_FLAG
GPS gps_;
#endif
//
#if ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG
StateEstimate estimator_;
 80033aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033ae:	f7ff f8fb 	bl	80025a8 <_ZN13StateEstimateC1Ev>
 80033b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <_GLOBAL__sub_I_nh_+0x194>)
 80033b8:	4909      	ldr	r1, [pc, #36]	; (80033e0 <_GLOBAL__sub_I_nh_+0x198>)
 80033ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033be:	f003 ba6c 	b.w	800689a <__aeabi_atexit>
 80033c2:	bf00      	nop
 80033c4:	20000534 	.word	0x20000534
 80033c8:	08008f44 	.word	0x08008f44
 80033cc:	08008f14 	.word	0x08008f14
 80033d0:	000eaab0 	.word	0x000eaab0
 80033d4:	20000934 	.word	0x20000934
 80033d8:	0800242d 	.word	0x0800242d
 80033dc:	20000000 	.word	0x20000000
 80033e0:	08001c89 	.word	0x08001c89

080033e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033e4:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80033e6:	480f      	ldr	r0, [pc, #60]	; (8003424 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <MX_SPI1_Init+0x44>)
 80033ea:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033f2:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033f6:	2300      	movs	r3, #0
 80033f8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033fa:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033fc:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033fe:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003400:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003402:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003404:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003406:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003408:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 800340a:	230f      	movs	r3, #15
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800340c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 15;
 800340e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003410:	f001 fffa 	bl	8005408 <HAL_SPI_Init>
 8003414:	b128      	cbz	r0, 8003422 <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003416:	2145      	movs	r1, #69	; 0x45
 8003418:	4804      	ldr	r0, [pc, #16]	; (800342c <MX_SPI1_Init+0x48>)
  }

}
 800341a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800341e:	f7ff b94f 	b.w	80026c0 <_Error_Handler>
 8003422:	bd08      	pop	{r3, pc}
 8003424:	20003b90 	.word	0x20003b90
 8003428:	40013000 	.word	0x40013000
 800342c:	08009215 	.word	0x08009215

08003430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003430:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8003432:	6802      	ldr	r2, [r0, #0]
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_SPI_MspInit+0x54>)
 8003436:	429a      	cmp	r2, r3
{
 8003438:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 800343a:	d120      	bne.n	800347e <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800343c:	2400      	movs	r4, #0
 800343e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003442:	9400      	str	r4, [sp, #0]
 8003444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	4810      	ldr	r0, [pc, #64]	; (8003488 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003458:	2338      	movs	r3, #56	; 0x38
 800345a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003466:	2305      	movs	r3, #5
 8003468:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346a:	f001 fc51 	bl	8004d10 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800346e:	2023      	movs	r0, #35	; 0x23
 8003470:	4622      	mov	r2, r4
 8003472:	4621      	mov	r1, r4
 8003474:	f001 f88a 	bl	800458c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003478:	2023      	movs	r0, #35	; 0x23
 800347a:	f001 f8bb 	bl	80045f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800347e:	b006      	add	sp, #24
 8003480:	bd10      	pop	{r4, pc}
 8003482:	bf00      	nop
 8003484:	40013000 	.word	0x40013000
 8003488:	40020400 	.word	0x40020400

0800348c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800348c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800348e:	2005      	movs	r0, #5
 8003490:	f001 f86a 	bl	8004568 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	4611      	mov	r1, r2
 8003498:	f06f 000b 	mvn.w	r0, #11
 800349c:	f001 f876 	bl	800458c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	4611      	mov	r1, r2
 80034a4:	f06f 000a 	mvn.w	r0, #10
 80034a8:	f001 f870 	bl	800458c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	4611      	mov	r1, r2
 80034b0:	f06f 0009 	mvn.w	r0, #9
 80034b4:	f001 f86a 	bl	800458c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80034b8:	2200      	movs	r2, #0
 80034ba:	4611      	mov	r1, r2
 80034bc:	f06f 0004 	mvn.w	r0, #4
 80034c0:	f001 f864 	bl	800458c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	4611      	mov	r1, r2
 80034c8:	f06f 0003 	mvn.w	r0, #3
 80034cc:	f001 f85e 	bl	800458c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	4611      	mov	r1, r2
 80034d4:	f06f 0001 	mvn.w	r0, #1
 80034d8:	f001 f858 	bl	800458c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 80034dc:	2201      	movs	r2, #1
 80034de:	2100      	movs	r1, #0
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 80034e8:	f001 b850 	b.w	800458c <HAL_NVIC_SetPriority>

080034ec <NMI_Handler>:
 80034ec:	4770      	bx	lr

080034ee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80034ee:	e7fe      	b.n	80034ee <HardFault_Handler>

080034f0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80034f0:	e7fe      	b.n	80034f0 <MemManage_Handler>

080034f2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80034f2:	e7fe      	b.n	80034f2 <BusFault_Handler>

080034f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80034f4:	e7fe      	b.n	80034f4 <UsageFault_Handler>

080034f6 <SVC_Handler>:
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:
 80034f8:	4770      	bx	lr

080034fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80034fa:	4770      	bx	lr

080034fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80034fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034fe:	f000 fe0d 	bl	800411c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003506:	f001 b8a3 	b.w	8004650 <HAL_SYSTICK_IRQHandler>
	...

0800350c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <SPI1_IRQHandler+0x8>)
 800350e:	f002 ba05 	b.w	800591c <HAL_SPI_IRQHandler>
 8003512:	bf00      	nop
 8003514:	20003b90 	.word	0x20003b90

08003518 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <USART1_IRQHandler+0x8>)
 800351a:	f002 bcf3 	b.w	8005f04 <HAL_UART_IRQHandler>
 800351e:	bf00      	nop
 8003520:	20003ca8 	.word	0x20003ca8

08003524 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003524:	4801      	ldr	r0, [pc, #4]	; (800352c <DMA2_Stream2_IRQHandler+0x8>)
 8003526:	f001 b97b 	b.w	8004820 <HAL_DMA_IRQHandler>
 800352a:	bf00      	nop
 800352c:	20003be8 	.word	0x20003be8

08003530 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003530:	4801      	ldr	r0, [pc, #4]	; (8003538 <DMA2_Stream7_IRQHandler+0x8>)
 8003532:	f001 b975 	b.w	8004820 <HAL_DMA_IRQHandler>
 8003536:	bf00      	nop
 8003538:	20003c48 	.word	0x20003c48

0800353c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800353c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800353e:	480c      	ldr	r0, [pc, #48]	; (8003570 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 921600;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <MX_USART1_UART_Init+0x38>)
 8003542:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 8003546:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800354a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800354c:	2300      	movs	r3, #0
 800354e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003550:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003552:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003554:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003556:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003558:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800355a:	f002 fb7f 	bl	8005c5c <HAL_UART_Init>
 800355e:	b128      	cbz	r0, 800356c <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003560:	2145      	movs	r1, #69	; 0x45
 8003562:	4805      	ldr	r0, [pc, #20]	; (8003578 <MX_USART1_UART_Init+0x3c>)
  }

}
 8003564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003568:	f7ff b8aa 	b.w	80026c0 <_Error_Handler>
 800356c:	bd08      	pop	{r3, pc}
 800356e:	bf00      	nop
 8003570:	20003ca8 	.word	0x20003ca8
 8003574:	40011000 	.word	0x40011000
 8003578:	08009228 	.word	0x08009228

0800357c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800357e:	6802      	ldr	r2, [r0, #0]
 8003580:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_UART_MspInit+0xe0>)
 8003582:	429a      	cmp	r2, r3
{
 8003584:	b087      	sub	sp, #28
 8003586:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART1)
 8003588:	d165      	bne.n	8003656 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800358a:	2500      	movs	r5, #0
 800358c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003590:	9500      	str	r5, [sp, #0]
 8003592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	4832      	ldr	r0, [pc, #200]	; (8003660 <HAL_UART_MspInit+0xe4>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003596:	4c33      	ldr	r4, [pc, #204]	; (8003664 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003598:	f042 0210 	orr.w	r2, r2, #16
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b0:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b2:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035b8:	2307      	movs	r3, #7
 80035ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035bc:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	f001 fba7 	bl	8004d10 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_UART_MspInit+0xec>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c4:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80035c6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 80035ca:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d2:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d8:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035da:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80035de:	6223      	str	r3, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80035e0:	2304      	movs	r3, #4
 80035e2:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035e4:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 80035e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ea:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ec:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ee:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80035f0:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 80035f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80035f4:	6325      	str	r5, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035f6:	f001 f845 	bl	8004684 <HAL_DMA_Init>
 80035fa:	b118      	cbz	r0, 8003604 <HAL_UART_MspInit+0x88>
    {
      _Error_Handler(__FILE__, __LINE__);
 80035fc:	2172      	movs	r1, #114	; 0x72
 80035fe:	481b      	ldr	r0, [pc, #108]	; (800366c <HAL_UART_MspInit+0xf0>)
 8003600:	f7ff f85e 	bl	80026c0 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003604:	6374      	str	r4, [r6, #52]	; 0x34
 8003606:	63a6      	str	r6, [r4, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003608:	4c19      	ldr	r4, [pc, #100]	; (8003670 <HAL_UART_MspInit+0xf4>)
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800360a:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <HAL_UART_MspInit+0xf8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800360c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003610:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8003614:	2740      	movs	r7, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003616:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003618:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800361c:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003620:	61e2      	str	r2, [r4, #28]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003622:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003624:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003628:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800362a:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362c:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800362e:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003630:	6222      	str	r2, [r4, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003632:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003634:	f001 f826 	bl	8004684 <HAL_DMA_Init>
 8003638:	b118      	cbz	r0, 8003642 <HAL_UART_MspInit+0xc6>
    {
      _Error_Handler(__FILE__, __LINE__);
 800363a:	2184      	movs	r1, #132	; 0x84
 800363c:	480b      	ldr	r0, [pc, #44]	; (800366c <HAL_UART_MspInit+0xf0>)
 800363e:	f7ff f83f 	bl	80026c0 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003642:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003644:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003646:	2025      	movs	r0, #37	; 0x25
 8003648:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800364a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800364c:	f000 ff9e 	bl	800458c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003650:	2025      	movs	r0, #37	; 0x25
 8003652:	f000 ffcf 	bl	80045f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003656:	b007      	add	sp, #28
 8003658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365a:	bf00      	nop
 800365c:	40011000 	.word	0x40011000
 8003660:	40020000 	.word	0x40020000
 8003664:	20003be8 	.word	0x20003be8
 8003668:	40026440 	.word	0x40026440
 800366c:	08009228 	.word	0x08009228
 8003670:	20003c48 	.word	0x20003c48
 8003674:	400264b8 	.word	0x400264b8

08003678 <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8003678:	7903      	ldrb	r3, [r0, #4]
 800367a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800367c:	2001      	movs	r0, #1
 800367e:	4770      	bx	lr

08003680 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8003680:	780b      	ldrb	r3, [r1, #0]
 8003682:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8003684:	2001      	movs	r0, #1
 8003686:	4770      	bx	lr

08003688 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8003688:	4800      	ldr	r0, [pc, #0]	; (800368c <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 800368a:	4770      	bx	lr
 800368c:	080092e5 	.word	0x080092e5

08003690 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8003690:	4800      	ldr	r0, [pc, #0]	; (8003694 <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 8003692:	4770      	bx	lr
 8003694:	080092c4 	.word	0x080092c4

08003698 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE15getEndpointTypeEv>:
      virtual int getEndpointType(){ return endpoint_; }
 8003698:	6a00      	ldr	r0, [r0, #32]
 800369a:	4770      	bx	lr

0800369c <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 800369c:	4800      	ldr	r0, [pc, #0]	; (80036a0 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv+0x4>)
 800369e:	4770      	bx	lr
 80036a0:	080092e5 	.word	0x080092e5

080036a4 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 80036a4:	4800      	ldr	r0, [pc, #0]	; (80036a8 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev+0x4>)
 80036a6:	4770      	bx	lr
 80036a8:	080092c4 	.word	0x080092c4

080036ac <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh>:
      virtual void callback(unsigned char* data){
 80036ac:	b410      	push	{r4}
      { return (__p->*_M_f)(__x); }
 80036ae:	69c2      	ldr	r2, [r0, #28]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80036b0:	780b      	ldrb	r3, [r1, #0]
        this->fun_obj_(obj_, msg);
 80036b2:	6944      	ldr	r4, [r0, #20]
 80036b4:	7403      	strb	r3, [r0, #16]
 80036b6:	f012 0f01 	tst.w	r2, #1
 80036ba:	ea4f 0262 	mov.w	r2, r2, asr #1
 80036be:	6983      	ldr	r3, [r0, #24]
 80036c0:	f100 010c 	add.w	r1, r0, #12
 80036c4:	bf1c      	itt	ne
 80036c6:	58a0      	ldrne	r0, [r4, r2]
 80036c8:	58c3      	ldrne	r3, [r0, r3]
 80036ca:	18a0      	adds	r0, r4, r2
      }
 80036cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d0:	4718      	bx	r3

080036d2 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E>:
	}
}

void IMU::imuConfigCallback(const std_msgs::UInt8& config_msg)
{
	switch(config_msg.data)
 80036d2:	790b      	ldrb	r3, [r1, #4]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d011      	beq.n	80036fc <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x2a>
 80036d8:	d302      	bcc.n	80036e0 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xe>
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d015      	beq.n	800370a <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x38>
 80036de:	4770      	bx	lr
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80036e6:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 80036ea:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 80036ee:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 80036f2:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 80036f6:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 80036fa:	4770      	bx	lr
		acc_offset_.zero();
		mag_offset_.zero();
		//writeCalibData(); //no need?
		break;
	case MPU_ACC_GYRO_CALIB_CMD:
		calibrate_gyro_ = CALIBRATING_STEP;
 80036fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003700:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
		calibrate_acc_ = CALIBRATING_STEP;
 8003704:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
		break;
 8003708:	4770      	bx	lr
	case MPU_MAG_CALIB_CMD:
		calibrate_mag_ = CALIBRATING_MAG_STEP;
 800370a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800370e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 8003712:	4770      	bx	lr

08003714 <_ZN3IMU13getCalibratedEv>:
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 8003714:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8003718:	b943      	cbnz	r3, 800372c <_ZN3IMU13getCalibratedEv+0x18>
 800371a:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800371e:	b92a      	cbnz	r2, 800372c <_ZN3IMU13getCalibratedEv+0x18>
 8003720:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8003724:	fab0 f080 	clz	r0, r0
 8003728:	0940      	lsrs	r0, r0, #5
 800372a:	4770      	bx	lr
	else return false;
 800372c:	2000      	movs	r0, #0
 800372e:	4770      	bx	lr

08003730 <_ZN3IMU13readCalibDataEv>:
{
 8003730:	b510      	push	{r4, lr}
 8003732:	4604      	mov	r4, r0
	status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003738:	f001 f9c6 	bl	8004ac8 <FLASH_WaitForLastOperation>
	if(status == HAL_OK)
 800373c:	b9e0      	cbnz	r0, 8003778 <_ZN3IMU13readCalibDataEv+0x48>
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <_ZN3IMU13readCalibDataEv+0x4c>)
		FLASH->CR &= (~FLASH_CR_PG);
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <_ZN3IMU13readCalibDataEv+0x50>)
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <_ZN3IMU13readCalibDataEv+0x54>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <_ZN3IMU13readCalibDataEv+0x58>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <_ZN3IMU13readCalibDataEv+0x5c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <_ZN3IMU13readCalibDataEv+0x60>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <_ZN3IMU13readCalibDataEv+0x64>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		FLASH->CR &= (~FLASH_CR_PG);
 8003770:	6913      	ldr	r3, [r2, #16]
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6113      	str	r3, [r2, #16]
 8003778:	bd10      	pop	{r4, pc}
 800377a:	bf00      	nop
 800377c:	08010000 	.word	0x08010000
 8003780:	40023c00 	.word	0x40023c00
 8003784:	0801000c 	.word	0x0801000c
 8003788:	08010004 	.word	0x08010004
 800378c:	08010010 	.word	0x08010010
 8003790:	08010008 	.word	0x08010008
 8003794:	08010014 	.word	0x08010014

08003798 <_ZN3IMU14writeCalibDataEv>:
{
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	4604      	mov	r4, r0
	r = HAL_FLASH_Unlock();
 800379e:	f001 f977 	bl	8004a90 <HAL_FLASH_Unlock>
	if( r != HAL_OK ) return;
 80037a2:	bb18      	cbnz	r0, 80037ec <_ZN3IMU14writeCalibDataEv+0x54>
	EraseInitStruct.Sector = CALIB_DATA_SECTOR ;
 80037a4:	2304      	movs	r3, #4
 80037a6:	9303      	str	r3, [sp, #12]
	EraseInitStruct.NbSectors = 1;
 80037a8:	2301      	movs	r3, #1
	uint32_t SectorError = 0;
 80037aa:	9000      	str	r0, [sp, #0]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80037ac:	9001      	str	r0, [sp, #4]
	EraseInitStruct.NbSectors = 1;
 80037ae:	9304      	str	r3, [sp, #16]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80037b0:	4669      	mov	r1, sp
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80037b2:	2302      	movs	r3, #2
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80037b4:	a801      	add	r0, sp, #4
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80037b6:	9305      	str	r3, [sp, #20]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80037b8:	f001 fa5c 	bl	8004c74 <HAL_FLASHEx_Erase>
	if ( r != HAL_OK )
 80037bc:	b9b0      	cbnz	r0, 80037ec <_ZN3IMU14writeCalibDataEv+0x54>
 80037be:	4d0c      	ldr	r5, [pc, #48]	; (80037f0 <_ZN3IMU14writeCalibDataEv+0x58>)
	for(int i = 0; i < 3; i++)
 80037c0:	4e0c      	ldr	r6, [pc, #48]	; (80037f4 <_ZN3IMU14writeCalibDataEv+0x5c>)
 80037c2:	34d0      	adds	r4, #208	; 0xd0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i, (*(__IO uint64_t*)(&acc_offset_[i])));
 80037c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80037c8:	4629      	mov	r1, r5
 80037ca:	2002      	movs	r0, #2
 80037cc:	f001 f9a6 	bl	8004b1c <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i, (*(__IO uint64_t*)(&mag_offset_[i])));
 80037d0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80037d4:	f105 010c 	add.w	r1, r5, #12
 80037d8:	2002      	movs	r0, #2
 80037da:	3504      	adds	r5, #4
 80037dc:	f001 f99e 	bl	8004b1c <HAL_FLASH_Program>
	for(int i = 0; i < 3; i++)
 80037e0:	42b5      	cmp	r5, r6
 80037e2:	f104 0404 	add.w	r4, r4, #4
 80037e6:	d1ed      	bne.n	80037c4 <_ZN3IMU14writeCalibDataEv+0x2c>
	r = HAL_FLASH_Lock();
 80037e8:	f001 f964 	bl	8004ab4 <HAL_FLASH_Lock>
}
 80037ec:	b006      	add	sp, #24
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	08010000 	.word	0x08010000
 80037f4:	0801000c 	.word	0x0801000c

080037f8 <_ZN3IMU8mpuWriteEhh>:
{
 80037f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	IMU_SPI_CS_L;
 80037fa:	4c11      	ldr	r4, [pc, #68]	; (8003840 <_ZN3IMU8mpuWriteEhh+0x48>)
{
 80037fc:	f88d 1007 	strb.w	r1, [sp, #7]
 8003800:	4605      	mov	r5, r0
 8003802:	f88d 2006 	strb.w	r2, [sp, #6]
	IMU_SPI_CS_L;
 8003806:	4620      	mov	r0, r4
 8003808:	2200      	movs	r2, #0
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	f001 fb3a 	bl	8004e84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 8003810:	f10d 0107 	add.w	r1, sp, #7
 8003814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003818:	2201      	movs	r2, #1
 800381a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800381c:	f001 fe31 	bl	8005482 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 8003820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003824:	f10d 0106 	add.w	r1, sp, #6
 8003828:	2201      	movs	r2, #1
 800382a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800382c:	f001 fe29 	bl	8005482 <HAL_SPI_Transmit>
	IMU_SPI_CS_H;
 8003830:	2201      	movs	r2, #1
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	4620      	mov	r0, r4
 8003836:	f001 fb25 	bl	8004e84 <HAL_GPIO_WritePin>
}
 800383a:	b003      	add	sp, #12
 800383c:	bd30      	pop	{r4, r5, pc}
 800383e:	bf00      	nop
 8003840:	40020400 	.word	0x40020400

08003844 <_ZN3IMU8gyroInitEv>:
{
 8003844:	b510      	push	{r4, lr}
 8003846:	4604      	mov	r4, r0
	HAL_Delay(100);
 8003848:	2064      	movs	r0, #100	; 0x64
 800384a:	f000 fc75 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x6B, 0x80);             //PWR_MGMT_1    -- DEVICE_RESET 1
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	216b      	movs	r1, #107	; 0x6b
 8003852:	4620      	mov	r0, r4
 8003854:	f7ff ffd0 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 8003858:	200a      	movs	r0, #10
 800385a:	f000 fc6d 	bl	8004138 <HAL_Delay>
	HAL_Delay(1); //very important!, some duration for process the setting
 800385e:	2001      	movs	r0, #1
 8003860:	f000 fc6a 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x6A, 0x10);             //disable i2c communication
 8003864:	2210      	movs	r2, #16
 8003866:	216a      	movs	r1, #106	; 0x6a
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff ffc5 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800386e:	2001      	movs	r0, #1
 8003870:	f000 fc62 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 8003874:	2201      	movs	r2, #1
 8003876:	211a      	movs	r1, #26
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff ffbd 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800387e:	2001      	movs	r0, #1
 8003880:	f000 fc5a 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 8003884:	2218      	movs	r2, #24
 8003886:	211b      	movs	r1, #27
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff ffb5 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10); //very importnat! between gyro and acc
 800388e:	200a      	movs	r0, #10
 8003890:	f000 fc52 	bl	8004138 <HAL_Delay>
	calibrate_gyro_ = 10; //CALIBRATING_STEP;
 8003894:	230a      	movs	r3, #10
 8003896:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 800389a:	2300      	movs	r3, #0
 800389c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 80038a0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80038a4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80038a8:	bd10      	pop	{r4, pc}

080038aa <_ZN3IMU7accInitEv>:
void IMU::accInit (void) {
 80038aa:	b510      	push	{r4, lr}
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 80038ac:	2210      	movs	r2, #16
 80038ae:	211c      	movs	r1, #28
void IMU::accInit (void) {
 80038b0:	4604      	mov	r4, r0
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 80038b2:	f7ff ffa1 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80038b6:	2001      	movs	r0, #1
 80038b8:	f000 fc3e 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x1D, ACC_DLPF_CFG);
 80038bc:	2203      	movs	r2, #3
 80038be:	211d      	movs	r1, #29
 80038c0:	4620      	mov	r0, r4
 80038c2:	f7ff ff99 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 80038c6:	200a      	movs	r0, #10
 80038c8:	f000 fc36 	bl	8004138 <HAL_Delay>
	calibrate_acc_ = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80038d8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80038dc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80038e0:	bd10      	pop	{r4, pc}

080038e2 <_ZN3IMU7magInitEv>:
{
 80038e2:	b510      	push	{r4, lr}
 80038e4:	4604      	mov	r4, r0
	HAL_Delay(10);
 80038e6:	200a      	movs	r0, #10
 80038e8:	f000 fc26 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 80038ec:	2220      	movs	r2, #32
 80038ee:	216a      	movs	r1, #106	; 0x6a
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff ff81 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 80038f6:	200a      	movs	r0, #10
 80038f8:	f000 fc1e 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 80038fc:	2200      	movs	r2, #0
 80038fe:	2137      	movs	r1, #55	; 0x37
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff ff79 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003906:	2001      	movs	r0, #1
 8003908:	f000 fc16 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 800390c:	220d      	movs	r2, #13
 800390e:	2124      	movs	r1, #36	; 0x24
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff ff71 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003916:	2001      	movs	r0, #1
 8003918:	f000 fc0e 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x25, MAG_ADDRESS);
 800391c:	220c      	movs	r2, #12
 800391e:	2125      	movs	r1, #37	; 0x25
 8003920:	4620      	mov	r0, r4
 8003922:	f7ff ff69 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003926:	2001      	movs	r0, #1
 8003928:	f000 fc06 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x26, 0x0B);
 800392c:	220b      	movs	r2, #11
 800392e:	2126      	movs	r1, #38	; 0x26
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff ff61 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003936:	2001      	movs	r0, #1
 8003938:	f000 fbfe 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x63, 0x01);
 800393c:	2201      	movs	r2, #1
 800393e:	2163      	movs	r1, #99	; 0x63
 8003940:	4620      	mov	r0, r4
 8003942:	f7ff ff59 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003946:	2001      	movs	r0, #1
 8003948:	f000 fbf6 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800394c:	2281      	movs	r2, #129	; 0x81
 800394e:	2127      	movs	r1, #39	; 0x27
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff ff51 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003956:	2001      	movs	r0, #1
 8003958:	f000 fbee 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x26, 0x0A);
 800395c:	220a      	movs	r2, #10
 800395e:	2126      	movs	r1, #38	; 0x26
 8003960:	4620      	mov	r0, r4
 8003962:	f7ff ff49 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003966:	2001      	movs	r0, #1
 8003968:	f000 fbe6 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x63, 0x16);
 800396c:	2216      	movs	r2, #22
 800396e:	2163      	movs	r1, #99	; 0x63
 8003970:	4620      	mov	r0, r4
 8003972:	f7ff ff41 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003976:	2001      	movs	r0, #1
 8003978:	f000 fbde 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800397c:	2281      	movs	r2, #129	; 0x81
 800397e:	2127      	movs	r1, #39	; 0x27
 8003980:	4620      	mov	r0, r4
 8003982:	f7ff ff39 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003986:	2001      	movs	r0, #1
 8003988:	f000 fbd6 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 800398c:	228c      	movs	r2, #140	; 0x8c
 800398e:	2125      	movs	r1, #37	; 0x25
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff ff31 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 8003996:	2001      	movs	r0, #1
 8003998:	f000 fbce 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 800399c:	2203      	movs	r2, #3
 800399e:	2126      	movs	r1, #38	; 0x26
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff ff29 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f000 fbc6 	bl	8004138 <HAL_Delay>
	mpuWrite( 0x27, 0x87);
 80039ac:	2287      	movs	r2, #135	; 0x87
 80039ae:	2127      	movs	r1, #39	; 0x27
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff ff21 	bl	80037f8 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f000 fbbe 	bl	8004138 <HAL_Delay>
	calibrate_mag_ = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 80039c2:	bd10      	pop	{r4, pc}

080039c4 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
{
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	2300      	movs	r3, #0
	reset_calib_flag_  = 0;
 80039c8:	2500      	movs	r5, #0
{
 80039ca:	4604      	mov	r4, r0
 80039cc:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80039d0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80039d4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80039d8:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 80039dc:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 80039e0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80039e4:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 80039e8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 80039ec:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	nh_ = nh;
 80039f0:	6342      	str	r2, [r0, #52]	; 0x34
	reset_calib_flag_  = 0;
 80039f2:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 80039f6:	2024      	movs	r0, #36	; 0x24
{
 80039f8:	460e      	mov	r6, r1
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 80039fa:	f002 ff53 	bl	80068a4 <_Znwj>
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb8>)
 8003a00:	6003      	str	r3, [r0, #0]
      data(0)
 8003a02:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xbc>)
 8003a04:	60c3      	str	r3, [r0, #12]
      : _M_f(__pf) { }
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xc0>)
 8003a08:	6183      	str	r3, [r0, #24]
	nh_->subscribe<std_msgs::UInt8, IMU>(*imu_config_sub_);
 8003a0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003a0c:	7405      	strb	r5, [r0, #16]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	6203      	str	r3, [r0, #32]
        topic_ = topic_name;
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xc4>)
 8003a14:	6083      	str	r3, [r0, #8]
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8003a16:	6144      	str	r4, [r0, #20]
 8003a18:	61c5      	str	r5, [r0, #28]
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 8003a1a:	63a0      	str	r0, [r4, #56]	; 0x38
 8003a1c:	f502 711b 	add.w	r1, r2, #620	; 0x26c
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8003a20:	462b      	mov	r3, r5
        if(subscribers[i] == 0){ // empty slot
 8003a22:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a26:	bb2d      	cbnz	r5, 8003a74 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb0>
          subscribers[i] = (Subscriber_*) &s;
 8003a28:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          s.id_ = i+100;
 8003a2c:	3364      	adds	r3, #100	; 0x64
          subscribers[i] = (Subscriber_*) &s;
 8003a2e:	f8c2 026c 	str.w	r0, [r2, #620]	; 0x26c
          s.id_ = i+100;
 8003a32:	6043      	str	r3, [r0, #4]
	ahb_suspend_flag_ = false;
 8003a34:	2300      	movs	r3, #0
	mag_filtering_flag_ = true;
 8003a36:	2201      	movs	r2, #1
	ahb_suspend_flag_ = false;
 8003a38:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	mag_filtering_flag_ = true;
 8003a3c:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	mag_outlier_counter_ = 0;
 8003a40:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
	readCalibData();
 8003a44:	4620      	mov	r0, r4
	hspi_ = hspi;
 8003a46:	6326      	str	r6, [r4, #48]	; 0x30
	readCalibData();
 8003a48:	f7ff fe72 	bl	8003730 <_ZN3IMU13readCalibDataEv>
	gyroInit();
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f7ff fef9 	bl	8003844 <_ZN3IMU8gyroInitEv>
	accInit();
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff ff29 	bl	80038aa <_ZN3IMU7accInitEv>
	magInit();
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff ff42 	bl	80038e2 <_ZN3IMU7magInitEv>
	hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003a5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003a68:	601a      	str	r2, [r3, #0]
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	f042 0210 	orr.w	r2, r2, #16
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8003a74:	3301      	adds	r3, #1
 8003a76:	2b14      	cmp	r3, #20
 8003a78:	d1d3      	bne.n	8003a22 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x5e>
 8003a7a:	e7db      	b.n	8003a34 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x70>
 8003a7c:	080092b4 	.word	0x080092b4
 8003a80:	0800929c 	.word	0x0800929c
 8003a84:	080036d3 	.word	0x080036d3
 8003a88:	080092f4 	.word	0x080092f4

08003a8c <_ZN3IMU4readEv>:
{
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	b088      	sub	sp, #32
	t_data[0] = 0x43 | 0x80;
 8003a90:	ad08      	add	r5, sp, #32
 8003a92:	23c3      	movs	r3, #195	; 0xc3
{
 8003a94:	4604      	mov	r4, r0
	t_data[0] = 0x43 | 0x80;
 8003a96:	f805 3d1c 	strb.w	r3, [r5, #-28]!
	IMU_SPI_CS_L;
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2140      	movs	r1, #64	; 0x40
 8003a9e:	4890      	ldr	r0, [pc, #576]	; (8003ce0 <_ZN3IMU4readEv+0x254>)
	if(i == MAG_PRESCALER)
 8003aa0:	4e90      	ldr	r6, [pc, #576]	; (8003ce4 <_ZN3IMU4readEv+0x258>)
	IMU_SPI_CS_L;
 8003aa2:	f001 f9ef 	bl	8004e84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8003aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4629      	mov	r1, r5
 8003aae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003ab0:	f001 fce7 	bl	8005482 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_gyro, 6, 1000);
 8003ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ab8:	2206      	movs	r2, #6
 8003aba:	a902      	add	r1, sp, #8
 8003abc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003abe:	f001 fe8c 	bl	80057da <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	4886      	ldr	r0, [pc, #536]	; (8003ce0 <_ZN3IMU4readEv+0x254>)
 8003ac8:	f001 f9dc 	bl	8004e84 <HAL_GPIO_WritePin>
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003acc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003ad0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003ad4:	ed9f 5a84 	vldr	s10, [pc, #528]	; 8003ce8 <_ZN3IMU4readEv+0x25c>
 8003ad8:	eddf 5a84 	vldr	s11, [pc, #528]	; 8003cec <_ZN3IMU4readEv+0x260>
 8003adc:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8003cf0 <_ZN3IMU4readEv+0x264>
 8003ae0:	eddf 6a84 	vldr	s13, [pc, #528]	; 8003cf4 <_ZN3IMU4readEv+0x268>
	IMU_SPI_CS_L;
 8003ae4:	487e      	ldr	r0, [pc, #504]	; (8003ce0 <_ZN3IMU4readEv+0x254>)
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003ae6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003aea:	b21b      	sxth	r3, r3
 8003aec:	ee07 3a10 	vmov	s14, r3
 8003af0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003af4:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003af8:	f89d 300b 	ldrb.w	r3, [sp, #11]
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003afc:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b04:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b08:	b21b      	sxth	r3, r3
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b0a:	f89d 200c 	ldrb.w	r2, [sp, #12]
	IMU_SPI_CS_L;
 8003b0e:	2140      	movs	r1, #64	; 0x40
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b18:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b1c:	ee07 3a10 	vmov	s14, r3
 8003b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b24:	f89d 300d 	ldrb.w	r3, [sp, #13]
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b28:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b30:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b34:	b21b      	sxth	r3, r3
	IMU_SPI_CS_L;
 8003b36:	2200      	movs	r2, #0
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b38:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b48:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b4c:	ee67 7a85 	vmul.f32	s15, s15, s10
	t_data[0] = 0x3B | 0x80;
 8003b50:	23bb      	movs	r3, #187	; 0xbb
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b52:	ee87 7aa5 	vdiv.f32	s14, s15, s11
	t_data[0] = 0x3B | 0x80;
 8003b56:	f88d 3004 	strb.w	r3, [sp, #4]
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003b5a:	ee67 7a06 	vmul.f32	s15, s14, s12
 8003b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b62:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	IMU_SPI_CS_L;
 8003b66:	f001 f98d 	bl	8004e84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8003b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4629      	mov	r1, r5
 8003b72:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003b74:	f001 fc85 	bl	8005482 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_acc, 6, 1000);
 8003b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b7c:	2206      	movs	r2, #6
 8003b7e:	a904      	add	r1, sp, #16
 8003b80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003b82:	f001 fe2a 	bl	80057da <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 8003b86:	2201      	movs	r2, #1
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	4855      	ldr	r0, [pc, #340]	; (8003ce0 <_ZN3IMU4readEv+0x254>)
 8003b8c:	f001 f97a 	bl	8004e84 <HAL_GPIO_WritePin>
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003b90:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003b94:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003b98:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8003cf8 <_ZN3IMU4readEv+0x26c>
 8003b9c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003cfc <_ZN3IMU4readEv+0x270>
 8003ba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ba4:	b21b      	sxth	r3, r3
 8003ba6:	ee07 3a10 	vmov	s14, r3
 8003baa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003bae:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003bb2:	f89d 3013 	ldrb.w	r3, [sp, #19]
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003bb6:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003bbe:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003bc2:	b21b      	sxth	r3, r3
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003bc4:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003bc8:	f89d 2014 	ldrb.w	r2, [sp, #20]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003bcc:	ee07 3a10 	vmov	s14, r3
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003bd0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bd8:	b21b      	sxth	r3, r3
 8003bda:	ee07 3a90 	vmov	s15, r3
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003bde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003be6:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003bea:	ee67 7a86 	vmul.f32	s15, s15, s12
	if(i == MAG_PRESCALER)
 8003bee:	6833      	ldr	r3, [r6, #0]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003bf0:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if(i == MAG_PRESCALER)
 8003bf8:	2b04      	cmp	r3, #4
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003bfa:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003bfe:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
	if(i == MAG_PRESCALER)
 8003c02:	d165      	bne.n	8003cd0 <_ZN3IMU4readEv+0x244>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003c04:	6b23      	ldr	r3, [r4, #48]	; 0x30
		IMU_SPI_CS_L;
 8003c06:	4836      	ldr	r0, [pc, #216]	; (8003ce0 <_ZN3IMU4readEv+0x254>)
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003c10:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8003c18:	601a      	str	r2, [r3, #0]
		IMU_SPI_CS_L;
 8003c1a:	2140      	movs	r1, #64	; 0x40
		t_data[0] = 0x49 | 0x80;
 8003c1c:	23c9      	movs	r3, #201	; 0xc9
		IMU_SPI_CS_L;
 8003c1e:	2200      	movs	r2, #0
		t_data[0] = 0x49 | 0x80;
 8003c20:	f88d 3004 	strb.w	r3, [sp, #4]
		IMU_SPI_CS_L;
 8003c24:	f001 f92e 	bl	8004e84 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8003c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4629      	mov	r1, r5
 8003c30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c32:	f001 fc26 	bl	8005482 <HAL_SPI_Transmit>
		HAL_SPI_Receive(hspi_, adc_mag, 7, 1000);
 8003c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	a906      	add	r1, sp, #24
 8003c3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c40:	f001 fdcb 	bl	80057da <HAL_SPI_Receive>
		IMU_SPI_CS_H;
 8003c44:	2201      	movs	r2, #1
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	4825      	ldr	r0, [pc, #148]	; (8003ce0 <_ZN3IMU4readEv+0x254>)
 8003c4a:	f001 f91b 	bl	8004e84 <HAL_GPIO_WritePin>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c50:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8003d00 <_ZN3IMU4readEv+0x274>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003c54:	681b      	ldr	r3, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c56:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003d04 <_ZN3IMU4readEv+0x278>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003c60:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	f042 0210 	orr.w	r2, r2, #16
 8003c68:	601a      	str	r2, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c6a:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8003c6e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003c72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c76:	b21b      	sxth	r3, r3
 8003c78:	ee07 3a10 	vmov	s14, r3
 8003c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c80:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003c84:	f89d 301a 	ldrb.w	r3, [sp, #26]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c88:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c94:	b21b      	sxth	r3, r3
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003c96:	f89d 201d 	ldrb.w	r2, [sp, #29]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c9a:	ee07 3a10 	vmov	s14, r3
 8003c9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003ca2:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003ca6:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003caa:	f89d 301c 	ldrb.w	r3, [sp, #28]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003cb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003cb6:	b21b      	sxth	r3, r3
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003cb8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003cc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ccc:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
	if(i == MAG_PRESCALER) i =0;
 8003cd0:	6833      	ldr	r3, [r6, #0]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2300      	moveq	r3, #0
	else i++;
 8003cd8:	3301      	addne	r3, #1
 8003cda:	6033      	str	r3, [r6, #0]
}
 8003cdc:	b008      	add	sp, #32
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	40020400 	.word	0x40020400
 8003ce4:	20000a28 	.word	0x20000a28
 8003ce8:	44fa0000 	.word	0x44fa0000
 8003cec:	46fffe00 	.word	0x46fffe00
 8003cf0:	40490fdb 	.word	0x40490fdb
 8003cf4:	43340000 	.word	0x43340000
 8003cf8:	39800000 	.word	0x39800000
 8003cfc:	411ce80a 	.word	0x411ce80a
 8003d00:	45998000 	.word	0x45998000
 8003d04:	46fff000 	.word	0x46fff000

08003d08 <_ZN3IMU7processEv>:
{
 8003d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (calibrate_gyro_ > 0)
 8003d0a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8003d0e:	2b00      	cmp	r3, #0
{
 8003d10:	4604      	mov	r4, r0
 8003d12:	f100 05dc 	add.w	r5, r0, #220	; 0xdc
 8003d16:	f100 0040 	add.w	r0, r0, #64	; 0x40
	if (calibrate_gyro_ > 0)
 8003d1a:	f340 80af 	ble.w	8003e7c <_ZN3IMU7processEv+0x174>
		if (calibrate_gyro_ == CALIBRATING_STEP)
 8003d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d22:	bf01      	itttt	eq
 8003d24:	2300      	moveq	r3, #0
 8003d26:	f8c4 30e4 	streq.w	r3, [r4, #228]	; 0xe4
 8003d2a:	f8c4 30e0 	streq.w	r3, [r4, #224]	; 0xe0
 8003d2e:	f8c4 30dc 	streq.w	r3, [r4, #220]	; 0xdc
		gyro_offset_ += raw_gyro_adc_;
 8003d32:	4601      	mov	r1, r0
 8003d34:	4628      	mov	r0, r5
 8003d36:	f002 fa73 	bl	8006220 <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_gyro_ == 1)
 8003d3a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d104      	bne.n	8003d4c <_ZN3IMU7processEv+0x44>
			gyro_offset_ /= (float)CALIBRATING_STEP;
 8003d42:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8004014 <_ZN3IMU7processEv+0x30c>
 8003d46:	4628      	mov	r0, r5
 8003d48:	f002 fa10 	bl	800616c <_ZN7Vector3IfEdVEf>
		calibrate_gyro_--;
 8003d4c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8003d50:	3b01      	subs	r3, #1
 8003d52:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	if (calibrate_acc_ > 0) {
 8003d56:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8003d60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d64:	f340 80b5 	ble.w	8003ed2 <_ZN3IMU7processEv+0x1ca>
		if (calibrate_acc_ == CALIBRATING_STEP) acc_offset_.zero();
 8003d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6c:	bf01      	itttt	eq
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	f8c4 30d8 	streq.w	r3, [r4, #216]	; 0xd8
 8003d74:	f8c4 30d4 	streq.w	r3, [r4, #212]	; 0xd4
 8003d78:	f8c4 30d0 	streq.w	r3, [r4, #208]	; 0xd0
		acc_offset_ += raw_acc_adc_;
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	f002 fa4f 	bl	8006220 <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_acc_ == 1) {
 8003d82:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d11a      	bne.n	8003dc0 <_ZN3IMU7processEv+0xb8>
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 8003d8a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8004014 <_ZN3IMU7processEv+0x30c>
 8003d8e:	edd4 6a34 	vldr	s13, [r4, #208]	; 0xd0
 8003d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
			writeCalibData();
 8003d96:	4620      	mov	r0, r4
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 8003d98:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 8003d9c:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 8003da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 8003da4:	edd4 6a36 	vldr	s13, [r4, #216]	; 0xd8
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 8003da8:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 8003dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004018 <_ZN3IMU7processEv+0x310>
 8003db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003db8:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
			writeCalibData();
 8003dbc:	f7ff fcec 	bl	8003798 <_ZN3IMU14writeCalibDataEv>
		calibrate_acc_--;
 8003dc0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	if (calibrate_mag_ > 0)
 8003dca:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
 8003dce:	2e00      	cmp	r6, #0
 8003dd0:	f340 80ab 	ble.w	8003f2a <_ZN3IMU7processEv+0x222>
		if(calibrate_mag_  == CALIBRATING_MAG_STEP)
 8003dd4:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 8003dd8:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8003ddc:	d112      	bne.n	8003e04 <_ZN3IMU7processEv+0xfc>
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 8003de4:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8003de8:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
			mag_min_ = raw_mag_adc_;
 8003dec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003df0:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8003df4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			mag_max_ = raw_mag_adc_;
 8003df8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003dfc:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 8003e00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003e04:	f104 0264 	add.w	r2, r4, #100	; 0x64
			if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e18:	bf48      	it	mi
 8003e1a:	edc3 7a2a 	vstrmi	s15, [r3, #168]	; 0xa8
 8003e1e:	3304      	adds	r3, #4
			if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
 8003e20:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8003e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2c:	bfc8      	it	gt
 8003e2e:	edc3 7a26 	vstrgt	s15, [r3, #152]	; 0x98
		for (int i = 0; i < 3; i++)
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d1e8      	bne.n	8003e08 <_ZN3IMU7processEv+0x100>
		if(calibrate_mag_ == 1)
 8003e36:	2e01      	cmp	r6, #1
 8003e38:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8003e3c:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 8003e40:	d115      	bne.n	8003e6e <_ZN3IMU7processEv+0x166>
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 8003e42:	f002 fa9b 	bl	800637c <_ZNK7Vector3IfEplERKS0_>
 8003e46:	a801      	add	r0, sp, #4
 8003e48:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003e4c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003e50:	edcd 0a02 	vstr	s1, [sp, #8]
 8003e54:	ed8d 1a03 	vstr	s2, [sp, #12]
 8003e58:	f002 fa10 	bl	800627c <_ZNK7Vector3IfEdvEf>
			writeCalibData();
 8003e5c:	4620      	mov	r0, r4
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 8003e5e:	ed84 0a3a 	vstr	s0, [r4, #232]	; 0xe8
 8003e62:	edc4 0a3b 	vstr	s1, [r4, #236]	; 0xec
 8003e66:	ed84 1a3c 	vstr	s2, [r4, #240]	; 0xf0
			writeCalibData();
 8003e6a:	f7ff fc95 	bl	8003798 <_ZN3IMU14writeCalibDataEv>
		calibrate_mag_ --;
 8003e6e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f002 fabf 	bl	8006400 <_ZNK7Vector3IfEmiERKS0_>
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 8003e82:	f104 05ac 	add.w	r5, r4, #172	; 0xac
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 8003e86:	edc4 0a1d 	vstr	s1, [r4, #116]	; 0x74
 8003e8a:	ed84 1a1e 	vstr	s2, [r4, #120]	; 0x78
 8003e8e:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 8003e92:	4628      	mov	r0, r5
 8003e94:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8003e98:	f002 f9f0 	bl	800627c <_ZNK7Vector3IfEdvEf>
 8003e9c:	a901      	add	r1, sp, #4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003ea4:	edcd 0a02 	vstr	s1, [sp, #8]
 8003ea8:	ed8d 1a03 	vstr	s2, [sp, #12]
 8003eac:	f002 f98a 	bl	80061c4 <_ZN7Vector3IfEmIERKS0_>
		raw_gyro_p_   += raw_gyro_;
 8003eb0:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f002 f9b3 	bl	8006220 <_ZN7Vector3IfEpLERKS0_>
		gyro_  = (raw_gyro_p_/GYRO_LPF_FACTOR);
 8003eba:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f002 f9dc 	bl	800627c <_ZNK7Vector3IfEdvEf>
 8003ec4:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
 8003ec8:	edc4 0a26 	vstr	s1, [r4, #152]	; 0x98
 8003ecc:	ed84 1a27 	vstr	s2, [r4, #156]	; 0x9c
 8003ed0:	e741      	b.n	8003d56 <_ZN3IMU7processEv+0x4e>
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f002 fa93 	bl	8006400 <_ZNK7Vector3IfEmiERKS0_>
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 8003eda:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 8003ede:	edc4 0a1a 	vstr	s1, [r4, #104]	; 0x68
 8003ee2:	ed84 1a1b 	vstr	s2, [r4, #108]	; 0x6c
 8003ee6:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 8003eea:	4628      	mov	r0, r5
 8003eec:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800401c <_ZN3IMU7processEv+0x314>
 8003ef0:	f002 f9c4 	bl	800627c <_ZNK7Vector3IfEdvEf>
 8003ef4:	a901      	add	r1, sp, #4
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003efc:	edcd 0a02 	vstr	s1, [sp, #8]
 8003f00:	ed8d 1a03 	vstr	s2, [sp, #12]
 8003f04:	f002 f95e 	bl	80061c4 <_ZN7Vector3IfEmIERKS0_>
		raw_acc_p_    += raw_acc_;
 8003f08:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f002 f987 	bl	8006220 <_ZN7Vector3IfEpLERKS0_>
		acc_  = (raw_acc_p_/ACC_LPF_FACTOR);
 8003f12:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800401c <_ZN3IMU7processEv+0x314>
 8003f16:	4628      	mov	r0, r5
 8003f18:	f002 f9b0 	bl	800627c <_ZNK7Vector3IfEdvEf>
 8003f1c:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
 8003f20:	edc4 0a23 	vstr	s1, [r4, #140]	; 0x8c
 8003f24:	ed84 1a24 	vstr	s2, [r4, #144]	; 0x90
 8003f28:	e74f      	b.n	8003dca <_ZN3IMU7processEv+0xc2>
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 8003f2a:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 8003f2e:	edd4 7a3b 	vldr	s15, [r4, #236]	; 0xec
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8003f32:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 8003f36:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
		if(mag_filtering_flag_)
 8003f3a:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 8003f3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f42:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8003f46:	edd4 7a3a 	vldr	s15, [r4, #232]	; 0xe8
 8003f4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f4e:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 8003f52:	edd4 7a3c 	vldr	s15, [r4, #240]	; 0xf0
 8003f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f5a:	eef1 7a67 	vneg.f32	s15, s15
 8003f5e:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
		if(mag_filtering_flag_)
 8003f62:	b3a1      	cbz	r1, 8003fce <_ZN3IMU7processEv+0x2c6>
 8003f64:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8003f68:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8003f6c:	2500      	movs	r5, #0
 8003f6e:	4613      	mov	r3, r2
				if(fabs(raw_mag_[i] - mag_[i]) > MAG_GENERAL_THRESH) mag_outlier_flag = true;
 8003f70:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003f74:	ecf2 7a01 	vldmia	r2!, {s15}
 8003f78:	edd2 6a08 	vldr	s13, [r2, #32]
 8003f7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8003f80:	eef0 7ae7 	vabs.f32	s15, s15
 8003f84:	eef4 7a47 	vcmp.f32	s15, s14
 8003f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8c:	bfc8      	it	gt
 8003f8e:	460d      	movgt	r5, r1
			for(int i = 0; i < 3; i++)
 8003f90:	4282      	cmp	r2, r0
 8003f92:	d1ef      	bne.n	8003f74 <_ZN3IMU7processEv+0x26c>
			if(!mag_outlier_flag)
 8003f94:	b945      	cbnz	r5, 8003fa8 <_ZN3IMU7processEv+0x2a0>
				mag_ = raw_mag_;
 8003f96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f9a:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8003f9e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
				mag_outlier_counter_ = 0;
 8003fa2:	f8a4 510e 	strh.w	r5, [r4, #270]	; 0x10e
 8003fa6:	e767      	b.n	8003e78 <_ZN3IMU7processEv+0x170>
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 8003fa8:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
 8003fac:	3201      	adds	r2, #1
 8003fae:	b292      	uxth	r2, r2
 8003fb0:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
					mag_outlier_counter_ = 0;
 8003fb4:	bf81      	itttt	hi
 8003fb6:	2200      	movhi	r2, #0
 8003fb8:	f8a4 210e 	strhhi.w	r2, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 8003fbc:	e893 0007 	ldmiahi.w	r3, {r0, r1, r2}
 8003fc0:	34a0      	addhi	r4, #160	; 0xa0
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 8003fc2:	bf94      	ite	ls
 8003fc4:	f8a4 210e 	strhls.w	r2, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 8003fc8:	e884 0007 	stmiahi.w	r4, {r0, r1, r2}
 8003fcc:	e754      	b.n	8003e78 <_ZN3IMU7processEv+0x170>
    bool is_zero(void) const { return (fabsf(x) < FLT_EPSILON) && (fabsf(y) < FLT_EPSILON) && (fabsf(z) < FLT_EPSILON); }
 8003fce:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004020 <_ZN3IMU7processEv+0x318>
 8003fd2:	eeb0 6ac6 	vabs.f32	s12, s12
 8003fd6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fde:	d50e      	bpl.n	8003ffe <_ZN3IMU7processEv+0x2f6>
 8003fe0:	eef0 6ae6 	vabs.f32	s13, s13
 8003fe4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	d507      	bpl.n	8003ffe <_ZN3IMU7processEv+0x2f6>
 8003fee:	eeb0 7ac7 	vabs.f32	s14, s14
 8003ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffa:	f53f af3d 	bmi.w	8003e78 <_ZN3IMU7processEv+0x170>
				mag_ = raw_mag_;
 8003ffe:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8004002:	ca07      	ldmia	r2, {r0, r1, r2}
 8004004:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8004008:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			mag_filtering_flag_  = true;
 800400c:	2301      	movs	r3, #1
 800400e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8004012:	e731      	b.n	8003e78 <_ZN3IMU7processEv+0x170>
 8004014:	447a0000 	.word	0x447a0000
 8004018:	411ce80a 	.word	0x411ce80a
 800401c:	42280000 	.word	0x42280000
 8004020:	34000000 	.word	0x34000000

08004024 <_ZN3IMU6updateEt>:
{
 8004024:	b510      	push	{r4, lr}
 8004026:	4604      	mov	r4, r0
	if(nh_->connected() && (!nh_->getHardware()->getUartDriver()->getTx()->idleFlag()))
 8004028:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800402a:	6803      	ldr	r3, [r0, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4798      	blx	r3
 8004030:	b128      	cbz	r0, 800403e <_ZN3IMU6updateEt+0x1a>
  bool idleFlag(){return idle_flag_;}
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <_ZN3IMU6updateEt+0x30>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b913      	cbnz	r3, 800403e <_ZN3IMU6updateEt+0x1a>
		ahb_suspend_flag_ = true; //should suspend USART1 of DMA(ros) for a while
 8004038:	2301      	movs	r3, #1
 800403a:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	read(); //read from SPI
 800403e:	4620      	mov	r0, r4
 8004040:	f7ff fd24 	bl	8003a8c <_ZN3IMU4readEv>
	process();
 8004044:	4620      	mov	r0, r4
 8004046:	f7ff fe5f 	bl	8003d08 <_ZN3IMU7processEv>
	update_ = true;
 800404a:	2001      	movs	r0, #1
 800404c:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
}
 8004050:	bd10      	pop	{r4, pc}
 8004052:	bf00      	nop
 8004054:	20000a74 	.word	0x20000a74

08004058 <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 8004058:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 800405a:	6802      	ldr	r2, [r0, #0]
    uint32_t nsec_part= nsec % 1000000000UL;
 800405c:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
 800405e:	4c04      	ldr	r4, [pc, #16]	; (8004070 <_ZN3ros16normalizeSecNSecERmS0_+0x18>)
 8004060:	fbb5 f3f4 	udiv	r3, r5, r4
    sec += sec_part;
 8004064:	441a      	add	r2, r3
    uint32_t nsec_part= nsec % 1000000000UL;
 8004066:	fb04 5313 	mls	r3, r4, r3, r5
    sec += sec_part;
 800406a:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 800406c:	600b      	str	r3, [r1, #0]
 800406e:	bd30      	pop	{r4, r5, pc}
 8004070:	3b9aca00 	.word	0x3b9aca00

08004074 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004074:	490f      	ldr	r1, [pc, #60]	; (80040b4 <SystemInit+0x40>)
 8004076:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800407a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004082:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <SystemInit+0x44>)
 8004084:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004086:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800408e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004096:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800409a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800409c:	4a07      	ldr	r2, [pc, #28]	; (80040bc <SystemInit+0x48>)
 800409e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040ae:	608b      	str	r3, [r1, #8]
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000ed00 	.word	0xe000ed00
 80040b8:	40023800 	.word	0x40023800
 80040bc:	24003010 	.word	0x24003010

080040c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_InitTick+0x24>)
{
 80040c4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80040d0:	f000 fa9c 	bl	800460c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040d4:	2200      	movs	r2, #0
 80040d6:	4621      	mov	r1, r4
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040dc:	f000 fa56 	bl	800458c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80040e0:	2000      	movs	r0, #0
 80040e2:	bd10      	pop	{r4, pc}
 80040e4:	20000004 	.word	0x20000004

080040e8 <HAL_Init>:
{
 80040e8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_Init+0x30>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004102:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004104:	2003      	movs	r0, #3
 8004106:	f000 fa2f 	bl	8004568 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800410a:	2000      	movs	r0, #0
 800410c:	f7ff ffd8 	bl	80040c0 <HAL_InitTick>
  HAL_MspInit();
 8004110:	f7ff f9bc 	bl	800348c <HAL_MspInit>
}
 8004114:	2000      	movs	r0, #0
 8004116:	bd08      	pop	{r3, pc}
 8004118:	40023c00 	.word	0x40023c00

0800411c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800411c:	4a02      	ldr	r2, [pc, #8]	; (8004128 <HAL_IncTick+0xc>)
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20003ce8 	.word	0x20003ce8

0800412c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800412c:	4b01      	ldr	r3, [pc, #4]	; (8004134 <HAL_GetTick+0x8>)
 800412e:	6818      	ldr	r0, [r3, #0]
}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20003ce8 	.word	0x20003ce8

08004138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8004138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800413a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7ff fff6 	bl	800412c <HAL_GetTick>
  uint32_t wait = Delay;
 8004140:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004142:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004144:	4605      	mov	r5, r0
  {
     wait++;
 8004146:	bf18      	it	ne
 8004148:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800414a:	f7ff ffef 	bl	800412c <HAL_GetTick>
 800414e:	1b40      	subs	r0, r0, r5
 8004150:	42a0      	cmp	r0, r4
 8004152:	d3fa      	bcc.n	800414a <HAL_Delay+0x12>
  {
  }
}
 8004154:	b003      	add	sp, #12
 8004156:	bd30      	pop	{r4, r5, pc}

08004158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004158:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800415a:	4604      	mov	r4, r0
 800415c:	2800      	cmp	r0, #0
 800415e:	f000 8099 	beq.w	8004294 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004162:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004164:	b923      	cbnz	r3, 8004170 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004166:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004168:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800416c:	f7fd f9e2 	bl	8001534 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004172:	06db      	lsls	r3, r3, #27
 8004174:	f100 808c 	bmi.w	8004290 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800417a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800417e:	f023 0302 	bic.w	r3, r3, #2
 8004182:	f043 0302 	orr.w	r3, r3, #2
 8004186:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004188:	4b43      	ldr	r3, [pc, #268]	; (8004298 <HAL_ADC_Init+0x140>)
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004190:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	6861      	ldr	r1, [r4, #4]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800419a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800419c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041ae:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041b0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041b2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041b6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041be:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041c0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041ce:	4933      	ldr	r1, [pc, #204]	; (800429c <HAL_ADC_Init+0x144>)
 80041d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80041d2:	428a      	cmp	r2, r1
 80041d4:	d050      	beq.n	8004278 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80041dc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041de:	6899      	ldr	r1, [r3, #8]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041f2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041f4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80041f6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041f8:	f022 0202 	bic.w	r2, r2, #2
 80041fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004204:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004206:	6a22      	ldr	r2, [r4, #32]
 8004208:	2a00      	cmp	r2, #0
 800420a:	d03d      	beq.n	8004288 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800420c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800420e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004214:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800421c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	3901      	subs	r1, #1
 8004222:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004226:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800422a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800422c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	3901      	subs	r1, #1
 8004236:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800423c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800423e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004240:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800424c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800424e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004250:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004258:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800425a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800425c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004260:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004262:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004264:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004266:	f023 0303 	bic.w	r3, r3, #3
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004270:	2300      	movs	r3, #0
 8004272:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8004276:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800427e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004286:	e7b4      	b.n	80041f2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800428e:	e7ca      	b.n	8004226 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8004290:	2001      	movs	r0, #1
 8004292:	e7ed      	b.n	8004270 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8004294:	2001      	movs	r0, #1
}
 8004296:	bd10      	pop	{r4, pc}
 8004298:	40012300 	.word	0x40012300
 800429c:	0f000001 	.word	0x0f000001

080042a0 <HAL_ADC_Start>:
{
 80042a0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80042a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d04d      	beq.n	800434a <HAL_ADC_Start+0xaa>
 80042ae:	2301      	movs	r3, #1
 80042b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042b4:	6803      	ldr	r3, [r0, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	07d1      	lsls	r1, r2, #31
 80042ba:	d410      	bmi.n	80042de <HAL_ADC_Start+0x3e>
    __HAL_ADC_ENABLE(hadc);
 80042bc:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042be:	4924      	ldr	r1, [pc, #144]	; (8004350 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042c6:	4a23      	ldr	r2, [pc, #140]	; (8004354 <HAL_ADC_Start+0xb4>)
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	fbb2 f2f1 	udiv	r2, r2, r1
 80042ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042d2:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80042d4:	9a01      	ldr	r2, [sp, #4]
 80042d6:	b112      	cbz	r2, 80042de <HAL_ADC_Start+0x3e>
      counter--;
 80042d8:	9a01      	ldr	r2, [sp, #4]
 80042da:	3a01      	subs	r2, #1
 80042dc:	e7f9      	b.n	80042d2 <HAL_ADC_Start+0x32>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	07d2      	lsls	r2, r2, #31
 80042e2:	d402      	bmi.n	80042ea <HAL_ADC_Start+0x4a>
  return HAL_OK;
 80042e4:	2000      	movs	r0, #0
}
 80042e6:	b002      	add	sp, #8
 80042e8:	4770      	bx	lr
    ADC_STATE_CLR_SET(hadc->State,
 80042ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80042ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f8:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042fe:	bf41      	itttt	mi
 8004300:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8004302:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8004306:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800430a:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800430c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800430e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004312:	bf1c      	itt	ne
 8004314:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8004316:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800431a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800431c:	2200      	movs	r2, #0
 800431e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004322:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004326:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <HAL_ADC_Start+0xb8>)
 800432a:	6852      	ldr	r2, [r2, #4]
 800432c:	06d2      	lsls	r2, r2, #27
 800432e:	d108      	bne.n	8004342 <HAL_ADC_Start+0xa2>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004330:	6898      	ldr	r0, [r3, #8]
 8004332:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004336:	d1d5      	bne.n	80042e4 <HAL_ADC_Start+0x44>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e7d1      	b.n	80042e6 <HAL_ADC_Start+0x46>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004342:	4a06      	ldr	r2, [pc, #24]	; (800435c <HAL_ADC_Start+0xbc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d1cd      	bne.n	80042e4 <HAL_ADC_Start+0x44>
 8004348:	e7f2      	b.n	8004330 <HAL_ADC_Start+0x90>
  __HAL_LOCK(hadc);
 800434a:	2002      	movs	r0, #2
 800434c:	e7cb      	b.n	80042e6 <HAL_ADC_Start+0x46>
 800434e:	bf00      	nop
 8004350:	000f4240 	.word	0x000f4240
 8004354:	20000004 	.word	0x20000004
 8004358:	40012300 	.word	0x40012300
 800435c:	40012000 	.word	0x40012000

08004360 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004360:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d017      	beq.n	8004398 <HAL_ADC_Stop+0x38>
 8004368:	2301      	movs	r3, #1
 800436a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800436e:	6803      	ldr	r3, [r0, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	07db      	lsls	r3, r3, #31
 800437c:	d407      	bmi.n	800438e <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 800437e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004380:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800438e:	2300      	movs	r3, #0
 8004390:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004394:	4618      	mov	r0, r3
 8004396:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8004398:	2002      	movs	r0, #2
}
 800439a:	4770      	bx	lr

0800439c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800439c:	6803      	ldr	r3, [r0, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
{
 80043a0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043a2:	0556      	lsls	r6, r2, #21
{
 80043a4:	4604      	mov	r4, r0
 80043a6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043a8:	d502      	bpl.n	80043b0 <HAL_ADC_PollForConversion+0x14>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80043aa:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043ac:	05d8      	lsls	r0, r3, #23
 80043ae:	d43b      	bmi.n	8004428 <HAL_ADC_PollForConversion+0x8c>
  tickstart = HAL_GetTick();
 80043b0:	f7ff febc 	bl	800412c <HAL_GetTick>
 80043b4:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	0791      	lsls	r1, r2, #30
 80043bc:	d410      	bmi.n	80043e0 <HAL_ADC_PollForConversion+0x44>
    if(Timeout != HAL_MAX_DELAY)
 80043be:	1c6a      	adds	r2, r5, #1
 80043c0:	d0fa      	beq.n	80043b8 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80043c2:	b125      	cbz	r5, 80043ce <HAL_ADC_PollForConversion+0x32>
 80043c4:	f7ff feb2 	bl	800412c <HAL_GetTick>
 80043c8:	1b80      	subs	r0, r0, r6
 80043ca:	4285      	cmp	r5, r0
 80043cc:	d2f3      	bcs.n	80043b6 <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80043d6:	2300      	movs	r3, #0
 80043d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80043dc:	2003      	movs	r0, #3
 80043de:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043e0:	f06f 0212 	mvn.w	r2, #18
 80043e4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80043e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ec:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043ee:	689a      	ldr	r2, [r3, #8]
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80043f4:	d001      	beq.n	80043fa <HAL_ADC_PollForConversion+0x5e>
  return HAL_OK;
 80043f6:	2000      	movs	r0, #0
 80043f8:	bd70      	pop	{r4, r5, r6, pc}
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043fa:	69a2      	ldr	r2, [r4, #24]
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	d1fa      	bne.n	80043f6 <HAL_ADC_PollForConversion+0x5a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004402:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004406:	d002      	beq.n	800440e <HAL_ADC_PollForConversion+0x72>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004408:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800440a:	055b      	lsls	r3, r3, #21
 800440c:	d4f3      	bmi.n	80043f6 <HAL_ADC_PollForConversion+0x5a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800440e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004414:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004416:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004418:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800441c:	d1eb      	bne.n	80043f6 <HAL_ADC_PollForConversion+0x5a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800441e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6423      	str	r3, [r4, #64]	; 0x40
 8004426:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800442a:	f043 0320 	orr.w	r3, r3, #32
 800442e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8004430:	2300      	movs	r3, #0
 8004432:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8004436:	2001      	movs	r0, #1
 8004438:	bd70      	pop	{r4, r5, r6, pc}

0800443a <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800443a:	6803      	ldr	r3, [r0, #0]
 800443c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800443e:	4770      	bx	lr

08004440 <HAL_ADC_ConfigChannel>:
{
 8004440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004446:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800444a:	2b01      	cmp	r3, #1
 800444c:	f000 8082 	beq.w	8004554 <HAL_ADC_ConfigChannel+0x114>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004450:	680d      	ldr	r5, [r1, #0]
 8004452:	6804      	ldr	r4, [r0, #0]
 8004454:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8004456:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004458:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800445a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800445e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004460:	d943      	bls.n	80044ea <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004462:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004466:	68e7      	ldr	r7, [r4, #12]
 8004468:	3b1e      	subs	r3, #30
 800446a:	f04f 0e07 	mov.w	lr, #7
 800446e:	fa0e fe03 	lsl.w	lr, lr, r3
 8004472:	ea27 070e 	bic.w	r7, r7, lr
 8004476:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004478:	68e7      	ldr	r7, [r4, #12]
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	433b      	orrs	r3, r7
 8004480:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8004482:	684a      	ldr	r2, [r1, #4]
 8004484:	2a06      	cmp	r2, #6
 8004486:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800448a:	d83e      	bhi.n	800450a <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800448c:	4413      	add	r3, r2
 800448e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004490:	1f59      	subs	r1, r3, #5
 8004492:	231f      	movs	r3, #31
 8004494:	408b      	lsls	r3, r1
 8004496:	ea27 0303 	bic.w	r3, r7, r3
 800449a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800449c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800449e:	fa06 f101 	lsl.w	r1, r6, r1
 80044a2:	4311      	orrs	r1, r2
 80044a4:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044a6:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <HAL_ADC_ConfigChannel+0x118>)
 80044a8:	429c      	cmp	r4, r3
 80044aa:	d14d      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x108>
 80044ac:	2d12      	cmp	r5, #18
 80044ae:	d104      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x7a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044b0:	4a2a      	ldr	r2, [pc, #168]	; (800455c <HAL_ADC_ConfigChannel+0x11c>)
 80044b2:	6853      	ldr	r3, [r2, #4]
 80044b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044b8:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044ba:	f1a5 0310 	sub.w	r3, r5, #16
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d842      	bhi.n	8004548 <HAL_ADC_ConfigChannel+0x108>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c2:	4a26      	ldr	r2, [pc, #152]	; (800455c <HAL_ADC_ConfigChannel+0x11c>)
 80044c4:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044c6:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044cc:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044ce:	d13b      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x108>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044d0:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_ADC_ConfigChannel+0x120>)
 80044d2:	4a24      	ldr	r2, [pc, #144]	; (8004564 <HAL_ADC_ConfigChannel+0x124>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80044da:	230a      	movs	r3, #10
 80044dc:	4353      	muls	r3, r2
 80044de:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80044e0:	9b01      	ldr	r3, [sp, #4]
 80044e2:	b38b      	cbz	r3, 8004548 <HAL_ADC_ConfigChannel+0x108>
        counter--;
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	e7f9      	b.n	80044de <HAL_ADC_ConfigChannel+0x9e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80044ea:	6927      	ldr	r7, [r4, #16]
 80044ec:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80044f0:	f04f 0e07 	mov.w	lr, #7
 80044f4:	fa0e fe03 	lsl.w	lr, lr, r3
 80044f8:	ea27 070e 	bic.w	r7, r7, lr
 80044fc:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044fe:	6927      	ldr	r7, [r4, #16]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	433b      	orrs	r3, r7
 8004506:	6123      	str	r3, [r4, #16]
 8004508:	e7bb      	b.n	8004482 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800450a:	2a0c      	cmp	r2, #12
 800450c:	d80e      	bhi.n	800452c <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800450e:	4413      	add	r3, r2
 8004510:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004512:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8004516:	231f      	movs	r3, #31
 8004518:	4093      	lsls	r3, r2
 800451a:	ea21 0303 	bic.w	r3, r1, r3
 800451e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004522:	fa06 f202 	lsl.w	r2, r6, r2
 8004526:	431a      	orrs	r2, r3
 8004528:	6322      	str	r2, [r4, #48]	; 0x30
 800452a:	e7bc      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800452c:	4413      	add	r3, r2
 800452e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004530:	3b41      	subs	r3, #65	; 0x41
 8004532:	221f      	movs	r2, #31
 8004534:	409a      	lsls	r2, r3
 8004536:	ea21 0202 	bic.w	r2, r1, r2
 800453a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800453c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800453e:	fa06 f103 	lsl.w	r1, r6, r3
 8004542:	4311      	orrs	r1, r2
 8004544:	62e1      	str	r1, [r4, #44]	; 0x2c
 8004546:	e7ae      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x66>
  __HAL_UNLOCK(hadc);
 8004548:	2300      	movs	r3, #0
 800454a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800454e:	4618      	mov	r0, r3
}
 8004550:	b003      	add	sp, #12
 8004552:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8004554:	2002      	movs	r0, #2
 8004556:	e7fb      	b.n	8004550 <HAL_ADC_ConfigChannel+0x110>
 8004558:	40012000 	.word	0x40012000
 800455c:	40012300 	.word	0x40012300
 8004560:	20000004 	.word	0x20000004
 8004564:	000f4240 	.word	0x000f4240

08004568 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800456a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800456c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	0c1b      	lsrs	r3, r3, #16
 8004574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004578:	0200      	lsls	r0, r0, #8
 800457a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004582:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004584:	60d3      	str	r3, [r2, #12]
 8004586:	4770      	bx	lr
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800458c:	4b17      	ldr	r3, [pc, #92]	; (80045ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800458e:	b530      	push	{r4, r5, lr}
 8004590:	68dc      	ldr	r4, [r3, #12]
 8004592:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004596:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800459c:	2b04      	cmp	r3, #4
 800459e:	bf28      	it	cs
 80045a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	f04f 0501 	mov.w	r5, #1
 80045a8:	fa05 f303 	lsl.w	r3, r5, r3
 80045ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b0:	bf8c      	ite	hi
 80045b2:	3c03      	subhi	r4, #3
 80045b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b6:	4019      	ands	r1, r3
 80045b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ba:	fa05 f404 	lsl.w	r4, r5, r4
 80045be:	3c01      	subs	r4, #1
 80045c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80045c2:	2800      	cmp	r0, #0
         );
 80045c4:	ea42 0201 	orr.w	r2, r2, r1
 80045c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045cc:	bfaf      	iteee	ge
 80045ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d2:	f000 000f 	andlt.w	r0, r0, #15
 80045d6:	4b06      	ldrlt	r3, [pc, #24]	; (80045f0 <HAL_NVIC_SetPriority+0x64>)
 80045d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045da:	bfa5      	ittet	ge
 80045dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80045e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80045e8:	bd30      	pop	{r4, r5, pc}
 80045ea:	bf00      	nop
 80045ec:	e000ed00 	.word	0xe000ed00
 80045f0:	e000ed14 	.word	0xe000ed14

080045f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80045f4:	0942      	lsrs	r2, r0, #5
 80045f6:	2301      	movs	r3, #1
 80045f8:	f000 001f 	and.w	r0, r0, #31
 80045fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004600:	4b01      	ldr	r3, [pc, #4]	; (8004608 <HAL_NVIC_EnableIRQ+0x14>)
 8004602:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004606:	4770      	bx	lr
 8004608:	e000e100 	.word	0xe000e100

0800460c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	3801      	subs	r0, #1
 800460e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004612:	d20a      	bcs.n	800462a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004616:	4a07      	ldr	r2, [pc, #28]	; (8004634 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004618:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800461a:	21f0      	movs	r1, #240	; 0xf0
 800461c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004620:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004622:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004624:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800462a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800463a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800463c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800463e:	bf0c      	ite	eq
 8004640:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004644:	f022 0204 	bicne.w	r2, r2, #4
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	4770      	bx	lr
 800464c:	e000e010 	.word	0xe000e010

08004650 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004650:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004652:	f7fe fdc9 	bl	80031e8 <HAL_SYSTICK_Callback>
 8004656:	bd08      	pop	{r3, pc}

08004658 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004658:	6803      	ldr	r3, [r0, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004660:	f023 0303 	bic.w	r3, r3, #3
 8004664:	2118      	movs	r1, #24
 8004666:	3a10      	subs	r2, #16
 8004668:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800466c:	4904      	ldr	r1, [pc, #16]	; (8004680 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x28>)
  
  if (stream_number > 3U)
 800466e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004670:	bf88      	it	hi
 8004672:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004674:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004676:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004678:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800467a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	0800931c 	.word	0x0800931c

08004684 <HAL_DMA_Init>:
{
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004688:	f7ff fd50 	bl	800412c <HAL_GetTick>
 800468c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800468e:	2c00      	cmp	r4, #0
 8004690:	d071      	beq.n	8004776 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8004692:	2300      	movs	r3, #0
 8004694:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004698:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800469a:	2302      	movs	r3, #2
 800469c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80046a0:	6813      	ldr	r3, [r2, #0]
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a8:	6821      	ldr	r1, [r4, #0]
 80046aa:	680b      	ldr	r3, [r1, #0]
 80046ac:	07d8      	lsls	r0, r3, #31
 80046ae:	d50a      	bpl.n	80046c6 <HAL_DMA_Init+0x42>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046b0:	f7ff fd3c 	bl	800412c <HAL_GetTick>
 80046b4:	1b40      	subs	r0, r0, r5
 80046b6:	2805      	cmp	r0, #5
 80046b8:	d9f6      	bls.n	80046a8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046ba:	2320      	movs	r3, #32
 80046bc:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046be:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80046c0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80046c6:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046c8:	4d2c      	ldr	r5, [pc, #176]	; (800477c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ca:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046cc:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046ce:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046d0:	68a3      	ldr	r3, [r4, #8]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	68e2      	ldr	r2, [r4, #12]
 80046d6:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d8:	6922      	ldr	r2, [r4, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	6962      	ldr	r2, [r4, #20]
 80046de:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e0:	69e2      	ldr	r2, [r4, #28]
 80046e2:	4303      	orrs	r3, r0
 80046e4:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e6:	6a22      	ldr	r2, [r4, #32]
 80046e8:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046ec:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ee:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046f2:	bf01      	itttt	eq
 80046f4:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80046f6:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80046f8:	4335      	orreq	r5, r6
 80046fa:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80046fc:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80046fe:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004700:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004702:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004706:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800470a:	d10b      	bne.n	8004724 <HAL_DMA_Init+0xa0>
    tmp |= hdma->Init.FIFOThreshold;
 800470c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800470e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8004710:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004712:	b13d      	cbz	r5, 8004724 <HAL_DMA_Init+0xa0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004714:	b9a0      	cbnz	r0, 8004740 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8004716:	2a01      	cmp	r2, #1
 8004718:	d022      	beq.n	8004760 <HAL_DMA_Init+0xdc>
 800471a:	d301      	bcc.n	8004720 <HAL_DMA_Init+0x9c>
 800471c:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800471e:	d101      	bne.n	8004724 <HAL_DMA_Init+0xa0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004720:	01ea      	lsls	r2, r5, #7
 8004722:	d420      	bmi.n	8004766 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8004724:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004726:	4620      	mov	r0, r4
 8004728:	f7ff ff96 	bl	8004658 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800472e:	233f      	movs	r3, #63	; 0x3f
 8004730:	4093      	lsls	r3, r2
 8004732:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004734:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004736:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004738:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800473a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800473e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004740:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004744:	d113      	bne.n	800476e <HAL_DMA_Init+0xea>
    switch (tmp)
 8004746:	2a03      	cmp	r2, #3
 8004748:	d8ec      	bhi.n	8004724 <HAL_DMA_Init+0xa0>
 800474a:	a001      	add	r0, pc, #4	; (adr r0, 8004750 <HAL_DMA_Init+0xcc>)
 800474c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004750:	08004767 	.word	0x08004767
 8004754:	08004721 	.word	0x08004721
 8004758:	08004767 	.word	0x08004767
 800475c:	08004761 	.word	0x08004761
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004760:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004764:	d1de      	bne.n	8004724 <HAL_DMA_Init+0xa0>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800476a:	2001      	movs	r0, #1
 800476c:	e7a8      	b.n	80046c0 <HAL_DMA_Init+0x3c>
    switch (tmp)
 800476e:	2a02      	cmp	r2, #2
 8004770:	d9f9      	bls.n	8004766 <HAL_DMA_Init+0xe2>
 8004772:	2a03      	cmp	r2, #3
 8004774:	e7d3      	b.n	800471e <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
 8004778:	bd70      	pop	{r4, r5, r6, pc}
 800477a:	bf00      	nop
 800477c:	f010803f 	.word	0xf010803f

08004780 <HAL_DMA_Start_IT>:
{
 8004780:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8004782:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004786:	2c01      	cmp	r4, #1
 8004788:	d036      	beq.n	80047f8 <HAL_DMA_Start_IT+0x78>
 800478a:	2401      	movs	r4, #1
 800478c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004790:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004794:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8004796:	2c01      	cmp	r4, #1
 8004798:	f04f 0500 	mov.w	r5, #0
 800479c:	f04f 0402 	mov.w	r4, #2
 80047a0:	d128      	bne.n	80047f4 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047a6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047aa:	6825      	ldr	r5, [r4, #0]
 80047ac:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80047b0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80047b2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b4:	6883      	ldr	r3, [r0, #8]
 80047b6:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80047b8:	bf0e      	itee	eq
 80047ba:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80047bc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80047be:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80047c2:	bf08      	it	eq
 80047c4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c6:	233f      	movs	r3, #63	; 0x3f
 80047c8:	4093      	lsls	r3, r2
 80047ca:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	f043 0316 	orr.w	r3, r3, #22
 80047d2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80047d4:	6963      	ldr	r3, [r4, #20]
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80047dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80047de:	b11b      	cbz	r3, 80047e8 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	f043 0308 	orr.w	r3, r3, #8
 80047e6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2000      	movs	r0, #0
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80047f4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80047f8:	2002      	movs	r0, #2
}
 80047fa:	bd70      	pop	{r4, r5, r6, pc}

080047fc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047fc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004800:	2b02      	cmp	r3, #2
 8004802:	d003      	beq.n	800480c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004808:	2001      	movs	r0, #1
 800480a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800480c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800480e:	2305      	movs	r3, #5
 8004810:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004814:	6813      	ldr	r3, [r2, #0]
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800481c:	2000      	movs	r0, #0
}
 800481e:	4770      	bx	lr

08004820 <HAL_DMA_IRQHandler>:
{
 8004820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004826:	4b5a      	ldr	r3, [pc, #360]	; (8004990 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004828:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800482a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800482c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800482e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004830:	2208      	movs	r2, #8
 8004832:	409a      	lsls	r2, r3
 8004834:	4216      	tst	r6, r2
{
 8004836:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004838:	d00c      	beq.n	8004854 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800483a:	6801      	ldr	r1, [r0, #0]
 800483c:	6808      	ldr	r0, [r1, #0]
 800483e:	0740      	lsls	r0, r0, #29
 8004840:	d508      	bpl.n	8004854 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004842:	6808      	ldr	r0, [r1, #0]
 8004844:	f020 0004 	bic.w	r0, r0, #4
 8004848:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800484a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800484c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004854:	2201      	movs	r2, #1
 8004856:	409a      	lsls	r2, r3
 8004858:	4216      	tst	r6, r2
 800485a:	d008      	beq.n	800486e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800485c:	6821      	ldr	r1, [r4, #0]
 800485e:	6949      	ldr	r1, [r1, #20]
 8004860:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004862:	bf41      	itttt	mi
 8004864:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004866:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004868:	f042 0202 	orrmi.w	r2, r2, #2
 800486c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800486e:	2204      	movs	r2, #4
 8004870:	409a      	lsls	r2, r3
 8004872:	4216      	tst	r6, r2
 8004874:	d008      	beq.n	8004888 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	6809      	ldr	r1, [r1, #0]
 800487a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800487c:	bf41      	itttt	mi
 800487e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004880:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004882:	f042 0204 	orrmi.w	r2, r2, #4
 8004886:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004888:	2210      	movs	r2, #16
 800488a:	409a      	lsls	r2, r3
 800488c:	4216      	tst	r6, r2
 800488e:	d010      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	0709      	lsls	r1, r1, #28
 8004896:	d50c      	bpl.n	80048b2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004898:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	0350      	lsls	r0, r2, #13
 800489e:	d535      	bpl.n	800490c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	0319      	lsls	r1, r3, #12
 80048a4:	d401      	bmi.n	80048aa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80048a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048a8:	e000      	b.n	80048ac <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80048ac:	b10b      	cbz	r3, 80048b2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80048ae:	4620      	mov	r0, r4
 80048b0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048b2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80048b4:	2220      	movs	r2, #32
 80048b6:	408a      	lsls	r2, r1
 80048b8:	4216      	tst	r6, r2
 80048ba:	d038      	beq.n	800492e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	06c6      	lsls	r6, r0, #27
 80048c2:	d534      	bpl.n	800492e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048c4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048c6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80048ca:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048cc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048ce:	d125      	bne.n	800491c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048d0:	f022 0216 	bic.w	r2, r2, #22
 80048d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048dc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048e0:	b90a      	cbnz	r2, 80048e6 <HAL_DMA_IRQHandler+0xc6>
 80048e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80048e4:	b11a      	cbz	r2, 80048ee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	f022 0208 	bic.w	r2, r2, #8
 80048ec:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ee:	233f      	movs	r3, #63	; 0x3f
 80048f0:	408b      	lsls	r3, r1
 80048f2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80048f4:	2300      	movs	r3, #0
 80048f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004900:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8004902:	b10b      	cbz	r3, 8004908 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8004904:	4620      	mov	r0, r4
 8004906:	4798      	blx	r3
}
 8004908:	b003      	add	sp, #12
 800490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004910:	bf5e      	ittt	pl
 8004912:	681a      	ldrpl	r2, [r3, #0]
 8004914:	f022 0208 	bicpl.w	r2, r2, #8
 8004918:	601a      	strpl	r2, [r3, #0]
 800491a:	e7c4      	b.n	80048a6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800491c:	0350      	lsls	r0, r2, #13
 800491e:	d528      	bpl.n	8004972 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	0319      	lsls	r1, r3, #12
 8004924:	d432      	bmi.n	800498c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8004926:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004928:	b10b      	cbz	r3, 800492e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800492a:	4620      	mov	r0, r4
 800492c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800492e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0e9      	beq.n	8004908 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004934:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004936:	07da      	lsls	r2, r3, #31
 8004938:	d519      	bpl.n	800496e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800493a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800493c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800493e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800494a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800494e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8004952:	9b01      	ldr	r3, [sp, #4]
 8004954:	3301      	adds	r3, #1
 8004956:	429f      	cmp	r7, r3
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	d302      	bcc.n	8004962 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800495c:	6813      	ldr	r3, [r2, #0]
      do
 800495e:	07db      	lsls	r3, r3, #31
 8004960:	d4f7      	bmi.n	8004952 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8004962:	2300      	movs	r3, #0
 8004964:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004968:	2301      	movs	r3, #1
 800496a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800496e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004970:	e7c7      	b.n	8004902 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004978:	d108      	bne.n	800498c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	f021 0110 	bic.w	r1, r1, #16
 8004980:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004982:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004984:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004988:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800498c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800498e:	e7cb      	b.n	8004928 <HAL_DMA_IRQHandler+0x108>
 8004990:	20000004 	.word	0x20000004

08004994 <_ZL24FLASH_Program_DoubleWordmy>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004994:	4908      	ldr	r1, [pc, #32]	; (80049b8 <_ZL24FLASH_Program_DoubleWordmy+0x24>)
{
 8004996:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004998:	690c      	ldr	r4, [r1, #16]
 800499a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800499e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80049a0:	690c      	ldr	r4, [r1, #16]
 80049a2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80049a6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80049a8:	690c      	ldr	r4, [r1, #16]
 80049aa:	f044 0401 	orr.w	r4, r4, #1
 80049ae:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80049b0:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80049b2:	6043      	str	r3, [r0, #4]
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	bf00      	nop
 80049b8:	40023c00 	.word	0x40023c00

080049bc <_ZL18FLASH_Program_Wordmm>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <_ZL18FLASH_Program_Wordmm+0x20>)
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80049d6:	6001      	str	r1, [r0, #0]
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00

080049e0 <_ZL22FLASH_Program_HalfWordmt>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <_ZL22FLASH_Program_HalfWordmt+0x20>)
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80049fa:	8001      	strh	r1, [r0, #0]
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40023c00 	.word	0x40023c00

08004a04 <_ZL18FLASH_SetErrorCodev>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004a04:	4b20      	ldr	r3, [pc, #128]	; (8004a88 <_ZL18FLASH_SetErrorCodev+0x84>)
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	06d0      	lsls	r0, r2, #27
 8004a0a:	d506      	bpl.n	8004a1a <_ZL18FLASH_SetErrorCodev+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004a0c:	491f      	ldr	r1, [pc, #124]	; (8004a8c <_ZL18FLASH_SetErrorCodev+0x88>)
 8004a0e:	69ca      	ldr	r2, [r1, #28]
 8004a10:	f042 0210 	orr.w	r2, r2, #16
 8004a14:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004a16:	2210      	movs	r2, #16
 8004a18:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	0691      	lsls	r1, r2, #26
 8004a1e:	d506      	bpl.n	8004a2e <_ZL18FLASH_SetErrorCodev+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004a20:	491a      	ldr	r1, [pc, #104]	; (8004a8c <_ZL18FLASH_SetErrorCodev+0x88>)
 8004a22:	69ca      	ldr	r2, [r1, #28]
 8004a24:	f042 0208 	orr.w	r2, r2, #8
 8004a28:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004a2e:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <_ZL18FLASH_SetErrorCodev+0x84>)
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	0652      	lsls	r2, r2, #25
 8004a34:	d506      	bpl.n	8004a44 <_ZL18FLASH_SetErrorCodev+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004a36:	4915      	ldr	r1, [pc, #84]	; (8004a8c <_ZL18FLASH_SetErrorCodev+0x88>)
 8004a38:	69ca      	ldr	r2, [r1, #28]
 8004a3a:	f042 0204 	orr.w	r2, r2, #4
 8004a3e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004a40:	2240      	movs	r2, #64	; 0x40
 8004a42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	0610      	lsls	r0, r2, #24
 8004a48:	d506      	bpl.n	8004a58 <_ZL18FLASH_SetErrorCodev+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004a4a:	4910      	ldr	r1, [pc, #64]	; (8004a8c <_ZL18FLASH_SetErrorCodev+0x88>)
 8004a4c:	69ca      	ldr	r2, [r1, #28]
 8004a4e:	f042 0202 	orr.w	r2, r2, #2
 8004a52:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004a54:	2280      	movs	r2, #128	; 0x80
 8004a56:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <_ZL18FLASH_SetErrorCodev+0x84>)
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	05d1      	lsls	r1, r2, #23
 8004a5e:	d507      	bpl.n	8004a70 <_ZL18FLASH_SetErrorCodev+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004a60:	490a      	ldr	r1, [pc, #40]	; (8004a8c <_ZL18FLASH_SetErrorCodev+0x88>)
 8004a62:	69ca      	ldr	r2, [r1, #28]
 8004a64:	f042 0201 	orr.w	r2, r2, #1
 8004a68:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a6e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	0792      	lsls	r2, r2, #30
 8004a74:	d506      	bpl.n	8004a84 <_ZL18FLASH_SetErrorCodev+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004a76:	4905      	ldr	r1, [pc, #20]	; (8004a8c <_ZL18FLASH_SetErrorCodev+0x88>)
 8004a78:	69ca      	ldr	r2, [r1, #28]
 8004a7a:	f042 0220 	orr.w	r2, r2, #32
 8004a7e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004a80:	2202      	movs	r2, #2
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40023c00 	.word	0x40023c00
 8004a8c:	20003cec 	.word	0x20003cec

08004a90 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_FLASH_Unlock+0x1c>)
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a96:	bfbf      	itttt	lt
 8004a98:	4a05      	ldrlt	r2, [pc, #20]	; (8004ab0 <HAL_FLASH_Unlock+0x20>)
 8004a9a:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a9c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8004aa0:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004aa2:	bfba      	itte	lt
 8004aa4:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	0fc0      	lsrlt	r0, r0, #31
 8004aa8:	2000      	movge	r0, #0
}
 8004aaa:	4770      	bx	lr
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	45670123 	.word	0x45670123

08004ab4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8004ab4:	4a03      	ldr	r2, [pc, #12]	; (8004ac4 <HAL_FLASH_Lock+0x10>)
 8004ab6:	6913      	ldr	r3, [r2, #16]
 8004ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004abc:	6113      	str	r3, [r2, #16]
}
 8004abe:	2000      	movs	r0, #0
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40023c00 	.word	0x40023c00

08004ac8 <FLASH_WaitForLastOperation>:
{ 
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004acc:	4c12      	ldr	r4, [pc, #72]	; (8004b18 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ace:	2200      	movs	r2, #0
{ 
 8004ad0:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ad2:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8004ad4:	f7ff fb2a 	bl	800412c <HAL_GetTick>
 8004ad8:	4626      	mov	r6, r4
 8004ada:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004adc:	68e3      	ldr	r3, [r4, #12]
 8004ade:	03d9      	lsls	r1, r3, #15
 8004ae0:	d50a      	bpl.n	8004af8 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8004ae2:	1c6a      	adds	r2, r5, #1
 8004ae4:	d0fa      	beq.n	8004adc <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ae6:	b90d      	cbnz	r5, 8004aec <FLASH_WaitForLastOperation+0x24>
        return HAL_TIMEOUT;
 8004ae8:	2003      	movs	r0, #3
 8004aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004aec:	f7ff fb1e 	bl	800412c <HAL_GetTick>
 8004af0:	1bc0      	subs	r0, r0, r7
 8004af2:	4285      	cmp	r5, r0
 8004af4:	d3f8      	bcc.n	8004ae8 <FLASH_WaitForLastOperation+0x20>
 8004af6:	e7f1      	b.n	8004adc <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004af8:	68e3      	ldr	r3, [r4, #12]
 8004afa:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004afc:	bf44      	itt	mi
 8004afe:	2301      	movmi	r3, #1
 8004b00:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b02:	68f0      	ldr	r0, [r6, #12]
 8004b04:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8004b08:	d002      	beq.n	8004b10 <FLASH_WaitForLastOperation+0x48>
    FLASH_SetErrorCode();
 8004b0a:	f7ff ff7b 	bl	8004a04 <_ZL18FLASH_SetErrorCodev>
    return HAL_ERROR;
 8004b0e:	2001      	movs	r0, #1
}  
 8004b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20003cec 	.word	0x20003cec
 8004b18:	40023c00 	.word	0x40023c00

08004b1c <HAL_FLASH_Program>:
{
 8004b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8004b20:	4d20      	ldr	r5, [pc, #128]	; (8004ba4 <HAL_FLASH_Program+0x88>)
{
 8004b22:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8004b24:	7e2b      	ldrb	r3, [r5, #24]
 8004b26:	2b01      	cmp	r3, #1
{
 8004b28:	4607      	mov	r7, r0
 8004b2a:	460e      	mov	r6, r1
 8004b2c:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8004b2e:	d035      	beq.n	8004b9c <HAL_FLASH_Program+0x80>
 8004b30:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b32:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8004b36:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b38:	f7ff ffc6 	bl	8004ac8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004b3c:	b9b0      	cbnz	r0, 8004b6c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004b3e:	b9cf      	cbnz	r7, 8004b74 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <HAL_FLASH_Program+0x8c>)
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b48:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b4e:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004b50:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8004b58:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b5e:	f7ff ffb3 	bl	8004ac8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b62:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <HAL_FLASH_Program+0x8c>)
 8004b64:	6913      	ldr	r3, [r2, #16]
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	762b      	strb	r3, [r5, #24]
  return status;
 8004b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004b74:	2f01      	cmp	r7, #1
 8004b76:	d104      	bne.n	8004b82 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004b78:	b2a1      	uxth	r1, r4
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f7ff ff30 	bl	80049e0 <_ZL22FLASH_Program_HalfWordmt>
 8004b80:	e7eb      	b.n	8004b5a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004b82:	2f02      	cmp	r7, #2
 8004b84:	d104      	bne.n	8004b90 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004b86:	4621      	mov	r1, r4
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7ff ff17 	bl	80049bc <_ZL18FLASH_Program_Wordmm>
 8004b8e:	e7e4      	b.n	8004b5a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8004b90:	4622      	mov	r2, r4
 8004b92:	4643      	mov	r3, r8
 8004b94:	4630      	mov	r0, r6
 8004b96:	f7ff fefd 	bl	8004994 <_ZL24FLASH_Program_DoubleWordmy>
 8004b9a:	e7de      	b.n	8004b5a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8004b9c:	2002      	movs	r0, #2
}
 8004b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20003cec 	.word	0x20003cec
 8004ba8:	40023c00 	.word	0x40023c00

08004bac <_ZL15FLASH_MassErasehm.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <_ZL15FLASH_MassErasehm.isra.0+0x20>)
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bb4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	f042 0204 	orr.w	r2, r2, #4
 8004bbc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bc4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8004bc8:	6118      	str	r0, [r3, #16]
 8004bca:	4770      	bx	lr
 8004bcc:	40023c00 	.word	0x40023c00

08004bd0 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004bd0:	b139      	cbz	r1, 8004be2 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004bd2:	2901      	cmp	r1, #1
 8004bd4:	d01c      	beq.n	8004c10 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004bd6:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004bd8:	bf0c      	ite	eq
 8004bda:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8004bde:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004be2:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <FLASH_Erase_Sector+0x48>)
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bea:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	4311      	orrs	r1, r2
 8004bf0:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004bf8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	f042 0202 	orr.w	r2, r2, #2
 8004c00:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8004c04:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c0c:	611a      	str	r2, [r3, #16]
 8004c0e:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c14:	e7e5      	b.n	8004be2 <FLASH_Erase_Sector+0x12>
 8004c16:	bf00      	nop
 8004c18:	40023c00 	.word	0x40023c00

08004c1c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <FLASH_FlushCaches+0x54>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	0591      	lsls	r1, r2, #22
 8004c22:	d50f      	bpl.n	8004c44 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c42:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <FLASH_FlushCaches+0x54>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	0552      	lsls	r2, r2, #21
 8004c4a:	d50f      	bpl.n	8004c6c <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c62:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40023c00 	.word	0x40023c00

08004c74 <HAL_FLASHEx_Erase>:
{
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8004c78:	4e23      	ldr	r6, [pc, #140]	; (8004d08 <HAL_FLASHEx_Erase+0x94>)
 8004c7a:	7e33      	ldrb	r3, [r6, #24]
 8004c7c:	2b01      	cmp	r3, #1
{
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8004c82:	d03f      	beq.n	8004d04 <HAL_FLASHEx_Erase+0x90>
 8004c84:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c86:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8004c8a:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c8c:	f7ff ff1c 	bl	8004ac8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004c90:	4605      	mov	r5, r0
 8004c92:	b9a8      	cbnz	r0, 8004cc0 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8004c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c98:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d113      	bne.n	8004cca <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004ca2:	7c20      	ldrb	r0, [r4, #16]
 8004ca4:	f7ff ff82 	bl	8004bac <_ZL15FLASH_MassErasehm.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cac:	f7ff ff0c 	bl	8004ac8 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <HAL_FLASHEx_Erase+0x98>)
 8004cb2:	6913      	ldr	r3, [r2, #16]
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cb8:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8004cba:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8004cbc:	f7ff ffae 	bl	8004c1c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	7633      	strb	r3, [r6, #24]
}
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004cca:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004ccc:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8004d0c <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004cd0:	68e3      	ldr	r3, [r4, #12]
 8004cd2:	68a2      	ldr	r2, [r4, #8]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	429f      	cmp	r7, r3
 8004cd8:	d2f0      	bcs.n	8004cbc <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004cda:	7c21      	ldrb	r1, [r4, #16]
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7ff ff77 	bl	8004bd0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ce2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ce6:	f7ff feef 	bl	8004ac8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004cea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004cee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004cf2:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8004cf6:	b118      	cbz	r0, 8004d00 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8004cf8:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cfc:	4605      	mov	r5, r0
          break;
 8004cfe:	e7dd      	b.n	8004cbc <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004d00:	3701      	adds	r7, #1
 8004d02:	e7e5      	b.n	8004cd0 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8004d04:	2502      	movs	r5, #2
 8004d06:	e7dd      	b.n	8004cc4 <HAL_FLASHEx_Erase+0x50>
 8004d08:	20003cec 	.word	0x20003cec
 8004d0c:	40023c00 	.word	0x40023c00

08004d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d16:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d18:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8004e80 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d1c:	4a56      	ldr	r2, [pc, #344]	; (8004e78 <HAL_GPIO_Init+0x168>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d1e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8004d20:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d24:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8004d28:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d2c:	ea0a 0504 	and.w	r5, sl, r4
    if(iocurrent == ioposition)
 8004d30:	45aa      	cmp	sl, r5
 8004d32:	f040 8096 	bne.w	8004e62 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d36:	684c      	ldr	r4, [r1, #4]
 8004d38:	f024 0b10 	bic.w	fp, r4, #16
 8004d3c:	f1bb 0f02 	cmp.w	fp, #2
 8004d40:	d114      	bne.n	8004d6c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8004d42:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004d46:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d4a:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004d4e:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d52:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004d56:	270f      	movs	r7, #15
 8004d58:	fa07 f70c 	lsl.w	r7, r7, ip
 8004d5c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d60:	690e      	ldr	r6, [r1, #16]
 8004d62:	fa06 f60c 	lsl.w	r6, r6, ip
 8004d66:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8004d68:	f8ce 6020 	str.w	r6, [lr, #32]
 8004d6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d70:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8004d72:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d74:	fa07 f70c 	lsl.w	r7, r7, ip
 8004d78:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d7a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d7e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d80:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d84:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d88:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d8c:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8004d90:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d92:	d811      	bhi.n	8004db8 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 8004d94:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d96:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d9a:	68ce      	ldr	r6, [r1, #12]
 8004d9c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8004da0:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8004da4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8004da6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004da8:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004dac:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8004db0:	409e      	lsls	r6, r3
 8004db2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8004db6:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8004db8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dba:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dbc:	688e      	ldr	r6, [r1, #8]
 8004dbe:	fa06 f60c 	lsl.w	r6, r6, ip
 8004dc2:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dc4:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8004dc6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dc8:	d54b      	bpl.n	8004e62 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dca:	2600      	movs	r6, #0
 8004dcc:	9603      	str	r6, [sp, #12]
 8004dce:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8004dd2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8004dd6:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8004dda:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8004dde:	f023 0703 	bic.w	r7, r3, #3
 8004de2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8004de6:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8004dea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8004dee:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004df0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004df4:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004df6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004dfa:	f04f 0e0f 	mov.w	lr, #15
 8004dfe:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004e02:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e06:	4e1d      	ldr	r6, [pc, #116]	; (8004e7c <HAL_GPIO_Init+0x16c>)
 8004e08:	42b0      	cmp	r0, r6
 8004e0a:	d031      	beq.n	8004e70 <HAL_GPIO_Init+0x160>
 8004e0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004e10:	42b0      	cmp	r0, r6
 8004e12:	d02f      	beq.n	8004e74 <HAL_GPIO_Init+0x164>
 8004e14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004e18:	42b0      	cmp	r0, r6
 8004e1a:	bf14      	ite	ne
 8004e1c:	2607      	movne	r6, #7
 8004e1e:	2602      	moveq	r6, #2
 8004e20:	fa06 f60c 	lsl.w	r6, r6, ip
 8004e24:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e28:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8004e2a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004e2c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e2e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8004e32:	bf0c      	ite	eq
 8004e34:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004e36:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8004e38:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8004e3a:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e3c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004e40:	bf0c      	ite	eq
 8004e42:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004e44:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8004e46:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e48:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e4a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004e4e:	bf0c      	ite	eq
 8004e50:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004e52:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8004e54:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8004e56:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e58:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8004e5a:	bf54      	ite	pl
 8004e5c:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8004e5e:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8004e60:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e62:	3301      	adds	r3, #1
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	f47f af5e 	bne.w	8004d26 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8004e6a:	b005      	add	sp, #20
 8004e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e70:	2600      	movs	r6, #0
 8004e72:	e7d5      	b.n	8004e20 <HAL_GPIO_Init+0x110>
 8004e74:	2601      	movs	r6, #1
 8004e76:	e7d3      	b.n	8004e20 <HAL_GPIO_Init+0x110>
 8004e78:	40013c00 	.word	0x40013c00
 8004e7c:	40020000 	.word	0x40020000
 8004e80:	40023800 	.word	0x40023800

08004e84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e84:	b10a      	cbz	r2, 8004e8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e86:	6181      	str	r1, [r0, #24]
 8004e88:	4770      	bx	lr
 8004e8a:	0409      	lsls	r1, r1, #16
 8004e8c:	e7fb      	b.n	8004e86 <HAL_GPIO_WritePin+0x2>

08004e8e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004e8e:	6943      	ldr	r3, [r0, #20]
 8004e90:	4059      	eors	r1, r3
 8004e92:	6141      	str	r1, [r0, #20]
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e98:	4913      	ldr	r1, [pc, #76]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004e9a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e9c:	688b      	ldr	r3, [r1, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d003      	beq.n	8004eae <HAL_RCC_GetSysClockFreq+0x16>
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eaa:	4810      	ldr	r0, [pc, #64]	; (8004eec <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004eac:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8004eae:	4810      	ldr	r0, [pc, #64]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x58>)
 8004eb0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eb4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eb8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebc:	bf14      	ite	ne
 8004ebe:	480c      	ldrne	r0, [pc, #48]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec0:	480a      	ldreq	r0, [pc, #40]	; (8004eec <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004ec6:	bf18      	it	ne
 8004ec8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ece:	fba1 0100 	umull	r0, r1, r1, r0
 8004ed2:	f7fb f9ab 	bl	800022c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ed6:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x50>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004ede:	3301      	adds	r3, #1
 8004ee0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004ee2:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ee6:	bd08      	pop	{r3, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	007a1200 	.word	0x007a1200

08004ef4 <HAL_RCC_ClockConfig>:
{
 8004ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004efa:	4604      	mov	r4, r0
 8004efc:	b910      	cbnz	r0, 8004f04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004efe:	2001      	movs	r0, #1
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b44      	ldr	r3, [pc, #272]	; (8005018 <HAL_RCC_ClockConfig+0x124>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	f002 020f 	and.w	r2, r2, #15
 8004f0c:	428a      	cmp	r2, r1
 8004f0e:	d327      	bcc.n	8004f60 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f10:	6821      	ldr	r1, [r4, #0]
 8004f12:	078f      	lsls	r7, r1, #30
 8004f14:	d42c      	bmi.n	8004f70 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f16:	07c8      	lsls	r0, r1, #31
 8004f18:	d549      	bpl.n	8004fae <HAL_RCC_ClockConfig+0xba>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1a:	6862      	ldr	r2, [r4, #4]
 8004f1c:	4b3f      	ldr	r3, [pc, #252]	; (800501c <HAL_RCC_ClockConfig+0x128>)
 8004f1e:	2a01      	cmp	r2, #1
 8004f20:	d13b      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	d0e9      	beq.n	8004efe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f2a:	4e3c      	ldr	r6, [pc, #240]	; (800501c <HAL_RCC_ClockConfig+0x128>)
 8004f2c:	68b3      	ldr	r3, [r6, #8]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004f36:	f7ff f8f9 	bl	800412c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f3a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004f3e:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f40:	68b3      	ldr	r3, [r6, #8]
 8004f42:	6862      	ldr	r2, [r4, #4]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004f4c:	d02f      	beq.n	8004fae <HAL_RCC_ClockConfig+0xba>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4e:	f7ff f8ed 	bl	800412c <HAL_GetTick>
 8004f52:	eba0 0008 	sub.w	r0, r0, r8
 8004f56:	42b8      	cmp	r0, r7
 8004f58:	d9f2      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x4c>
        return HAL_TIMEOUT;
 8004f5a:	2003      	movs	r0, #3
}
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f60:	b2ca      	uxtb	r2, r1
 8004f62:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	428b      	cmp	r3, r1
 8004f6c:	d1c7      	bne.n	8004efe <HAL_RCC_ClockConfig+0xa>
 8004f6e:	e7cf      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1c>
 8004f70:	4b2a      	ldr	r3, [pc, #168]	; (800501c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f72:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f76:	bf1e      	ittt	ne
 8004f78:	689a      	ldrne	r2, [r3, #8]
 8004f7a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8004f7e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f82:	bf42      	ittt	mi
 8004f84:	689a      	ldrmi	r2, [r3, #8]
 8004f86:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8004f8a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	68a0      	ldr	r0, [r4, #8]
 8004f90:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f94:	4302      	orrs	r2, r0
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	e7bd      	b.n	8004f16 <HAL_RCC_ClockConfig+0x22>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f9a:	1e91      	subs	r1, r2, #2
 8004f9c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa0:	d802      	bhi.n	8004fa8 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fa6:	e7bf      	b.n	8004f28 <HAL_RCC_ClockConfig+0x34>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa8:	f013 0f02 	tst.w	r3, #2
 8004fac:	e7bc      	b.n	8004f28 <HAL_RCC_ClockConfig+0x34>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_RCC_ClockConfig+0x124>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	f002 020f 	and.w	r2, r2, #15
 8004fb6:	42aa      	cmp	r2, r5
 8004fb8:	d81d      	bhi.n	8004ff6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	0751      	lsls	r1, r2, #29
 8004fbe:	d423      	bmi.n	8005008 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc0:	0713      	lsls	r3, r2, #28
 8004fc2:	d507      	bpl.n	8004fd4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fc4:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_RCC_ClockConfig+0x128>)
 8004fc6:	6921      	ldr	r1, [r4, #16]
 8004fc8:	6893      	ldr	r3, [r2, #8]
 8004fca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004fce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004fd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fd4:	f7ff ff60 	bl	8004e98 <HAL_RCC_GetSysClockFreq>
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <HAL_RCC_ClockConfig+0x128>)
 8004fda:	4a11      	ldr	r2, [pc, #68]	; (8005020 <HAL_RCC_ClockConfig+0x12c>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	40d8      	lsrs	r0, r3
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <HAL_RCC_ClockConfig+0x130>)
 8004fe8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004fea:	2000      	movs	r0, #0
 8004fec:	f7ff f868 	bl	80040c0 <HAL_InitTick>
  return HAL_OK;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	b2ea      	uxtb	r2, r5
 8004ff8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	42ab      	cmp	r3, r5
 8005002:	f47f af7c 	bne.w	8004efe <HAL_RCC_ClockConfig+0xa>
 8005006:	e7d8      	b.n	8004fba <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005008:	4904      	ldr	r1, [pc, #16]	; (800501c <HAL_RCC_ClockConfig+0x128>)
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	688b      	ldr	r3, [r1, #8]
 800500e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005012:	4303      	orrs	r3, r0
 8005014:	608b      	str	r3, [r1, #8]
 8005016:	e7d3      	b.n	8004fc0 <HAL_RCC_ClockConfig+0xcc>
 8005018:	40023c00 	.word	0x40023c00
 800501c:	40023800 	.word	0x40023800
 8005020:	08009304 	.word	0x08009304
 8005024:	20000004 	.word	0x20000004

08005028 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005028:	4b01      	ldr	r3, [pc, #4]	; (8005030 <HAL_RCC_GetHCLKFreq+0x8>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800503e:	5cd3      	ldrb	r3, [r2, r3]
 8005040:	4a03      	ldr	r2, [pc, #12]	; (8005050 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005042:	6810      	ldr	r0, [r2, #0]
}
 8005044:	40d8      	lsrs	r0, r3
 8005046:	4770      	bx	lr
 8005048:	40023800 	.word	0x40023800
 800504c:	08009314 	.word	0x08009314
 8005050:	20000004 	.word	0x20000004

08005054 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	4a03      	ldr	r2, [pc, #12]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005062:	6810      	ldr	r0, [r2, #0]
}
 8005064:	40d8      	lsrs	r0, r3
 8005066:	4770      	bx	lr
 8005068:	40023800 	.word	0x40023800
 800506c:	08009314 	.word	0x08009314
 8005070:	20000004 	.word	0x20000004

08005074 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005074:	6803      	ldr	r3, [r0, #0]
{
 8005076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005078:	07d9      	lsls	r1, r3, #31
{
 800507a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507c:	f140 812d 	bpl.w	80052da <HAL_RCC_OscConfig+0x266>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005080:	4ba8      	ldr	r3, [pc, #672]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	f002 020c 	and.w	r2, r2, #12
 8005088:	2a04      	cmp	r2, #4
 800508a:	f000 8121 	beq.w	80052d0 <HAL_RCC_OscConfig+0x25c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005094:	2a08      	cmp	r2, #8
 8005096:	d103      	bne.n	80050a0 <HAL_RCC_OscConfig+0x2c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	0252      	lsls	r2, r2, #9
 800509c:	f100 8118 	bmi.w	80052d0 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a0:	6862      	ldr	r2, [r4, #4]
 80050a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80050a6:	d119      	bne.n	80050dc <HAL_RCC_OscConfig+0x68>
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7ff f83c 	bl	800412c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b4:	4e9b      	ldr	r6, [pc, #620]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80050b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	039b      	lsls	r3, r3, #14
 80050bc:	f100 810d 	bmi.w	80052da <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c0:	f7ff f834 	bl	800412c <HAL_GetTick>
 80050c4:	1b40      	subs	r0, r0, r5
 80050c6:	2864      	cmp	r0, #100	; 0x64
 80050c8:	d9f6      	bls.n	80050b8 <HAL_RCC_OscConfig+0x44>
          {
            return HAL_TIMEOUT;
 80050ca:	2003      	movs	r0, #3
 80050cc:	e004      	b.n	80050d8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f040 8102 	bne.w	80052da <HAL_RCC_OscConfig+0x266>
        return HAL_ERROR;
 80050d6:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80050d8:	b003      	add	sp, #12
 80050da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050dc:	4d91      	ldr	r5, [pc, #580]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050de:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80050e2:	682b      	ldr	r3, [r5, #0]
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_OscConfig+0x82>
 80050e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	e7dc      	b.n	80050b0 <HAL_RCC_OscConfig+0x3c>
 80050f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005104:	2a00      	cmp	r2, #0
 8005106:	d1d3      	bne.n	80050b0 <HAL_RCC_OscConfig+0x3c>
        tickstart = HAL_GetTick();
 8005108:	f7ff f810 	bl	800412c <HAL_GetTick>
 800510c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510e:	682b      	ldr	r3, [r5, #0]
 8005110:	039f      	lsls	r7, r3, #14
 8005112:	f140 80e2 	bpl.w	80052da <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005116:	f7ff f809 	bl	800412c <HAL_GetTick>
 800511a:	1b80      	subs	r0, r0, r6
 800511c:	2864      	cmp	r0, #100	; 0x64
 800511e:	d9f6      	bls.n	800510e <HAL_RCC_OscConfig+0x9a>
 8005120:	e7d3      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_ENABLE();
 8005122:	2301      	movs	r3, #1
 8005124:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005126:	f7ff f801 	bl	800412c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512a:	4d7e      	ldr	r5, [pc, #504]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800512c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	0798      	lsls	r0, r3, #30
 8005132:	d405      	bmi.n	8005140 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005134:	f7fe fffa 	bl	800412c <HAL_GetTick>
 8005138:	1b80      	subs	r0, r0, r6
 800513a:	2802      	cmp	r0, #2
 800513c:	d9f7      	bls.n	800512e <HAL_RCC_OscConfig+0xba>
 800513e:	e7c4      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	6922      	ldr	r2, [r4, #16]
 8005144:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005148:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800514c:	602b      	str	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	071a      	lsls	r2, r3, #28
 8005152:	d51f      	bpl.n	8005194 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005154:	6962      	ldr	r2, [r4, #20]
 8005156:	4b74      	ldr	r3, [pc, #464]	; (8005328 <HAL_RCC_OscConfig+0x2b4>)
 8005158:	b172      	cbz	r2, 8005178 <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_ENABLE();
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800515e:	f7fe ffe5 	bl	800412c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005162:	4e70      	ldr	r6, [pc, #448]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8005164:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005168:	079b      	lsls	r3, r3, #30
 800516a:	d413      	bmi.n	8005194 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516c:	f7fe ffde 	bl	800412c <HAL_GetTick>
 8005170:	1b40      	subs	r0, r0, r5
 8005172:	2802      	cmp	r0, #2
 8005174:	d9f7      	bls.n	8005166 <HAL_RCC_OscConfig+0xf2>
 8005176:	e7a8      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_LSI_DISABLE();
 8005178:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800517a:	f7fe ffd7 	bl	800412c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800517e:	4e69      	ldr	r6, [pc, #420]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8005180:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005182:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005184:	079f      	lsls	r7, r3, #30
 8005186:	d505      	bpl.n	8005194 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005188:	f7fe ffd0 	bl	800412c <HAL_GetTick>
 800518c:	1b40      	subs	r0, r0, r5
 800518e:	2802      	cmp	r0, #2
 8005190:	d9f7      	bls.n	8005182 <HAL_RCC_OscConfig+0x10e>
 8005192:	e79a      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	075d      	lsls	r5, r3, #29
 8005198:	d551      	bpl.n	800523e <HAL_RCC_OscConfig+0x1ca>
    __HAL_RCC_PWR_CLK_ENABLE();
 800519a:	2300      	movs	r3, #0
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	4b61      	ldr	r3, [pc, #388]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
    PWR->CR |= PWR_CR_DBP;
 80051a0:	4d62      	ldr	r5, [pc, #392]	; (800532c <HAL_RCC_OscConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b0:	9301      	str	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80051ba:	f7fe ffb7 	bl	800412c <HAL_GetTick>
 80051be:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	05d8      	lsls	r0, r3, #23
 80051c4:	d405      	bmi.n	80051d2 <HAL_RCC_OscConfig+0x15e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051c6:	f7fe ffb1 	bl	800412c <HAL_GetTick>
 80051ca:	1b80      	subs	r0, r0, r6
 80051cc:	2802      	cmp	r0, #2
 80051ce:	d9f7      	bls.n	80051c0 <HAL_RCC_OscConfig+0x14c>
 80051d0:	e77b      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d2:	68a3      	ldr	r3, [r4, #8]
 80051d4:	4d53      	ldr	r5, [pc, #332]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d112      	bne.n	8005200 <HAL_RCC_OscConfig+0x18c>
 80051da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80051e2:	f7fe ffa3 	bl	800412c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e6:	4f4f      	ldr	r7, [pc, #316]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 80051e8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f241 3588 	movw	r5, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f0:	0799      	lsls	r1, r3, #30
 80051f2:	d424      	bmi.n	800523e <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f4:	f7fe ff9a 	bl	800412c <HAL_GetTick>
 80051f8:	1b80      	subs	r0, r0, r6
 80051fa:	42a8      	cmp	r0, r5
 80051fc:	d9f7      	bls.n	80051ee <HAL_RCC_OscConfig+0x17a>
 80051fe:	e764      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005200:	2b05      	cmp	r3, #5
 8005202:	d104      	bne.n	800520e <HAL_RCC_OscConfig+0x19a>
 8005204:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005206:	f043 0304 	orr.w	r3, r3, #4
 800520a:	672b      	str	r3, [r5, #112]	; 0x70
 800520c:	e7e5      	b.n	80051da <HAL_RCC_OscConfig+0x166>
 800520e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	672a      	str	r2, [r5, #112]	; 0x70
 8005216:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005218:	f022 0204 	bic.w	r2, r2, #4
 800521c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1df      	bne.n	80051e2 <HAL_RCC_OscConfig+0x16e>
      tickstart = HAL_GetTick();
 8005222:	f7fe ff83 	bl	800412c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005226:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800522a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800522e:	079a      	lsls	r2, r3, #30
 8005230:	d505      	bpl.n	800523e <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7fe ff7b 	bl	800412c <HAL_GetTick>
 8005236:	1bc0      	subs	r0, r0, r7
 8005238:	42b0      	cmp	r0, r6
 800523a:	d9f7      	bls.n	800522c <HAL_RCC_OscConfig+0x1b8>
 800523c:	e745      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523e:	69a2      	ldr	r2, [r4, #24]
 8005240:	b90a      	cbnz	r2, 8005246 <HAL_RCC_OscConfig+0x1d2>
  return HAL_OK;
 8005242:	2000      	movs	r0, #0
 8005244:	e748      	b.n	80050d8 <HAL_RCC_OscConfig+0x64>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005246:	4d37      	ldr	r5, [pc, #220]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
 8005248:	68ab      	ldr	r3, [r5, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	f43f af41 	beq.w	80050d6 <HAL_RCC_OscConfig+0x62>
 8005254:	4e36      	ldr	r6, [pc, #216]	; (8005330 <HAL_RCC_OscConfig+0x2bc>)
 8005256:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005258:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800525a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800525c:	d12c      	bne.n	80052b8 <HAL_RCC_OscConfig+0x244>
        tickstart = HAL_GetTick();
 800525e:	f7fe ff65 	bl	800412c <HAL_GetTick>
 8005262:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	019b      	lsls	r3, r3, #6
 8005268:	d505      	bpl.n	8005276 <HAL_RCC_OscConfig+0x202>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526a:	f7fe ff5f 	bl	800412c <HAL_GetTick>
 800526e:	1bc0      	subs	r0, r0, r7
 8005270:	2802      	cmp	r0, #2
 8005272:	d9f7      	bls.n	8005264 <HAL_RCC_OscConfig+0x1f0>
 8005274:	e729      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005276:	6a22      	ldr	r2, [r4, #32]
 8005278:	69e3      	ldr	r3, [r4, #28]
 800527a:	4313      	orrs	r3, r2
 800527c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800527e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005284:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005288:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800528a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800528e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005290:	0852      	lsrs	r2, r2, #1
 8005292:	3a01      	subs	r2, #1
 8005294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005298:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800529a:	2301      	movs	r3, #1
 800529c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800529e:	f7fe ff45 	bl	800412c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a2:	4d20      	ldr	r5, [pc, #128]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80052a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	019e      	lsls	r6, r3, #6
 80052aa:	d4ca      	bmi.n	8005242 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fe ff3e 	bl	800412c <HAL_GetTick>
 80052b0:	1b00      	subs	r0, r0, r4
 80052b2:	2802      	cmp	r0, #2
 80052b4:	d9f7      	bls.n	80052a6 <HAL_RCC_OscConfig+0x232>
 80052b6:	e708      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
        tickstart = HAL_GetTick();
 80052b8:	f7fe ff38 	bl	800412c <HAL_GetTick>
 80052bc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	682b      	ldr	r3, [r5, #0]
 80052c0:	0198      	lsls	r0, r3, #6
 80052c2:	d5be      	bpl.n	8005242 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fe ff32 	bl	800412c <HAL_GetTick>
 80052c8:	1b00      	subs	r0, r0, r4
 80052ca:	2802      	cmp	r0, #2
 80052cc:	d9f7      	bls.n	80052be <HAL_RCC_OscConfig+0x24a>
 80052ce:	e6fc      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	0399      	lsls	r1, r3, #14
 80052d6:	f53f aefa 	bmi.w	80050ce <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	079e      	lsls	r6, r3, #30
 80052de:	f57f af36 	bpl.w	800514e <HAL_RCC_OscConfig+0xda>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	f012 0f0c 	tst.w	r2, #12
 80052ea:	d025      	beq.n	8005338 <HAL_RCC_OscConfig+0x2c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052f2:	2a08      	cmp	r2, #8
 80052f4:	d102      	bne.n	80052fc <HAL_RCC_OscConfig+0x288>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	025d      	lsls	r5, r3, #9
 80052fa:	d51d      	bpl.n	8005338 <HAL_RCC_OscConfig+0x2c4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052fc:	68e3      	ldr	r3, [r4, #12]
 80052fe:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <HAL_RCC_OscConfig+0x2c0>)
 8005300:	2b00      	cmp	r3, #0
 8005302:	f47f af0e 	bne.w	8005122 <HAL_RCC_OscConfig+0xae>
        __HAL_RCC_HSI_DISABLE();
 8005306:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005308:	f7fe ff10 	bl	800412c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800530c:	4e05      	ldr	r6, [pc, #20]	; (8005324 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800530e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	0799      	lsls	r1, r3, #30
 8005314:	f57f af1b 	bpl.w	800514e <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005318:	f7fe ff08 	bl	800412c <HAL_GetTick>
 800531c:	1b40      	subs	r0, r0, r5
 800531e:	2802      	cmp	r0, #2
 8005320:	d9f6      	bls.n	8005310 <HAL_RCC_OscConfig+0x29c>
 8005322:	e6d2      	b.n	80050ca <HAL_RCC_OscConfig+0x56>
 8005324:	40023800 	.word	0x40023800
 8005328:	42470e80 	.word	0x42470e80
 800532c:	40007000 	.word	0x40007000
 8005330:	42470060 	.word	0x42470060
 8005334:	42470000 	.word	0x42470000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005338:	4b07      	ldr	r3, [pc, #28]	; (8005358 <HAL_RCC_OscConfig+0x2e4>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	0792      	lsls	r2, r2, #30
 800533e:	d503      	bpl.n	8005348 <HAL_RCC_OscConfig+0x2d4>
 8005340:	68e2      	ldr	r2, [r4, #12]
 8005342:	2a01      	cmp	r2, #1
 8005344:	f47f aec7 	bne.w	80050d6 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	6921      	ldr	r1, [r4, #16]
 800534c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005350:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e6fa      	b.n	800514e <HAL_RCC_OscConfig+0xda>
 8005358:	40023800 	.word	0x40023800

0800535c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005360:	9f06      	ldr	r7, [sp, #24]
 8005362:	4604      	mov	r4, r0
 8005364:	460e      	mov	r6, r1
 8005366:	4690      	mov	r8, r2
 8005368:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	ea36 0202 	bics.w	r2, r6, r2
 8005372:	bf0c      	ite	eq
 8005374:	2201      	moveq	r2, #1
 8005376:	2200      	movne	r2, #0
 8005378:	4590      	cmp	r8, r2
 800537a:	d032      	beq.n	80053e2 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 800537c:	1c6a      	adds	r2, r5, #1
 800537e:	d0f5      	beq.n	800536c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005380:	b125      	cbz	r5, 800538c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x30>
 8005382:	f7fe fed3 	bl	800412c <HAL_GetTick>
 8005386:	1bc0      	subs	r0, r0, r7
 8005388:	4285      	cmp	r5, r0
 800538a:	d8ee      	bhi.n	800536a <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0xe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005394:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800539c:	d10a      	bne.n	80053b4 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
 800539e:	68a2      	ldr	r2, [r4, #8]
 80053a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053a4:	d002      	beq.n	80053ac <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x50>
 80053a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80053aa:	d103      	bne.n	80053b4 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80053b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80053ba:	d109      	bne.n	80053d0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x74>
        {
          SPI_RESET_CRC(hspi);
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c2:	0412      	lsls	r2, r2, #16
 80053c4:	0c12      	lsrs	r2, r2, #16
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d6:	2300      	movs	r3, #0
 80053d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80053dc:	2003      	movs	r0, #3
 80053de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80053e2:	2000      	movs	r0, #0
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053e8 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053ea:	460b      	mov	r3, r1
 80053ec:	9200      	str	r2, [sp, #0]
 80053ee:	2180      	movs	r1, #128	; 0x80
 80053f0:	2200      	movs	r2, #0
{
 80053f2:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053f4:	f7ff ffb2 	bl	800535c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 80053f8:	b120      	cbz	r0, 8005404 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053fc:	f043 0320 	orr.w	r3, r3, #32
 8005400:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8005402:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8005404:	b002      	add	sp, #8
 8005406:	bd10      	pop	{r4, pc}

08005408 <HAL_SPI_Init>:
{
 8005408:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800540a:	4604      	mov	r4, r0
 800540c:	2800      	cmp	r0, #0
 800540e:	d036      	beq.n	800547e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005410:	2300      	movs	r3, #0
 8005412:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8005414:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005418:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800541c:	b91b      	cbnz	r3, 8005426 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800541e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005422:	f7fe f805 	bl	8003430 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005426:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005428:	68a0      	ldr	r0, [r4, #8]
 800542a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800542c:	2302      	movs	r3, #2
 800542e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005432:	680b      	ldr	r3, [r1, #0]
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005438:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800543a:	6863      	ldr	r3, [r4, #4]
 800543c:	4303      	orrs	r3, r0
 800543e:	68e0      	ldr	r0, [r4, #12]
 8005440:	4303      	orrs	r3, r0
 8005442:	6920      	ldr	r0, [r4, #16]
 8005444:	4303      	orrs	r3, r0
 8005446:	6960      	ldr	r0, [r4, #20]
 8005448:	4303      	orrs	r3, r0
 800544a:	69e0      	ldr	r0, [r4, #28]
 800544c:	4303      	orrs	r3, r0
 800544e:	6a20      	ldr	r0, [r4, #32]
 8005450:	4303      	orrs	r3, r0
 8005452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005454:	4303      	orrs	r3, r0
 8005456:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800545a:	4303      	orrs	r3, r0
 800545c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800545e:	0c12      	lsrs	r2, r2, #16
 8005460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005462:	f002 0204 	and.w	r2, r2, #4
 8005466:	431a      	orrs	r2, r3
 8005468:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800546a:	69cb      	ldr	r3, [r1, #28]
 800546c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005470:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005472:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005474:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005476:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005478:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800547c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800547e:	2001      	movs	r0, #1
}
 8005480:	bd10      	pop	{r4, pc}

08005482 <HAL_SPI_Transmit>:
{
 8005482:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005486:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005488:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800548c:	2b01      	cmp	r3, #1
{
 800548e:	4604      	mov	r4, r0
 8005490:	460d      	mov	r5, r1
 8005492:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005494:	f000 809d 	beq.w	80055d2 <HAL_SPI_Transmit+0x150>
 8005498:	2301      	movs	r3, #1
 800549a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800549e:	f7fe fe45 	bl	800412c <HAL_GetTick>
 80054a2:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80054a4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80054a8:	b2c0      	uxtb	r0, r0
 80054aa:	2801      	cmp	r0, #1
 80054ac:	f040 808f 	bne.w	80055ce <HAL_SPI_Transmit+0x14c>
  if((pData == NULL ) || (Size == 0))
 80054b0:	2d00      	cmp	r5, #0
 80054b2:	d03d      	beq.n	8005530 <HAL_SPI_Transmit+0xae>
 80054b4:	f1b8 0f00 	cmp.w	r8, #0
 80054b8:	d03a      	beq.n	8005530 <HAL_SPI_Transmit+0xae>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ba:	2303      	movs	r3, #3
 80054bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054c4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054c6:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80054ca:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054ce:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054d0:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d2:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054d4:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054da:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80054dc:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80054e0:	bf02      	ittt	eq
 80054e2:	681a      	ldreq	r2, [r3, #0]
 80054e4:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80054e8:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80054ee:	bf5e      	ittt	pl
 80054f0:	681a      	ldrpl	r2, [r3, #0]
 80054f2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80054f6:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054f8:	68e2      	ldr	r2, [r4, #12]
 80054fa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	d127      	bne.n	8005552 <HAL_SPI_Transmit+0xd0>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005502:	b15a      	cbz	r2, 800551c <HAL_SPI_Transmit+0x9a>
 8005504:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005506:	b292      	uxth	r2, r2
 8005508:	2a01      	cmp	r2, #1
 800550a:	d007      	beq.n	800551c <HAL_SPI_Transmit+0x9a>
    while (hspi->TxXferCount > 0U)
 800550c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d03c      	beq.n	800558e <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	0790      	lsls	r0, r2, #30
 800551a:	d507      	bpl.n	800552c <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)pData);
 800551c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005520:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005522:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005524:	3b01      	subs	r3, #1
 8005526:	b29b      	uxth	r3, r3
 8005528:	86e3      	strh	r3, [r4, #54]	; 0x36
 800552a:	e7ef      	b.n	800550c <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800552c:	b94e      	cbnz	r6, 8005542 <HAL_SPI_Transmit+0xc0>
          errorcode = HAL_TIMEOUT;
 800552e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005530:	2301      	movs	r3, #1
 8005532:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005536:	2300      	movs	r3, #0
 8005538:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800553c:	b004      	add	sp, #16
 800553e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005542:	1c71      	adds	r1, r6, #1
 8005544:	d0e2      	beq.n	800550c <HAL_SPI_Transmit+0x8a>
 8005546:	f7fe fdf1 	bl	800412c <HAL_GetTick>
 800554a:	1bc0      	subs	r0, r0, r7
 800554c:	4286      	cmp	r6, r0
 800554e:	d9ee      	bls.n	800552e <HAL_SPI_Transmit+0xac>
 8005550:	e7dc      	b.n	800550c <HAL_SPI_Transmit+0x8a>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8005552:	b152      	cbz	r2, 800556a <HAL_SPI_Transmit+0xe8>
 8005554:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005556:	b292      	uxth	r2, r2
 8005558:	2a01      	cmp	r2, #1
 800555a:	d006      	beq.n	800556a <HAL_SPI_Transmit+0xe8>
    while (hspi->TxXferCount > 0U)
 800555c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800555e:	b29b      	uxth	r3, r3
 8005560:	b1ab      	cbz	r3, 800558e <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	0792      	lsls	r2, r2, #30
 8005568:	d507      	bpl.n	800557a <HAL_SPI_Transmit+0xf8>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800556a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800556e:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8005570:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005572:	3b01      	subs	r3, #1
 8005574:	b29b      	uxth	r3, r3
 8005576:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005578:	e7f0      	b.n	800555c <HAL_SPI_Transmit+0xda>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800557a:	2e00      	cmp	r6, #0
 800557c:	d0d7      	beq.n	800552e <HAL_SPI_Transmit+0xac>
 800557e:	1c73      	adds	r3, r6, #1
 8005580:	d0ec      	beq.n	800555c <HAL_SPI_Transmit+0xda>
 8005582:	f7fe fdd3 	bl	800412c <HAL_GetTick>
 8005586:	1bc0      	subs	r0, r0, r7
 8005588:	4286      	cmp	r6, r0
 800558a:	d9d0      	bls.n	800552e <HAL_SPI_Transmit+0xac>
 800558c:	e7e6      	b.n	800555c <HAL_SPI_Transmit+0xda>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800558e:	9700      	str	r7, [sp, #0]
 8005590:	4633      	mov	r3, r6
 8005592:	2201      	movs	r2, #1
 8005594:	2102      	movs	r1, #2
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff fee0 	bl	800535c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 800559c:	2800      	cmp	r0, #0
 800559e:	d1c6      	bne.n	800552e <HAL_SPI_Transmit+0xac>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80055a0:	463a      	mov	r2, r7
 80055a2:	4631      	mov	r1, r6
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff ff1f 	bl	80053e8 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 80055aa:	b118      	cbz	r0, 80055b4 <HAL_SPI_Transmit+0x132>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ac:	2320      	movs	r3, #32
 80055ae:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80055b0:	2001      	movs	r0, #1
    goto error;
 80055b2:	e7bd      	b.n	8005530 <HAL_SPI_Transmit+0xae>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	b92b      	cbnz	r3, 80055c4 <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b8:	9303      	str	r3, [sp, #12]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	9203      	str	r2, [sp, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	9303      	str	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80055c6:	3000      	adds	r0, #0
 80055c8:	bf18      	it	ne
 80055ca:	2001      	movne	r0, #1
 80055cc:	e7b0      	b.n	8005530 <HAL_SPI_Transmit+0xae>
 80055ce:	2002      	movs	r0, #2
 80055d0:	e7ae      	b.n	8005530 <HAL_SPI_Transmit+0xae>
  __HAL_LOCK(hspi);
 80055d2:	2002      	movs	r0, #2
 80055d4:	e7b2      	b.n	800553c <HAL_SPI_Transmit+0xba>

080055d6 <HAL_SPI_TransmitReceive>:
{
 80055d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055da:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80055dc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80055e0:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80055e2:	2b01      	cmp	r3, #1
{
 80055e4:	4604      	mov	r4, r0
 80055e6:	460d      	mov	r5, r1
 80055e8:	4616      	mov	r6, r2
 80055ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80055ec:	f000 80a8 	beq.w	8005740 <HAL_SPI_TransmitReceive+0x16a>
 80055f0:	2301      	movs	r3, #1
 80055f2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80055f6:	f7fe fd99 	bl	800412c <HAL_GetTick>
  tmp  = hspi->State;
 80055fa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 80055fe:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8005600:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8005602:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005604:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8005606:	d00a      	beq.n	800561e <HAL_SPI_TransmitReceive+0x48>
 8005608:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800560c:	f040 8096 	bne.w	800573c <HAL_SPI_TransmitReceive+0x166>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005610:	68a2      	ldr	r2, [r4, #8]
 8005612:	2a00      	cmp	r2, #0
 8005614:	f040 8092 	bne.w	800573c <HAL_SPI_TransmitReceive+0x166>
 8005618:	2b04      	cmp	r3, #4
 800561a:	f040 808f 	bne.w	800573c <HAL_SPI_TransmitReceive+0x166>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800561e:	2d00      	cmp	r5, #0
 8005620:	d050      	beq.n	80056c4 <HAL_SPI_TransmitReceive+0xee>
 8005622:	2e00      	cmp	r6, #0
 8005624:	d04e      	beq.n	80056c4 <HAL_SPI_TransmitReceive+0xee>
 8005626:	f1b9 0f00 	cmp.w	r9, #0
 800562a:	d04b      	beq.n	80056c4 <HAL_SPI_TransmitReceive+0xee>
  if(hspi->State == HAL_SPI_STATE_READY)
 800562c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005630:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8005632:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005634:	bf04      	itt	eq
 8005636:	2305      	moveq	r3, #5
 8005638:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563c:	2300      	movs	r3, #0
 800563e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005640:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005642:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005644:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005646:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800564a:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800564e:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8005650:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005654:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8005656:	bf58      	it	pl
 8005658:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800565a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800565c:	bf58      	it	pl
 800565e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8005662:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8005666:	bf58      	it	pl
 8005668:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800566a:	68e2      	ldr	r2, [r4, #12]
 800566c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005670:	d12a      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005672:	b119      	cbz	r1, 800567c <HAL_SPI_TransmitReceive+0xa6>
 8005674:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005676:	b292      	uxth	r2, r2
 8005678:	2a01      	cmp	r2, #1
 800567a:	d106      	bne.n	800568a <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800567c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005680:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005682:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005684:	3b01      	subs	r3, #1
 8005686:	b29b      	uxth	r3, r3
 8005688:	86e3      	strh	r3, [r4, #54]	; 0x36
{
 800568a:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800568e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d156      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x16e>
 8005696:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d152      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x16e>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800569e:	f8cd 8000 	str.w	r8, [sp]
 80056a2:	463b      	mov	r3, r7
 80056a4:	2201      	movs	r2, #1
 80056a6:	2102      	movs	r1, #2
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff fe57 	bl	800535c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d161      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x1a0>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80056b2:	4642      	mov	r2, r8
 80056b4:	4639      	mov	r1, r7
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7ff fe96 	bl	80053e8 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d033      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x152>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056c0:	2320      	movs	r3, #32
 80056c2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80056c4:	2001      	movs	r0, #1
 80056c6:	e057      	b.n	8005778 <HAL_SPI_TransmitReceive+0x1a2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80056c8:	b119      	cbz	r1, 80056d2 <HAL_SPI_TransmitReceive+0xfc>
 80056ca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80056cc:	b292      	uxth	r2, r2
 80056ce:	2a01      	cmp	r2, #1
 80056d0:	d106      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x10a>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80056d2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80056d6:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80056d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80056e0:	f04f 0901 	mov.w	r9, #1
 80056e4:	e015      	b.n	8005712 <HAL_SPI_TransmitReceive+0x13c>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80056e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	b11b      	cbz	r3, 80056f4 <HAL_SPI_TransmitReceive+0x11e>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	0791      	lsls	r1, r2, #30
 80056f2:	d45e      	bmi.n	80057b2 <HAL_SPI_TransmitReceive+0x1dc>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80056f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	b11b      	cbz	r3, 8005702 <HAL_SPI_TransmitReceive+0x12c>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	07d2      	lsls	r2, r2, #31
 8005700:	d461      	bmi.n	80057c6 <HAL_SPI_TransmitReceive+0x1f0>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005702:	1c7b      	adds	r3, r7, #1
 8005704:	d005      	beq.n	8005712 <HAL_SPI_TransmitReceive+0x13c>
 8005706:	f7fe fd11 	bl	800412c <HAL_GetTick>
 800570a:	eba0 0008 	sub.w	r0, r0, r8
 800570e:	4287      	cmp	r7, r0
 8005710:	d931      	bls.n	8005776 <HAL_SPI_TransmitReceive+0x1a0>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005712:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005714:	b29b      	uxth	r3, r3
 8005716:	b91b      	cbnz	r3, 8005720 <HAL_SPI_TransmitReceive+0x14a>
 8005718:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0be      	beq.n	800569e <HAL_SPI_TransmitReceive+0xc8>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005720:	f1b9 0f00 	cmp.w	r9, #0
 8005724:	d1df      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x110>
 8005726:	e7e5      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x11e>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	bb2b      	cbnz	r3, 8005778 <HAL_SPI_TransmitReceive+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	68d1      	ldr	r1, [r2, #12]
 8005732:	9103      	str	r1, [sp, #12]
 8005734:	6892      	ldr	r2, [r2, #8]
 8005736:	9203      	str	r2, [sp, #12]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005738:	4618      	mov	r0, r3
 800573a:	e01d      	b.n	8005778 <HAL_SPI_TransmitReceive+0x1a2>
    errorcode = HAL_BUSY;
 800573c:	2002      	movs	r0, #2
 800573e:	e01b      	b.n	8005778 <HAL_SPI_TransmitReceive+0x1a2>
  __HAL_LOCK(hspi);
 8005740:	2002      	movs	r0, #2
 8005742:	e01f      	b.n	8005784 <HAL_SPI_TransmitReceive+0x1ae>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005744:	f1b9 0f00 	cmp.w	r9, #0
 8005748:	d006      	beq.n	8005758 <HAL_SPI_TransmitReceive+0x182>
 800574a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800574c:	b29b      	uxth	r3, r3
 800574e:	b11b      	cbz	r3, 8005758 <HAL_SPI_TransmitReceive+0x182>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	0791      	lsls	r1, r2, #30
 8005756:	d418      	bmi.n	800578a <HAL_SPI_TransmitReceive+0x1b4>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800575a:	b29b      	uxth	r3, r3
 800575c:	b11b      	cbz	r3, 8005766 <HAL_SPI_TransmitReceive+0x190>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	07d2      	lsls	r2, r2, #31
 8005764:	d41b      	bmi.n	800579e <HAL_SPI_TransmitReceive+0x1c8>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005766:	1c78      	adds	r0, r7, #1
 8005768:	d091      	beq.n	800568e <HAL_SPI_TransmitReceive+0xb8>
 800576a:	f7fe fcdf 	bl	800412c <HAL_GetTick>
 800576e:	eba0 0008 	sub.w	r0, r0, r8
 8005772:	4287      	cmp	r7, r0
 8005774:	d88b      	bhi.n	800568e <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8005776:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005778:	2301      	movs	r3, #1
 800577a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800577e:	2300      	movs	r3, #0
 8005780:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005784:	b005      	add	sp, #20
 8005786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800578a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800578e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8005790:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005792:	3b01      	subs	r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005798:	f04f 0900 	mov.w	r9, #0
 800579c:	e7dc      	b.n	8005758 <HAL_SPI_TransmitReceive+0x182>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80057a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80057ac:	f04f 0901 	mov.w	r9, #1
 80057b0:	e7d9      	b.n	8005766 <HAL_SPI_TransmitReceive+0x190>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80057b2:	782a      	ldrb	r2, [r5, #0]
 80057b4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80057b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80057be:	3501      	adds	r5, #1
        txallowed = 0U;
 80057c0:	f04f 0900 	mov.w	r9, #0
 80057c4:	e796      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x11e>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80057ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80057d2:	3601      	adds	r6, #1
        txallowed = 1U;
 80057d4:	f04f 0901 	mov.w	r9, #1
 80057d8:	e793      	b.n	8005702 <HAL_SPI_TransmitReceive+0x12c>

080057da <HAL_SPI_Receive>:
{
 80057da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80057de:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057e0:	6843      	ldr	r3, [r0, #4]
 80057e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80057e6:	4604      	mov	r4, r0
 80057e8:	460d      	mov	r5, r1
 80057ea:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057ec:	d10c      	bne.n	8005808 <HAL_SPI_Receive+0x2e>
 80057ee:	6883      	ldr	r3, [r0, #8]
 80057f0:	b953      	cbnz	r3, 8005808 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057f2:	2304      	movs	r3, #4
 80057f4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80057f8:	4613      	mov	r3, r2
 80057fa:	9600      	str	r6, [sp, #0]
 80057fc:	460a      	mov	r2, r1
 80057fe:	f7ff feea 	bl	80055d6 <HAL_SPI_TransmitReceive>
}
 8005802:	b002      	add	sp, #8
 8005804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8005808:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800580c:	2b01      	cmp	r3, #1
 800580e:	f000 8081 	beq.w	8005914 <HAL_SPI_Receive+0x13a>
 8005812:	2301      	movs	r3, #1
 8005814:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005818:	f7fe fc88 	bl	800412c <HAL_GetTick>
 800581c:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 800581e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005822:	b2c0      	uxtb	r0, r0
 8005824:	2801      	cmp	r0, #1
 8005826:	d173      	bne.n	8005910 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 8005828:	2d00      	cmp	r5, #0
 800582a:	d035      	beq.n	8005898 <HAL_SPI_Receive+0xbe>
 800582c:	f1b8 0f00 	cmp.w	r8, #0
 8005830:	d032      	beq.n	8005898 <HAL_SPI_Receive+0xbe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005832:	2304      	movs	r3, #4
 8005834:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005838:	2300      	movs	r3, #0
 800583a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800583c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 800583e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8005842:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005844:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005846:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005848:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584a:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800584c:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005852:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8005854:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8005858:	bf02      	ittt	eq
 800585a:	681a      	ldreq	r2, [r3, #0]
 800585c:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8005860:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8005866:	bf5e      	ittt	pl
 8005868:	681a      	ldrpl	r2, [r3, #0]
 800586a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800586e:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005870:	68e3      	ldr	r3, [r4, #12]
 8005872:	bb4b      	cbnz	r3, 80058c8 <HAL_SPI_Receive+0xee>
    while(hspi->RxXferCount > 0U)
 8005874:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d034      	beq.n	80058e6 <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	07d0      	lsls	r0, r2, #31
 8005882:	d507      	bpl.n	8005894 <HAL_SPI_Receive+0xba>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8005884:	7b1b      	ldrb	r3, [r3, #12]
 8005886:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 800588a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800588c:	3b01      	subs	r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005892:	e7ef      	b.n	8005874 <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005894:	b93e      	cbnz	r6, 80058a6 <HAL_SPI_Receive+0xcc>
          errorcode = HAL_TIMEOUT;
 8005896:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005898:	2301      	movs	r3, #1
 800589a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800589e:	2300      	movs	r3, #0
 80058a0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80058a4:	e7ad      	b.n	8005802 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80058a6:	1c71      	adds	r1, r6, #1
 80058a8:	d0e4      	beq.n	8005874 <HAL_SPI_Receive+0x9a>
 80058aa:	f7fe fc3f 	bl	800412c <HAL_GetTick>
 80058ae:	1bc0      	subs	r0, r0, r7
 80058b0:	4286      	cmp	r6, r0
 80058b2:	d9f0      	bls.n	8005896 <HAL_SPI_Receive+0xbc>
 80058b4:	e7de      	b.n	8005874 <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d0ed      	beq.n	8005896 <HAL_SPI_Receive+0xbc>
 80058ba:	1c73      	adds	r3, r6, #1
 80058bc:	d004      	beq.n	80058c8 <HAL_SPI_Receive+0xee>
 80058be:	f7fe fc35 	bl	800412c <HAL_GetTick>
 80058c2:	1bc0      	subs	r0, r0, r7
 80058c4:	4286      	cmp	r6, r0
 80058c6:	d9e6      	bls.n	8005896 <HAL_SPI_Receive+0xbc>
    while(hspi->RxXferCount > 0U)
 80058c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b15b      	cbz	r3, 80058e6 <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	07d2      	lsls	r2, r2, #31
 80058d4:	d5ef      	bpl.n	80058b6 <HAL_SPI_Receive+0xdc>
        *((uint16_t*)pData) = hspi->Instance->DR;
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 80058dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80058e4:	e7f0      	b.n	80058c8 <HAL_SPI_Receive+0xee>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ec:	d10b      	bne.n	8005906 <HAL_SPI_Receive+0x12c>
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Receive+0x122>
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fa:	d104      	bne.n	8005906 <HAL_SPI_Receive+0x12c>
    __HAL_SPI_DISABLE(hspi);
 80058fc:	6822      	ldr	r2, [r4, #0]
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005906:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005908:	3000      	adds	r0, #0
 800590a:	bf18      	it	ne
 800590c:	2001      	movne	r0, #1
 800590e:	e7c3      	b.n	8005898 <HAL_SPI_Receive+0xbe>
 8005910:	2002      	movs	r0, #2
 8005912:	e7c1      	b.n	8005898 <HAL_SPI_Receive+0xbe>
  __HAL_LOCK(hspi);
 8005914:	2002      	movs	r0, #2
 8005916:	e774      	b.n	8005802 <HAL_SPI_Receive+0x28>

08005918 <HAL_SPI_ErrorCallback>:
 8005918:	4770      	bx	lr
	...

0800591c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800591c:	6803      	ldr	r3, [r0, #0]
{
 800591e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005920:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005922:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8005924:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8005928:	2d01      	cmp	r5, #1
{
 800592a:	b085      	sub	sp, #20
 800592c:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800592e:	d105      	bne.n	800593c <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005930:	064d      	lsls	r5, r1, #25
 8005932:	d503      	bpl.n	800593c <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8005934:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 8005936:	4798      	blx	r3
}
 8005938:	b005      	add	sp, #20
 800593a:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800593c:	0795      	lsls	r5, r2, #30
 800593e:	d504      	bpl.n	800594a <HAL_SPI_IRQHandler+0x2e>
 8005940:	0608      	lsls	r0, r1, #24
 8005942:	d502      	bpl.n	800594a <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8005944:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005946:	4620      	mov	r0, r4
 8005948:	e7f5      	b.n	8005936 <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800594a:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800594e:	d0f3      	beq.n	8005938 <HAL_SPI_IRQHandler+0x1c>
 8005950:	068d      	lsls	r5, r1, #26
 8005952:	d5f1      	bpl.n	8005938 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8005954:	0650      	lsls	r0, r2, #25
 8005956:	d50e      	bpl.n	8005976 <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005958:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800595c:	2803      	cmp	r0, #3
 800595e:	f04f 0500 	mov.w	r5, #0
 8005962:	d03e      	beq.n	80059e2 <HAL_SPI_IRQHandler+0xc6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005964:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005966:	f040 0004 	orr.w	r0, r0, #4
 800596a:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800596c:	9500      	str	r5, [sp, #0]
 800596e:	68d8      	ldr	r0, [r3, #12]
 8005970:	9000      	str	r0, [sp, #0]
 8005972:	6898      	ldr	r0, [r3, #8]
 8005974:	9000      	str	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8005976:	0695      	lsls	r5, r2, #26
 8005978:	d50b      	bpl.n	8005992 <HAL_SPI_IRQHandler+0x76>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800597a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800597c:	f040 0001 	orr.w	r0, r0, #1
 8005980:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005982:	2000      	movs	r0, #0
 8005984:	9002      	str	r0, [sp, #8]
 8005986:	6898      	ldr	r0, [r3, #8]
 8005988:	9002      	str	r0, [sp, #8]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005990:	6018      	str	r0, [r3, #0]
    if((itflag & SPI_FLAG_FRE) != RESET)
 8005992:	05d0      	lsls	r0, r2, #23
 8005994:	d507      	bpl.n	80059a6 <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005996:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005998:	f042 0208 	orr.w	r2, r2, #8
 800599c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800599e:	2200      	movs	r2, #0
 80059a0:	9203      	str	r2, [sp, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	9203      	str	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	d0c5      	beq.n	8005938 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b2:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80059b4:	2201      	movs	r2, #1
 80059b6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059ba:	078a      	lsls	r2, r1, #30
 80059bc:	d017      	beq.n	80059ee <HAL_SPI_IRQHandler+0xd2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059be:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80059c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059c2:	f022 0203 	bic.w	r2, r2, #3
 80059c6:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80059c8:	b118      	cbz	r0, 80059d2 <HAL_SPI_IRQHandler+0xb6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_SPI_IRQHandler+0xdc>)
 80059cc:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80059ce:	f7fe ff15 	bl	80047fc <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80059d2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d0af      	beq.n	8005938 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <HAL_SPI_IRQHandler+0xdc>)
 80059da:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80059dc:	f7fe ff0e 	bl	80047fc <HAL_DMA_Abort_IT>
 80059e0:	e7aa      	b.n	8005938 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059e2:	9501      	str	r5, [sp, #4]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	9201      	str	r2, [sp, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	9301      	str	r3, [sp, #4]
        return;
 80059ec:	e7a4      	b.n	8005938 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff ff92 	bl	8005918 <HAL_SPI_ErrorCallback>
 80059f4:	e7a0      	b.n	8005938 <HAL_SPI_IRQHandler+0x1c>
 80059f6:	bf00      	nop
 80059f8:	080059fd 	.word	0x080059fd

080059fc <_ZL19SPI_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 80059fc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a04:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8005a06:	f7ff ff87 	bl	8005918 <HAL_SPI_ErrorCallback>
 8005a0a:	bd08      	pop	{r3, pc}

08005a0c <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0c:	6803      	ldr	r3, [r0, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a1e:	2320      	movs	r3, #32
 8005a20:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8005a24:	4770      	bx	lr
	...

08005a28 <_ZL14UART_SetConfigP18UART_HandleTypeDef>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005a2c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005a2e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8005a30:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a32:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005a38:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8005a3a:	6133      	str	r3, [r6, #16]
{
 8005a3c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a3e:	6883      	ldr	r3, [r0, #8]
 8005a40:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8005a42:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a44:	4303      	orrs	r3, r0
 8005a46:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005a48:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a4c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005a4e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a52:	430b      	orrs	r3, r1
 8005a54:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005a56:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005a58:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005a5a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8005a60:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a62:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8005a66:	6173      	str	r3, [r6, #20]
 8005a68:	4b7a      	ldr	r3, [pc, #488]	; (8005c54 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	d17c      	bne.n	8005b66 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a6c:	429e      	cmp	r6, r3
 8005a6e:	d003      	beq.n	8005a78 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x50>
 8005a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a74:	429e      	cmp	r6, r3
 8005a76:	d144      	bne.n	8005b02 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005a78:	f7ff faec 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005a7c:	2519      	movs	r5, #25
 8005a7e:	fb05 f300 	mul.w	r3, r5, r0
 8005a82:	6860      	ldr	r0, [r4, #4]
 8005a84:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005a88:	0040      	lsls	r0, r0, #1
 8005a8a:	fbb3 f3f0 	udiv	r3, r3, r0
 8005a8e:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a96:	f7ff fadd 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005a9a:	6863      	ldr	r3, [r4, #4]
 8005a9c:	4368      	muls	r0, r5
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fbb0 f7f3 	udiv	r7, r0, r3
 8005aa4:	f7ff fad6 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	4368      	muls	r0, r5
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab2:	fbb3 f3f9 	udiv	r3, r3, r9
 8005ab6:	fb09 7313 	mls	r3, r9, r3, r7
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	3332      	adds	r3, #50	; 0x32
 8005abe:	fbb3 f3f9 	udiv	r3, r3, r9
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8005ac8:	f7ff fac4 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005acc:	6862      	ldr	r2, [r4, #4]
 8005ace:	4368      	muls	r0, r5
 8005ad0:	0052      	lsls	r2, r2, #1
 8005ad2:	fbb0 faf2 	udiv	sl, r0, r2
 8005ad6:	f7ff fabd 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	4368      	muls	r0, r5
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae4:	fbb3 f3f9 	udiv	r3, r3, r9
 8005ae8:	fb09 a313 	mls	r3, r9, r3, sl
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	3332      	adds	r3, #50	; 0x32
 8005af0:	fbb3 f3f9 	udiv	r3, r3, r9
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005afa:	443b      	add	r3, r7
 8005afc:	60b3      	str	r3, [r6, #8]
 8005afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b02:	f7ff fa97 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005b06:	2519      	movs	r5, #25
 8005b08:	fb05 f300 	mul.w	r3, r5, r0
 8005b0c:	6860      	ldr	r0, [r4, #4]
 8005b0e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005b12:	0040      	lsls	r0, r0, #1
 8005b14:	fbb3 f3f0 	udiv	r3, r3, r0
 8005b18:	fbb3 f3f9 	udiv	r3, r3, r9
 8005b1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b20:	f7ff fa88 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	4368      	muls	r0, r5
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	fbb0 f7f3 	udiv	r7, r0, r3
 8005b2e:	f7ff fa81 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005b32:	6863      	ldr	r3, [r4, #4]
 8005b34:	4368      	muls	r0, r5
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3c:	fbb3 f3f9 	udiv	r3, r3, r9
 8005b40:	fb09 7313 	mls	r3, r9, r3, r7
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	3332      	adds	r3, #50	; 0x32
 8005b48:	fbb3 f3f9 	udiv	r3, r3, r9
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8005b52:	f7ff fa6f 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005b56:	6862      	ldr	r2, [r4, #4]
 8005b58:	4368      	muls	r0, r5
 8005b5a:	0052      	lsls	r2, r2, #1
 8005b5c:	fbb0 faf2 	udiv	sl, r0, r2
 8005b60:	f7ff fa68 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005b64:	e7b9      	b.n	8005ada <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b66:	429e      	cmp	r6, r3
 8005b68:	d002      	beq.n	8005b70 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x148>
 8005b6a:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x230>)
 8005b6c:	429e      	cmp	r6, r3
 8005b6e:	d140      	bne.n	8005bf2 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005b70:	f7ff fa70 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005b74:	6867      	ldr	r7, [r4, #4]
 8005b76:	2519      	movs	r5, #25
 8005b78:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005b7c:	fb05 f300 	mul.w	r3, r5, r0
 8005b80:	00bf      	lsls	r7, r7, #2
 8005b82:	fbb3 f3f7 	udiv	r3, r3, r7
 8005b86:	fbb3 f3f9 	udiv	r3, r3, r9
 8005b8a:	011f      	lsls	r7, r3, #4
 8005b8c:	f7ff fa62 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	4368      	muls	r0, r5
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	fbb0 f8f3 	udiv	r8, r0, r3
 8005b9a:	f7ff fa5b 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	4368      	muls	r0, r5
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ba8:	fbb3 f3f9 	udiv	r3, r3, r9
 8005bac:	fb09 8313 	mls	r3, r9, r3, r8
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	3332      	adds	r3, #50	; 0x32
 8005bb4:	fbb3 f3f9 	udiv	r3, r3, r9
 8005bb8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8005bbc:	f7ff fa4a 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	6862      	ldr	r2, [r4, #4]
 8005bc2:	4368      	muls	r0, r5
 8005bc4:	0092      	lsls	r2, r2, #2
 8005bc6:	fbb0 faf2 	udiv	sl, r0, r2
 8005bca:	f7ff fa43 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005bce:	6863      	ldr	r3, [r4, #4]
 8005bd0:	4368      	muls	r0, r5
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd8:	fbb3 f3f9 	udiv	r3, r3, r9
 8005bdc:	fb09 a313 	mls	r3, r9, r3, sl
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	3332      	adds	r3, #50	; 0x32
 8005be4:	fbb3 f3f9 	udiv	r3, r3, r9
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	ea43 0308 	orr.w	r3, r3, r8
 8005bf0:	e783      	b.n	8005afa <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xd2>
 8005bf2:	f7ff fa1f 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005bf6:	6867      	ldr	r7, [r4, #4]
 8005bf8:	2519      	movs	r5, #25
 8005bfa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005bfe:	fb05 f300 	mul.w	r3, r5, r0
 8005c02:	00bf      	lsls	r7, r7, #2
 8005c04:	fbb3 f3f7 	udiv	r3, r3, r7
 8005c08:	fbb3 f3f9 	udiv	r3, r3, r9
 8005c0c:	011f      	lsls	r7, r3, #4
 8005c0e:	f7ff fa11 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	4368      	muls	r0, r5
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	fbb0 f8f3 	udiv	r8, r0, r3
 8005c1c:	f7ff fa0a 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005c20:	6863      	ldr	r3, [r4, #4]
 8005c22:	4368      	muls	r0, r5
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8005c2e:	fb09 8313 	mls	r3, r9, r3, r8
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	3332      	adds	r3, #50	; 0x32
 8005c36:	fbb3 f3f9 	udiv	r3, r3, r9
 8005c3a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8005c3e:	f7ff f9f9 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	4368      	muls	r0, r5
 8005c46:	0092      	lsls	r2, r2, #2
 8005c48:	fbb0 faf2 	udiv	sl, r0, r2
 8005c4c:	f7ff f9f2 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 8005c50:	e7bd      	b.n	8005bce <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1a6>
 8005c52:	bf00      	nop
 8005c54:	40011000 	.word	0x40011000
 8005c58:	40011400 	.word	0x40011400

08005c5c <HAL_UART_Init>:
{
 8005c5c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8005c5e:	4604      	mov	r4, r0
 8005c60:	b340      	cbz	r0, 8005cb4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8005c62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005c66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c6a:	b91b      	cbnz	r3, 8005c74 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005c6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005c70:	f7fd fc84 	bl	800357c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005c74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c76:	2324      	movs	r3, #36	; 0x24
 8005c78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005c7c:	68d3      	ldr	r3, [r2, #12]
 8005c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c82:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005c84:	4620      	mov	r0, r4
 8005c86:	f7ff fecf 	bl	8005a28 <_ZL14UART_SetConfigP18UART_HandleTypeDef>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ca2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8005ca6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005caa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005cae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8005cb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005cb4:	2001      	movs	r0, #1
}
 8005cb6:	bd10      	pop	{r4, pc}

08005cb8 <HAL_UART_Transmit_DMA>:
{
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8005cbe:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005cc2:	2a20      	cmp	r2, #32
 8005cc4:	d12a      	bne.n	8005d1c <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 8005cc6:	b339      	cbz	r1, 8005d18 <HAL_UART_Transmit_DMA+0x60>
 8005cc8:	b333      	cbz	r3, 8005d18 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8005cca:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8005cce:	2a01      	cmp	r2, #1
 8005cd0:	d024      	beq.n	8005d1c <HAL_UART_Transmit_DMA+0x64>
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8005cda:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cde:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ce6:	4a0e      	ldr	r2, [pc, #56]	; (8005d20 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8005ce8:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8005cea:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cec:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cee:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <HAL_UART_Transmit_DMA+0x6c>)
 8005cf0:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cf2:	4a0d      	ldr	r2, [pc, #52]	; (8005d28 <HAL_UART_Transmit_DMA+0x70>)
 8005cf4:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cf6:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8005cf8:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cfa:	3204      	adds	r2, #4
 8005cfc:	f7fe fd40 	bl	8004780 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d08:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8005d0a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d12:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8005d14:	4628      	mov	r0, r5
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005d18:	2001      	movs	r0, #1
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8005d1c:	2002      	movs	r0, #2
}
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	08005dbf 	.word	0x08005dbf
 8005d24:	08005ded 	.word	0x08005ded
 8005d28:	08005eb3 	.word	0x08005eb3

08005d2c <HAL_UART_Receive_DMA>:
{  
 8005d2c:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8005d2e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8005d32:	2a20      	cmp	r2, #32
{  
 8005d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d36:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8005d38:	d137      	bne.n	8005daa <HAL_UART_Receive_DMA+0x7e>
    if((pData == NULL ) || (Size == 0)) 
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d033      	beq.n	8005da6 <HAL_UART_Receive_DMA+0x7a>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d031      	beq.n	8005da6 <HAL_UART_Receive_DMA+0x7a>
    __HAL_LOCK(huart);
 8005d42:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8005d46:	2a01      	cmp	r2, #1
 8005d48:	d02f      	beq.n	8005daa <HAL_UART_Receive_DMA+0x7e>
 8005d4a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8005d4e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d52:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d54:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8005d56:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d58:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d5a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d5e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005d60:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <HAL_UART_Receive_DMA+0x84>)
 8005d62:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8005d64:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d66:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <HAL_UART_Receive_DMA+0x88>)
 8005d68:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d6a:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <HAL_UART_Receive_DMA+0x8c>)
 8005d6c:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8005d6e:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8005d70:	460a      	mov	r2, r1
 8005d72:	1d31      	adds	r1, r6, #4
 8005d74:	f7fe fd04 	bl	8004780 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	9401      	str	r4, [sp, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	9201      	str	r2, [sp, #4]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	9201      	str	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d84:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8005d86:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d98:	695a      	ldr	r2, [r3, #20]
 8005d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d9e:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8005da0:	4620      	mov	r0, r4
}
 8005da2:	b002      	add	sp, #8
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005da6:	2001      	movs	r0, #1
 8005da8:	e7fb      	b.n	8005da2 <HAL_UART_Receive_DMA+0x76>
    return HAL_BUSY; 
 8005daa:	2002      	movs	r0, #2
 8005dac:	e7f9      	b.n	8005da2 <HAL_UART_Receive_DMA+0x76>
 8005dae:	bf00      	nop
 8005db0:	08005df9 	.word	0x08005df9
 8005db4:	08005ea7 	.word	0x08005ea7
 8005db8:	08005eb3 	.word	0x08005eb3

08005dbc <HAL_UART_TxCpltCallback>:
 8005dbc:	4770      	bx	lr

08005dbe <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef>:
{
 8005dbe:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dc0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dc2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005dca:	d10a      	bne.n	8005de2 <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef+0x24>
    huart->TxXferCount = 0U;
 8005dcc:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd6:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005de2:	4610      	mov	r0, r2
 8005de4:	f7ff ffea 	bl	8005dbc <HAL_UART_TxCpltCallback>
 8005de8:	bd08      	pop	{r3, pc}

08005dea <HAL_UART_TxHalfCpltCallback>:
 8005dea:	4770      	bx	lr

08005dec <_ZL18UART_DMATxHalfCpltP19__DMA_HandleTypeDef>:
{
 8005dec:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005dee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005df0:	f7ff fffb 	bl	8005dea <HAL_UART_TxHalfCpltCallback>
 8005df4:	bd08      	pop	{r3, pc}

08005df6 <HAL_UART_RxCpltCallback>:
 8005df6:	4770      	bx	lr

08005df8 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef>:
{
 8005df8:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dfa:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dfc:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005e04:	d110      	bne.n	8005e28 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x30>
    huart->RxXferCount = 0U;
 8005e06:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e08:	6813      	ldr	r3, [r2, #0]
 8005e0a:	68d9      	ldr	r1, [r3, #12]
 8005e0c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005e10:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e12:	6959      	ldr	r1, [r3, #20]
 8005e14:	f021 0101 	bic.w	r1, r1, #1
 8005e18:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1a:	6959      	ldr	r1, [r3, #20]
 8005e1c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005e20:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005e22:	2320      	movs	r3, #32
 8005e24:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7ff ffe4 	bl	8005df6 <HAL_UART_RxCpltCallback>
 8005e2e:	bd08      	pop	{r3, pc}

08005e30 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005e30:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005e34:	2b22      	cmp	r3, #34	; 0x22
{
 8005e36:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005e38:	d132      	bne.n	8005ea0 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e3a:	6883      	ldr	r3, [r0, #8]
 8005e3c:	6901      	ldr	r1, [r0, #16]
 8005e3e:	6802      	ldr	r2, [r0, #0]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e46:	d11f      	bne.n	8005e88 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e48:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005e4a:	b9c9      	cbnz	r1, 8005e80 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e50:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8005e54:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8005e56:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8005e58:	3c01      	subs	r4, #1
 8005e5a:	b2a4      	uxth	r4, r4
 8005e5c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8005e5e:	b96c      	cbnz	r4, 8005e7c <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e60:	6803      	ldr	r3, [r0, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e68:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005e72:	2320      	movs	r3, #32
 8005e74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005e78:	f7ff ffbd 	bl	8005df6 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8005e7c:	2000      	movs	r0, #0
}
 8005e7e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	f823 2b01 	strh.w	r2, [r3], #1
 8005e86:	e7e5      	b.n	8005e54 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005e88:	b921      	cbnz	r1, 8005e94 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e8a:	1c59      	adds	r1, r3, #1
 8005e8c:	6852      	ldr	r2, [r2, #4]
 8005e8e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	e7e0      	b.n	8005e56 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x26>
 8005e94:	6852      	ldr	r2, [r2, #4]
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	6281      	str	r1, [r0, #40]	; 0x28
 8005e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e9e:	e7f7      	b.n	8005e90 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x60>
    return HAL_BUSY;
 8005ea0:	2002      	movs	r0, #2
 8005ea2:	bd10      	pop	{r4, pc}

08005ea4 <HAL_UART_RxHalfCpltCallback>:
 8005ea4:	4770      	bx	lr

08005ea6 <_ZL18UART_DMARxHalfCpltP19__DMA_HandleTypeDef>:
{
 8005ea6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8005ea8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005eaa:	f7ff fffb 	bl	8005ea4 <HAL_UART_RxHalfCpltCallback>
 8005eae:	bd08      	pop	{r3, pc}

08005eb0 <HAL_UART_ErrorCallback>:
 8005eb0:	4770      	bx	lr

08005eb2 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eb2:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8005eb4:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005eb6:	680b      	ldr	r3, [r1, #0]
 8005eb8:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005eba:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8005ebe:	2821      	cmp	r0, #33	; 0x21
 8005ec0:	d101      	bne.n	8005ec6 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
 8005ec2:	0612      	lsls	r2, r2, #24
 8005ec4:	d40e      	bmi.n	8005ee4 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x32>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8005ec6:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ec8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8005ecc:	2a22      	cmp	r2, #34	; 0x22
 8005ece:	d101      	bne.n	8005ed4 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>
 8005ed0:	065b      	lsls	r3, r3, #25
 8005ed2:	d411      	bmi.n	8005ef8 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x46>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ed4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005ed6:	f043 0310 	orr.w	r3, r3, #16
 8005eda:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005edc:	4608      	mov	r0, r1
 8005ede:	f7ff ffe7 	bl	8005eb0 <HAL_UART_ErrorCallback>
}
 8005ee2:	bd08      	pop	{r3, pc}
    huart->TxXferCount = 0U;
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005eee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
 8005ef6:	e7e6      	b.n	8005ec6 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
    huart->RxXferCount = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005efc:	4608      	mov	r0, r1
 8005efe:	f7ff fd85 	bl	8005a0c <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
 8005f02:	e7e7      	b.n	8005ed4 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>

08005f04 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f04:	6803      	ldr	r3, [r0, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f08:	68d9      	ldr	r1, [r3, #12]
{
 8005f0a:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8005f0c:	0716      	lsls	r6, r2, #28
{
 8005f0e:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f10:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8005f12:	d107      	bne.n	8005f24 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f14:	0696      	lsls	r6, r2, #26
 8005f16:	d551      	bpl.n	8005fbc <HAL_UART_IRQHandler+0xb8>
 8005f18:	068d      	lsls	r5, r1, #26
 8005f1a:	d54f      	bpl.n	8005fbc <HAL_UART_IRQHandler+0xb8>
}
 8005f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005f20:	f7ff bf86 	b.w	8005e30 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f24:	f015 0501 	ands.w	r5, r5, #1
 8005f28:	d102      	bne.n	8005f30 <HAL_UART_IRQHandler+0x2c>
 8005f2a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005f2e:	d045      	beq.n	8005fbc <HAL_UART_IRQHandler+0xb8>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f30:	07d3      	lsls	r3, r2, #31
 8005f32:	d505      	bpl.n	8005f40 <HAL_UART_IRQHandler+0x3c>
 8005f34:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f36:	bf42      	ittt	mi
 8005f38:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8005f3a:	f043 0301 	orrmi.w	r3, r3, #1
 8005f3e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f40:	0750      	lsls	r0, r2, #29
 8005f42:	d504      	bpl.n	8005f4e <HAL_UART_IRQHandler+0x4a>
 8005f44:	b11d      	cbz	r5, 8005f4e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4e:	0793      	lsls	r3, r2, #30
 8005f50:	d504      	bpl.n	8005f5c <HAL_UART_IRQHandler+0x58>
 8005f52:	b11d      	cbz	r5, 8005f5c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f56:	f043 0304 	orr.w	r3, r3, #4
 8005f5a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f5c:	0716      	lsls	r6, r2, #28
 8005f5e:	d504      	bpl.n	8005f6a <HAL_UART_IRQHandler+0x66>
 8005f60:	b11d      	cbz	r5, 8005f6a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f64:	f043 0308 	orr.w	r3, r3, #8
 8005f68:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d069      	beq.n	8006044 <HAL_UART_IRQHandler+0x140>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f70:	0690      	lsls	r0, r2, #26
 8005f72:	d504      	bpl.n	8005f7e <HAL_UART_IRQHandler+0x7a>
 8005f74:	068a      	lsls	r2, r1, #26
 8005f76:	d502      	bpl.n	8005f7e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff ff59 	bl	8005e30 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f84:	0713      	lsls	r3, r2, #28
 8005f86:	d452      	bmi.n	800602e <HAL_UART_IRQHandler+0x12a>
 8005f88:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005f8c:	d14f      	bne.n	800602e <HAL_UART_IRQHandler+0x12a>
        HAL_UART_ErrorCallback(huart);
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f7ff ff8e 	bl	8005eb0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f98:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8005f9a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d04a      	beq.n	800603c <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa6:	4b28      	ldr	r3, [pc, #160]	; (8006048 <HAL_UART_IRQHandler+0x144>)
 8005fa8:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005faa:	f7fe fc27 	bl	80047fc <HAL_DMA_Abort_IT>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d048      	beq.n	8006044 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb2:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005fba:	4718      	bx	r3
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fbc:	0616      	lsls	r6, r2, #24
 8005fbe:	d527      	bpl.n	8006010 <HAL_UART_IRQHandler+0x10c>
 8005fc0:	060d      	lsls	r5, r1, #24
 8005fc2:	d525      	bpl.n	8006010 <HAL_UART_IRQHandler+0x10c>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fc4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005fc8:	2a21      	cmp	r2, #33	; 0x21
 8005fca:	d13b      	bne.n	8006044 <HAL_UART_IRQHandler+0x140>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fcc:	68a2      	ldr	r2, [r4, #8]
 8005fce:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005fd2:	6a22      	ldr	r2, [r4, #32]
 8005fd4:	d117      	bne.n	8006006 <HAL_UART_IRQHandler+0x102>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fd6:	8811      	ldrh	r1, [r2, #0]
 8005fd8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005fdc:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005fde:	6921      	ldr	r1, [r4, #16]
 8005fe0:	b979      	cbnz	r1, 8006002 <HAL_UART_IRQHandler+0xfe>
        huart->pTxBuffPtr += 2U;
 8005fe2:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8005fe4:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8005fe6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005fe8:	3a01      	subs	r2, #1
 8005fea:	b292      	uxth	r2, r2
 8005fec:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005fee:	bb4a      	cbnz	r2, 8006044 <HAL_UART_IRQHandler+0x140>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff6:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffe:	60da      	str	r2, [r3, #12]
 8006000:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8006002:	3201      	adds	r2, #1
 8006004:	e7ee      	b.n	8005fe4 <HAL_UART_IRQHandler+0xe0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006006:	1c51      	adds	r1, r2, #1
 8006008:	6221      	str	r1, [r4, #32]
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e7ea      	b.n	8005fe6 <HAL_UART_IRQHandler+0xe2>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006010:	0650      	lsls	r0, r2, #25
 8006012:	d517      	bpl.n	8006044 <HAL_UART_IRQHandler+0x140>
 8006014:	0649      	lsls	r1, r1, #25
 8006016:	d515      	bpl.n	8006044 <HAL_UART_IRQHandler+0x140>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006020:	2320      	movs	r3, #32
 8006022:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff fec8 	bl	8005dbc <HAL_UART_TxCpltCallback>
 800602c:	bd70      	pop	{r4, r5, r6, pc}
        UART_EndRxTransfer(huart);
 800602e:	4620      	mov	r0, r4
 8006030:	f7ff fcec 	bl	8005a0c <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	0652      	lsls	r2, r2, #25
 800603a:	d4ad      	bmi.n	8005f98 <HAL_UART_IRQHandler+0x94>
            HAL_UART_ErrorCallback(huart);
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff ff37 	bl	8005eb0 <HAL_UART_ErrorCallback>
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	bd70      	pop	{r4, r5, r6, pc}
 8006046:	bf00      	nop
 8006048:	0800604d 	.word	0x0800604d

0800604c <_ZL20UART_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 800604c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800604e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8006054:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006056:	f7ff ff2b 	bl	8005eb0 <HAL_UART_ErrorCallback>
 800605a:	bd08      	pop	{r3, pc}

0800605c <_ZNK7Vector3IfErmERKS0_>:
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af00      	add	r7, sp, #0
 8006062:	6178      	str	r0, [r7, #20]
 8006064:	6139      	str	r1, [r7, #16]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	ed93 7a01 	vldr	s14, [r3, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	edd3 6a02 	vldr	s13, [r3, #8]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006086:	ee37 6a67 	vsub.f32	s12, s14, s15
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	edd3 7a00 	vldr	s15, [r3]
 8006096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	edd3 6a00 	vldr	s13, [r3]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80060a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060aa:	ee77 5a67 	vsub.f32	s11, s14, s15
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	ed93 7a00 	vldr	s14, [r3]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80060ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	edd3 7a00 	vldr	s15, [r3]
 80060ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d2:	f107 0318 	add.w	r3, r7, #24
 80060d6:	eeb0 1a67 	vmov.f32	s2, s15
 80060da:	eef0 0a65 	vmov.f32	s1, s11
 80060de:	eeb0 0a46 	vmov.f32	s0, s12
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f9ce 	bl	8006484 <_ZN7Vector3IfEC1Efff>
 80060e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ec:	f107 0218 	add.w	r2, r7, #24
 80060f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80060f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	ee06 1a90 	vmov	s13, r1
 8006100:	ee07 2a10 	vmov	s14, r2
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eeb0 0a66 	vmov.f32	s0, s13
 800610c:	eef0 0a47 	vmov.f32	s1, s14
 8006110:	eeb0 1a67 	vmov.f32	s2, s15
 8006114:	3730      	adds	r7, #48	; 0x30
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop

0800611c <_ZNK7Vector3IfEmlERKS0_>:
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	ed93 7a00 	vldr	s14, [r3]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	edd3 7a00 	vldr	s15, [r3]
 8006132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	edd3 6a01 	vldr	s13, [r3, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	edd3 7a02 	vldr	s15, [r3, #8]
 8006156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800615a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800615e:	eeb0 0a67 	vmov.f32	s0, s15
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <_ZN7Vector3IfEdVEf>:
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	ed87 0a00 	vstr	s0, [r7]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	edd3 6a00 	vldr	s13, [r3]
 800617e:	ed97 7a00 	vldr	s14, [r7]
 8006182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	edc3 7a00 	vstr	s15, [r3]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006192:	ed97 7a00 	vldr	s14, [r7]
 8006196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	edc3 7a01 	vstr	s15, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80061a6:	ed97 7a00 	vldr	s14, [r7]
 80061aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	edc3 7a02 	vstr	s15, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop

080061c4 <_ZN7Vector3IfEmIERKS0_>:
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	ed93 7a00 	vldr	s14, [r3]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	edd3 7a00 	vldr	s15, [r3]
 80061da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	edc3 7a00 	vstr	s15, [r3]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80061f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	edd3 7a02 	vldr	s15, [r3, #8]
 8006206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <_ZN7Vector3IfEpLERKS0_>:
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	ed93 7a00 	vldr	s14, [r3]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	edd3 7a00 	vldr	s15, [r3]
 8006236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	edc3 7a00 	vstr	s15, [r3]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	ed93 7a01 	vldr	s14, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	edd3 7a01 	vldr	s15, [r3, #4]
 800624c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	edc3 7a01 	vstr	s15, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	ed93 7a02 	vldr	s14, [r3, #8]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	edc3 7a02 	vstr	s15, [r3, #8]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <_ZNK7Vector3IfEdvEf>:
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	; 0x30
 8006280:	af00      	add	r7, sp, #0
 8006282:	6178      	str	r0, [r7, #20]
 8006284:	ed87 0a04 	vstr	s0, [r7, #16]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	ed93 7a00 	vldr	s14, [r3]
 800628e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006292:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	ed93 7a01 	vldr	s14, [r3, #4]
 800629c:	edd7 7a04 	vldr	s15, [r7, #16]
 80062a0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80062aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80062ae:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80062b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062b6:	eeb0 1a65 	vmov.f32	s2, s11
 80062ba:	eef0 0a46 	vmov.f32	s1, s12
 80062be:	eeb0 0a66 	vmov.f32	s0, s13
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f8de 	bl	8006484 <_ZN7Vector3IfEC1Efff>
 80062c8:	f107 0318 	add.w	r3, r7, #24
 80062cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80062d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80062d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80062d6:	69b9      	ldr	r1, [r7, #24]
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	ee06 1a90 	vmov	s13, r1
 80062e0:	ee07 2a10 	vmov	s14, r2
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eeb0 0a66 	vmov.f32	s0, s13
 80062ec:	eef0 0a47 	vmov.f32	s1, s14
 80062f0:	eeb0 1a67 	vmov.f32	s2, s15
 80062f4:	3730      	adds	r7, #48	; 0x30
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop

080062fc <_ZNK7Vector3IfEmlEf>:
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08c      	sub	sp, #48	; 0x30
 8006300:	af00      	add	r7, sp, #0
 8006302:	6178      	str	r0, [r7, #20]
 8006304:	ed87 0a04 	vstr	s0, [r7, #16]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ed93 7a00 	vldr	s14, [r3]
 800630e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006312:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	ed93 7a01 	vldr	s14, [r3, #4]
 800631c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006320:	ee27 6a27 	vmul.f32	s12, s14, s15
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	ed93 7a02 	vldr	s14, [r3, #8]
 800632a:	edd7 7a04 	vldr	s15, [r7, #16]
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006336:	eeb0 1a67 	vmov.f32	s2, s15
 800633a:	eef0 0a46 	vmov.f32	s1, s12
 800633e:	eeb0 0a66 	vmov.f32	s0, s13
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f89e 	bl	8006484 <_ZN7Vector3IfEC1Efff>
 8006348:	f107 0318 	add.w	r3, r7, #24
 800634c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006350:	ca07      	ldmia	r2, {r0, r1, r2}
 8006352:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006356:	69b9      	ldr	r1, [r7, #24]
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	ee06 1a90 	vmov	s13, r1
 8006360:	ee07 2a10 	vmov	s14, r2
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eeb0 0a66 	vmov.f32	s0, s13
 800636c:	eef0 0a47 	vmov.f32	s1, s14
 8006370:	eeb0 1a67 	vmov.f32	s2, s15
 8006374:	3730      	adds	r7, #48	; 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <_ZNK7Vector3IfEplERKS0_>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b08c      	sub	sp, #48	; 0x30
 8006380:	af00      	add	r7, sp, #0
 8006382:	6178      	str	r0, [r7, #20]
 8006384:	6139      	str	r1, [r7, #16]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	ed93 7a00 	vldr	s14, [r3]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	edd3 7a00 	vldr	s15, [r3]
 8006392:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	ed93 7a01 	vldr	s14, [r3, #4]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	edd3 7a01 	vldr	s15, [r3, #4]
 80063a2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80063b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ba:	eeb0 1a67 	vmov.f32	s2, s15
 80063be:	eef0 0a46 	vmov.f32	s1, s12
 80063c2:	eeb0 0a66 	vmov.f32	s0, s13
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f85c 	bl	8006484 <_ZN7Vector3IfEC1Efff>
 80063cc:	f107 0318 	add.w	r3, r7, #24
 80063d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80063d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80063d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	ee06 1a90 	vmov	s13, r1
 80063e4:	ee07 2a10 	vmov	s14, r2
 80063e8:	ee07 3a90 	vmov	s15, r3
 80063ec:	eeb0 0a66 	vmov.f32	s0, s13
 80063f0:	eef0 0a47 	vmov.f32	s1, s14
 80063f4:	eeb0 1a67 	vmov.f32	s2, s15
 80063f8:	3730      	adds	r7, #48	; 0x30
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop

08006400 <_ZNK7Vector3IfEmiERKS0_>:
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	6178      	str	r0, [r7, #20]
 8006408:	6139      	str	r1, [r7, #16]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	ed93 7a00 	vldr	s14, [r3]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	edd3 7a00 	vldr	s15, [r3]
 8006416:	ee77 6a67 	vsub.f32	s13, s14, s15
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	edd3 7a01 	vldr	s15, [r3, #4]
 8006426:	ee37 6a67 	vsub.f32	s12, s14, s15
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	edd3 7a02 	vldr	s15, [r3, #8]
 8006436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800643a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800643e:	eeb0 1a67 	vmov.f32	s2, s15
 8006442:	eef0 0a46 	vmov.f32	s1, s12
 8006446:	eeb0 0a66 	vmov.f32	s0, s13
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f81a 	bl	8006484 <_ZN7Vector3IfEC1Efff>
 8006450:	f107 0318 	add.w	r3, r7, #24
 8006454:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006458:	ca07      	ldmia	r2, {r0, r1, r2}
 800645a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800645e:	69b9      	ldr	r1, [r7, #24]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	ee06 1a90 	vmov	s13, r1
 8006468:	ee07 2a10 	vmov	s14, r2
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eeb0 0a66 	vmov.f32	s0, s13
 8006474:	eef0 0a47 	vmov.f32	s1, s14
 8006478:	eeb0 1a67 	vmov.f32	s2, s15
 800647c:	3730      	adds	r7, #48	; 0x30
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop

08006484 <_ZN7Vector3IfEC1Efff>:
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006490:	edc7 0a01 	vstr	s1, [r7, #4]
 8006494:	ed87 1a00 	vstr	s2, [r7]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	609a      	str	r2, [r3, #8]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <_ZN7Matrix3IfE10from_eulerEfff>:
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80064c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80064c8:	ed87 1a00 	vstr	s2, [r7]
 80064cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80064d0:	f000 fe88 	bl	80071e4 <cosf>
 80064d4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80064d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80064dc:	f000 fec2 	bl	8007264 <sinf>
 80064e0:	ed87 0a08 	vstr	s0, [r7, #32]
 80064e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80064e8:	f000 febc 	bl	8007264 <sinf>
 80064ec:	ed87 0a07 	vstr	s0, [r7, #28]
 80064f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80064f4:	f000 fe76 	bl	80071e4 <cosf>
 80064f8:	ed87 0a06 	vstr	s0, [r7, #24]
 80064fc:	ed97 0a00 	vldr	s0, [r7]
 8006500:	f000 feb0 	bl	8007264 <sinf>
 8006504:	ed87 0a05 	vstr	s0, [r7, #20]
 8006508:	ed97 0a00 	vldr	s0, [r7]
 800650c:	f000 fe6a 	bl	80071e4 <cosf>
 8006510:	ed87 0a04 	vstr	s0, [r7, #16]
 8006514:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006518:	edd7 7a04 	vldr	s15, [r7, #16]
 800651c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	edc3 7a00 	vstr	s15, [r3]
 8006526:	ed97 7a07 	vldr	s14, [r7, #28]
 800652a:	edd7 7a08 	vldr	s15, [r7, #32]
 800652e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006532:	edd7 7a04 	vldr	s15, [r7, #16]
 8006536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800653a:	edd7 6a06 	vldr	s13, [r7, #24]
 800653e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	edc3 7a01 	vstr	s15, [r3, #4]
 8006550:	ed97 7a06 	vldr	s14, [r7, #24]
 8006554:	edd7 7a08 	vldr	s15, [r7, #32]
 8006558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800655c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006564:	edd7 6a07 	vldr	s13, [r7, #28]
 8006568:	edd7 7a05 	vldr	s15, [r7, #20]
 800656c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	edc3 7a02 	vstr	s15, [r3, #8]
 800657a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800657e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	edc3 7a03 	vstr	s15, [r3, #12]
 800658c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006590:	edd7 7a08 	vldr	s15, [r7, #32]
 8006594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006598:	edd7 7a05 	vldr	s15, [r7, #20]
 800659c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80065a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80065a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	edc3 7a04 	vstr	s15, [r3, #16]
 80065b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80065ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80065be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80065c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80065d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	edc3 7a05 	vstr	s15, [r3, #20]
 80065e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80065e4:	eef1 7a67 	vneg.f32	s15, s15
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	edc3 7a06 	vstr	s15, [r3, #24]
 80065ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80065f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80065f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	edc3 7a07 	vstr	s15, [r3, #28]
 8006600:	ed97 7a06 	vldr	s14, [r7, #24]
 8006604:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	edc3 7a08 	vstr	s15, [r3, #32]
 8006612:	bf00      	nop
 8006614:	3728      	adds	r7, #40	; 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop

0800661c <_ZNK7Matrix3IfEmlERK7Vector3IfE>:
 800661c:	b580      	push	{r7, lr}
 800661e:	b08c      	sub	sp, #48	; 0x30
 8006620:	af00      	add	r7, sp, #0
 8006622:	6178      	str	r0, [r7, #20]
 8006624:	6139      	str	r1, [r7, #16]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	ed93 7a00 	vldr	s14, [r3]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	edd3 7a00 	vldr	s15, [r3]
 8006632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	edd3 6a01 	vldr	s13, [r3, #4]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	edd3 7a02 	vldr	s15, [r3, #8]
 8006656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800665a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	ed93 7a03 	vldr	s14, [r3, #12]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	edd3 7a00 	vldr	s15, [r3]
 800666a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	edd3 6a04 	vldr	s13, [r3, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	edd3 7a01 	vldr	s15, [r3, #4]
 800667a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800667e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	edd3 6a05 	vldr	s13, [r3, #20]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	edd3 7a02 	vldr	s15, [r3, #8]
 800668e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006692:	ee77 5a27 	vadd.f32	s11, s14, s15
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	ed93 7a06 	vldr	s14, [r3, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	edd3 7a00 	vldr	s15, [r3]
 80066a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80066b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	edd3 6a08 	vldr	s13, [r3, #32]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80066c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d2:	eeb0 1a67 	vmov.f32	s2, s15
 80066d6:	eef0 0a65 	vmov.f32	s1, s11
 80066da:	eeb0 0a46 	vmov.f32	s0, s12
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fed0 	bl	8006484 <_ZN7Vector3IfEC1Efff>
 80066e4:	f107 0318 	add.w	r3, r7, #24
 80066e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80066ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80066ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80066f2:	69b9      	ldr	r1, [r7, #24]
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	ee06 1a90 	vmov	s13, r1
 80066fc:	ee07 2a10 	vmov	s14, r2
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eeb0 0a66 	vmov.f32	s0, s13
 8006708:	eef0 0a47 	vmov.f32	s1, s14
 800670c:	eeb0 1a67 	vmov.f32	s2, s15
 8006710:	3730      	adds	r7, #48	; 0x30
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <_Z8inv_sqrtf>:
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006722:	edd7 7a01 	vldr	s15, [r7, #4]
 8006726:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800672a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800672e:	edc7 7a05 	vstr	s15, [r7, #20]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	f107 0310 	add.w	r3, r7, #16
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	105a      	asrs	r2, r3, #1
 8006742:	4b12      	ldr	r3, [pc, #72]	; (800678c <_Z8inv_sqrtf+0x74>)
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	f107 030c 	add.w	r3, r7, #12
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	ed97 7a04 	vldr	s14, [r7, #16]
 8006754:	edd7 7a05 	vldr	s15, [r7, #20]
 8006758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800675c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006764:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006768:	ee37 7a67 	vsub.f32	s14, s14, s15
 800676c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006774:	edc7 7a04 	vstr	s15, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eeb0 0a67 	vmov.f32	s0, s15
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	5f3759df 	.word	0x5f3759df

08006790 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8006790:	b510      	push	{r4, lr}
 8006792:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8006794:	6003      	str	r3, [r0, #0]
 8006796:	4604      	mov	r4, r0
 8006798:	f000 fc0a 	bl	8006fb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800679c:	4620      	mov	r0, r4
 800679e:	bd10      	pop	{r4, pc}
 80067a0:	08009360 	.word	0x08009360

080067a4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4604      	mov	r4, r0
 80067a8:	f7ff fff2 	bl	8006790 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80067ac:	4620      	mov	r0, r4
 80067ae:	210c      	movs	r1, #12
 80067b0:	f000 fbd4 	bl	8006f5c <_ZdlPvj>
 80067b4:	4620      	mov	r0, r4
 80067b6:	bd10      	pop	{r4, pc}

080067b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80067b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067bc:	9e06      	ldr	r6, [sp, #24]
 80067be:	4296      	cmp	r6, r2
 80067c0:	4680      	mov	r8, r0
 80067c2:	460f      	mov	r7, r1
 80067c4:	4614      	mov	r4, r2
 80067c6:	461d      	mov	r5, r3
 80067c8:	d103      	bne.n	80067d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80067ca:	4619      	mov	r1, r3
 80067cc:	f000 fc44 	bl	8007058 <_ZNKSt9type_infoeqERKS_>
 80067d0:	b958      	cbnz	r0, 80067ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80067d2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80067d6:	6803      	ldr	r3, [r0, #0]
 80067d8:	9606      	str	r6, [sp, #24]
 80067da:	6a1e      	ldr	r6, [r3, #32]
 80067dc:	4622      	mov	r2, r4
 80067de:	462b      	mov	r3, r5
 80067e0:	4639      	mov	r1, r7
 80067e2:	46b4      	mov	ip, r6
 80067e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067e8:	4760      	bx	ip
 80067ea:	2006      	movs	r0, #6
 80067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080067f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80067f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	460e      	mov	r6, r1
 80067f6:	4619      	mov	r1, r3
 80067f8:	4683      	mov	fp, r0
 80067fa:	4617      	mov	r7, r2
 80067fc:	4699      	mov	r9, r3
 80067fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006800:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006804:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006808:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800680a:	f000 fc25 	bl	8007058 <_ZNKSt9type_infoeqERKS_>
 800680e:	b190      	cbz	r0, 8006836 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8006810:	2e00      	cmp	r6, #0
 8006812:	602c      	str	r4, [r5, #0]
 8006814:	712f      	strb	r7, [r5, #4]
 8006816:	db09      	blt.n	800682c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8006818:	4434      	add	r4, r6
 800681a:	45a0      	cmp	r8, r4
 800681c:	bf0c      	ite	eq
 800681e:	2406      	moveq	r4, #6
 8006820:	2401      	movne	r4, #1
 8006822:	71ac      	strb	r4, [r5, #6]
 8006824:	2000      	movs	r0, #0
 8006826:	b001      	add	sp, #4
 8006828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682c:	3602      	adds	r6, #2
 800682e:	d1f9      	bne.n	8006824 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006830:	2301      	movs	r3, #1
 8006832:	71ab      	strb	r3, [r5, #6]
 8006834:	e7f6      	b.n	8006824 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006836:	4544      	cmp	r4, r8
 8006838:	d104      	bne.n	8006844 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800683a:	4651      	mov	r1, sl
 800683c:	4658      	mov	r0, fp
 800683e:	f000 fc0b 	bl	8007058 <_ZNKSt9type_infoeqERKS_>
 8006842:	b988      	cbnz	r0, 8006868 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8006844:	f8db 0008 	ldr.w	r0, [fp, #8]
 8006848:	6803      	ldr	r3, [r0, #0]
 800684a:	950d      	str	r5, [sp, #52]	; 0x34
 800684c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006850:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006854:	940a      	str	r4, [sp, #40]	; 0x28
 8006856:	69dc      	ldr	r4, [r3, #28]
 8006858:	463a      	mov	r2, r7
 800685a:	464b      	mov	r3, r9
 800685c:	4631      	mov	r1, r6
 800685e:	46a4      	mov	ip, r4
 8006860:	b001      	add	sp, #4
 8006862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006866:	4760      	bx	ip
 8006868:	716f      	strb	r7, [r5, #5]
 800686a:	e7db      	b.n	8006824 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0800686c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006870:	4604      	mov	r4, r0
 8006872:	460d      	mov	r5, r1
 8006874:	4616      	mov	r6, r2
 8006876:	461f      	mov	r7, r3
 8006878:	f000 fbae 	bl	8006fd8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800687c:	b948      	cbnz	r0, 8006892 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800687e:	68a0      	ldr	r0, [r4, #8]
 8006880:	6803      	ldr	r3, [r0, #0]
 8006882:	699c      	ldr	r4, [r3, #24]
 8006884:	4632      	mov	r2, r6
 8006886:	463b      	mov	r3, r7
 8006888:	4629      	mov	r1, r5
 800688a:	46a4      	mov	ip, r4
 800688c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	4760      	bx	ip
 8006892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006896 <_ZdlPv>:
 8006896:	f001 bbc9 	b.w	800802c <free>

0800689a <__aeabi_atexit>:
 800689a:	460b      	mov	r3, r1
 800689c:	4601      	mov	r1, r0
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 bb91 	b.w	8007fc6 <__cxa_atexit>

080068a4 <_Znwj>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	2800      	cmp	r0, #0
 80068a8:	bf14      	ite	ne
 80068aa:	4604      	movne	r4, r0
 80068ac:	2401      	moveq	r4, #1
 80068ae:	4620      	mov	r0, r4
 80068b0:	f001 fbb4 	bl	800801c <malloc>
 80068b4:	b930      	cbnz	r0, 80068c4 <_Znwj+0x20>
 80068b6:	f000 fb53 	bl	8006f60 <_ZSt15get_new_handlerv>
 80068ba:	b908      	cbnz	r0, 80068c0 <_Znwj+0x1c>
 80068bc:	f001 fb7c 	bl	8007fb8 <abort>
 80068c0:	4780      	blx	r0
 80068c2:	e7f4      	b.n	80068ae <_Znwj+0xa>
 80068c4:	bd10      	pop	{r4, pc}

080068c6 <__cxa_end_cleanup>:
 80068c6:	b41e      	push	{r1, r2, r3, r4}
 80068c8:	f000 f89b 	bl	8006a02 <__gnu_end_cleanup>
 80068cc:	bc1e      	pop	{r1, r2, r3, r4}
 80068ce:	f7fa fba7 	bl	8001020 <_Unwind_Resume>

080068d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80068d2:	7803      	ldrb	r3, [r0, #0]
 80068d4:	2b47      	cmp	r3, #71	; 0x47
 80068d6:	d117      	bne.n	8006908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80068d8:	7843      	ldrb	r3, [r0, #1]
 80068da:	2b4e      	cmp	r3, #78	; 0x4e
 80068dc:	d114      	bne.n	8006908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80068de:	7883      	ldrb	r3, [r0, #2]
 80068e0:	2b55      	cmp	r3, #85	; 0x55
 80068e2:	d111      	bne.n	8006908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80068e4:	78c3      	ldrb	r3, [r0, #3]
 80068e6:	2b43      	cmp	r3, #67	; 0x43
 80068e8:	d10e      	bne.n	8006908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80068ea:	7903      	ldrb	r3, [r0, #4]
 80068ec:	2b43      	cmp	r3, #67	; 0x43
 80068ee:	d10b      	bne.n	8006908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80068f0:	7943      	ldrb	r3, [r0, #5]
 80068f2:	2b2b      	cmp	r3, #43	; 0x2b
 80068f4:	d108      	bne.n	8006908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80068f6:	7983      	ldrb	r3, [r0, #6]
 80068f8:	2b2b      	cmp	r3, #43	; 0x2b
 80068fa:	d105      	bne.n	8006908 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80068fc:	79c0      	ldrb	r0, [r0, #7]
 80068fe:	2801      	cmp	r0, #1
 8006900:	bf8c      	ite	hi
 8006902:	2000      	movhi	r0, #0
 8006904:	2001      	movls	r0, #1
 8006906:	4770      	bx	lr
 8006908:	2000      	movs	r0, #0
 800690a:	4770      	bx	lr

0800690c <__cxa_type_match>:
 800690c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006910:	461e      	mov	r6, r3
 8006912:	7803      	ldrb	r3, [r0, #0]
 8006914:	2b47      	cmp	r3, #71	; 0x47
 8006916:	460d      	mov	r5, r1
 8006918:	4602      	mov	r2, r0
 800691a:	79c1      	ldrb	r1, [r0, #7]
 800691c:	d148      	bne.n	80069b0 <__cxa_type_match+0xa4>
 800691e:	7843      	ldrb	r3, [r0, #1]
 8006920:	2b4e      	cmp	r3, #78	; 0x4e
 8006922:	d145      	bne.n	80069b0 <__cxa_type_match+0xa4>
 8006924:	7883      	ldrb	r3, [r0, #2]
 8006926:	2b55      	cmp	r3, #85	; 0x55
 8006928:	d142      	bne.n	80069b0 <__cxa_type_match+0xa4>
 800692a:	78c3      	ldrb	r3, [r0, #3]
 800692c:	2b43      	cmp	r3, #67	; 0x43
 800692e:	d13f      	bne.n	80069b0 <__cxa_type_match+0xa4>
 8006930:	7903      	ldrb	r3, [r0, #4]
 8006932:	2b46      	cmp	r3, #70	; 0x46
 8006934:	d13c      	bne.n	80069b0 <__cxa_type_match+0xa4>
 8006936:	7943      	ldrb	r3, [r0, #5]
 8006938:	2b4f      	cmp	r3, #79	; 0x4f
 800693a:	d139      	bne.n	80069b0 <__cxa_type_match+0xa4>
 800693c:	7983      	ldrb	r3, [r0, #6]
 800693e:	2b52      	cmp	r3, #82	; 0x52
 8006940:	d136      	bne.n	80069b0 <__cxa_type_match+0xa4>
 8006942:	2900      	cmp	r1, #0
 8006944:	d134      	bne.n	80069b0 <__cxa_type_match+0xa4>
 8006946:	2301      	movs	r3, #1
 8006948:	4608      	mov	r0, r1
 800694a:	2400      	movs	r4, #0
 800694c:	9401      	str	r4, [sp, #4]
 800694e:	bb3b      	cbnz	r3, 80069a0 <__cxa_type_match+0x94>
 8006950:	bb40      	cbnz	r0, 80069a4 <__cxa_type_match+0x98>
 8006952:	2901      	cmp	r1, #1
 8006954:	bf0a      	itet	eq
 8006956:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800695a:	f1a2 0320 	subne.w	r3, r2, #32
 800695e:	3b78      	subeq	r3, #120	; 0x78
 8006960:	2901      	cmp	r1, #1
 8006962:	bf08      	it	eq
 8006964:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8006968:	681c      	ldr	r4, [r3, #0]
 800696a:	bf18      	it	ne
 800696c:	3258      	addne	r2, #88	; 0x58
 800696e:	9201      	str	r2, [sp, #4]
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	4620      	mov	r0, r4
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	4798      	blx	r3
 8006978:	b1b0      	cbz	r0, 80069a8 <__cxa_type_match+0x9c>
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	2702      	movs	r7, #2
 8006982:	682b      	ldr	r3, [r5, #0]
 8006984:	aa01      	add	r2, sp, #4
 8006986:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800698a:	4621      	mov	r1, r4
 800698c:	2301      	movs	r3, #1
 800698e:	4628      	mov	r0, r5
 8006990:	47c0      	blx	r8
 8006992:	b158      	cbz	r0, 80069ac <__cxa_type_match+0xa0>
 8006994:	9b01      	ldr	r3, [sp, #4]
 8006996:	6033      	str	r3, [r6, #0]
 8006998:	4638      	mov	r0, r7
 800699a:	b002      	add	sp, #8
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	4c07      	ldr	r4, [pc, #28]	; (80069c0 <__cxa_type_match+0xb4>)
 80069a2:	e7e5      	b.n	8006970 <__cxa_type_match+0x64>
 80069a4:	4c07      	ldr	r4, [pc, #28]	; (80069c4 <__cxa_type_match+0xb8>)
 80069a6:	e7e3      	b.n	8006970 <__cxa_type_match+0x64>
 80069a8:	2701      	movs	r7, #1
 80069aa:	e7ea      	b.n	8006982 <__cxa_type_match+0x76>
 80069ac:	4607      	mov	r7, r0
 80069ae:	e7f3      	b.n	8006998 <__cxa_type_match+0x8c>
 80069b0:	4610      	mov	r0, r2
 80069b2:	f7ff ff8e 	bl	80068d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80069b6:	f080 0001 	eor.w	r0, r0, #1
 80069ba:	b2c0      	uxtb	r0, r0
 80069bc:	2300      	movs	r3, #0
 80069be:	e7c4      	b.n	800694a <__cxa_type_match+0x3e>
 80069c0:	080093f8 	.word	0x080093f8
 80069c4:	08009400 	.word	0x08009400

080069c8 <__cxa_begin_cleanup>:
 80069c8:	b510      	push	{r4, lr}
 80069ca:	4604      	mov	r4, r0
 80069cc:	f000 fc06 	bl	80071dc <__cxa_get_globals>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4620      	mov	r0, r4
 80069d4:	f1a4 0120 	sub.w	r1, r4, #32
 80069d8:	f7ff ff7b 	bl	80068d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80069dc:	b160      	cbz	r0, 80069f8 <__cxa_begin_cleanup+0x30>
 80069de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80069e2:	3301      	adds	r3, #1
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80069ea:	d103      	bne.n	80069f4 <__cxa_begin_cleanup+0x2c>
 80069ec:	6893      	ldr	r3, [r2, #8]
 80069ee:	f844 3c08 	str.w	r3, [r4, #-8]
 80069f2:	6091      	str	r1, [r2, #8]
 80069f4:	2001      	movs	r0, #1
 80069f6:	bd10      	pop	{r4, pc}
 80069f8:	6893      	ldr	r3, [r2, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f9      	beq.n	80069f2 <__cxa_begin_cleanup+0x2a>
 80069fe:	f000 fbd5 	bl	80071ac <_ZSt9terminatev>

08006a02 <__gnu_end_cleanup>:
 8006a02:	b510      	push	{r4, lr}
 8006a04:	f000 fbea 	bl	80071dc <__cxa_get_globals>
 8006a08:	6882      	ldr	r2, [r0, #8]
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	b90a      	cbnz	r2, 8006a12 <__gnu_end_cleanup+0x10>
 8006a0e:	f000 fbcd 	bl	80071ac <_ZSt9terminatev>
 8006a12:	f102 0420 	add.w	r4, r2, #32
 8006a16:	4620      	mov	r0, r4
 8006a18:	f7ff ff5b 	bl	80068d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006a1c:	b140      	cbz	r0, 8006a30 <__gnu_end_cleanup+0x2e>
 8006a1e:	69d3      	ldr	r3, [r2, #28]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	61d3      	str	r3, [r2, #28]
 8006a24:	b913      	cbnz	r3, 8006a2c <__gnu_end_cleanup+0x2a>
 8006a26:	6990      	ldr	r0, [r2, #24]
 8006a28:	6088      	str	r0, [r1, #8]
 8006a2a:	6193      	str	r3, [r2, #24]
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	bd10      	pop	{r4, pc}
 8006a30:	6088      	str	r0, [r1, #8]
 8006a32:	e7fb      	b.n	8006a2c <__gnu_end_cleanup+0x2a>

08006a34 <_ZL12read_uleb128PKhPm>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	2300      	movs	r3, #0
 8006a38:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8006a3c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8006a40:	f810 5b01 	ldrb.w	r5, [r0], #1
 8006a44:	1994      	adds	r4, r2, r6
 8006a46:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8006a4a:	40a2      	lsls	r2, r4
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	062a      	lsls	r2, r5, #24
 8006a50:	d4f4      	bmi.n	8006a3c <_ZL12read_uleb128PKhPm+0x8>
 8006a52:	600b      	str	r3, [r1, #0]
 8006a54:	bd70      	pop	{r4, r5, r6, pc}

08006a56 <_ZL12read_sleb128PKhPl>:
 8006a56:	b530      	push	{r4, r5, lr}
 8006a58:	2300      	movs	r3, #0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006a60:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8006a64:	4095      	lsls	r5, r2
 8006a66:	432b      	orrs	r3, r5
 8006a68:	0625      	lsls	r5, r4, #24
 8006a6a:	f102 0207 	add.w	r2, r2, #7
 8006a6e:	d4f5      	bmi.n	8006a5c <_ZL12read_sleb128PKhPl+0x6>
 8006a70:	2a1f      	cmp	r2, #31
 8006a72:	d806      	bhi.n	8006a82 <_ZL12read_sleb128PKhPl+0x2c>
 8006a74:	0664      	lsls	r4, r4, #25
 8006a76:	bf42      	ittt	mi
 8006a78:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8006a7c:	fa04 f202 	lslmi.w	r2, r4, r2
 8006a80:	4313      	orrmi	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
 8006a84:	bd30      	pop	{r4, r5, pc}

08006a86 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8006a86:	2850      	cmp	r0, #80	; 0x50
 8006a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	460e      	mov	r6, r1
 8006a8e:	4614      	mov	r4, r2
 8006a90:	461f      	mov	r7, r3
 8006a92:	d107      	bne.n	8006aa4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8006a94:	1cd0      	adds	r0, r2, #3
 8006a96:	f020 0003 	bic.w	r0, r0, #3
 8006a9a:	f850 3b04 	ldr.w	r3, [r0], #4
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	b003      	add	sp, #12
 8006aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa4:	f000 030f 	and.w	r3, r0, #15
 8006aa8:	2b0c      	cmp	r3, #12
 8006aaa:	d82e      	bhi.n	8006b0a <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8006aac:	e8df f003 	tbb	[pc, r3]
 8006ab0:	251d0725 	.word	0x251d0725
 8006ab4:	2d2d2d29 	.word	0x2d2d2d29
 8006ab8:	2521182d 	.word	0x2521182d
 8006abc:	29          	.byte	0x29
 8006abd:	00          	.byte	0x00
 8006abe:	a901      	add	r1, sp, #4
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff ffb7 	bl	8006a34 <_ZL12read_uleb128PKhPm>
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0e8      	beq.n	8006a9e <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8006acc:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8006ad0:	2a10      	cmp	r2, #16
 8006ad2:	bf08      	it	eq
 8006ad4:	4626      	moveq	r6, r4
 8006ad6:	4433      	add	r3, r6
 8006ad8:	062a      	lsls	r2, r5, #24
 8006ada:	bf48      	it	mi
 8006adc:	681b      	ldrmi	r3, [r3, #0]
 8006ade:	e7de      	b.n	8006a9e <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8006ae0:	a901      	add	r1, sp, #4
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f7ff ffb7 	bl	8006a56 <_ZL12read_sleb128PKhPl>
 8006ae8:	e7ed      	b.n	8006ac6 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8006aea:	4620      	mov	r0, r4
 8006aec:	f830 3b02 	ldrh.w	r3, [r0], #2
 8006af0:	e7ea      	b.n	8006ac8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8006af2:	4620      	mov	r0, r4
 8006af4:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8006af8:	e7e6      	b.n	8006ac8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8006afa:	4620      	mov	r0, r4
 8006afc:	f850 3b04 	ldr.w	r3, [r0], #4
 8006b00:	e7e2      	b.n	8006ac8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8006b02:	4620      	mov	r0, r4
 8006b04:	f850 3b08 	ldr.w	r3, [r0], #8
 8006b08:	e7de      	b.n	8006ac8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8006b0a:	f001 fa55 	bl	8007fb8 <abort>

08006b0e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8006b0e:	b508      	push	{r3, lr}
 8006b10:	4603      	mov	r3, r0
 8006b12:	2bff      	cmp	r3, #255	; 0xff
 8006b14:	4608      	mov	r0, r1
 8006b16:	d007      	beq.n	8006b28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d00d      	beq.n	8006b3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8006b20:	d804      	bhi.n	8006b2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8006b22:	b10b      	cbz	r3, 8006b28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d107      	bne.n	8006b38 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8006b28:	2000      	movs	r0, #0
 8006b2a:	bd08      	pop	{r3, pc}
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d00d      	beq.n	8006b4c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8006b30:	2b50      	cmp	r3, #80	; 0x50
 8006b32:	d0f9      	beq.n	8006b28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006b34:	2b30      	cmp	r3, #48	; 0x30
 8006b36:	d005      	beq.n	8006b44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8006b38:	f001 fa3e 	bl	8007fb8 <abort>
 8006b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b40:	f7fa bc6e 	b.w	8001420 <_Unwind_GetTextRelBase>
 8006b44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b48:	f7fa bc6e 	b.w	8001428 <_Unwind_GetDataRelBase>
 8006b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b50:	f7fa bc56 	b.w	8001400 <_Unwind_GetRegionStart>

08006b54 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	460c      	mov	r4, r1
 8006b58:	4601      	mov	r1, r0
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	461e      	mov	r6, r3
 8006b60:	f7ff ffd5 	bl	8006b0e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006b64:	4633      	mov	r3, r6
 8006b66:	462a      	mov	r2, r5
 8006b68:	4601      	mov	r1, r0
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b70:	f7ff bf89 	b.w	8006a86 <_ZL28read_encoded_value_with_basehjPKhPj>

08006b74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8006b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b76:	460e      	mov	r6, r1
 8006b78:	4614      	mov	r4, r2
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	b328      	cbz	r0, 8006bca <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8006b7e:	f7fa fc3f 	bl	8001400 <_Unwind_GetRegionStart>
 8006b82:	6020      	str	r0, [r4, #0]
 8006b84:	7831      	ldrb	r1, [r6, #0]
 8006b86:	29ff      	cmp	r1, #255	; 0xff
 8006b88:	f106 0201 	add.w	r2, r6, #1
 8006b8c:	d01e      	beq.n	8006bcc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8006b8e:	1d23      	adds	r3, r4, #4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f7ff ffdf 	bl	8006b54 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006b96:	4602      	mov	r2, r0
 8006b98:	7813      	ldrb	r3, [r2, #0]
 8006b9a:	7523      	strb	r3, [r4, #20]
 8006b9c:	2bff      	cmp	r3, #255	; 0xff
 8006b9e:	f102 0001 	add.w	r0, r2, #1
 8006ba2:	d015      	beq.n	8006bd0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	7523      	strb	r3, [r4, #20]
 8006ba8:	a901      	add	r1, sp, #4
 8006baa:	f7ff ff43 	bl	8006a34 <_ZL12read_uleb128PKhPm>
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	4403      	add	r3, r0
 8006bb2:	60e3      	str	r3, [r4, #12]
 8006bb4:	7803      	ldrb	r3, [r0, #0]
 8006bb6:	7563      	strb	r3, [r4, #21]
 8006bb8:	a901      	add	r1, sp, #4
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f7ff ff3a 	bl	8006a34 <_ZL12read_uleb128PKhPm>
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	4403      	add	r3, r0
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	b002      	add	sp, #8
 8006bc8:	bd70      	pop	{r4, r5, r6, pc}
 8006bca:	e7da      	b.n	8006b82 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8006bcc:	6060      	str	r0, [r4, #4]
 8006bce:	e7e3      	b.n	8006b98 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e7ee      	b.n	8006bb2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08006bd4 <_Unwind_GetGR>:
 8006bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bd6:	ab03      	add	r3, sp, #12
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	460a      	mov	r2, r1
 8006bde:	4619      	mov	r1, r3
 8006be0:	f7f9 fe78 	bl	80008d4 <_Unwind_VRS_Get>
 8006be4:	9803      	ldr	r0, [sp, #12]
 8006be6:	b005      	add	sp, #20
 8006be8:	f85d fb04 	ldr.w	pc, [sp], #4

08006bec <__gxx_personality_v0>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	b091      	sub	sp, #68	; 0x44
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	f000 0303 	and.w	r3, r0, #3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	4616      	mov	r6, r2
 8006c02:	d011      	beq.n	8006c28 <__gxx_personality_v0+0x3c>
 8006c04:	d303      	bcc.n	8006c0e <__gxx_personality_v0+0x22>
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d003      	beq.n	8006c12 <__gxx_personality_v0+0x26>
 8006c0a:	f001 f9d5 	bl	8007fb8 <abort>
 8006c0e:	0702      	lsls	r2, r0, #28
 8006c10:	d51a      	bpl.n	8006c48 <__gxx_personality_v0+0x5c>
 8006c12:	4631      	mov	r1, r6
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7fa fbdf 	bl	80013d8 <__gnu_unwind_frame>
 8006c1a:	b118      	cbz	r0, 8006c24 <__gxx_personality_v0+0x38>
 8006c1c:	2009      	movs	r0, #9
 8006c1e:	b011      	add	sp, #68	; 0x44
 8006c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c24:	2008      	movs	r0, #8
 8006c26:	e7fa      	b.n	8006c1e <__gxx_personality_v0+0x32>
 8006c28:	f000 0508 	and.w	r5, r0, #8
 8006c2c:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8006c30:	bb85      	cbnz	r5, 8006c94 <__gxx_personality_v0+0xa8>
 8006c32:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8006c36:	4610      	mov	r0, r2
 8006c38:	210d      	movs	r1, #13
 8006c3a:	f7ff ffcb 	bl	8006bd4 <_Unwind_GetGR>
 8006c3e:	4581      	cmp	r9, r0
 8006c40:	f040 8140 	bne.w	8006ec4 <__gxx_personality_v0+0x2d8>
 8006c44:	2506      	movs	r5, #6
 8006c46:	e000      	b.n	8006c4a <__gxx_personality_v0+0x5e>
 8006c48:	2501      	movs	r5, #1
 8006c4a:	ab10      	add	r3, sp, #64	; 0x40
 8006c4c:	f007 0708 	and.w	r7, r7, #8
 8006c50:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2300      	movs	r3, #0
 8006c58:	433d      	orrs	r5, r7
 8006c5a:	220c      	movs	r2, #12
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f7f9 fe5e 	bl	8000920 <_Unwind_VRS_Set>
 8006c64:	2d06      	cmp	r5, #6
 8006c66:	f040 8139 	bne.w	8006edc <__gxx_personality_v0+0x2f0>
 8006c6a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8006c6e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006c70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c72:	f1b8 0f00 	cmp.w	r8, #0
 8006c76:	bf0c      	ite	eq
 8006c78:	f04f 0a01 	moveq.w	sl, #1
 8006c7c:	f04f 0a03 	movne.w	sl, #3
 8006c80:	f015 0508 	ands.w	r5, r5, #8
 8006c84:	f000 80ce 	beq.w	8006e24 <__gxx_personality_v0+0x238>
 8006c88:	f1ba 0f01 	cmp.w	sl, #1
 8006c8c:	f040 80c6 	bne.w	8006e1c <__gxx_personality_v0+0x230>
 8006c90:	f000 fa8c 	bl	80071ac <_ZSt9terminatev>
 8006c94:	2502      	movs	r5, #2
 8006c96:	e7d8      	b.n	8006c4a <__gxx_personality_v0+0x5e>
 8006c98:	9a07      	ldr	r2, [sp, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	429f      	cmp	r7, r3
 8006c9e:	f080 8137 	bcs.w	8006f10 <__gxx_personality_v0+0x324>
 8006ca2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ca6:	f1b8 0f00 	cmp.w	r8, #0
 8006caa:	d001      	beq.n	8006cb0 <__gxx_personality_v0+0xc4>
 8006cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cae:	4498      	add	r8, r3
 8006cb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cb2:	b117      	cbz	r7, 8006cba <__gxx_personality_v0+0xce>
 8006cb4:	1e78      	subs	r0, r7, #1
 8006cb6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006cb8:	4407      	add	r7, r0
 8006cba:	f1b8 0f00 	cmp.w	r8, #0
 8006cbe:	d0a8      	beq.n	8006c12 <__gxx_personality_v0+0x26>
 8006cc0:	2f00      	cmp	r7, #0
 8006cc2:	f000 80a1 	beq.w	8006e08 <__gxx_personality_v0+0x21c>
 8006cc6:	f015 0308 	ands.w	r3, r5, #8
 8006cca:	9302      	str	r3, [sp, #8]
 8006ccc:	d036      	beq.n	8006d3c <__gxx_personality_v0+0x150>
 8006cce:	2347      	movs	r3, #71	; 0x47
 8006cd0:	7023      	strb	r3, [r4, #0]
 8006cd2:	234e      	movs	r3, #78	; 0x4e
 8006cd4:	7063      	strb	r3, [r4, #1]
 8006cd6:	2355      	movs	r3, #85	; 0x55
 8006cd8:	70a3      	strb	r3, [r4, #2]
 8006cda:	2343      	movs	r3, #67	; 0x43
 8006cdc:	70e3      	strb	r3, [r4, #3]
 8006cde:	2346      	movs	r3, #70	; 0x46
 8006ce0:	7123      	strb	r3, [r4, #4]
 8006ce2:	234f      	movs	r3, #79	; 0x4f
 8006ce4:	7163      	strb	r3, [r4, #5]
 8006ce6:	2352      	movs	r3, #82	; 0x52
 8006ce8:	71a3      	strb	r3, [r4, #6]
 8006cea:	2300      	movs	r3, #0
 8006cec:	71e3      	strb	r3, [r4, #7]
 8006cee:	f04f 0a00 	mov.w	sl, #0
 8006cf2:	f06f 0b03 	mvn.w	fp, #3
 8006cf6:	a907      	add	r1, sp, #28
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff feac 	bl	8006a56 <_ZL12read_sleb128PKhPl>
 8006cfe:	a908      	add	r1, sp, #32
 8006d00:	9003      	str	r0, [sp, #12]
 8006d02:	f7ff fea8 	bl	8006a56 <_ZL12read_sleb128PKhPl>
 8006d06:	9a07      	ldr	r2, [sp, #28]
 8006d08:	2a00      	cmp	r2, #0
 8006d0a:	d076      	beq.n	8006dfa <__gxx_personality_v0+0x20e>
 8006d0c:	dd3d      	ble.n	8006d8a <__gxx_personality_v0+0x19e>
 8006d0e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006d12:	28ff      	cmp	r0, #255	; 0xff
 8006d14:	d035      	beq.n	8006d82 <__gxx_personality_v0+0x196>
 8006d16:	f000 0307 	and.w	r3, r0, #7
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	f63f af75 	bhi.w	8006c0a <__gxx_personality_v0+0x1e>
 8006d20:	a101      	add	r1, pc, #4	; (adr r1, 8006d28 <__gxx_personality_v0+0x13c>)
 8006d22:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d87 	.word	0x08006d87
 8006d2c:	08006c0b 	.word	0x08006c0b
 8006d30:	08006d4f 	.word	0x08006d4f
 8006d34:	08006d87 	.word	0x08006d87
 8006d38:	08006d7f 	.word	0x08006d7f
 8006d3c:	79e3      	ldrb	r3, [r4, #7]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	bf0c      	ite	eq
 8006d42:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8006d46:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	e7cf      	b.n	8006cee <__gxx_personality_v0+0x102>
 8006d4e:	2702      	movs	r7, #2
 8006d50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d52:	ab09      	add	r3, sp, #36	; 0x24
 8006d54:	fb07 1212 	mls	r2, r7, r2, r1
 8006d58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d5a:	f7ff fe94 	bl	8006a86 <_ZL28read_encoded_value_with_basehjPKhPj>
 8006d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d60:	b369      	cbz	r1, 8006dbe <__gxx_personality_v0+0x1d2>
 8006d62:	b12c      	cbz	r4, 8006d70 <__gxx_personality_v0+0x184>
 8006d64:	ab04      	add	r3, sp, #16
 8006d66:	2200      	movs	r2, #0
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f7ff fdcf 	bl	800690c <__cxa_type_match>
 8006d6e:	bb30      	cbnz	r0, 8006dbe <__gxx_personality_v0+0x1d2>
 8006d70:	9f08      	ldr	r7, [sp, #32]
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	d044      	beq.n	8006e00 <__gxx_personality_v0+0x214>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	443b      	add	r3, r7
 8006d7a:	461f      	mov	r7, r3
 8006d7c:	e7bb      	b.n	8006cf6 <__gxx_personality_v0+0x10a>
 8006d7e:	2708      	movs	r7, #8
 8006d80:	e7e6      	b.n	8006d50 <__gxx_personality_v0+0x164>
 8006d82:	2700      	movs	r7, #0
 8006d84:	e7e4      	b.n	8006d50 <__gxx_personality_v0+0x164>
 8006d86:	2704      	movs	r7, #4
 8006d88:	e7e2      	b.n	8006d50 <__gxx_personality_v0+0x164>
 8006d8a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	b36c      	cbz	r4, 8006dec <__gxx_personality_v0+0x200>
 8006d90:	9b02      	ldr	r3, [sp, #8]
 8006d92:	bb5b      	cbnz	r3, 8006dec <__gxx_personality_v0+0x200>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	9306      	str	r3, [sp, #24]
 8006d98:	fb0b 7202 	mla	r2, fp, r2, r7
 8006d9c:	1f17      	subs	r7, r2, #4
 8006d9e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006da2:	b141      	cbz	r1, 8006db6 <__gxx_personality_v0+0x1ca>
 8006da4:	ab06      	add	r3, sp, #24
 8006da6:	2200      	movs	r2, #0
 8006da8:	4439      	add	r1, r7
 8006daa:	4620      	mov	r0, r4
 8006dac:	f7ff fdae 	bl	800690c <__cxa_type_match>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d0f4      	beq.n	8006d9e <__gxx_personality_v0+0x1b2>
 8006db4:	2101      	movs	r1, #1
 8006db6:	f081 0101 	eor.w	r1, r1, #1
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	d0d8      	beq.n	8006d70 <__gxx_personality_v0+0x184>
 8006dbe:	9f07      	ldr	r7, [sp, #28]
 8006dc0:	f04f 0a03 	mov.w	sl, #3
 8006dc4:	07eb      	lsls	r3, r5, #31
 8006dc6:	d527      	bpl.n	8006e18 <__gxx_personality_v0+0x22c>
 8006dc8:	f1ba 0f02 	cmp.w	sl, #2
 8006dcc:	f43f af21 	beq.w	8006c12 <__gxx_personality_v0+0x26>
 8006dd0:	210d      	movs	r1, #13
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	9d04      	ldr	r5, [sp, #16]
 8006dd6:	f7ff fefd 	bl	8006bd4 <_Unwind_GetGR>
 8006dda:	6265      	str	r5, [r4, #36]	; 0x24
 8006ddc:	6220      	str	r0, [r4, #32]
 8006dde:	62a7      	str	r7, [r4, #40]	; 0x28
 8006de0:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8006de4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8006de8:	2006      	movs	r0, #6
 8006dea:	e718      	b.n	8006c1e <__gxx_personality_v0+0x32>
 8006dec:	fb0b f202 	mul.w	r2, fp, r2
 8006df0:	58b9      	ldr	r1, [r7, r2]
 8006df2:	fab1 f181 	clz	r1, r1
 8006df6:	0949      	lsrs	r1, r1, #5
 8006df8:	e7df      	b.n	8006dba <__gxx_personality_v0+0x1ce>
 8006dfa:	f04f 0a01 	mov.w	sl, #1
 8006dfe:	e7b7      	b.n	8006d70 <__gxx_personality_v0+0x184>
 8006e00:	f1ba 0f00 	cmp.w	sl, #0
 8006e04:	f43f af05 	beq.w	8006c12 <__gxx_personality_v0+0x26>
 8006e08:	f04f 0a02 	mov.w	sl, #2
 8006e0c:	e7da      	b.n	8006dc4 <__gxx_personality_v0+0x1d8>
 8006e0e:	2700      	movs	r7, #0
 8006e10:	46b8      	mov	r8, r7
 8006e12:	f04f 0a01 	mov.w	sl, #1
 8006e16:	e7d5      	b.n	8006dc4 <__gxx_personality_v0+0x1d8>
 8006e18:	4649      	mov	r1, r9
 8006e1a:	e731      	b.n	8006c80 <__gxx_personality_v0+0x94>
 8006e1c:	2f00      	cmp	r7, #0
 8006e1e:	da23      	bge.n	8006e68 <__gxx_personality_v0+0x27c>
 8006e20:	f000 f9d6 	bl	80071d0 <_ZSt10unexpectedv>
 8006e24:	f1ba 0f01 	cmp.w	sl, #1
 8006e28:	d102      	bne.n	8006e30 <__gxx_personality_v0+0x244>
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 f947 	bl	80070be <__cxa_call_terminate>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	da19      	bge.n	8006e68 <__gxx_personality_v0+0x27c>
 8006e34:	aa0a      	add	r2, sp, #40	; 0x28
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff fe9c 	bl	8006b74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006e42:	f7ff fe64 	bl	8006b0e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006e46:	f06f 0303 	mvn.w	r3, #3
 8006e4a:	fb07 3203 	mla	r2, r7, r3, r3
 8006e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e50:	900c      	str	r0, [sp, #48]	; 0x30
 8006e52:	4413      	add	r3, r2
 8006e54:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006e58:	b10a      	cbz	r2, 8006e5e <__gxx_personality_v0+0x272>
 8006e5a:	3501      	adds	r5, #1
 8006e5c:	e7fa      	b.n	8006e54 <__gxx_personality_v0+0x268>
 8006e5e:	2204      	movs	r2, #4
 8006e60:	62a5      	str	r5, [r4, #40]	; 0x28
 8006e62:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006e64:	6322      	str	r2, [r4, #48]	; 0x30
 8006e66:	6363      	str	r3, [r4, #52]	; 0x34
 8006e68:	ab10      	add	r3, sp, #64	; 0x40
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	461a      	mov	r2, r3
 8006e76:	4619      	mov	r1, r3
 8006e78:	f7f9 fd52 	bl	8000920 <_Unwind_VRS_Set>
 8006e7c:	ab10      	add	r3, sp, #64	; 0x40
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f843 7d20 	str.w	r7, [r3, #-32]!
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	2300      	movs	r3, #0
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7f9 fd48 	bl	8000920 <_Unwind_VRS_Set>
 8006e90:	210f      	movs	r1, #15
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff fe9e 	bl	8006bd4 <_Unwind_GetGR>
 8006e98:	ab10      	add	r3, sp, #64	; 0x40
 8006e9a:	f000 0001 	and.w	r0, r0, #1
 8006e9e:	ea40 0008 	orr.w	r0, r0, r8
 8006ea2:	f843 0d24 	str.w	r0, [r3, #-36]!
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	220f      	movs	r2, #15
 8006eac:	4619      	mov	r1, r3
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7f9 fd36 	bl	8000920 <_Unwind_VRS_Set>
 8006eb4:	f1ba 0f02 	cmp.w	sl, #2
 8006eb8:	d102      	bne.n	8006ec0 <__gxx_personality_v0+0x2d4>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff fd84 	bl	80069c8 <__cxa_begin_cleanup>
 8006ec0:	2007      	movs	r0, #7
 8006ec2:	e6ac      	b.n	8006c1e <__gxx_personality_v0+0x32>
 8006ec4:	aa10      	add	r2, sp, #64	; 0x40
 8006ec6:	4643      	mov	r3, r8
 8006ec8:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8006ecc:	4641      	mov	r1, r8
 8006ece:	9200      	str	r2, [sp, #0]
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	220c      	movs	r2, #12
 8006ed4:	f045 0502 	orr.w	r5, r5, #2
 8006ed8:	f7f9 fd22 	bl	8000920 <_Unwind_VRS_Set>
 8006edc:	4630      	mov	r0, r6
 8006ede:	f7fa fa95 	bl	800140c <_Unwind_GetLanguageSpecificData>
 8006ee2:	4681      	mov	r9, r0
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f43f ae94 	beq.w	8006c12 <__gxx_personality_v0+0x26>
 8006eea:	aa0a      	add	r2, sp, #40	; 0x28
 8006eec:	4601      	mov	r1, r0
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7ff fe40 	bl	8006b74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006efc:	f7ff fe07 	bl	8006b0e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006f00:	210f      	movs	r1, #15
 8006f02:	900c      	str	r0, [sp, #48]	; 0x30
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff fe65 	bl	8006bd4 <_Unwind_GetGR>
 8006f0a:	f020 0001 	bic.w	r0, r0, #1
 8006f0e:	1e47      	subs	r7, r0, #1
 8006f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f12:	4598      	cmp	r8, r3
 8006f14:	f4bf af7b 	bcs.w	8006e0e <__gxx_personality_v0+0x222>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	ab06      	add	r3, sp, #24
 8006f1c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006f20:	2000      	movs	r0, #0
 8006f22:	f7ff fe17 	bl	8006b54 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006f26:	ab07      	add	r3, sp, #28
 8006f28:	4602      	mov	r2, r0
 8006f2a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f7ff fe10 	bl	8006b54 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006f34:	ab08      	add	r3, sp, #32
 8006f36:	4602      	mov	r2, r0
 8006f38:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7ff fe09 	bl	8006b54 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006f42:	a909      	add	r1, sp, #36	; 0x24
 8006f44:	f7ff fd76 	bl	8006a34 <_ZL12read_uleb128PKhPm>
 8006f48:	9a06      	ldr	r2, [sp, #24]
 8006f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4c:	4413      	add	r3, r2
 8006f4e:	429f      	cmp	r7, r3
 8006f50:	4680      	mov	r8, r0
 8006f52:	f4bf aea1 	bcs.w	8006c98 <__gxx_personality_v0+0xac>
 8006f56:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006f5a:	e7d9      	b.n	8006f10 <__gxx_personality_v0+0x324>

08006f5c <_ZdlPvj>:
 8006f5c:	f7ff bc9b 	b.w	8006896 <_ZdlPv>

08006f60 <_ZSt15get_new_handlerv>:
 8006f60:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <_ZSt15get_new_handlerv+0xc>)
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	f3bf 8f5b 	dmb	ish
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20003d0c 	.word	0x20003d0c

08006f70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8006f70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006f72:	2310      	movs	r3, #16
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	6803      	ldr	r3, [r0, #0]
 8006f78:	2400      	movs	r4, #0
 8006f7a:	4615      	mov	r5, r2
 8006f7c:	699e      	ldr	r6, [r3, #24]
 8006f7e:	9400      	str	r4, [sp, #0]
 8006f80:	466b      	mov	r3, sp
 8006f82:	f88d 4004 	strb.w	r4, [sp, #4]
 8006f86:	9403      	str	r4, [sp, #12]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	47b0      	blx	r6
 8006f8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f90:	f003 0306 	and.w	r3, r3, #6
 8006f94:	2b06      	cmp	r3, #6
 8006f96:	bf03      	ittte	eq
 8006f98:	9b00      	ldreq	r3, [sp, #0]
 8006f9a:	602b      	streq	r3, [r5, #0]
 8006f9c:	2001      	moveq	r0, #1
 8006f9e:	4620      	movne	r0, r4
 8006fa0:	b004      	add	sp, #16
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}

08006fa4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8006fa4:	9800      	ldr	r0, [sp, #0]
 8006fa6:	4290      	cmp	r0, r2
 8006fa8:	bf0c      	ite	eq
 8006faa:	2006      	moveq	r0, #6
 8006fac:	2001      	movne	r0, #1
 8006fae:	4770      	bx	lr

08006fb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	f000 f84b 	bl	8007052 <_ZNSt9type_infoD1Ev>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	bd10      	pop	{r4, pc}
 8006fc0:	080093bc 	.word	0x080093bc

08006fc4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	f7ff fff2 	bl	8006fb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	2108      	movs	r1, #8
 8006fd0:	f7ff ffc4 	bl	8006f5c <_ZdlPvj>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	bd10      	pop	{r4, pc}

08006fd8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4615      	mov	r5, r2
 8006fdc:	461c      	mov	r4, r3
 8006fde:	f000 f83b 	bl	8007058 <_ZNKSt9type_infoeqERKS_>
 8006fe2:	b120      	cbz	r0, 8006fee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	60e3      	str	r3, [r4, #12]
 8006fe8:	2306      	movs	r3, #6
 8006fea:	6025      	str	r5, [r4, #0]
 8006fec:	7123      	strb	r3, [r4, #4]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}

08006ff0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	4616      	mov	r6, r2
 8006ffa:	461f      	mov	r7, r3
 8006ffc:	f000 f82c 	bl	8007058 <_ZNKSt9type_infoeqERKS_>
 8007000:	b948      	cbnz	r0, 8007016 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007002:	2f03      	cmp	r7, #3
 8007004:	d807      	bhi.n	8007016 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	4632      	mov	r2, r6
 800700a:	4629      	mov	r1, r5
 800700c:	4620      	mov	r0, r4
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007014:	4718      	bx	r3
 8007016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800701a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800701a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701e:	9e06      	ldr	r6, [sp, #24]
 8007020:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007022:	4698      	mov	r8, r3
 8007024:	9b08      	ldr	r3, [sp, #32]
 8007026:	429e      	cmp	r6, r3
 8007028:	4607      	mov	r7, r0
 800702a:	4615      	mov	r5, r2
 800702c:	d103      	bne.n	8007036 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 800702e:	9907      	ldr	r1, [sp, #28]
 8007030:	f000 f812 	bl	8007058 <_ZNKSt9type_infoeqERKS_>
 8007034:	b958      	cbnz	r0, 800704e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8007036:	4641      	mov	r1, r8
 8007038:	4638      	mov	r0, r7
 800703a:	f000 f80d 	bl	8007058 <_ZNKSt9type_infoeqERKS_>
 800703e:	b118      	cbz	r0, 8007048 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8007040:	2301      	movs	r3, #1
 8007042:	6026      	str	r6, [r4, #0]
 8007044:	7125      	strb	r5, [r4, #4]
 8007046:	71a3      	strb	r3, [r4, #6]
 8007048:	2000      	movs	r0, #0
 800704a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800704e:	7165      	strb	r5, [r4, #5]
 8007050:	e7fa      	b.n	8007048 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08007052 <_ZNSt9type_infoD1Ev>:
 8007052:	4770      	bx	lr

08007054 <_ZNKSt9type_info14__is_pointer_pEv>:
 8007054:	2000      	movs	r0, #0
 8007056:	4770      	bx	lr

08007058 <_ZNKSt9type_infoeqERKS_>:
 8007058:	4281      	cmp	r1, r0
 800705a:	b508      	push	{r3, lr}
 800705c:	d00e      	beq.n	800707c <_ZNKSt9type_infoeqERKS_+0x24>
 800705e:	6840      	ldr	r0, [r0, #4]
 8007060:	7803      	ldrb	r3, [r0, #0]
 8007062:	2b2a      	cmp	r3, #42	; 0x2a
 8007064:	d00c      	beq.n	8007080 <_ZNKSt9type_infoeqERKS_+0x28>
 8007066:	6849      	ldr	r1, [r1, #4]
 8007068:	780b      	ldrb	r3, [r1, #0]
 800706a:	2b2a      	cmp	r3, #42	; 0x2a
 800706c:	bf08      	it	eq
 800706e:	3101      	addeq	r1, #1
 8007070:	f7f9 f8ca 	bl	8000208 <strcmp>
 8007074:	fab0 f080 	clz	r0, r0
 8007078:	0940      	lsrs	r0, r0, #5
 800707a:	bd08      	pop	{r3, pc}
 800707c:	2001      	movs	r0, #1
 800707e:	bd08      	pop	{r3, pc}
 8007080:	2000      	movs	r0, #0
 8007082:	bd08      	pop	{r3, pc}

08007084 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8007084:	7803      	ldrb	r3, [r0, #0]
 8007086:	2b47      	cmp	r3, #71	; 0x47
 8007088:	d117      	bne.n	80070ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800708a:	7843      	ldrb	r3, [r0, #1]
 800708c:	2b4e      	cmp	r3, #78	; 0x4e
 800708e:	d114      	bne.n	80070ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007090:	7883      	ldrb	r3, [r0, #2]
 8007092:	2b55      	cmp	r3, #85	; 0x55
 8007094:	d111      	bne.n	80070ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007096:	78c3      	ldrb	r3, [r0, #3]
 8007098:	2b43      	cmp	r3, #67	; 0x43
 800709a:	d10e      	bne.n	80070ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800709c:	7903      	ldrb	r3, [r0, #4]
 800709e:	2b43      	cmp	r3, #67	; 0x43
 80070a0:	d10b      	bne.n	80070ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80070a2:	7943      	ldrb	r3, [r0, #5]
 80070a4:	2b2b      	cmp	r3, #43	; 0x2b
 80070a6:	d108      	bne.n	80070ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80070a8:	7983      	ldrb	r3, [r0, #6]
 80070aa:	2b2b      	cmp	r3, #43	; 0x2b
 80070ac:	d105      	bne.n	80070ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80070ae:	79c0      	ldrb	r0, [r0, #7]
 80070b0:	2801      	cmp	r0, #1
 80070b2:	bf8c      	ite	hi
 80070b4:	2000      	movhi	r0, #0
 80070b6:	2001      	movls	r0, #1
 80070b8:	4770      	bx	lr
 80070ba:	2000      	movs	r0, #0
 80070bc:	4770      	bx	lr

080070be <__cxa_call_terminate>:
 80070be:	b510      	push	{r4, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	b148      	cbz	r0, 80070d8 <__cxa_call_terminate+0x1a>
 80070c4:	f000 f83b 	bl	800713e <__cxa_begin_catch>
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff ffdb 	bl	8007084 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80070ce:	b118      	cbz	r0, 80070d8 <__cxa_call_terminate+0x1a>
 80070d0:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80070d4:	f000 f85d 	bl	8007192 <_ZN10__cxxabiv111__terminateEPFvvE>
 80070d8:	f000 f868 	bl	80071ac <_ZSt9terminatev>

080070dc <__cxa_call_unexpected>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4602      	mov	r2, r0
 80070e0:	f7ff ffd0 	bl	8007084 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80070e4:	b140      	cbz	r0, 80070f8 <__cxa_call_unexpected+0x1c>
 80070e6:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80070ea:	2500      	movs	r5, #0
 80070ec:	4610      	mov	r0, r2
 80070ee:	f000 f826 	bl	800713e <__cxa_begin_catch>
 80070f2:	b125      	cbz	r5, 80070fe <__cxa_call_unexpected+0x22>
 80070f4:	f000 f86c 	bl	80071d0 <_ZSt10unexpectedv>
 80070f8:	4604      	mov	r4, r0
 80070fa:	2501      	movs	r5, #1
 80070fc:	e7f6      	b.n	80070ec <__cxa_call_unexpected+0x10>
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 f859 	bl	80071b6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08007104 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8007104:	7803      	ldrb	r3, [r0, #0]
 8007106:	2b47      	cmp	r3, #71	; 0x47
 8007108:	d117      	bne.n	800713a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800710a:	7843      	ldrb	r3, [r0, #1]
 800710c:	2b4e      	cmp	r3, #78	; 0x4e
 800710e:	d114      	bne.n	800713a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007110:	7883      	ldrb	r3, [r0, #2]
 8007112:	2b55      	cmp	r3, #85	; 0x55
 8007114:	d111      	bne.n	800713a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007116:	78c3      	ldrb	r3, [r0, #3]
 8007118:	2b43      	cmp	r3, #67	; 0x43
 800711a:	d10e      	bne.n	800713a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800711c:	7903      	ldrb	r3, [r0, #4]
 800711e:	2b43      	cmp	r3, #67	; 0x43
 8007120:	d10b      	bne.n	800713a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007122:	7943      	ldrb	r3, [r0, #5]
 8007124:	2b2b      	cmp	r3, #43	; 0x2b
 8007126:	d108      	bne.n	800713a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007128:	7983      	ldrb	r3, [r0, #6]
 800712a:	2b2b      	cmp	r3, #43	; 0x2b
 800712c:	d105      	bne.n	800713a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800712e:	79c0      	ldrb	r0, [r0, #7]
 8007130:	2801      	cmp	r0, #1
 8007132:	bf8c      	ite	hi
 8007134:	2000      	movhi	r0, #0
 8007136:	2001      	movls	r0, #1
 8007138:	4770      	bx	lr
 800713a:	2000      	movs	r0, #0
 800713c:	4770      	bx	lr

0800713e <__cxa_begin_catch>:
 800713e:	b538      	push	{r3, r4, r5, lr}
 8007140:	4605      	mov	r5, r0
 8007142:	f000 f84b 	bl	80071dc <__cxa_get_globals>
 8007146:	4601      	mov	r1, r0
 8007148:	6802      	ldr	r2, [r0, #0]
 800714a:	4628      	mov	r0, r5
 800714c:	f1a5 0420 	sub.w	r4, r5, #32
 8007150:	f7ff ffd8 	bl	8007104 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007154:	b930      	cbnz	r0, 8007164 <__cxa_begin_catch+0x26>
 8007156:	b10a      	cbz	r2, 800715c <__cxa_begin_catch+0x1e>
 8007158:	f000 f828 	bl	80071ac <_ZSt9terminatev>
 800715c:	600c      	str	r4, [r1, #0]
 800715e:	4614      	mov	r4, r2
 8007160:	4620      	mov	r0, r4
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	bfb4      	ite	lt
 800716c:	f1c3 0301 	rsblt	r3, r3, #1
 8007170:	3301      	addge	r3, #1
 8007172:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007176:	684b      	ldr	r3, [r1, #4]
 8007178:	42a2      	cmp	r2, r4
 800717a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800717e:	604b      	str	r3, [r1, #4]
 8007180:	4628      	mov	r0, r5
 8007182:	bf1c      	itt	ne
 8007184:	f845 2c10 	strne.w	r2, [r5, #-16]
 8007188:	600c      	strne	r4, [r1, #0]
 800718a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800718c:	f7f9 fb9a 	bl	80008c4 <_Unwind_Complete>
 8007190:	e7e6      	b.n	8007160 <__cxa_begin_catch+0x22>

08007192 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007192:	b508      	push	{r3, lr}
 8007194:	4780      	blx	r0
 8007196:	f000 ff0f 	bl	8007fb8 <abort>
	...

0800719c <_ZSt13get_terminatev>:
 800719c:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <_ZSt13get_terminatev+0xc>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	f3bf 8f5b 	dmb	ish
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000008 	.word	0x20000008

080071ac <_ZSt9terminatev>:
 80071ac:	b508      	push	{r3, lr}
 80071ae:	f7ff fff5 	bl	800719c <_ZSt13get_terminatev>
 80071b2:	f7ff ffee 	bl	8007192 <_ZN10__cxxabiv111__terminateEPFvvE>

080071b6 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80071b6:	b508      	push	{r3, lr}
 80071b8:	4780      	blx	r0
 80071ba:	f7ff fff7 	bl	80071ac <_ZSt9terminatev>
	...

080071c0 <_ZSt14get_unexpectedv>:
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <_ZSt14get_unexpectedv+0xc>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	f3bf 8f5b 	dmb	ish
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <_ZSt10unexpectedv>:
 80071d0:	b508      	push	{r3, lr}
 80071d2:	f7ff fff5 	bl	80071c0 <_ZSt14get_unexpectedv>
 80071d6:	f7ff ffee 	bl	80071b6 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

080071dc <__cxa_get_globals>:
 80071dc:	4800      	ldr	r0, [pc, #0]	; (80071e0 <__cxa_get_globals+0x4>)
 80071de:	4770      	bx	lr
 80071e0:	20003d10 	.word	0x20003d10

080071e4 <cosf>:
 80071e4:	ee10 3a10 	vmov	r3, s0
 80071e8:	b507      	push	{r0, r1, r2, lr}
 80071ea:	4a1c      	ldr	r2, [pc, #112]	; (800725c <cosf+0x78>)
 80071ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f0:	4293      	cmp	r3, r2
 80071f2:	dc04      	bgt.n	80071fe <cosf+0x1a>
 80071f4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007260 <cosf+0x7c>
 80071f8:	f000 fa52 	bl	80076a0 <__kernel_cosf>
 80071fc:	e004      	b.n	8007208 <cosf+0x24>
 80071fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007202:	db04      	blt.n	800720e <cosf+0x2a>
 8007204:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007208:	b003      	add	sp, #12
 800720a:	f85d fb04 	ldr.w	pc, [sp], #4
 800720e:	4668      	mov	r0, sp
 8007210:	f000 f91a 	bl	8007448 <__ieee754_rem_pio2f>
 8007214:	f000 0003 	and.w	r0, r0, #3
 8007218:	2801      	cmp	r0, #1
 800721a:	d007      	beq.n	800722c <cosf+0x48>
 800721c:	2802      	cmp	r0, #2
 800721e:	d00e      	beq.n	800723e <cosf+0x5a>
 8007220:	b9a0      	cbnz	r0, 800724c <cosf+0x68>
 8007222:	eddd 0a01 	vldr	s1, [sp, #4]
 8007226:	ed9d 0a00 	vldr	s0, [sp]
 800722a:	e7e5      	b.n	80071f8 <cosf+0x14>
 800722c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007230:	ed9d 0a00 	vldr	s0, [sp]
 8007234:	f000 fcf0 	bl	8007c18 <__kernel_sinf>
 8007238:	eeb1 0a40 	vneg.f32	s0, s0
 800723c:	e7e4      	b.n	8007208 <cosf+0x24>
 800723e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007242:	ed9d 0a00 	vldr	s0, [sp]
 8007246:	f000 fa2b 	bl	80076a0 <__kernel_cosf>
 800724a:	e7f5      	b.n	8007238 <cosf+0x54>
 800724c:	2001      	movs	r0, #1
 800724e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007252:	ed9d 0a00 	vldr	s0, [sp]
 8007256:	f000 fcdf 	bl	8007c18 <__kernel_sinf>
 800725a:	e7d5      	b.n	8007208 <cosf+0x24>
 800725c:	3f490fd8 	.word	0x3f490fd8
 8007260:	00000000 	.word	0x00000000

08007264 <sinf>:
 8007264:	ee10 3a10 	vmov	r3, s0
 8007268:	b507      	push	{r0, r1, r2, lr}
 800726a:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <sinf+0x7c>)
 800726c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007270:	4293      	cmp	r3, r2
 8007272:	dc05      	bgt.n	8007280 <sinf+0x1c>
 8007274:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80072e4 <sinf+0x80>
 8007278:	2000      	movs	r0, #0
 800727a:	f000 fccd 	bl	8007c18 <__kernel_sinf>
 800727e:	e004      	b.n	800728a <sinf+0x26>
 8007280:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007284:	db04      	blt.n	8007290 <sinf+0x2c>
 8007286:	ee30 0a40 	vsub.f32	s0, s0, s0
 800728a:	b003      	add	sp, #12
 800728c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007290:	4668      	mov	r0, sp
 8007292:	f000 f8d9 	bl	8007448 <__ieee754_rem_pio2f>
 8007296:	f000 0003 	and.w	r0, r0, #3
 800729a:	2801      	cmp	r0, #1
 800729c:	d008      	beq.n	80072b0 <sinf+0x4c>
 800729e:	2802      	cmp	r0, #2
 80072a0:	d00d      	beq.n	80072be <sinf+0x5a>
 80072a2:	b9b0      	cbnz	r0, 80072d2 <sinf+0x6e>
 80072a4:	2001      	movs	r0, #1
 80072a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80072aa:	ed9d 0a00 	vldr	s0, [sp]
 80072ae:	e7e4      	b.n	800727a <sinf+0x16>
 80072b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80072b4:	ed9d 0a00 	vldr	s0, [sp]
 80072b8:	f000 f9f2 	bl	80076a0 <__kernel_cosf>
 80072bc:	e7e5      	b.n	800728a <sinf+0x26>
 80072be:	2001      	movs	r0, #1
 80072c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80072c4:	ed9d 0a00 	vldr	s0, [sp]
 80072c8:	f000 fca6 	bl	8007c18 <__kernel_sinf>
 80072cc:	eeb1 0a40 	vneg.f32	s0, s0
 80072d0:	e7db      	b.n	800728a <sinf+0x26>
 80072d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80072d6:	ed9d 0a00 	vldr	s0, [sp]
 80072da:	f000 f9e1 	bl	80076a0 <__kernel_cosf>
 80072de:	e7f5      	b.n	80072cc <sinf+0x68>
 80072e0:	3f490fd8 	.word	0x3f490fd8
 80072e4:	00000000 	.word	0x00000000

080072e8 <atan2f>:
 80072e8:	f000 b800 	b.w	80072ec <__ieee754_atan2f>

080072ec <__ieee754_atan2f>:
 80072ec:	ee10 2a90 	vmov	r2, s1
 80072f0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80072f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80072f8:	b510      	push	{r4, lr}
 80072fa:	eef0 7a40 	vmov.f32	s15, s0
 80072fe:	dc06      	bgt.n	800730e <__ieee754_atan2f+0x22>
 8007300:	ee10 0a10 	vmov	r0, s0
 8007304:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007308:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800730c:	dd04      	ble.n	8007318 <__ieee754_atan2f+0x2c>
 800730e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007312:	eeb0 0a67 	vmov.f32	s0, s15
 8007316:	bd10      	pop	{r4, pc}
 8007318:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800731c:	d103      	bne.n	8007326 <__ieee754_atan2f+0x3a>
 800731e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007322:	f000 bcc1 	b.w	8007ca8 <atanf>
 8007326:	1794      	asrs	r4, r2, #30
 8007328:	f004 0402 	and.w	r4, r4, #2
 800732c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007330:	b943      	cbnz	r3, 8007344 <__ieee754_atan2f+0x58>
 8007332:	2c02      	cmp	r4, #2
 8007334:	d033      	beq.n	800739e <__ieee754_atan2f+0xb2>
 8007336:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800741c <__ieee754_atan2f+0x130>
 800733a:	2c03      	cmp	r4, #3
 800733c:	bf08      	it	eq
 800733e:	eef0 7a47 	vmoveq.f32	s15, s14
 8007342:	e7e6      	b.n	8007312 <__ieee754_atan2f+0x26>
 8007344:	b941      	cbnz	r1, 8007358 <__ieee754_atan2f+0x6c>
 8007346:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007420 <__ieee754_atan2f+0x134>
 800734a:	eddf 7a36 	vldr	s15, [pc, #216]	; 8007424 <__ieee754_atan2f+0x138>
 800734e:	2800      	cmp	r0, #0
 8007350:	bfb8      	it	lt
 8007352:	eef0 7a47 	vmovlt.f32	s15, s14
 8007356:	e7dc      	b.n	8007312 <__ieee754_atan2f+0x26>
 8007358:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800735c:	d125      	bne.n	80073aa <__ieee754_atan2f+0xbe>
 800735e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007362:	d112      	bne.n	800738a <__ieee754_atan2f+0x9e>
 8007364:	2c02      	cmp	r4, #2
 8007366:	d00a      	beq.n	800737e <__ieee754_atan2f+0x92>
 8007368:	2c03      	cmp	r4, #3
 800736a:	d00b      	beq.n	8007384 <__ieee754_atan2f+0x98>
 800736c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007428 <__ieee754_atan2f+0x13c>
 8007370:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800742c <__ieee754_atan2f+0x140>
 8007374:	2c01      	cmp	r4, #1
 8007376:	bf18      	it	ne
 8007378:	eef0 7a47 	vmovne.f32	s15, s14
 800737c:	e7c9      	b.n	8007312 <__ieee754_atan2f+0x26>
 800737e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8007430 <__ieee754_atan2f+0x144>
 8007382:	e7c6      	b.n	8007312 <__ieee754_atan2f+0x26>
 8007384:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007434 <__ieee754_atan2f+0x148>
 8007388:	e7c3      	b.n	8007312 <__ieee754_atan2f+0x26>
 800738a:	2c02      	cmp	r4, #2
 800738c:	d007      	beq.n	800739e <__ieee754_atan2f+0xb2>
 800738e:	2c03      	cmp	r4, #3
 8007390:	d008      	beq.n	80073a4 <__ieee754_atan2f+0xb8>
 8007392:	2c01      	cmp	r4, #1
 8007394:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007438 <__ieee754_atan2f+0x14c>
 8007398:	eddf 7a28 	vldr	s15, [pc, #160]	; 800743c <__ieee754_atan2f+0x150>
 800739c:	e7eb      	b.n	8007376 <__ieee754_atan2f+0x8a>
 800739e:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007440 <__ieee754_atan2f+0x154>
 80073a2:	e7b6      	b.n	8007312 <__ieee754_atan2f+0x26>
 80073a4:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800741c <__ieee754_atan2f+0x130>
 80073a8:	e7b3      	b.n	8007312 <__ieee754_atan2f+0x26>
 80073aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073ae:	d0ca      	beq.n	8007346 <__ieee754_atan2f+0x5a>
 80073b0:	1a5b      	subs	r3, r3, r1
 80073b2:	15db      	asrs	r3, r3, #23
 80073b4:	2b3c      	cmp	r3, #60	; 0x3c
 80073b6:	dc1a      	bgt.n	80073ee <__ieee754_atan2f+0x102>
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	da01      	bge.n	80073c0 <__ieee754_atan2f+0xd4>
 80073bc:	333c      	adds	r3, #60	; 0x3c
 80073be:	db19      	blt.n	80073f4 <__ieee754_atan2f+0x108>
 80073c0:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80073c4:	f000 fd42 	bl	8007e4c <fabsf>
 80073c8:	f000 fc6e 	bl	8007ca8 <atanf>
 80073cc:	eef0 7a40 	vmov.f32	s15, s0
 80073d0:	2c01      	cmp	r4, #1
 80073d2:	d012      	beq.n	80073fa <__ieee754_atan2f+0x10e>
 80073d4:	2c02      	cmp	r4, #2
 80073d6:	d017      	beq.n	8007408 <__ieee754_atan2f+0x11c>
 80073d8:	2c00      	cmp	r4, #0
 80073da:	d09a      	beq.n	8007312 <__ieee754_atan2f+0x26>
 80073dc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007444 <__ieee754_atan2f+0x158>
 80073e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073e4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007440 <__ieee754_atan2f+0x154>
 80073e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073ec:	e791      	b.n	8007312 <__ieee754_atan2f+0x26>
 80073ee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007424 <__ieee754_atan2f+0x138>
 80073f2:	e7ed      	b.n	80073d0 <__ieee754_atan2f+0xe4>
 80073f4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007438 <__ieee754_atan2f+0x14c>
 80073f8:	e7ea      	b.n	80073d0 <__ieee754_atan2f+0xe4>
 80073fa:	ee17 3a90 	vmov	r3, s15
 80073fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	e784      	b.n	8007312 <__ieee754_atan2f+0x26>
 8007408:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007444 <__ieee754_atan2f+0x158>
 800740c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007410:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007440 <__ieee754_atan2f+0x154>
 8007414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007418:	e77b      	b.n	8007312 <__ieee754_atan2f+0x26>
 800741a:	bf00      	nop
 800741c:	c0490fdb 	.word	0xc0490fdb
 8007420:	bfc90fdb 	.word	0xbfc90fdb
 8007424:	3fc90fdb 	.word	0x3fc90fdb
 8007428:	3f490fdb 	.word	0x3f490fdb
 800742c:	bf490fdb 	.word	0xbf490fdb
 8007430:	4016cbe4 	.word	0x4016cbe4
 8007434:	c016cbe4 	.word	0xc016cbe4
 8007438:	00000000 	.word	0x00000000
 800743c:	80000000 	.word	0x80000000
 8007440:	40490fdb 	.word	0x40490fdb
 8007444:	33bbbd2e 	.word	0x33bbbd2e

08007448 <__ieee754_rem_pio2f>:
 8007448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744a:	ee10 6a10 	vmov	r6, s0
 800744e:	4b86      	ldr	r3, [pc, #536]	; (8007668 <__ieee754_rem_pio2f+0x220>)
 8007450:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007454:	429c      	cmp	r4, r3
 8007456:	b087      	sub	sp, #28
 8007458:	4605      	mov	r5, r0
 800745a:	dc05      	bgt.n	8007468 <__ieee754_rem_pio2f+0x20>
 800745c:	2300      	movs	r3, #0
 800745e:	ed85 0a00 	vstr	s0, [r5]
 8007462:	6043      	str	r3, [r0, #4]
 8007464:	2000      	movs	r0, #0
 8007466:	e020      	b.n	80074aa <__ieee754_rem_pio2f+0x62>
 8007468:	4b80      	ldr	r3, [pc, #512]	; (800766c <__ieee754_rem_pio2f+0x224>)
 800746a:	429c      	cmp	r4, r3
 800746c:	dc38      	bgt.n	80074e0 <__ieee754_rem_pio2f+0x98>
 800746e:	2e00      	cmp	r6, #0
 8007470:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8007670 <__ieee754_rem_pio2f+0x228>
 8007474:	4b7f      	ldr	r3, [pc, #508]	; (8007674 <__ieee754_rem_pio2f+0x22c>)
 8007476:	f024 040f 	bic.w	r4, r4, #15
 800747a:	dd18      	ble.n	80074ae <__ieee754_rem_pio2f+0x66>
 800747c:	429c      	cmp	r4, r3
 800747e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007482:	bf09      	itett	eq
 8007484:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007678 <__ieee754_rem_pio2f+0x230>
 8007488:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800767c <__ieee754_rem_pio2f+0x234>
 800748c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007490:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007680 <__ieee754_rem_pio2f+0x238>
 8007494:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007498:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800749c:	edc0 6a00 	vstr	s13, [r0]
 80074a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80074a8:	2001      	movs	r0, #1
 80074aa:	b007      	add	sp, #28
 80074ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ae:	429c      	cmp	r4, r3
 80074b0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80074b4:	bf09      	itett	eq
 80074b6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007678 <__ieee754_rem_pio2f+0x230>
 80074ba:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800767c <__ieee754_rem_pio2f+0x234>
 80074be:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80074c2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007680 <__ieee754_rem_pio2f+0x238>
 80074c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80074ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074ce:	edc0 6a00 	vstr	s13, [r0]
 80074d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074d6:	edc0 7a01 	vstr	s15, [r0, #4]
 80074da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074de:	e7e4      	b.n	80074aa <__ieee754_rem_pio2f+0x62>
 80074e0:	4b68      	ldr	r3, [pc, #416]	; (8007684 <__ieee754_rem_pio2f+0x23c>)
 80074e2:	429c      	cmp	r4, r3
 80074e4:	dc71      	bgt.n	80075ca <__ieee754_rem_pio2f+0x182>
 80074e6:	f000 fcb1 	bl	8007e4c <fabsf>
 80074ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007688 <__ieee754_rem_pio2f+0x240>
 80074ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80074f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80074f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074fa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80074fe:	ee17 0a90 	vmov	r0, s15
 8007502:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007670 <__ieee754_rem_pio2f+0x228>
 8007506:	eeb1 7a46 	vneg.f32	s14, s12
 800750a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800750e:	281f      	cmp	r0, #31
 8007510:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800767c <__ieee754_rem_pio2f+0x234>
 8007514:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007518:	ee70 6a67 	vsub.f32	s13, s0, s15
 800751c:	ee16 3a90 	vmov	r3, s13
 8007520:	dc1c      	bgt.n	800755c <__ieee754_rem_pio2f+0x114>
 8007522:	1e47      	subs	r7, r0, #1
 8007524:	4959      	ldr	r1, [pc, #356]	; (800768c <__ieee754_rem_pio2f+0x244>)
 8007526:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800752a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800752e:	428a      	cmp	r2, r1
 8007530:	d014      	beq.n	800755c <__ieee754_rem_pio2f+0x114>
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	ed95 7a00 	vldr	s14, [r5]
 8007538:	ee30 0a47 	vsub.f32	s0, s0, s14
 800753c:	2e00      	cmp	r6, #0
 800753e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007542:	ed85 0a01 	vstr	s0, [r5, #4]
 8007546:	dab0      	bge.n	80074aa <__ieee754_rem_pio2f+0x62>
 8007548:	eeb1 7a47 	vneg.f32	s14, s14
 800754c:	eeb1 0a40 	vneg.f32	s0, s0
 8007550:	ed85 7a00 	vstr	s14, [r5]
 8007554:	ed85 0a01 	vstr	s0, [r5, #4]
 8007558:	4240      	negs	r0, r0
 800755a:	e7a6      	b.n	80074aa <__ieee754_rem_pio2f+0x62>
 800755c:	15e4      	asrs	r4, r4, #23
 800755e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007562:	1aa2      	subs	r2, r4, r2
 8007564:	2a08      	cmp	r2, #8
 8007566:	dde4      	ble.n	8007532 <__ieee754_rem_pio2f+0xea>
 8007568:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007678 <__ieee754_rem_pio2f+0x230>
 800756c:	eef0 6a40 	vmov.f32	s13, s0
 8007570:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007574:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007578:	eea7 0a27 	vfma.f32	s0, s14, s15
 800757c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007680 <__ieee754_rem_pio2f+0x238>
 8007580:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007584:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007588:	eef0 7a40 	vmov.f32	s15, s0
 800758c:	ee15 3a90 	vmov	r3, s11
 8007590:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007594:	1aa4      	subs	r4, r4, r2
 8007596:	2c19      	cmp	r4, #25
 8007598:	dc04      	bgt.n	80075a4 <__ieee754_rem_pio2f+0x15c>
 800759a:	edc5 5a00 	vstr	s11, [r5]
 800759e:	eeb0 0a66 	vmov.f32	s0, s13
 80075a2:	e7c7      	b.n	8007534 <__ieee754_rem_pio2f+0xec>
 80075a4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007690 <__ieee754_rem_pio2f+0x248>
 80075a8:	eeb0 0a66 	vmov.f32	s0, s13
 80075ac:	eea7 0a25 	vfma.f32	s0, s14, s11
 80075b0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80075b4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80075b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007694 <__ieee754_rem_pio2f+0x24c>
 80075bc:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80075c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80075c4:	ed85 7a00 	vstr	s14, [r5]
 80075c8:	e7b4      	b.n	8007534 <__ieee754_rem_pio2f+0xec>
 80075ca:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80075ce:	db06      	blt.n	80075de <__ieee754_rem_pio2f+0x196>
 80075d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80075d4:	edc0 7a01 	vstr	s15, [r0, #4]
 80075d8:	edc0 7a00 	vstr	s15, [r0]
 80075dc:	e742      	b.n	8007464 <__ieee754_rem_pio2f+0x1c>
 80075de:	15e2      	asrs	r2, r4, #23
 80075e0:	3a86      	subs	r2, #134	; 0x86
 80075e2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075ee:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007698 <__ieee754_rem_pio2f+0x250>
 80075f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80075f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075fa:	ed8d 7a03 	vstr	s14, [sp, #12]
 80075fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007602:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007606:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800760a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800760e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007612:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	edcd 7a05 	vstr	s15, [sp, #20]
 8007622:	d11e      	bne.n	8007662 <__ieee754_rem_pio2f+0x21a>
 8007624:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762c:	bf14      	ite	ne
 800762e:	2302      	movne	r3, #2
 8007630:	2301      	moveq	r3, #1
 8007632:	491a      	ldr	r1, [pc, #104]	; (800769c <__ieee754_rem_pio2f+0x254>)
 8007634:	9101      	str	r1, [sp, #4]
 8007636:	2102      	movs	r1, #2
 8007638:	9100      	str	r1, [sp, #0]
 800763a:	a803      	add	r0, sp, #12
 800763c:	4629      	mov	r1, r5
 800763e:	f000 f88d 	bl	800775c <__kernel_rem_pio2f>
 8007642:	2e00      	cmp	r6, #0
 8007644:	f6bf af31 	bge.w	80074aa <__ieee754_rem_pio2f+0x62>
 8007648:	edd5 7a00 	vldr	s15, [r5]
 800764c:	eef1 7a67 	vneg.f32	s15, s15
 8007650:	edc5 7a00 	vstr	s15, [r5]
 8007654:	edd5 7a01 	vldr	s15, [r5, #4]
 8007658:	eef1 7a67 	vneg.f32	s15, s15
 800765c:	edc5 7a01 	vstr	s15, [r5, #4]
 8007660:	e77a      	b.n	8007558 <__ieee754_rem_pio2f+0x110>
 8007662:	2303      	movs	r3, #3
 8007664:	e7e5      	b.n	8007632 <__ieee754_rem_pio2f+0x1ea>
 8007666:	bf00      	nop
 8007668:	3f490fd8 	.word	0x3f490fd8
 800766c:	4016cbe3 	.word	0x4016cbe3
 8007670:	3fc90f80 	.word	0x3fc90f80
 8007674:	3fc90fd0 	.word	0x3fc90fd0
 8007678:	37354400 	.word	0x37354400
 800767c:	37354443 	.word	0x37354443
 8007680:	2e85a308 	.word	0x2e85a308
 8007684:	43490f80 	.word	0x43490f80
 8007688:	3f22f984 	.word	0x3f22f984
 800768c:	0800944c 	.word	0x0800944c
 8007690:	2e85a300 	.word	0x2e85a300
 8007694:	248d3132 	.word	0x248d3132
 8007698:	43800000 	.word	0x43800000
 800769c:	080094cc 	.word	0x080094cc

080076a0 <__kernel_cosf>:
 80076a0:	ee10 3a10 	vmov	r3, s0
 80076a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80076ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b0:	da05      	bge.n	80076be <__kernel_cosf+0x1e>
 80076b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80076b6:	ee17 2a90 	vmov	r2, s15
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d03b      	beq.n	8007736 <__kernel_cosf+0x96>
 80076be:	ee20 7a00 	vmul.f32	s14, s0, s0
 80076c2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800773c <__kernel_cosf+0x9c>
 80076c6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007740 <__kernel_cosf+0xa0>
 80076ca:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8007744 <__kernel_cosf+0xa4>
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <__kernel_cosf+0xa8>)
 80076d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80076d4:	4293      	cmp	r3, r2
 80076d6:	ee60 0a20 	vmul.f32	s1, s0, s1
 80076da:	eee7 5a06 	vfma.f32	s11, s14, s12
 80076de:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800774c <__kernel_cosf+0xac>
 80076e2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80076e6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8007750 <__kernel_cosf+0xb0>
 80076ea:	eee7 5a06 	vfma.f32	s11, s14, s12
 80076ee:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8007754 <__kernel_cosf+0xb4>
 80076f2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80076f6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80076fa:	ee26 6a07 	vmul.f32	s12, s12, s14
 80076fe:	dc06      	bgt.n	800770e <__kernel_cosf+0x6e>
 8007700:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8007704:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8007708:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800770c:	4770      	bx	lr
 800770e:	4a12      	ldr	r2, [pc, #72]	; (8007758 <__kernel_cosf+0xb8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	bfda      	itte	le
 8007714:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007718:	ee07 3a90 	vmovle	s15, r3
 800771c:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8007720:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007724:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8007728:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800772c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007730:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8007734:	4770      	bx	lr
 8007736:	eeb0 0a66 	vmov.f32	s0, s13
 800773a:	4770      	bx	lr
 800773c:	310f74f6 	.word	0x310f74f6
 8007740:	ad47d74e 	.word	0xad47d74e
 8007744:	b493f27c 	.word	0xb493f27c
 8007748:	3e999999 	.word	0x3e999999
 800774c:	37d00d01 	.word	0x37d00d01
 8007750:	bab60b61 	.word	0xbab60b61
 8007754:	3d2aaaab 	.word	0x3d2aaaab
 8007758:	3f480000 	.word	0x3f480000

0800775c <__kernel_rem_pio2f>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	ed2d 8b04 	vpush	{d8-d9}
 8007764:	b0d7      	sub	sp, #348	; 0x15c
 8007766:	468b      	mov	fp, r1
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	9964      	ldr	r1, [sp, #400]	; 0x190
 800776c:	4bcb      	ldr	r3, [pc, #812]	; (8007a9c <__kernel_rem_pio2f+0x340>)
 800776e:	9002      	str	r0, [sp, #8]
 8007770:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8007778:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8007aac <__kernel_rem_pio2f+0x350>
 800777c:	3b01      	subs	r3, #1
 800777e:	1ed0      	subs	r0, r2, #3
 8007780:	2408      	movs	r4, #8
 8007782:	fb90 f0f4 	sdiv	r0, r0, r4
 8007786:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800778a:	1c45      	adds	r5, r0, #1
 800778c:	1ac7      	subs	r7, r0, r3
 800778e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007792:	eb0a 0e03 	add.w	lr, sl, r3
 8007796:	ac1a      	add	r4, sp, #104	; 0x68
 8007798:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 800779c:	2200      	movs	r2, #0
 800779e:	4572      	cmp	r2, lr
 80077a0:	dd0f      	ble.n	80077c2 <__kernel_rem_pio2f+0x66>
 80077a2:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 80077a6:	2400      	movs	r4, #0
 80077a8:	4554      	cmp	r4, sl
 80077aa:	dc26      	bgt.n	80077fa <__kernel_rem_pio2f+0x9e>
 80077ac:	9a01      	ldr	r2, [sp, #4]
 80077ae:	9f02      	ldr	r7, [sp, #8]
 80077b0:	eddf 7abe 	vldr	s15, [pc, #760]	; 8007aac <__kernel_rem_pio2f+0x350>
 80077b4:	4422      	add	r2, r4
 80077b6:	a91a      	add	r1, sp, #104	; 0x68
 80077b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80077bc:	f04f 0c00 	mov.w	ip, #0
 80077c0:	e015      	b.n	80077ee <__kernel_rem_pio2f+0x92>
 80077c2:	42d7      	cmn	r7, r2
 80077c4:	bf5d      	ittte	pl
 80077c6:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 80077ca:	ee07 1a90 	vmovpl	s15, r1
 80077ce:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80077d2:	eef0 7a47 	vmovmi.f32	s15, s14
 80077d6:	ece4 7a01 	vstmia	r4!, {s15}
 80077da:	3201      	adds	r2, #1
 80077dc:	e7df      	b.n	800779e <__kernel_rem_pio2f+0x42>
 80077de:	ecf7 6a01 	vldmia	r7!, {s13}
 80077e2:	ed32 7a01 	vldmdb	r2!, {s14}
 80077e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80077ea:	f10c 0c01 	add.w	ip, ip, #1
 80077ee:	459c      	cmp	ip, r3
 80077f0:	ddf5      	ble.n	80077de <__kernel_rem_pio2f+0x82>
 80077f2:	ecee 7a01 	vstmia	lr!, {s15}
 80077f6:	3401      	adds	r4, #1
 80077f8:	e7d6      	b.n	80077a8 <__kernel_rem_pio2f+0x4c>
 80077fa:	aa06      	add	r2, sp, #24
 80077fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007800:	9204      	str	r2, [sp, #16]
 8007802:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8007aa0 <__kernel_rem_pio2f+0x344>
 8007806:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8007aa4 <__kernel_rem_pio2f+0x348>
 800780a:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 800780e:	9203      	str	r2, [sp, #12]
 8007810:	4657      	mov	r7, sl
 8007812:	aa56      	add	r2, sp, #344	; 0x158
 8007814:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8007818:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800781c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007820:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8007824:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007828:	aa56      	add	r2, sp, #344	; 0x158
 800782a:	eb02 0008 	add.w	r0, r2, r8
 800782e:	384c      	subs	r0, #76	; 0x4c
 8007830:	2200      	movs	r2, #0
 8007832:	1abc      	subs	r4, r7, r2
 8007834:	2c00      	cmp	r4, #0
 8007836:	dc4a      	bgt.n	80078ce <__kernel_rem_pio2f+0x172>
 8007838:	4628      	mov	r0, r5
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	f000 fb50 	bl	8007ee0 <scalbnf>
 8007840:	eeb0 8a40 	vmov.f32	s16, s0
 8007844:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007848:	ee28 0a00 	vmul.f32	s0, s16, s0
 800784c:	f000 fb06 	bl	8007e5c <floorf>
 8007850:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007854:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007858:	2d00      	cmp	r5, #0
 800785a:	9b05      	ldr	r3, [sp, #20]
 800785c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007860:	ee17 9a90 	vmov	r9, s15
 8007864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007868:	ee38 8a67 	vsub.f32	s16, s16, s15
 800786c:	dd44      	ble.n	80078f8 <__kernel_rem_pio2f+0x19c>
 800786e:	1e78      	subs	r0, r7, #1
 8007870:	aa06      	add	r2, sp, #24
 8007872:	f1c5 0408 	rsb	r4, r5, #8
 8007876:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800787a:	fa46 f204 	asr.w	r2, r6, r4
 800787e:	4491      	add	r9, r2
 8007880:	40a2      	lsls	r2, r4
 8007882:	1ab6      	subs	r6, r6, r2
 8007884:	aa06      	add	r2, sp, #24
 8007886:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800788a:	f1c5 0207 	rsb	r2, r5, #7
 800788e:	4116      	asrs	r6, r2
 8007890:	2e00      	cmp	r6, #0
 8007892:	dd40      	ble.n	8007916 <__kernel_rem_pio2f+0x1ba>
 8007894:	2400      	movs	r4, #0
 8007896:	f109 0901 	add.w	r9, r9, #1
 800789a:	4620      	mov	r0, r4
 800789c:	42a7      	cmp	r7, r4
 800789e:	dc75      	bgt.n	800798c <__kernel_rem_pio2f+0x230>
 80078a0:	2d00      	cmp	r5, #0
 80078a2:	dd05      	ble.n	80078b0 <__kernel_rem_pio2f+0x154>
 80078a4:	2d01      	cmp	r5, #1
 80078a6:	f000 8086 	beq.w	80079b6 <__kernel_rem_pio2f+0x25a>
 80078aa:	2d02      	cmp	r5, #2
 80078ac:	f000 808d 	beq.w	80079ca <__kernel_rem_pio2f+0x26e>
 80078b0:	2e02      	cmp	r6, #2
 80078b2:	d130      	bne.n	8007916 <__kernel_rem_pio2f+0x1ba>
 80078b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078b8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80078bc:	b358      	cbz	r0, 8007916 <__kernel_rem_pio2f+0x1ba>
 80078be:	4628      	mov	r0, r5
 80078c0:	9305      	str	r3, [sp, #20]
 80078c2:	f000 fb0d 	bl	8007ee0 <scalbnf>
 80078c6:	9b05      	ldr	r3, [sp, #20]
 80078c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80078cc:	e023      	b.n	8007916 <__kernel_rem_pio2f+0x1ba>
 80078ce:	ee60 7a28 	vmul.f32	s15, s0, s17
 80078d2:	ac06      	add	r4, sp, #24
 80078d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078dc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80078e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80078e4:	ee10 1a10 	vmov	r1, s0
 80078e8:	ed30 0a01 	vldmdb	r0!, {s0}
 80078ec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80078f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80078f4:	3201      	adds	r2, #1
 80078f6:	e79c      	b.n	8007832 <__kernel_rem_pio2f+0xd6>
 80078f8:	d105      	bne.n	8007906 <__kernel_rem_pio2f+0x1aa>
 80078fa:	1e7a      	subs	r2, r7, #1
 80078fc:	a906      	add	r1, sp, #24
 80078fe:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007902:	1236      	asrs	r6, r6, #8
 8007904:	e7c4      	b.n	8007890 <__kernel_rem_pio2f+0x134>
 8007906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800790a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007912:	da39      	bge.n	8007988 <__kernel_rem_pio2f+0x22c>
 8007914:	2600      	movs	r6, #0
 8007916:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	f040 808d 	bne.w	8007a3c <__kernel_rem_pio2f+0x2e0>
 8007922:	1e7c      	subs	r4, r7, #1
 8007924:	4620      	mov	r0, r4
 8007926:	2200      	movs	r2, #0
 8007928:	4550      	cmp	r0, sl
 800792a:	da55      	bge.n	80079d8 <__kernel_rem_pio2f+0x27c>
 800792c:	2a00      	cmp	r2, #0
 800792e:	d164      	bne.n	80079fa <__kernel_rem_pio2f+0x29e>
 8007930:	2401      	movs	r4, #1
 8007932:	f06f 0003 	mvn.w	r0, #3
 8007936:	fb00 f204 	mul.w	r2, r0, r4
 800793a:	9904      	ldr	r1, [sp, #16]
 800793c:	588a      	ldr	r2, [r1, r2]
 800793e:	2a00      	cmp	r2, #0
 8007940:	d050      	beq.n	80079e4 <__kernel_rem_pio2f+0x288>
 8007942:	aa56      	add	r2, sp, #344	; 0x158
 8007944:	4490      	add	r8, r2
 8007946:	9a01      	ldr	r2, [sp, #4]
 8007948:	a91a      	add	r1, sp, #104	; 0x68
 800794a:	443a      	add	r2, r7
 800794c:	1c78      	adds	r0, r7, #1
 800794e:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8007952:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007956:	4427      	add	r7, r4
 8007958:	42b8      	cmp	r0, r7
 800795a:	f73f af5a 	bgt.w	8007812 <__kernel_rem_pio2f+0xb6>
 800795e:	9903      	ldr	r1, [sp, #12]
 8007960:	9e02      	ldr	r6, [sp, #8]
 8007962:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007966:	9105      	str	r1, [sp, #20]
 8007968:	ee07 1a90 	vmov	s15, r1
 800796c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007970:	2400      	movs	r4, #0
 8007972:	ece2 7a01 	vstmia	r2!, {s15}
 8007976:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007aac <__kernel_rem_pio2f+0x350>
 800797a:	4696      	mov	lr, r2
 800797c:	429c      	cmp	r4, r3
 800797e:	dd33      	ble.n	80079e8 <__kernel_rem_pio2f+0x28c>
 8007980:	ece8 7a01 	vstmia	r8!, {s15}
 8007984:	3001      	adds	r0, #1
 8007986:	e7e7      	b.n	8007958 <__kernel_rem_pio2f+0x1fc>
 8007988:	2602      	movs	r6, #2
 800798a:	e783      	b.n	8007894 <__kernel_rem_pio2f+0x138>
 800798c:	aa06      	add	r2, sp, #24
 800798e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007992:	b948      	cbnz	r0, 80079a8 <__kernel_rem_pio2f+0x24c>
 8007994:	b12a      	cbz	r2, 80079a2 <__kernel_rem_pio2f+0x246>
 8007996:	a906      	add	r1, sp, #24
 8007998:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800799c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80079a0:	2201      	movs	r2, #1
 80079a2:	3401      	adds	r4, #1
 80079a4:	4610      	mov	r0, r2
 80079a6:	e779      	b.n	800789c <__kernel_rem_pio2f+0x140>
 80079a8:	a906      	add	r1, sp, #24
 80079aa:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80079ae:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80079b2:	4602      	mov	r2, r0
 80079b4:	e7f5      	b.n	80079a2 <__kernel_rem_pio2f+0x246>
 80079b6:	1e7c      	subs	r4, r7, #1
 80079b8:	aa06      	add	r2, sp, #24
 80079ba:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80079be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079c2:	a906      	add	r1, sp, #24
 80079c4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80079c8:	e772      	b.n	80078b0 <__kernel_rem_pio2f+0x154>
 80079ca:	1e7c      	subs	r4, r7, #1
 80079cc:	aa06      	add	r2, sp, #24
 80079ce:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80079d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80079d6:	e7f4      	b.n	80079c2 <__kernel_rem_pio2f+0x266>
 80079d8:	a906      	add	r1, sp, #24
 80079da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80079de:	3801      	subs	r0, #1
 80079e0:	430a      	orrs	r2, r1
 80079e2:	e7a1      	b.n	8007928 <__kernel_rem_pio2f+0x1cc>
 80079e4:	3401      	adds	r4, #1
 80079e6:	e7a6      	b.n	8007936 <__kernel_rem_pio2f+0x1da>
 80079e8:	ecf6 6a01 	vldmia	r6!, {s13}
 80079ec:	ed3e 7a01 	vldmdb	lr!, {s14}
 80079f0:	3401      	adds	r4, #1
 80079f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80079f6:	e7c1      	b.n	800797c <__kernel_rem_pio2f+0x220>
 80079f8:	3c01      	subs	r4, #1
 80079fa:	ab06      	add	r3, sp, #24
 80079fc:	3d08      	subs	r5, #8
 80079fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f8      	beq.n	80079f8 <__kernel_rem_pio2f+0x29c>
 8007a06:	4628      	mov	r0, r5
 8007a08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a0c:	f000 fa68 	bl	8007ee0 <scalbnf>
 8007a10:	00a3      	lsls	r3, r4, #2
 8007a12:	aa42      	add	r2, sp, #264	; 0x108
 8007a14:	3304      	adds	r3, #4
 8007a16:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007aa0 <__kernel_rem_pio2f+0x344>
 8007a1a:	18d0      	adds	r0, r2, r3
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	da46      	bge.n	8007ab0 <__kernel_rem_pio2f+0x354>
 8007a22:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 8007a26:	2200      	movs	r2, #0
 8007a28:	1aa5      	subs	r5, r4, r2
 8007a2a:	d460      	bmi.n	8007aee <__kernel_rem_pio2f+0x392>
 8007a2c:	a942      	add	r1, sp, #264	; 0x108
 8007a2e:	4f1e      	ldr	r7, [pc, #120]	; (8007aa8 <__kernel_rem_pio2f+0x34c>)
 8007a30:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007aac <__kernel_rem_pio2f+0x350>
 8007a34:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e050      	b.n	8007ade <__kernel_rem_pio2f+0x382>
 8007a3c:	4268      	negs	r0, r5
 8007a3e:	eeb0 0a48 	vmov.f32	s0, s16
 8007a42:	f000 fa4d 	bl	8007ee0 <scalbnf>
 8007a46:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007aa4 <__kernel_rem_pio2f+0x348>
 8007a4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a52:	db19      	blt.n	8007a88 <__kernel_rem_pio2f+0x32c>
 8007a54:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007aa0 <__kernel_rem_pio2f+0x344>
 8007a58:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007a5c:	aa06      	add	r2, sp, #24
 8007a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a62:	1c7c      	adds	r4, r7, #1
 8007a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a68:	3508      	adds	r5, #8
 8007a6a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007a76:	ee10 3a10 	vmov	r3, s0
 8007a7a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007a7e:	ee17 3a90 	vmov	r3, s15
 8007a82:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007a86:	e7be      	b.n	8007a06 <__kernel_rem_pio2f+0x2aa>
 8007a88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007a8c:	aa06      	add	r2, sp, #24
 8007a8e:	ee10 3a10 	vmov	r3, s0
 8007a92:	463c      	mov	r4, r7
 8007a94:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007a98:	e7b5      	b.n	8007a06 <__kernel_rem_pio2f+0x2aa>
 8007a9a:	bf00      	nop
 8007a9c:	08009810 	.word	0x08009810
 8007aa0:	3b800000 	.word	0x3b800000
 8007aa4:	43800000 	.word	0x43800000
 8007aa8:	080097e4 	.word	0x080097e4
 8007aac:	00000000 	.word	0x00000000
 8007ab0:	a906      	add	r1, sp, #24
 8007ab2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007ab6:	9101      	str	r1, [sp, #4]
 8007ab8:	ee07 1a90 	vmov	s15, r1
 8007abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ac0:	3a01      	subs	r2, #1
 8007ac2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007ac6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007aca:	ed60 7a01 	vstmdb	r0!, {s15}
 8007ace:	e7a6      	b.n	8007a1e <__kernel_rem_pio2f+0x2c2>
 8007ad0:	ecf7 6a01 	vldmia	r7!, {s13}
 8007ad4:	ecb5 7a01 	vldmia	r5!, {s14}
 8007ad8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007adc:	3001      	adds	r0, #1
 8007ade:	4550      	cmp	r0, sl
 8007ae0:	dc01      	bgt.n	8007ae6 <__kernel_rem_pio2f+0x38a>
 8007ae2:	4290      	cmp	r0, r2
 8007ae4:	ddf4      	ble.n	8007ad0 <__kernel_rem_pio2f+0x374>
 8007ae6:	ecee 7a01 	vstmia	lr!, {s15}
 8007aea:	3201      	adds	r2, #1
 8007aec:	e79c      	b.n	8007a28 <__kernel_rem_pio2f+0x2cc>
 8007aee:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007af0:	2a03      	cmp	r2, #3
 8007af2:	d843      	bhi.n	8007b7c <__kernel_rem_pio2f+0x420>
 8007af4:	e8df f002 	tbb	[pc, r2]
 8007af8:	021d1d37 	.word	0x021d1d37
 8007afc:	aa2e      	add	r2, sp, #184	; 0xb8
 8007afe:	4413      	add	r3, r2
 8007b00:	461a      	mov	r2, r3
 8007b02:	4620      	mov	r0, r4
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dc55      	bgt.n	8007bb4 <__kernel_rem_pio2f+0x458>
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	2801      	cmp	r0, #1
 8007b0e:	dc61      	bgt.n	8007bd4 <__kernel_rem_pio2f+0x478>
 8007b10:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8007aac <__kernel_rem_pio2f+0x350>
 8007b14:	2c01      	cmp	r4, #1
 8007b16:	dc6d      	bgt.n	8007bf4 <__kernel_rem_pio2f+0x498>
 8007b18:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007b1c:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	d16d      	bne.n	8007c00 <__kernel_rem_pio2f+0x4a4>
 8007b24:	edcb 6a00 	vstr	s13, [fp]
 8007b28:	ed8b 7a01 	vstr	s14, [fp, #4]
 8007b2c:	edcb 7a02 	vstr	s15, [fp, #8]
 8007b30:	e024      	b.n	8007b7c <__kernel_rem_pio2f+0x420>
 8007b32:	aa2e      	add	r2, sp, #184	; 0xb8
 8007b34:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8007aac <__kernel_rem_pio2f+0x350>
 8007b38:	4413      	add	r3, r2
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	da2a      	bge.n	8007b96 <__kernel_rem_pio2f+0x43a>
 8007b40:	b37e      	cbz	r6, 8007ba2 <__kernel_rem_pio2f+0x446>
 8007b42:	eef1 7a47 	vneg.f32	s15, s14
 8007b46:	edcb 7a00 	vstr	s15, [fp]
 8007b4a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b52:	aa2f      	add	r2, sp, #188	; 0xbc
 8007b54:	2301      	movs	r3, #1
 8007b56:	429c      	cmp	r4, r3
 8007b58:	da26      	bge.n	8007ba8 <__kernel_rem_pio2f+0x44c>
 8007b5a:	b10e      	cbz	r6, 8007b60 <__kernel_rem_pio2f+0x404>
 8007b5c:	eef1 7a67 	vneg.f32	s15, s15
 8007b60:	edcb 7a01 	vstr	s15, [fp, #4]
 8007b64:	e00a      	b.n	8007b7c <__kernel_rem_pio2f+0x420>
 8007b66:	aa2e      	add	r2, sp, #184	; 0xb8
 8007b68:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8007aac <__kernel_rem_pio2f+0x350>
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	da0b      	bge.n	8007b8a <__kernel_rem_pio2f+0x42e>
 8007b72:	b10e      	cbz	r6, 8007b78 <__kernel_rem_pio2f+0x41c>
 8007b74:	eef1 7a67 	vneg.f32	s15, s15
 8007b78:	edcb 7a00 	vstr	s15, [fp]
 8007b7c:	f009 0007 	and.w	r0, r9, #7
 8007b80:	b057      	add	sp, #348	; 0x15c
 8007b82:	ecbd 8b04 	vpop	{d8-d9}
 8007b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8a:	ed33 7a01 	vldmdb	r3!, {s14}
 8007b8e:	3c01      	subs	r4, #1
 8007b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b94:	e7eb      	b.n	8007b6e <__kernel_rem_pio2f+0x412>
 8007b96:	ed73 7a01 	vldmdb	r3!, {s15}
 8007b9a:	3a01      	subs	r2, #1
 8007b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ba0:	e7cc      	b.n	8007b3c <__kernel_rem_pio2f+0x3e0>
 8007ba2:	eef0 7a47 	vmov.f32	s15, s14
 8007ba6:	e7ce      	b.n	8007b46 <__kernel_rem_pio2f+0x3ea>
 8007ba8:	ecb2 7a01 	vldmia	r2!, {s14}
 8007bac:	3301      	adds	r3, #1
 8007bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bb2:	e7d0      	b.n	8007b56 <__kernel_rem_pio2f+0x3fa>
 8007bb4:	ed52 6a01 	vldr	s13, [r2, #-4]
 8007bb8:	ed52 7a02 	vldr	s15, [r2, #-8]
 8007bbc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007bc0:	3801      	subs	r0, #1
 8007bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bca:	ed62 7a01 	vstmdb	r2!, {s15}
 8007bce:	ed02 7a01 	vstr	s14, [r2, #-4]
 8007bd2:	e797      	b.n	8007b04 <__kernel_rem_pio2f+0x3a8>
 8007bd4:	ed52 6a01 	vldr	s13, [r2, #-4]
 8007bd8:	ed52 7a02 	vldr	s15, [r2, #-8]
 8007bdc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007be0:	3801      	subs	r0, #1
 8007be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bea:	ed62 7a01 	vstmdb	r2!, {s15}
 8007bee:	ed02 7a01 	vstr	s14, [r2, #-4]
 8007bf2:	e78b      	b.n	8007b0c <__kernel_rem_pio2f+0x3b0>
 8007bf4:	ed33 7a01 	vldmdb	r3!, {s14}
 8007bf8:	3c01      	subs	r4, #1
 8007bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bfe:	e789      	b.n	8007b14 <__kernel_rem_pio2f+0x3b8>
 8007c00:	eef1 6a66 	vneg.f32	s13, s13
 8007c04:	eeb1 7a47 	vneg.f32	s14, s14
 8007c08:	edcb 6a00 	vstr	s13, [fp]
 8007c0c:	ed8b 7a01 	vstr	s14, [fp, #4]
 8007c10:	eef1 7a67 	vneg.f32	s15, s15
 8007c14:	e78a      	b.n	8007b2c <__kernel_rem_pio2f+0x3d0>
 8007c16:	bf00      	nop

08007c18 <__kernel_sinf>:
 8007c18:	ee10 3a10 	vmov	r3, s0
 8007c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007c24:	da04      	bge.n	8007c30 <__kernel_sinf+0x18>
 8007c26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007c2a:	ee17 3a90 	vmov	r3, s15
 8007c2e:	b35b      	cbz	r3, 8007c88 <__kernel_sinf+0x70>
 8007c30:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007c34:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007c8c <__kernel_sinf+0x74>
 8007c38:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007c90 <__kernel_sinf+0x78>
 8007c3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007c40:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007c94 <__kernel_sinf+0x7c>
 8007c44:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007c48:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007c98 <__kernel_sinf+0x80>
 8007c4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007c50:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007c9c <__kernel_sinf+0x84>
 8007c54:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007c58:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007c5c:	b930      	cbnz	r0, 8007c6c <__kernel_sinf+0x54>
 8007c5e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007ca0 <__kernel_sinf+0x88>
 8007c62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007c66:	eea6 0a86 	vfma.f32	s0, s13, s12
 8007c6a:	4770      	bx	lr
 8007c6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007c70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007c74:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007c78:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8007c7c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007ca4 <__kernel_sinf+0x8c>
 8007c80:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007c84:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	2f2ec9d3 	.word	0x2f2ec9d3
 8007c90:	b2d72f34 	.word	0xb2d72f34
 8007c94:	3638ef1b 	.word	0x3638ef1b
 8007c98:	b9500d01 	.word	0xb9500d01
 8007c9c:	3c088889 	.word	0x3c088889
 8007ca0:	be2aaaab 	.word	0xbe2aaaab
 8007ca4:	3e2aaaab 	.word	0x3e2aaaab

08007ca8 <atanf>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	ee10 5a10 	vmov	r5, s0
 8007cae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007cb2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007cb6:	eef0 7a40 	vmov.f32	s15, s0
 8007cba:	db10      	blt.n	8007cde <atanf+0x36>
 8007cbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007cc0:	dd04      	ble.n	8007ccc <atanf+0x24>
 8007cc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8007e00 <atanf+0x158>
 8007cd0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007e04 <atanf+0x15c>
 8007cd4:	2d00      	cmp	r5, #0
 8007cd6:	bfc8      	it	gt
 8007cd8:	eef0 7a47 	vmovgt.f32	s15, s14
 8007cdc:	e7f3      	b.n	8007cc6 <atanf+0x1e>
 8007cde:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <atanf+0x160>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	dc10      	bgt.n	8007d06 <atanf+0x5e>
 8007ce4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007ce8:	da0a      	bge.n	8007d00 <atanf+0x58>
 8007cea:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007e0c <atanf+0x164>
 8007cee:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfe:	dce2      	bgt.n	8007cc6 <atanf+0x1e>
 8007d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d04:	e013      	b.n	8007d2e <atanf+0x86>
 8007d06:	f000 f8a1 	bl	8007e4c <fabsf>
 8007d0a:	4b41      	ldr	r3, [pc, #260]	; (8007e10 <atanf+0x168>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	dc4d      	bgt.n	8007dac <atanf+0x104>
 8007d10:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007d14:	429c      	cmp	r4, r3
 8007d16:	dc3f      	bgt.n	8007d98 <atanf+0xf0>
 8007d18:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007d1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007d20:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007d24:	2300      	movs	r3, #0
 8007d26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007d34:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007e14 <atanf+0x16c>
 8007d38:	eddf 5a37 	vldr	s11, [pc, #220]	; 8007e18 <atanf+0x170>
 8007d3c:	ed9f 5a37 	vldr	s10, [pc, #220]	; 8007e1c <atanf+0x174>
 8007d40:	ee26 7a06 	vmul.f32	s14, s12, s12
 8007d44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007d48:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007e20 <atanf+0x178>
 8007d4c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007d50:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e24 <atanf+0x17c>
 8007d54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007d58:	eddf 6a33 	vldr	s13, [pc, #204]	; 8007e28 <atanf+0x180>
 8007d5c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007d60:	eddf 5a32 	vldr	s11, [pc, #200]	; 8007e2c <atanf+0x184>
 8007d64:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007d68:	eddf 6a31 	vldr	s13, [pc, #196]	; 8007e30 <atanf+0x188>
 8007d6c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007d70:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007e34 <atanf+0x18c>
 8007d74:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007d78:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8007e38 <atanf+0x190>
 8007d7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007d80:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007e3c <atanf+0x194>
 8007d84:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007d88:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007d8c:	ee05 7a86 	vmla.f32	s14, s11, s12
 8007d90:	d121      	bne.n	8007dd6 <atanf+0x12e>
 8007d92:	eee7 7ac7 	vfms.f32	s15, s15, s14
 8007d96:	e796      	b.n	8007cc6 <atanf+0x1e>
 8007d98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007da0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007da4:	2301      	movs	r3, #1
 8007da6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007daa:	e7c0      	b.n	8007d2e <atanf+0x86>
 8007dac:	4b24      	ldr	r3, [pc, #144]	; (8007e40 <atanf+0x198>)
 8007dae:	429c      	cmp	r4, r3
 8007db0:	dc0b      	bgt.n	8007dca <atanf+0x122>
 8007db2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dba:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc8:	e7b1      	b.n	8007d2e <atanf+0x86>
 8007dca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007dce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e7ab      	b.n	8007d2e <atanf+0x86>
 8007dd6:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <atanf+0x19c>)
 8007dd8:	491b      	ldr	r1, [pc, #108]	; (8007e48 <atanf+0x1a0>)
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	441a      	add	r2, r3
 8007dde:	440b      	add	r3, r1
 8007de0:	edd3 6a00 	vldr	s13, [r3]
 8007de4:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	ed92 7a00 	vldr	s14, [r2]
 8007dee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007df6:	bfb8      	it	lt
 8007df8:	eef1 7a67 	vneglt.f32	s15, s15
 8007dfc:	e763      	b.n	8007cc6 <atanf+0x1e>
 8007dfe:	bf00      	nop
 8007e00:	bfc90fdb 	.word	0xbfc90fdb
 8007e04:	3fc90fdb 	.word	0x3fc90fdb
 8007e08:	3edfffff 	.word	0x3edfffff
 8007e0c:	7149f2ca 	.word	0x7149f2ca
 8007e10:	3f97ffff 	.word	0x3f97ffff
 8007e14:	3c8569d7 	.word	0x3c8569d7
 8007e18:	3d4bda59 	.word	0x3d4bda59
 8007e1c:	bd6ef16b 	.word	0xbd6ef16b
 8007e20:	3d886b35 	.word	0x3d886b35
 8007e24:	3dba2e6e 	.word	0x3dba2e6e
 8007e28:	3e124925 	.word	0x3e124925
 8007e2c:	3eaaaaab 	.word	0x3eaaaaab
 8007e30:	bd15a221 	.word	0xbd15a221
 8007e34:	bd9d8795 	.word	0xbd9d8795
 8007e38:	bde38e38 	.word	0xbde38e38
 8007e3c:	be4ccccd 	.word	0xbe4ccccd
 8007e40:	401bffff 	.word	0x401bffff
 8007e44:	0800981c 	.word	0x0800981c
 8007e48:	0800982c 	.word	0x0800982c

08007e4c <fabsf>:
 8007e4c:	ee10 3a10 	vmov	r3, s0
 8007e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e54:	ee00 3a10 	vmov	s0, r3
 8007e58:	4770      	bx	lr
	...

08007e5c <floorf>:
 8007e5c:	ee10 3a10 	vmov	r3, s0
 8007e60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e64:	0dca      	lsrs	r2, r1, #23
 8007e66:	3a7f      	subs	r2, #127	; 0x7f
 8007e68:	2a16      	cmp	r2, #22
 8007e6a:	dc2a      	bgt.n	8007ec2 <floorf+0x66>
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	da11      	bge.n	8007e94 <floorf+0x38>
 8007e70:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007ed4 <floorf+0x78>
 8007e74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007e78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e80:	dd05      	ble.n	8007e8e <floorf+0x32>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da23      	bge.n	8007ece <floorf+0x72>
 8007e86:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <floorf+0x7c>)
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	bf18      	it	ne
 8007e8c:	4613      	movne	r3, r2
 8007e8e:	ee00 3a10 	vmov	s0, r3
 8007e92:	4770      	bx	lr
 8007e94:	4911      	ldr	r1, [pc, #68]	; (8007edc <floorf+0x80>)
 8007e96:	4111      	asrs	r1, r2
 8007e98:	420b      	tst	r3, r1
 8007e9a:	d0fa      	beq.n	8007e92 <floorf+0x36>
 8007e9c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007ed4 <floorf+0x78>
 8007ea0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ea4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eac:	ddef      	ble.n	8007e8e <floorf+0x32>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfbe      	ittt	lt
 8007eb2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007eb6:	fa40 f202 	asrlt.w	r2, r0, r2
 8007eba:	189b      	addlt	r3, r3, r2
 8007ebc:	ea23 0301 	bic.w	r3, r3, r1
 8007ec0:	e7e5      	b.n	8007e8e <floorf+0x32>
 8007ec2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007ec6:	d3e4      	bcc.n	8007e92 <floorf+0x36>
 8007ec8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ecc:	4770      	bx	lr
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e7dd      	b.n	8007e8e <floorf+0x32>
 8007ed2:	bf00      	nop
 8007ed4:	7149f2ca 	.word	0x7149f2ca
 8007ed8:	bf800000 	.word	0xbf800000
 8007edc:	007fffff 	.word	0x007fffff

08007ee0 <scalbnf>:
 8007ee0:	b508      	push	{r3, lr}
 8007ee2:	ee10 2a10 	vmov	r2, s0
 8007ee6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007eea:	ed2d 8b02 	vpush	{d8}
 8007eee:	eef0 0a40 	vmov.f32	s1, s0
 8007ef2:	d004      	beq.n	8007efe <scalbnf+0x1e>
 8007ef4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007ef8:	d306      	bcc.n	8007f08 <scalbnf+0x28>
 8007efa:	ee70 0a00 	vadd.f32	s1, s0, s0
 8007efe:	ecbd 8b02 	vpop	{d8}
 8007f02:	eeb0 0a60 	vmov.f32	s0, s1
 8007f06:	bd08      	pop	{r3, pc}
 8007f08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f0c:	d21c      	bcs.n	8007f48 <scalbnf+0x68>
 8007f0e:	4b1f      	ldr	r3, [pc, #124]	; (8007f8c <scalbnf+0xac>)
 8007f10:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007f90 <scalbnf+0xb0>
 8007f14:	4298      	cmp	r0, r3
 8007f16:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007f1a:	db10      	blt.n	8007f3e <scalbnf+0x5e>
 8007f1c:	ee10 2a90 	vmov	r2, s1
 8007f20:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007f24:	3b19      	subs	r3, #25
 8007f26:	4403      	add	r3, r0
 8007f28:	2bfe      	cmp	r3, #254	; 0xfe
 8007f2a:	dd0f      	ble.n	8007f4c <scalbnf+0x6c>
 8007f2c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007f94 <scalbnf+0xb4>
 8007f30:	eeb0 0a48 	vmov.f32	s0, s16
 8007f34:	f000 f834 	bl	8007fa0 <copysignf>
 8007f38:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007f3c:	e7df      	b.n	8007efe <scalbnf+0x1e>
 8007f3e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007f98 <scalbnf+0xb8>
 8007f42:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007f46:	e7da      	b.n	8007efe <scalbnf+0x1e>
 8007f48:	0ddb      	lsrs	r3, r3, #23
 8007f4a:	e7ec      	b.n	8007f26 <scalbnf+0x46>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd06      	ble.n	8007f5e <scalbnf+0x7e>
 8007f50:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007f54:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007f58:	ee00 3a90 	vmov	s1, r3
 8007f5c:	e7cf      	b.n	8007efe <scalbnf+0x1e>
 8007f5e:	f113 0f16 	cmn.w	r3, #22
 8007f62:	da06      	bge.n	8007f72 <scalbnf+0x92>
 8007f64:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f68:	4298      	cmp	r0, r3
 8007f6a:	dcdf      	bgt.n	8007f2c <scalbnf+0x4c>
 8007f6c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007f98 <scalbnf+0xb8>
 8007f70:	e7de      	b.n	8007f30 <scalbnf+0x50>
 8007f72:	3319      	adds	r3, #25
 8007f74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007f78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007f7c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007f9c <scalbnf+0xbc>
 8007f80:	ee07 3a10 	vmov	s14, r3
 8007f84:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007f88:	e7b9      	b.n	8007efe <scalbnf+0x1e>
 8007f8a:	bf00      	nop
 8007f8c:	ffff3cb0 	.word	0xffff3cb0
 8007f90:	4c000000 	.word	0x4c000000
 8007f94:	7149f2ca 	.word	0x7149f2ca
 8007f98:	0da24260 	.word	0x0da24260
 8007f9c:	33000000 	.word	0x33000000

08007fa0 <copysignf>:
 8007fa0:	ee10 3a10 	vmov	r3, s0
 8007fa4:	ee10 2a90 	vmov	r2, s1
 8007fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	ee00 3a10 	vmov	s0, r3
 8007fb6:	4770      	bx	lr

08007fb8 <abort>:
 8007fb8:	b508      	push	{r3, lr}
 8007fba:	2006      	movs	r0, #6
 8007fbc:	f000 fc24 	bl	8008808 <raise>
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	f000 fe01 	bl	8008bc8 <_exit>

08007fc6 <__cxa_atexit>:
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	460a      	mov	r2, r1
 8007fca:	4601      	mov	r1, r0
 8007fcc:	2002      	movs	r0, #2
 8007fce:	f000 bc37 	b.w	8008840 <__register_exitproc>
	...

08007fd4 <__libc_init_array>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	4e0d      	ldr	r6, [pc, #52]	; (800800c <__libc_init_array+0x38>)
 8007fd8:	4c0d      	ldr	r4, [pc, #52]	; (8008010 <__libc_init_array+0x3c>)
 8007fda:	1ba4      	subs	r4, r4, r6
 8007fdc:	10a4      	asrs	r4, r4, #2
 8007fde:	2500      	movs	r5, #0
 8007fe0:	42a5      	cmp	r5, r4
 8007fe2:	d109      	bne.n	8007ff8 <__libc_init_array+0x24>
 8007fe4:	4e0b      	ldr	r6, [pc, #44]	; (8008014 <__libc_init_array+0x40>)
 8007fe6:	4c0c      	ldr	r4, [pc, #48]	; (8008018 <__libc_init_array+0x44>)
 8007fe8:	f000 fdf0 	bl	8008bcc <_init>
 8007fec:	1ba4      	subs	r4, r4, r6
 8007fee:	10a4      	asrs	r4, r4, #2
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	42a5      	cmp	r5, r4
 8007ff4:	d105      	bne.n	8008002 <__libc_init_array+0x2e>
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ffc:	4798      	blx	r3
 8007ffe:	3501      	adds	r5, #1
 8008000:	e7ee      	b.n	8007fe0 <__libc_init_array+0xc>
 8008002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008006:	4798      	blx	r3
 8008008:	3501      	adds	r5, #1
 800800a:	e7f2      	b.n	8007ff2 <__libc_init_array+0x1e>
 800800c:	08009ce4 	.word	0x08009ce4
 8008010:	08009ce4 	.word	0x08009ce4
 8008014:	08009ce4 	.word	0x08009ce4
 8008018:	08009cec 	.word	0x08009cec

0800801c <malloc>:
 800801c:	4b02      	ldr	r3, [pc, #8]	; (8008028 <malloc+0xc>)
 800801e:	4601      	mov	r1, r0
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	f000 b80b 	b.w	800803c <_malloc_r>
 8008026:	bf00      	nop
 8008028:	20000010 	.word	0x20000010

0800802c <free>:
 800802c:	4b02      	ldr	r3, [pc, #8]	; (8008038 <free+0xc>)
 800802e:	4601      	mov	r1, r0
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	f000 bcd1 	b.w	80089d8 <_free_r>
 8008036:	bf00      	nop
 8008038:	20000010 	.word	0x20000010

0800803c <_malloc_r>:
 800803c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	f101 040b 	add.w	r4, r1, #11
 8008044:	2c16      	cmp	r4, #22
 8008046:	4681      	mov	r9, r0
 8008048:	d907      	bls.n	800805a <_malloc_r+0x1e>
 800804a:	f034 0407 	bics.w	r4, r4, #7
 800804e:	d505      	bpl.n	800805c <_malloc_r+0x20>
 8008050:	230c      	movs	r3, #12
 8008052:	f8c9 3000 	str.w	r3, [r9]
 8008056:	2600      	movs	r6, #0
 8008058:	e131      	b.n	80082be <_malloc_r+0x282>
 800805a:	2410      	movs	r4, #16
 800805c:	428c      	cmp	r4, r1
 800805e:	d3f7      	bcc.n	8008050 <_malloc_r+0x14>
 8008060:	4648      	mov	r0, r9
 8008062:	f000 fa05 	bl	8008470 <__malloc_lock>
 8008066:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800806a:	4d9c      	ldr	r5, [pc, #624]	; (80082dc <_malloc_r+0x2a0>)
 800806c:	d236      	bcs.n	80080dc <_malloc_r+0xa0>
 800806e:	f104 0208 	add.w	r2, r4, #8
 8008072:	442a      	add	r2, r5
 8008074:	f1a2 0108 	sub.w	r1, r2, #8
 8008078:	6856      	ldr	r6, [r2, #4]
 800807a:	428e      	cmp	r6, r1
 800807c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8008080:	d102      	bne.n	8008088 <_malloc_r+0x4c>
 8008082:	68d6      	ldr	r6, [r2, #12]
 8008084:	42b2      	cmp	r2, r6
 8008086:	d010      	beq.n	80080aa <_malloc_r+0x6e>
 8008088:	6873      	ldr	r3, [r6, #4]
 800808a:	68f2      	ldr	r2, [r6, #12]
 800808c:	68b1      	ldr	r1, [r6, #8]
 800808e:	f023 0303 	bic.w	r3, r3, #3
 8008092:	60ca      	str	r2, [r1, #12]
 8008094:	4433      	add	r3, r6
 8008096:	6091      	str	r1, [r2, #8]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	605a      	str	r2, [r3, #4]
 80080a0:	4648      	mov	r0, r9
 80080a2:	f000 f9eb 	bl	800847c <__malloc_unlock>
 80080a6:	3608      	adds	r6, #8
 80080a8:	e109      	b.n	80082be <_malloc_r+0x282>
 80080aa:	3302      	adds	r3, #2
 80080ac:	4a8c      	ldr	r2, [pc, #560]	; (80082e0 <_malloc_r+0x2a4>)
 80080ae:	692e      	ldr	r6, [r5, #16]
 80080b0:	4296      	cmp	r6, r2
 80080b2:	4611      	mov	r1, r2
 80080b4:	d06d      	beq.n	8008192 <_malloc_r+0x156>
 80080b6:	6870      	ldr	r0, [r6, #4]
 80080b8:	f020 0003 	bic.w	r0, r0, #3
 80080bc:	1b07      	subs	r7, r0, r4
 80080be:	2f0f      	cmp	r7, #15
 80080c0:	dd47      	ble.n	8008152 <_malloc_r+0x116>
 80080c2:	1933      	adds	r3, r6, r4
 80080c4:	f044 0401 	orr.w	r4, r4, #1
 80080c8:	6074      	str	r4, [r6, #4]
 80080ca:	616b      	str	r3, [r5, #20]
 80080cc:	612b      	str	r3, [r5, #16]
 80080ce:	60da      	str	r2, [r3, #12]
 80080d0:	609a      	str	r2, [r3, #8]
 80080d2:	f047 0201 	orr.w	r2, r7, #1
 80080d6:	605a      	str	r2, [r3, #4]
 80080d8:	5037      	str	r7, [r6, r0]
 80080da:	e7e1      	b.n	80080a0 <_malloc_r+0x64>
 80080dc:	0a63      	lsrs	r3, r4, #9
 80080de:	d02a      	beq.n	8008136 <_malloc_r+0xfa>
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d812      	bhi.n	800810a <_malloc_r+0xce>
 80080e4:	09a3      	lsrs	r3, r4, #6
 80080e6:	3338      	adds	r3, #56	; 0x38
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80080ee:	f1a2 0008 	sub.w	r0, r2, #8
 80080f2:	6856      	ldr	r6, [r2, #4]
 80080f4:	4286      	cmp	r6, r0
 80080f6:	d006      	beq.n	8008106 <_malloc_r+0xca>
 80080f8:	6872      	ldr	r2, [r6, #4]
 80080fa:	f022 0203 	bic.w	r2, r2, #3
 80080fe:	1b11      	subs	r1, r2, r4
 8008100:	290f      	cmp	r1, #15
 8008102:	dd1c      	ble.n	800813e <_malloc_r+0x102>
 8008104:	3b01      	subs	r3, #1
 8008106:	3301      	adds	r3, #1
 8008108:	e7d0      	b.n	80080ac <_malloc_r+0x70>
 800810a:	2b14      	cmp	r3, #20
 800810c:	d801      	bhi.n	8008112 <_malloc_r+0xd6>
 800810e:	335b      	adds	r3, #91	; 0x5b
 8008110:	e7ea      	b.n	80080e8 <_malloc_r+0xac>
 8008112:	2b54      	cmp	r3, #84	; 0x54
 8008114:	d802      	bhi.n	800811c <_malloc_r+0xe0>
 8008116:	0b23      	lsrs	r3, r4, #12
 8008118:	336e      	adds	r3, #110	; 0x6e
 800811a:	e7e5      	b.n	80080e8 <_malloc_r+0xac>
 800811c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008120:	d802      	bhi.n	8008128 <_malloc_r+0xec>
 8008122:	0be3      	lsrs	r3, r4, #15
 8008124:	3377      	adds	r3, #119	; 0x77
 8008126:	e7df      	b.n	80080e8 <_malloc_r+0xac>
 8008128:	f240 5254 	movw	r2, #1364	; 0x554
 800812c:	4293      	cmp	r3, r2
 800812e:	d804      	bhi.n	800813a <_malloc_r+0xfe>
 8008130:	0ca3      	lsrs	r3, r4, #18
 8008132:	337c      	adds	r3, #124	; 0x7c
 8008134:	e7d8      	b.n	80080e8 <_malloc_r+0xac>
 8008136:	233f      	movs	r3, #63	; 0x3f
 8008138:	e7d6      	b.n	80080e8 <_malloc_r+0xac>
 800813a:	237e      	movs	r3, #126	; 0x7e
 800813c:	e7d4      	b.n	80080e8 <_malloc_r+0xac>
 800813e:	2900      	cmp	r1, #0
 8008140:	68f1      	ldr	r1, [r6, #12]
 8008142:	db04      	blt.n	800814e <_malloc_r+0x112>
 8008144:	68b3      	ldr	r3, [r6, #8]
 8008146:	60d9      	str	r1, [r3, #12]
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	18b3      	adds	r3, r6, r2
 800814c:	e7a4      	b.n	8008098 <_malloc_r+0x5c>
 800814e:	460e      	mov	r6, r1
 8008150:	e7d0      	b.n	80080f4 <_malloc_r+0xb8>
 8008152:	2f00      	cmp	r7, #0
 8008154:	616a      	str	r2, [r5, #20]
 8008156:	612a      	str	r2, [r5, #16]
 8008158:	db05      	blt.n	8008166 <_malloc_r+0x12a>
 800815a:	4430      	add	r0, r6
 800815c:	6843      	ldr	r3, [r0, #4]
 800815e:	f043 0301 	orr.w	r3, r3, #1
 8008162:	6043      	str	r3, [r0, #4]
 8008164:	e79c      	b.n	80080a0 <_malloc_r+0x64>
 8008166:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800816a:	d244      	bcs.n	80081f6 <_malloc_r+0x1ba>
 800816c:	08c0      	lsrs	r0, r0, #3
 800816e:	1087      	asrs	r7, r0, #2
 8008170:	2201      	movs	r2, #1
 8008172:	fa02 f707 	lsl.w	r7, r2, r7
 8008176:	686a      	ldr	r2, [r5, #4]
 8008178:	3001      	adds	r0, #1
 800817a:	433a      	orrs	r2, r7
 800817c:	606a      	str	r2, [r5, #4]
 800817e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008182:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8008186:	60b7      	str	r7, [r6, #8]
 8008188:	3a08      	subs	r2, #8
 800818a:	60f2      	str	r2, [r6, #12]
 800818c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8008190:	60fe      	str	r6, [r7, #12]
 8008192:	2001      	movs	r0, #1
 8008194:	109a      	asrs	r2, r3, #2
 8008196:	fa00 f202 	lsl.w	r2, r0, r2
 800819a:	6868      	ldr	r0, [r5, #4]
 800819c:	4282      	cmp	r2, r0
 800819e:	f200 80a1 	bhi.w	80082e4 <_malloc_r+0x2a8>
 80081a2:	4202      	tst	r2, r0
 80081a4:	d106      	bne.n	80081b4 <_malloc_r+0x178>
 80081a6:	f023 0303 	bic.w	r3, r3, #3
 80081aa:	0052      	lsls	r2, r2, #1
 80081ac:	4202      	tst	r2, r0
 80081ae:	f103 0304 	add.w	r3, r3, #4
 80081b2:	d0fa      	beq.n	80081aa <_malloc_r+0x16e>
 80081b4:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80081b8:	46e0      	mov	r8, ip
 80081ba:	469e      	mov	lr, r3
 80081bc:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80081c0:	4546      	cmp	r6, r8
 80081c2:	d153      	bne.n	800826c <_malloc_r+0x230>
 80081c4:	f10e 0e01 	add.w	lr, lr, #1
 80081c8:	f01e 0f03 	tst.w	lr, #3
 80081cc:	f108 0808 	add.w	r8, r8, #8
 80081d0:	d1f4      	bne.n	80081bc <_malloc_r+0x180>
 80081d2:	0798      	lsls	r0, r3, #30
 80081d4:	d179      	bne.n	80082ca <_malloc_r+0x28e>
 80081d6:	686b      	ldr	r3, [r5, #4]
 80081d8:	ea23 0302 	bic.w	r3, r3, r2
 80081dc:	606b      	str	r3, [r5, #4]
 80081de:	6868      	ldr	r0, [r5, #4]
 80081e0:	0052      	lsls	r2, r2, #1
 80081e2:	4282      	cmp	r2, r0
 80081e4:	d87e      	bhi.n	80082e4 <_malloc_r+0x2a8>
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d07c      	beq.n	80082e4 <_malloc_r+0x2a8>
 80081ea:	4673      	mov	r3, lr
 80081ec:	4202      	tst	r2, r0
 80081ee:	d1e1      	bne.n	80081b4 <_malloc_r+0x178>
 80081f0:	3304      	adds	r3, #4
 80081f2:	0052      	lsls	r2, r2, #1
 80081f4:	e7fa      	b.n	80081ec <_malloc_r+0x1b0>
 80081f6:	0a42      	lsrs	r2, r0, #9
 80081f8:	2a04      	cmp	r2, #4
 80081fa:	d815      	bhi.n	8008228 <_malloc_r+0x1ec>
 80081fc:	0982      	lsrs	r2, r0, #6
 80081fe:	3238      	adds	r2, #56	; 0x38
 8008200:	1c57      	adds	r7, r2, #1
 8008202:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8008206:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800820a:	45be      	cmp	lr, r7
 800820c:	d126      	bne.n	800825c <_malloc_r+0x220>
 800820e:	2001      	movs	r0, #1
 8008210:	1092      	asrs	r2, r2, #2
 8008212:	fa00 f202 	lsl.w	r2, r0, r2
 8008216:	6868      	ldr	r0, [r5, #4]
 8008218:	4310      	orrs	r0, r2
 800821a:	6068      	str	r0, [r5, #4]
 800821c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8008220:	60b7      	str	r7, [r6, #8]
 8008222:	f8ce 6008 	str.w	r6, [lr, #8]
 8008226:	e7b3      	b.n	8008190 <_malloc_r+0x154>
 8008228:	2a14      	cmp	r2, #20
 800822a:	d801      	bhi.n	8008230 <_malloc_r+0x1f4>
 800822c:	325b      	adds	r2, #91	; 0x5b
 800822e:	e7e7      	b.n	8008200 <_malloc_r+0x1c4>
 8008230:	2a54      	cmp	r2, #84	; 0x54
 8008232:	d802      	bhi.n	800823a <_malloc_r+0x1fe>
 8008234:	0b02      	lsrs	r2, r0, #12
 8008236:	326e      	adds	r2, #110	; 0x6e
 8008238:	e7e2      	b.n	8008200 <_malloc_r+0x1c4>
 800823a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800823e:	d802      	bhi.n	8008246 <_malloc_r+0x20a>
 8008240:	0bc2      	lsrs	r2, r0, #15
 8008242:	3277      	adds	r2, #119	; 0x77
 8008244:	e7dc      	b.n	8008200 <_malloc_r+0x1c4>
 8008246:	f240 5754 	movw	r7, #1364	; 0x554
 800824a:	42ba      	cmp	r2, r7
 800824c:	bf9a      	itte	ls
 800824e:	0c82      	lsrls	r2, r0, #18
 8008250:	327c      	addls	r2, #124	; 0x7c
 8008252:	227e      	movhi	r2, #126	; 0x7e
 8008254:	e7d4      	b.n	8008200 <_malloc_r+0x1c4>
 8008256:	68bf      	ldr	r7, [r7, #8]
 8008258:	45be      	cmp	lr, r7
 800825a:	d004      	beq.n	8008266 <_malloc_r+0x22a>
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	f022 0203 	bic.w	r2, r2, #3
 8008262:	4290      	cmp	r0, r2
 8008264:	d3f7      	bcc.n	8008256 <_malloc_r+0x21a>
 8008266:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800826a:	e7d7      	b.n	800821c <_malloc_r+0x1e0>
 800826c:	6870      	ldr	r0, [r6, #4]
 800826e:	68f7      	ldr	r7, [r6, #12]
 8008270:	f020 0003 	bic.w	r0, r0, #3
 8008274:	eba0 0a04 	sub.w	sl, r0, r4
 8008278:	f1ba 0f0f 	cmp.w	sl, #15
 800827c:	dd10      	ble.n	80082a0 <_malloc_r+0x264>
 800827e:	68b2      	ldr	r2, [r6, #8]
 8008280:	1933      	adds	r3, r6, r4
 8008282:	f044 0401 	orr.w	r4, r4, #1
 8008286:	6074      	str	r4, [r6, #4]
 8008288:	60d7      	str	r7, [r2, #12]
 800828a:	60ba      	str	r2, [r7, #8]
 800828c:	f04a 0201 	orr.w	r2, sl, #1
 8008290:	616b      	str	r3, [r5, #20]
 8008292:	612b      	str	r3, [r5, #16]
 8008294:	60d9      	str	r1, [r3, #12]
 8008296:	6099      	str	r1, [r3, #8]
 8008298:	605a      	str	r2, [r3, #4]
 800829a:	f846 a000 	str.w	sl, [r6, r0]
 800829e:	e6ff      	b.n	80080a0 <_malloc_r+0x64>
 80082a0:	f1ba 0f00 	cmp.w	sl, #0
 80082a4:	db0f      	blt.n	80082c6 <_malloc_r+0x28a>
 80082a6:	4430      	add	r0, r6
 80082a8:	6843      	ldr	r3, [r0, #4]
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	6043      	str	r3, [r0, #4]
 80082b0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80082b4:	4648      	mov	r0, r9
 80082b6:	60df      	str	r7, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	f000 f8df 	bl	800847c <__malloc_unlock>
 80082be:	4630      	mov	r0, r6
 80082c0:	b003      	add	sp, #12
 80082c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c6:	463e      	mov	r6, r7
 80082c8:	e77a      	b.n	80081c0 <_malloc_r+0x184>
 80082ca:	f85c 0908 	ldr.w	r0, [ip], #-8
 80082ce:	4584      	cmp	ip, r0
 80082d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80082d4:	f43f af7d 	beq.w	80081d2 <_malloc_r+0x196>
 80082d8:	e781      	b.n	80081de <_malloc_r+0x1a2>
 80082da:	bf00      	nop
 80082dc:	20000104 	.word	0x20000104
 80082e0:	2000010c 	.word	0x2000010c
 80082e4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80082e8:	f8db 6004 	ldr.w	r6, [fp, #4]
 80082ec:	f026 0603 	bic.w	r6, r6, #3
 80082f0:	42b4      	cmp	r4, r6
 80082f2:	d803      	bhi.n	80082fc <_malloc_r+0x2c0>
 80082f4:	1b33      	subs	r3, r6, r4
 80082f6:	2b0f      	cmp	r3, #15
 80082f8:	f300 8096 	bgt.w	8008428 <_malloc_r+0x3ec>
 80082fc:	4a4f      	ldr	r2, [pc, #316]	; (800843c <_malloc_r+0x400>)
 80082fe:	6817      	ldr	r7, [r2, #0]
 8008300:	4a4f      	ldr	r2, [pc, #316]	; (8008440 <_malloc_r+0x404>)
 8008302:	6811      	ldr	r1, [r2, #0]
 8008304:	3710      	adds	r7, #16
 8008306:	3101      	adds	r1, #1
 8008308:	eb0b 0306 	add.w	r3, fp, r6
 800830c:	4427      	add	r7, r4
 800830e:	d005      	beq.n	800831c <_malloc_r+0x2e0>
 8008310:	494c      	ldr	r1, [pc, #304]	; (8008444 <_malloc_r+0x408>)
 8008312:	3901      	subs	r1, #1
 8008314:	440f      	add	r7, r1
 8008316:	3101      	adds	r1, #1
 8008318:	4249      	negs	r1, r1
 800831a:	400f      	ands	r7, r1
 800831c:	4639      	mov	r1, r7
 800831e:	4648      	mov	r0, r9
 8008320:	9201      	str	r2, [sp, #4]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	f000 fa38 	bl	8008798 <_sbrk_r>
 8008328:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800832c:	4680      	mov	r8, r0
 800832e:	d056      	beq.n	80083de <_malloc_r+0x3a2>
 8008330:	9b00      	ldr	r3, [sp, #0]
 8008332:	9a01      	ldr	r2, [sp, #4]
 8008334:	4283      	cmp	r3, r0
 8008336:	d901      	bls.n	800833c <_malloc_r+0x300>
 8008338:	45ab      	cmp	fp, r5
 800833a:	d150      	bne.n	80083de <_malloc_r+0x3a2>
 800833c:	4842      	ldr	r0, [pc, #264]	; (8008448 <_malloc_r+0x40c>)
 800833e:	6801      	ldr	r1, [r0, #0]
 8008340:	4543      	cmp	r3, r8
 8008342:	eb07 0e01 	add.w	lr, r7, r1
 8008346:	f8c0 e000 	str.w	lr, [r0]
 800834a:	4940      	ldr	r1, [pc, #256]	; (800844c <_malloc_r+0x410>)
 800834c:	4682      	mov	sl, r0
 800834e:	d113      	bne.n	8008378 <_malloc_r+0x33c>
 8008350:	420b      	tst	r3, r1
 8008352:	d111      	bne.n	8008378 <_malloc_r+0x33c>
 8008354:	68ab      	ldr	r3, [r5, #8]
 8008356:	443e      	add	r6, r7
 8008358:	f046 0601 	orr.w	r6, r6, #1
 800835c:	605e      	str	r6, [r3, #4]
 800835e:	4a3c      	ldr	r2, [pc, #240]	; (8008450 <_malloc_r+0x414>)
 8008360:	f8da 3000 	ldr.w	r3, [sl]
 8008364:	6811      	ldr	r1, [r2, #0]
 8008366:	428b      	cmp	r3, r1
 8008368:	bf88      	it	hi
 800836a:	6013      	strhi	r3, [r2, #0]
 800836c:	4a39      	ldr	r2, [pc, #228]	; (8008454 <_malloc_r+0x418>)
 800836e:	6811      	ldr	r1, [r2, #0]
 8008370:	428b      	cmp	r3, r1
 8008372:	bf88      	it	hi
 8008374:	6013      	strhi	r3, [r2, #0]
 8008376:	e032      	b.n	80083de <_malloc_r+0x3a2>
 8008378:	6810      	ldr	r0, [r2, #0]
 800837a:	3001      	adds	r0, #1
 800837c:	bf1b      	ittet	ne
 800837e:	eba8 0303 	subne.w	r3, r8, r3
 8008382:	4473      	addne	r3, lr
 8008384:	f8c2 8000 	streq.w	r8, [r2]
 8008388:	f8ca 3000 	strne.w	r3, [sl]
 800838c:	f018 0007 	ands.w	r0, r8, #7
 8008390:	bf1c      	itt	ne
 8008392:	f1c0 0008 	rsbne	r0, r0, #8
 8008396:	4480      	addne	r8, r0
 8008398:	4b2a      	ldr	r3, [pc, #168]	; (8008444 <_malloc_r+0x408>)
 800839a:	4447      	add	r7, r8
 800839c:	4418      	add	r0, r3
 800839e:	400f      	ands	r7, r1
 80083a0:	1bc7      	subs	r7, r0, r7
 80083a2:	4639      	mov	r1, r7
 80083a4:	4648      	mov	r0, r9
 80083a6:	f000 f9f7 	bl	8008798 <_sbrk_r>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	bf08      	it	eq
 80083ae:	4640      	moveq	r0, r8
 80083b0:	f8da 3000 	ldr.w	r3, [sl]
 80083b4:	f8c5 8008 	str.w	r8, [r5, #8]
 80083b8:	bf08      	it	eq
 80083ba:	2700      	moveq	r7, #0
 80083bc:	eba0 0008 	sub.w	r0, r0, r8
 80083c0:	443b      	add	r3, r7
 80083c2:	4407      	add	r7, r0
 80083c4:	f047 0701 	orr.w	r7, r7, #1
 80083c8:	45ab      	cmp	fp, r5
 80083ca:	f8ca 3000 	str.w	r3, [sl]
 80083ce:	f8c8 7004 	str.w	r7, [r8, #4]
 80083d2:	d0c4      	beq.n	800835e <_malloc_r+0x322>
 80083d4:	2e0f      	cmp	r6, #15
 80083d6:	d810      	bhi.n	80083fa <_malloc_r+0x3be>
 80083d8:	2301      	movs	r3, #1
 80083da:	f8c8 3004 	str.w	r3, [r8, #4]
 80083de:	68ab      	ldr	r3, [r5, #8]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	f022 0203 	bic.w	r2, r2, #3
 80083e6:	4294      	cmp	r4, r2
 80083e8:	eba2 0304 	sub.w	r3, r2, r4
 80083ec:	d801      	bhi.n	80083f2 <_malloc_r+0x3b6>
 80083ee:	2b0f      	cmp	r3, #15
 80083f0:	dc1a      	bgt.n	8008428 <_malloc_r+0x3ec>
 80083f2:	4648      	mov	r0, r9
 80083f4:	f000 f842 	bl	800847c <__malloc_unlock>
 80083f8:	e62d      	b.n	8008056 <_malloc_r+0x1a>
 80083fa:	f8db 3004 	ldr.w	r3, [fp, #4]
 80083fe:	3e0c      	subs	r6, #12
 8008400:	f026 0607 	bic.w	r6, r6, #7
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	4333      	orrs	r3, r6
 800840a:	f8cb 3004 	str.w	r3, [fp, #4]
 800840e:	eb0b 0306 	add.w	r3, fp, r6
 8008412:	2205      	movs	r2, #5
 8008414:	2e0f      	cmp	r6, #15
 8008416:	605a      	str	r2, [r3, #4]
 8008418:	609a      	str	r2, [r3, #8]
 800841a:	d9a0      	bls.n	800835e <_malloc_r+0x322>
 800841c:	f10b 0108 	add.w	r1, fp, #8
 8008420:	4648      	mov	r0, r9
 8008422:	f000 fad9 	bl	80089d8 <_free_r>
 8008426:	e79a      	b.n	800835e <_malloc_r+0x322>
 8008428:	68ae      	ldr	r6, [r5, #8]
 800842a:	f044 0201 	orr.w	r2, r4, #1
 800842e:	4434      	add	r4, r6
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	6072      	str	r2, [r6, #4]
 8008436:	60ac      	str	r4, [r5, #8]
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	e631      	b.n	80080a0 <_malloc_r+0x64>
 800843c:	20003d4c 	.word	0x20003d4c
 8008440:	2000050c 	.word	0x2000050c
 8008444:	00001000 	.word	0x00001000
 8008448:	20003d1c 	.word	0x20003d1c
 800844c:	00000fff 	.word	0x00000fff
 8008450:	20003d44 	.word	0x20003d44
 8008454:	20003d48 	.word	0x20003d48

08008458 <memcpy>:
 8008458:	b510      	push	{r4, lr}
 800845a:	1e43      	subs	r3, r0, #1
 800845c:	440a      	add	r2, r1
 800845e:	4291      	cmp	r1, r2
 8008460:	d100      	bne.n	8008464 <memcpy+0xc>
 8008462:	bd10      	pop	{r4, pc}
 8008464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800846c:	e7f7      	b.n	800845e <memcpy+0x6>
	...

08008470 <__malloc_lock>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__malloc_lock+0x8>)
 8008472:	f000 bb6d 	b.w	8008b50 <__retarget_lock_acquire_recursive>
 8008476:	bf00      	nop
 8008478:	20003e60 	.word	0x20003e60

0800847c <__malloc_unlock>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__malloc_unlock+0x8>)
 800847e:	f000 bb69 	b.w	8008b54 <__retarget_lock_release_recursive>
 8008482:	bf00      	nop
 8008484:	20003e60 	.word	0x20003e60

08008488 <realloc>:
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <realloc+0xc>)
 800848a:	460a      	mov	r2, r1
 800848c:	4601      	mov	r1, r0
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	f000 b802 	b.w	8008498 <_realloc_r>
 8008494:	20000010 	.word	0x20000010

08008498 <_realloc_r>:
 8008498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	4682      	mov	sl, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	b929      	cbnz	r1, 80084ae <_realloc_r+0x16>
 80084a2:	4611      	mov	r1, r2
 80084a4:	b003      	add	sp, #12
 80084a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084aa:	f7ff bdc7 	b.w	800803c <_malloc_r>
 80084ae:	9201      	str	r2, [sp, #4]
 80084b0:	f7ff ffde 	bl	8008470 <__malloc_lock>
 80084b4:	9a01      	ldr	r2, [sp, #4]
 80084b6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80084ba:	f102 080b 	add.w	r8, r2, #11
 80084be:	f1b8 0f16 	cmp.w	r8, #22
 80084c2:	f1a4 0908 	sub.w	r9, r4, #8
 80084c6:	f025 0603 	bic.w	r6, r5, #3
 80084ca:	d90a      	bls.n	80084e2 <_realloc_r+0x4a>
 80084cc:	f038 0807 	bics.w	r8, r8, #7
 80084d0:	d509      	bpl.n	80084e6 <_realloc_r+0x4e>
 80084d2:	230c      	movs	r3, #12
 80084d4:	f8ca 3000 	str.w	r3, [sl]
 80084d8:	2700      	movs	r7, #0
 80084da:	4638      	mov	r0, r7
 80084dc:	b003      	add	sp, #12
 80084de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e2:	f04f 0810 	mov.w	r8, #16
 80084e6:	4590      	cmp	r8, r2
 80084e8:	d3f3      	bcc.n	80084d2 <_realloc_r+0x3a>
 80084ea:	45b0      	cmp	r8, r6
 80084ec:	f340 8145 	ble.w	800877a <_realloc_r+0x2e2>
 80084f0:	4ba8      	ldr	r3, [pc, #672]	; (8008794 <_realloc_r+0x2fc>)
 80084f2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80084f6:	eb09 0106 	add.w	r1, r9, r6
 80084fa:	4571      	cmp	r1, lr
 80084fc:	469b      	mov	fp, r3
 80084fe:	684b      	ldr	r3, [r1, #4]
 8008500:	d005      	beq.n	800850e <_realloc_r+0x76>
 8008502:	f023 0001 	bic.w	r0, r3, #1
 8008506:	4408      	add	r0, r1
 8008508:	6840      	ldr	r0, [r0, #4]
 800850a:	07c7      	lsls	r7, r0, #31
 800850c:	d447      	bmi.n	800859e <_realloc_r+0x106>
 800850e:	f023 0303 	bic.w	r3, r3, #3
 8008512:	4571      	cmp	r1, lr
 8008514:	eb06 0703 	add.w	r7, r6, r3
 8008518:	d119      	bne.n	800854e <_realloc_r+0xb6>
 800851a:	f108 0010 	add.w	r0, r8, #16
 800851e:	4287      	cmp	r7, r0
 8008520:	db3f      	blt.n	80085a2 <_realloc_r+0x10a>
 8008522:	eb09 0308 	add.w	r3, r9, r8
 8008526:	eba7 0708 	sub.w	r7, r7, r8
 800852a:	f047 0701 	orr.w	r7, r7, #1
 800852e:	f8cb 3008 	str.w	r3, [fp, #8]
 8008532:	605f      	str	r7, [r3, #4]
 8008534:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	ea43 0308 	orr.w	r3, r3, r8
 8008540:	f844 3c04 	str.w	r3, [r4, #-4]
 8008544:	4650      	mov	r0, sl
 8008546:	f7ff ff99 	bl	800847c <__malloc_unlock>
 800854a:	4627      	mov	r7, r4
 800854c:	e7c5      	b.n	80084da <_realloc_r+0x42>
 800854e:	45b8      	cmp	r8, r7
 8008550:	dc27      	bgt.n	80085a2 <_realloc_r+0x10a>
 8008552:	68cb      	ldr	r3, [r1, #12]
 8008554:	688a      	ldr	r2, [r1, #8]
 8008556:	60d3      	str	r3, [r2, #12]
 8008558:	609a      	str	r2, [r3, #8]
 800855a:	eba7 0008 	sub.w	r0, r7, r8
 800855e:	280f      	cmp	r0, #15
 8008560:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008564:	eb09 0207 	add.w	r2, r9, r7
 8008568:	f240 8109 	bls.w	800877e <_realloc_r+0x2e6>
 800856c:	eb09 0108 	add.w	r1, r9, r8
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	ea43 0308 	orr.w	r3, r3, r8
 8008578:	f040 0001 	orr.w	r0, r0, #1
 800857c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008580:	6048      	str	r0, [r1, #4]
 8008582:	6853      	ldr	r3, [r2, #4]
 8008584:	f043 0301 	orr.w	r3, r3, #1
 8008588:	6053      	str	r3, [r2, #4]
 800858a:	3108      	adds	r1, #8
 800858c:	4650      	mov	r0, sl
 800858e:	f000 fa23 	bl	80089d8 <_free_r>
 8008592:	4650      	mov	r0, sl
 8008594:	f7ff ff72 	bl	800847c <__malloc_unlock>
 8008598:	f109 0708 	add.w	r7, r9, #8
 800859c:	e79d      	b.n	80084da <_realloc_r+0x42>
 800859e:	2300      	movs	r3, #0
 80085a0:	4619      	mov	r1, r3
 80085a2:	07e8      	lsls	r0, r5, #31
 80085a4:	f100 8084 	bmi.w	80086b0 <_realloc_r+0x218>
 80085a8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80085ac:	eba9 0505 	sub.w	r5, r9, r5
 80085b0:	6868      	ldr	r0, [r5, #4]
 80085b2:	f020 0003 	bic.w	r0, r0, #3
 80085b6:	4430      	add	r0, r6
 80085b8:	2900      	cmp	r1, #0
 80085ba:	d076      	beq.n	80086aa <_realloc_r+0x212>
 80085bc:	4571      	cmp	r1, lr
 80085be:	d150      	bne.n	8008662 <_realloc_r+0x1ca>
 80085c0:	4403      	add	r3, r0
 80085c2:	f108 0110 	add.w	r1, r8, #16
 80085c6:	428b      	cmp	r3, r1
 80085c8:	db6f      	blt.n	80086aa <_realloc_r+0x212>
 80085ca:	462f      	mov	r7, r5
 80085cc:	68ea      	ldr	r2, [r5, #12]
 80085ce:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80085d2:	60ca      	str	r2, [r1, #12]
 80085d4:	6091      	str	r1, [r2, #8]
 80085d6:	1f32      	subs	r2, r6, #4
 80085d8:	2a24      	cmp	r2, #36	; 0x24
 80085da:	d83b      	bhi.n	8008654 <_realloc_r+0x1bc>
 80085dc:	2a13      	cmp	r2, #19
 80085de:	d936      	bls.n	800864e <_realloc_r+0x1b6>
 80085e0:	6821      	ldr	r1, [r4, #0]
 80085e2:	60a9      	str	r1, [r5, #8]
 80085e4:	6861      	ldr	r1, [r4, #4]
 80085e6:	60e9      	str	r1, [r5, #12]
 80085e8:	2a1b      	cmp	r2, #27
 80085ea:	d81c      	bhi.n	8008626 <_realloc_r+0x18e>
 80085ec:	f105 0210 	add.w	r2, r5, #16
 80085f0:	f104 0108 	add.w	r1, r4, #8
 80085f4:	6808      	ldr	r0, [r1, #0]
 80085f6:	6010      	str	r0, [r2, #0]
 80085f8:	6848      	ldr	r0, [r1, #4]
 80085fa:	6050      	str	r0, [r2, #4]
 80085fc:	6889      	ldr	r1, [r1, #8]
 80085fe:	6091      	str	r1, [r2, #8]
 8008600:	eb05 0208 	add.w	r2, r5, r8
 8008604:	eba3 0308 	sub.w	r3, r3, r8
 8008608:	f043 0301 	orr.w	r3, r3, #1
 800860c:	f8cb 2008 	str.w	r2, [fp, #8]
 8008610:	6053      	str	r3, [r2, #4]
 8008612:	686b      	ldr	r3, [r5, #4]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	ea43 0308 	orr.w	r3, r3, r8
 800861c:	606b      	str	r3, [r5, #4]
 800861e:	4650      	mov	r0, sl
 8008620:	f7ff ff2c 	bl	800847c <__malloc_unlock>
 8008624:	e759      	b.n	80084da <_realloc_r+0x42>
 8008626:	68a1      	ldr	r1, [r4, #8]
 8008628:	6129      	str	r1, [r5, #16]
 800862a:	68e1      	ldr	r1, [r4, #12]
 800862c:	6169      	str	r1, [r5, #20]
 800862e:	2a24      	cmp	r2, #36	; 0x24
 8008630:	bf01      	itttt	eq
 8008632:	6922      	ldreq	r2, [r4, #16]
 8008634:	61aa      	streq	r2, [r5, #24]
 8008636:	6960      	ldreq	r0, [r4, #20]
 8008638:	61e8      	streq	r0, [r5, #28]
 800863a:	bf19      	ittee	ne
 800863c:	f105 0218 	addne.w	r2, r5, #24
 8008640:	f104 0110 	addne.w	r1, r4, #16
 8008644:	f105 0220 	addeq.w	r2, r5, #32
 8008648:	f104 0118 	addeq.w	r1, r4, #24
 800864c:	e7d2      	b.n	80085f4 <_realloc_r+0x15c>
 800864e:	463a      	mov	r2, r7
 8008650:	4621      	mov	r1, r4
 8008652:	e7cf      	b.n	80085f4 <_realloc_r+0x15c>
 8008654:	4621      	mov	r1, r4
 8008656:	4638      	mov	r0, r7
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	f000 fa7c 	bl	8008b56 <memmove>
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	e7ce      	b.n	8008600 <_realloc_r+0x168>
 8008662:	18c7      	adds	r7, r0, r3
 8008664:	45b8      	cmp	r8, r7
 8008666:	dc20      	bgt.n	80086aa <_realloc_r+0x212>
 8008668:	68cb      	ldr	r3, [r1, #12]
 800866a:	688a      	ldr	r2, [r1, #8]
 800866c:	60d3      	str	r3, [r2, #12]
 800866e:	609a      	str	r2, [r3, #8]
 8008670:	4628      	mov	r0, r5
 8008672:	68eb      	ldr	r3, [r5, #12]
 8008674:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008678:	60d3      	str	r3, [r2, #12]
 800867a:	609a      	str	r2, [r3, #8]
 800867c:	1f32      	subs	r2, r6, #4
 800867e:	2a24      	cmp	r2, #36	; 0x24
 8008680:	d842      	bhi.n	8008708 <_realloc_r+0x270>
 8008682:	2a13      	cmp	r2, #19
 8008684:	d93e      	bls.n	8008704 <_realloc_r+0x26c>
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	60ab      	str	r3, [r5, #8]
 800868a:	6863      	ldr	r3, [r4, #4]
 800868c:	60eb      	str	r3, [r5, #12]
 800868e:	2a1b      	cmp	r2, #27
 8008690:	d824      	bhi.n	80086dc <_realloc_r+0x244>
 8008692:	f105 0010 	add.w	r0, r5, #16
 8008696:	f104 0308 	add.w	r3, r4, #8
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	6002      	str	r2, [r0, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	6042      	str	r2, [r0, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6083      	str	r3, [r0, #8]
 80086a6:	46a9      	mov	r9, r5
 80086a8:	e757      	b.n	800855a <_realloc_r+0xc2>
 80086aa:	4580      	cmp	r8, r0
 80086ac:	4607      	mov	r7, r0
 80086ae:	dddf      	ble.n	8008670 <_realloc_r+0x1d8>
 80086b0:	4611      	mov	r1, r2
 80086b2:	4650      	mov	r0, sl
 80086b4:	f7ff fcc2 	bl	800803c <_malloc_r>
 80086b8:	4607      	mov	r7, r0
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d0af      	beq.n	800861e <_realloc_r+0x186>
 80086be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80086c2:	f023 0301 	bic.w	r3, r3, #1
 80086c6:	f1a0 0208 	sub.w	r2, r0, #8
 80086ca:	444b      	add	r3, r9
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d11f      	bne.n	8008710 <_realloc_r+0x278>
 80086d0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80086d4:	f027 0703 	bic.w	r7, r7, #3
 80086d8:	4437      	add	r7, r6
 80086da:	e73e      	b.n	800855a <_realloc_r+0xc2>
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	612b      	str	r3, [r5, #16]
 80086e0:	68e3      	ldr	r3, [r4, #12]
 80086e2:	616b      	str	r3, [r5, #20]
 80086e4:	2a24      	cmp	r2, #36	; 0x24
 80086e6:	bf01      	itttt	eq
 80086e8:	6923      	ldreq	r3, [r4, #16]
 80086ea:	61ab      	streq	r3, [r5, #24]
 80086ec:	6962      	ldreq	r2, [r4, #20]
 80086ee:	61ea      	streq	r2, [r5, #28]
 80086f0:	bf19      	ittee	ne
 80086f2:	f105 0018 	addne.w	r0, r5, #24
 80086f6:	f104 0310 	addne.w	r3, r4, #16
 80086fa:	f105 0020 	addeq.w	r0, r5, #32
 80086fe:	f104 0318 	addeq.w	r3, r4, #24
 8008702:	e7ca      	b.n	800869a <_realloc_r+0x202>
 8008704:	4623      	mov	r3, r4
 8008706:	e7c8      	b.n	800869a <_realloc_r+0x202>
 8008708:	4621      	mov	r1, r4
 800870a:	f000 fa24 	bl	8008b56 <memmove>
 800870e:	e7ca      	b.n	80086a6 <_realloc_r+0x20e>
 8008710:	1f32      	subs	r2, r6, #4
 8008712:	2a24      	cmp	r2, #36	; 0x24
 8008714:	d82d      	bhi.n	8008772 <_realloc_r+0x2da>
 8008716:	2a13      	cmp	r2, #19
 8008718:	d928      	bls.n	800876c <_realloc_r+0x2d4>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	6003      	str	r3, [r0, #0]
 800871e:	6863      	ldr	r3, [r4, #4]
 8008720:	6043      	str	r3, [r0, #4]
 8008722:	2a1b      	cmp	r2, #27
 8008724:	d80e      	bhi.n	8008744 <_realloc_r+0x2ac>
 8008726:	f100 0308 	add.w	r3, r0, #8
 800872a:	f104 0208 	add.w	r2, r4, #8
 800872e:	6811      	ldr	r1, [r2, #0]
 8008730:	6019      	str	r1, [r3, #0]
 8008732:	6851      	ldr	r1, [r2, #4]
 8008734:	6059      	str	r1, [r3, #4]
 8008736:	6892      	ldr	r2, [r2, #8]
 8008738:	609a      	str	r2, [r3, #8]
 800873a:	4621      	mov	r1, r4
 800873c:	4650      	mov	r0, sl
 800873e:	f000 f94b 	bl	80089d8 <_free_r>
 8008742:	e76c      	b.n	800861e <_realloc_r+0x186>
 8008744:	68a3      	ldr	r3, [r4, #8]
 8008746:	6083      	str	r3, [r0, #8]
 8008748:	68e3      	ldr	r3, [r4, #12]
 800874a:	60c3      	str	r3, [r0, #12]
 800874c:	2a24      	cmp	r2, #36	; 0x24
 800874e:	bf01      	itttt	eq
 8008750:	6923      	ldreq	r3, [r4, #16]
 8008752:	6103      	streq	r3, [r0, #16]
 8008754:	6961      	ldreq	r1, [r4, #20]
 8008756:	6141      	streq	r1, [r0, #20]
 8008758:	bf19      	ittee	ne
 800875a:	f100 0310 	addne.w	r3, r0, #16
 800875e:	f104 0210 	addne.w	r2, r4, #16
 8008762:	f100 0318 	addeq.w	r3, r0, #24
 8008766:	f104 0218 	addeq.w	r2, r4, #24
 800876a:	e7e0      	b.n	800872e <_realloc_r+0x296>
 800876c:	4603      	mov	r3, r0
 800876e:	4622      	mov	r2, r4
 8008770:	e7dd      	b.n	800872e <_realloc_r+0x296>
 8008772:	4621      	mov	r1, r4
 8008774:	f000 f9ef 	bl	8008b56 <memmove>
 8008778:	e7df      	b.n	800873a <_realloc_r+0x2a2>
 800877a:	4637      	mov	r7, r6
 800877c:	e6ed      	b.n	800855a <_realloc_r+0xc2>
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	431f      	orrs	r7, r3
 8008784:	f8c9 7004 	str.w	r7, [r9, #4]
 8008788:	6853      	ldr	r3, [r2, #4]
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	6053      	str	r3, [r2, #4]
 8008790:	e6ff      	b.n	8008592 <_realloc_r+0xfa>
 8008792:	bf00      	nop
 8008794:	20000104 	.word	0x20000104

08008798 <_sbrk_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4c06      	ldr	r4, [pc, #24]	; (80087b4 <_sbrk_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4605      	mov	r5, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	f000 fa02 	bl	8008bac <_sbrk>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_sbrk_r+0x1a>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_sbrk_r+0x1a>
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20003e68 	.word	0x20003e68

080087b8 <_raise_r>:
 80087b8:	291f      	cmp	r1, #31
 80087ba:	b538      	push	{r3, r4, r5, lr}
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	d904      	bls.n	80087cc <_raise_r+0x14>
 80087c2:	2316      	movs	r3, #22
 80087c4:	6003      	str	r3, [r0, #0]
 80087c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087ce:	b112      	cbz	r2, 80087d6 <_raise_r+0x1e>
 80087d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087d4:	b94b      	cbnz	r3, 80087ea <_raise_r+0x32>
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 f830 	bl	800883c <_getpid_r>
 80087dc:	462a      	mov	r2, r5
 80087de:	4601      	mov	r1, r0
 80087e0:	4620      	mov	r0, r4
 80087e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e6:	f000 b817 	b.w	8008818 <_kill_r>
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d00a      	beq.n	8008804 <_raise_r+0x4c>
 80087ee:	1c59      	adds	r1, r3, #1
 80087f0:	d103      	bne.n	80087fa <_raise_r+0x42>
 80087f2:	2316      	movs	r3, #22
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	2001      	movs	r0, #1
 80087f8:	bd38      	pop	{r3, r4, r5, pc}
 80087fa:	2400      	movs	r4, #0
 80087fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008800:	4628      	mov	r0, r5
 8008802:	4798      	blx	r3
 8008804:	2000      	movs	r0, #0
 8008806:	bd38      	pop	{r3, r4, r5, pc}

08008808 <raise>:
 8008808:	4b02      	ldr	r3, [pc, #8]	; (8008814 <raise+0xc>)
 800880a:	4601      	mov	r1, r0
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	f7ff bfd3 	b.w	80087b8 <_raise_r>
 8008812:	bf00      	nop
 8008814:	20000010 	.word	0x20000010

08008818 <_kill_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4c07      	ldr	r4, [pc, #28]	; (8008838 <_kill_r+0x20>)
 800881c:	2300      	movs	r3, #0
 800881e:	4605      	mov	r5, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	f000 f9b9 	bl	8008b9c <_kill>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d102      	bne.n	8008834 <_kill_r+0x1c>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	b103      	cbz	r3, 8008834 <_kill_r+0x1c>
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	20003e68 	.word	0x20003e68

0800883c <_getpid_r>:
 800883c:	f000 b9a6 	b.w	8008b8c <_getpid>

08008840 <__register_exitproc>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	4d35      	ldr	r5, [pc, #212]	; (800891c <__register_exitproc+0xdc>)
 8008846:	4680      	mov	r8, r0
 8008848:	6828      	ldr	r0, [r5, #0]
 800884a:	4699      	mov	r9, r3
 800884c:	460f      	mov	r7, r1
 800884e:	4692      	mov	sl, r2
 8008850:	f000 f97e 	bl	8008b50 <__retarget_lock_acquire_recursive>
 8008854:	4b32      	ldr	r3, [pc, #200]	; (8008920 <__register_exitproc+0xe0>)
 8008856:	681e      	ldr	r6, [r3, #0]
 8008858:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800885a:	b93c      	cbnz	r4, 800886c <__register_exitproc+0x2c>
 800885c:	4b31      	ldr	r3, [pc, #196]	; (8008924 <__register_exitproc+0xe4>)
 800885e:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8008862:	64b4      	str	r4, [r6, #72]	; 0x48
 8008864:	b113      	cbz	r3, 800886c <__register_exitproc+0x2c>
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	2b1f      	cmp	r3, #31
 8008870:	dd46      	ble.n	8008900 <__register_exitproc+0xc0>
 8008872:	4b2d      	ldr	r3, [pc, #180]	; (8008928 <__register_exitproc+0xe8>)
 8008874:	b933      	cbnz	r3, 8008884 <__register_exitproc+0x44>
 8008876:	6828      	ldr	r0, [r5, #0]
 8008878:	f000 f96c 	bl	8008b54 <__retarget_lock_release_recursive>
 800887c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008884:	208c      	movs	r0, #140	; 0x8c
 8008886:	f7ff fbc9 	bl	800801c <malloc>
 800888a:	4604      	mov	r4, r0
 800888c:	2800      	cmp	r0, #0
 800888e:	d0f2      	beq.n	8008876 <__register_exitproc+0x36>
 8008890:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8008892:	6003      	str	r3, [r0, #0]
 8008894:	2200      	movs	r2, #0
 8008896:	6042      	str	r2, [r0, #4]
 8008898:	64b0      	str	r0, [r6, #72]	; 0x48
 800889a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800889e:	f1b8 0f00 	cmp.w	r8, #0
 80088a2:	d021      	beq.n	80088e8 <__register_exitproc+0xa8>
 80088a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80088a8:	f7ff fbb8 	bl	800801c <malloc>
 80088ac:	b390      	cbz	r0, 8008914 <__register_exitproc+0xd4>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80088b4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80088b8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80088bc:	6862      	ldr	r2, [r4, #4]
 80088be:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 80088c2:	2301      	movs	r3, #1
 80088c4:	4093      	lsls	r3, r2
 80088c6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80088ca:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80088ce:	431a      	orrs	r2, r3
 80088d0:	f1b8 0f02 	cmp.w	r8, #2
 80088d4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80088d8:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 80088dc:	bf02      	ittt	eq
 80088de:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80088e2:	4313      	orreq	r3, r2
 80088e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	6828      	ldr	r0, [r5, #0]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	3302      	adds	r3, #2
 80088f0:	6062      	str	r2, [r4, #4]
 80088f2:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 80088f6:	f000 f92d 	bl	8008b54 <__retarget_lock_release_recursive>
 80088fa:	2000      	movs	r0, #0
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	f1b8 0f00 	cmp.w	r8, #0
 8008904:	d0f0      	beq.n	80088e8 <__register_exitproc+0xa8>
 8008906:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800890a:	2800      	cmp	r0, #0
 800890c:	d1d6      	bne.n	80088bc <__register_exitproc+0x7c>
 800890e:	4b06      	ldr	r3, [pc, #24]	; (8008928 <__register_exitproc+0xe8>)
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1c7      	bne.n	80088a4 <__register_exitproc+0x64>
 8008914:	6828      	ldr	r0, [r5, #0]
 8008916:	f000 f91c 	bl	8008b52 <__retarget_lock_release>
 800891a:	e7af      	b.n	800887c <__register_exitproc+0x3c>
 800891c:	20000514 	.word	0x20000514
 8008920:	0800983c 	.word	0x0800983c
 8008924:	08009840 	.word	0x08009840
 8008928:	0800801d 	.word	0x0800801d

0800892c <_malloc_trim_r>:
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008930:	4f25      	ldr	r7, [pc, #148]	; (80089c8 <_malloc_trim_r+0x9c>)
 8008932:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80089d4 <_malloc_trim_r+0xa8>
 8008936:	4689      	mov	r9, r1
 8008938:	4606      	mov	r6, r0
 800893a:	f7ff fd99 	bl	8008470 <__malloc_lock>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	685d      	ldr	r5, [r3, #4]
 8008942:	f1a8 0411 	sub.w	r4, r8, #17
 8008946:	f025 0503 	bic.w	r5, r5, #3
 800894a:	eba4 0409 	sub.w	r4, r4, r9
 800894e:	442c      	add	r4, r5
 8008950:	fbb4 f4f8 	udiv	r4, r4, r8
 8008954:	3c01      	subs	r4, #1
 8008956:	fb08 f404 	mul.w	r4, r8, r4
 800895a:	4544      	cmp	r4, r8
 800895c:	da05      	bge.n	800896a <_malloc_trim_r+0x3e>
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff fd8c 	bl	800847c <__malloc_unlock>
 8008964:	2000      	movs	r0, #0
 8008966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896a:	2100      	movs	r1, #0
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff ff13 	bl	8008798 <_sbrk_r>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	442b      	add	r3, r5
 8008976:	4298      	cmp	r0, r3
 8008978:	d1f1      	bne.n	800895e <_malloc_trim_r+0x32>
 800897a:	4261      	negs	r1, r4
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ff0b 	bl	8008798 <_sbrk_r>
 8008982:	3001      	adds	r0, #1
 8008984:	d110      	bne.n	80089a8 <_malloc_trim_r+0x7c>
 8008986:	2100      	movs	r1, #0
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff ff05 	bl	8008798 <_sbrk_r>
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	1a83      	subs	r3, r0, r2
 8008992:	2b0f      	cmp	r3, #15
 8008994:	dde3      	ble.n	800895e <_malloc_trim_r+0x32>
 8008996:	490d      	ldr	r1, [pc, #52]	; (80089cc <_malloc_trim_r+0xa0>)
 8008998:	6809      	ldr	r1, [r1, #0]
 800899a:	1a40      	subs	r0, r0, r1
 800899c:	490c      	ldr	r1, [pc, #48]	; (80089d0 <_malloc_trim_r+0xa4>)
 800899e:	f043 0301 	orr.w	r3, r3, #1
 80089a2:	6008      	str	r0, [r1, #0]
 80089a4:	6053      	str	r3, [r2, #4]
 80089a6:	e7da      	b.n	800895e <_malloc_trim_r+0x32>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <_malloc_trim_r+0xa4>)
 80089ac:	1b2d      	subs	r5, r5, r4
 80089ae:	f045 0501 	orr.w	r5, r5, #1
 80089b2:	605d      	str	r5, [r3, #4]
 80089b4:	6813      	ldr	r3, [r2, #0]
 80089b6:	4630      	mov	r0, r6
 80089b8:	1b1c      	subs	r4, r3, r4
 80089ba:	6014      	str	r4, [r2, #0]
 80089bc:	f7ff fd5e 	bl	800847c <__malloc_unlock>
 80089c0:	2001      	movs	r0, #1
 80089c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c6:	bf00      	nop
 80089c8:	20000104 	.word	0x20000104
 80089cc:	2000050c 	.word	0x2000050c
 80089d0:	20003d1c 	.word	0x20003d1c
 80089d4:	00001000 	.word	0x00001000

080089d8 <_free_r>:
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	4604      	mov	r4, r0
 80089de:	4688      	mov	r8, r1
 80089e0:	2900      	cmp	r1, #0
 80089e2:	f000 80ab 	beq.w	8008b3c <_free_r+0x164>
 80089e6:	f7ff fd43 	bl	8008470 <__malloc_lock>
 80089ea:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80089ee:	4d54      	ldr	r5, [pc, #336]	; (8008b40 <_free_r+0x168>)
 80089f0:	f022 0001 	bic.w	r0, r2, #1
 80089f4:	f1a8 0308 	sub.w	r3, r8, #8
 80089f8:	181f      	adds	r7, r3, r0
 80089fa:	68a9      	ldr	r1, [r5, #8]
 80089fc:	687e      	ldr	r6, [r7, #4]
 80089fe:	428f      	cmp	r7, r1
 8008a00:	f026 0603 	bic.w	r6, r6, #3
 8008a04:	f002 0201 	and.w	r2, r2, #1
 8008a08:	d11b      	bne.n	8008a42 <_free_r+0x6a>
 8008a0a:	4430      	add	r0, r6
 8008a0c:	b93a      	cbnz	r2, 8008a1e <_free_r+0x46>
 8008a0e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	4410      	add	r0, r2
 8008a16:	6899      	ldr	r1, [r3, #8]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	60ca      	str	r2, [r1, #12]
 8008a1c:	6091      	str	r1, [r2, #8]
 8008a1e:	f040 0201 	orr.w	r2, r0, #1
 8008a22:	605a      	str	r2, [r3, #4]
 8008a24:	60ab      	str	r3, [r5, #8]
 8008a26:	4b47      	ldr	r3, [pc, #284]	; (8008b44 <_free_r+0x16c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4298      	cmp	r0, r3
 8008a2c:	d304      	bcc.n	8008a38 <_free_r+0x60>
 8008a2e:	4b46      	ldr	r3, [pc, #280]	; (8008b48 <_free_r+0x170>)
 8008a30:	4620      	mov	r0, r4
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	f7ff ff7a 	bl	800892c <_malloc_trim_r>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	f7ff bd1d 	b.w	800847c <__malloc_unlock>
 8008a42:	607e      	str	r6, [r7, #4]
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	d139      	bne.n	8008abc <_free_r+0xe4>
 8008a48:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008a4c:	1a5b      	subs	r3, r3, r1
 8008a4e:	4408      	add	r0, r1
 8008a50:	6899      	ldr	r1, [r3, #8]
 8008a52:	f105 0e08 	add.w	lr, r5, #8
 8008a56:	4571      	cmp	r1, lr
 8008a58:	d032      	beq.n	8008ac0 <_free_r+0xe8>
 8008a5a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008a5e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8008a62:	f8ce 1008 	str.w	r1, [lr, #8]
 8008a66:	19b9      	adds	r1, r7, r6
 8008a68:	6849      	ldr	r1, [r1, #4]
 8008a6a:	07c9      	lsls	r1, r1, #31
 8008a6c:	d40a      	bmi.n	8008a84 <_free_r+0xac>
 8008a6e:	4430      	add	r0, r6
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	bb3a      	cbnz	r2, 8008ac4 <_free_r+0xec>
 8008a74:	4e35      	ldr	r6, [pc, #212]	; (8008b4c <_free_r+0x174>)
 8008a76:	42b1      	cmp	r1, r6
 8008a78:	d124      	bne.n	8008ac4 <_free_r+0xec>
 8008a7a:	616b      	str	r3, [r5, #20]
 8008a7c:	612b      	str	r3, [r5, #16]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	60d9      	str	r1, [r3, #12]
 8008a82:	6099      	str	r1, [r3, #8]
 8008a84:	f040 0101 	orr.w	r1, r0, #1
 8008a88:	6059      	str	r1, [r3, #4]
 8008a8a:	5018      	str	r0, [r3, r0]
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	d1d3      	bne.n	8008a38 <_free_r+0x60>
 8008a90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008a94:	d21a      	bcs.n	8008acc <_free_r+0xf4>
 8008a96:	08c0      	lsrs	r0, r0, #3
 8008a98:	1081      	asrs	r1, r0, #2
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	408a      	lsls	r2, r1
 8008a9e:	6869      	ldr	r1, [r5, #4]
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	606a      	str	r2, [r5, #4]
 8008aa6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008aaa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8008aae:	6099      	str	r1, [r3, #8]
 8008ab0:	3a08      	subs	r2, #8
 8008ab2:	60da      	str	r2, [r3, #12]
 8008ab4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008ab8:	60cb      	str	r3, [r1, #12]
 8008aba:	e7bd      	b.n	8008a38 <_free_r+0x60>
 8008abc:	2200      	movs	r2, #0
 8008abe:	e7d2      	b.n	8008a66 <_free_r+0x8e>
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	e7d0      	b.n	8008a66 <_free_r+0x8e>
 8008ac4:	68fe      	ldr	r6, [r7, #12]
 8008ac6:	60ce      	str	r6, [r1, #12]
 8008ac8:	60b1      	str	r1, [r6, #8]
 8008aca:	e7db      	b.n	8008a84 <_free_r+0xac>
 8008acc:	0a42      	lsrs	r2, r0, #9
 8008ace:	2a04      	cmp	r2, #4
 8008ad0:	d813      	bhi.n	8008afa <_free_r+0x122>
 8008ad2:	0982      	lsrs	r2, r0, #6
 8008ad4:	3238      	adds	r2, #56	; 0x38
 8008ad6:	1c51      	adds	r1, r2, #1
 8008ad8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008adc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8008ae0:	428e      	cmp	r6, r1
 8008ae2:	d124      	bne.n	8008b2e <_free_r+0x156>
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	1092      	asrs	r2, r2, #2
 8008ae8:	fa00 f202 	lsl.w	r2, r0, r2
 8008aec:	6868      	ldr	r0, [r5, #4]
 8008aee:	4302      	orrs	r2, r0
 8008af0:	606a      	str	r2, [r5, #4]
 8008af2:	60de      	str	r6, [r3, #12]
 8008af4:	6099      	str	r1, [r3, #8]
 8008af6:	60b3      	str	r3, [r6, #8]
 8008af8:	e7de      	b.n	8008ab8 <_free_r+0xe0>
 8008afa:	2a14      	cmp	r2, #20
 8008afc:	d801      	bhi.n	8008b02 <_free_r+0x12a>
 8008afe:	325b      	adds	r2, #91	; 0x5b
 8008b00:	e7e9      	b.n	8008ad6 <_free_r+0xfe>
 8008b02:	2a54      	cmp	r2, #84	; 0x54
 8008b04:	d802      	bhi.n	8008b0c <_free_r+0x134>
 8008b06:	0b02      	lsrs	r2, r0, #12
 8008b08:	326e      	adds	r2, #110	; 0x6e
 8008b0a:	e7e4      	b.n	8008ad6 <_free_r+0xfe>
 8008b0c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008b10:	d802      	bhi.n	8008b18 <_free_r+0x140>
 8008b12:	0bc2      	lsrs	r2, r0, #15
 8008b14:	3277      	adds	r2, #119	; 0x77
 8008b16:	e7de      	b.n	8008ad6 <_free_r+0xfe>
 8008b18:	f240 5154 	movw	r1, #1364	; 0x554
 8008b1c:	428a      	cmp	r2, r1
 8008b1e:	bf9a      	itte	ls
 8008b20:	0c82      	lsrls	r2, r0, #18
 8008b22:	327c      	addls	r2, #124	; 0x7c
 8008b24:	227e      	movhi	r2, #126	; 0x7e
 8008b26:	e7d6      	b.n	8008ad6 <_free_r+0xfe>
 8008b28:	6889      	ldr	r1, [r1, #8]
 8008b2a:	428e      	cmp	r6, r1
 8008b2c:	d004      	beq.n	8008b38 <_free_r+0x160>
 8008b2e:	684a      	ldr	r2, [r1, #4]
 8008b30:	f022 0203 	bic.w	r2, r2, #3
 8008b34:	4290      	cmp	r0, r2
 8008b36:	d3f7      	bcc.n	8008b28 <_free_r+0x150>
 8008b38:	68ce      	ldr	r6, [r1, #12]
 8008b3a:	e7da      	b.n	8008af2 <_free_r+0x11a>
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	20000104 	.word	0x20000104
 8008b44:	20000510 	.word	0x20000510
 8008b48:	20003d4c 	.word	0x20003d4c
 8008b4c:	2000010c 	.word	0x2000010c

08008b50 <__retarget_lock_acquire_recursive>:
 8008b50:	4770      	bx	lr

08008b52 <__retarget_lock_release>:
 8008b52:	4770      	bx	lr

08008b54 <__retarget_lock_release_recursive>:
 8008b54:	4770      	bx	lr

08008b56 <memmove>:
 8008b56:	4288      	cmp	r0, r1
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	eb01 0302 	add.w	r3, r1, r2
 8008b5e:	d803      	bhi.n	8008b68 <memmove+0x12>
 8008b60:	1e42      	subs	r2, r0, #1
 8008b62:	4299      	cmp	r1, r3
 8008b64:	d10c      	bne.n	8008b80 <memmove+0x2a>
 8008b66:	bd10      	pop	{r4, pc}
 8008b68:	4298      	cmp	r0, r3
 8008b6a:	d2f9      	bcs.n	8008b60 <memmove+0xa>
 8008b6c:	1881      	adds	r1, r0, r2
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	42d3      	cmn	r3, r2
 8008b72:	d100      	bne.n	8008b76 <memmove+0x20>
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b7e:	e7f7      	b.n	8008b70 <memmove+0x1a>
 8008b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b88:	e7eb      	b.n	8008b62 <memmove+0xc>
	...

08008b8c <_getpid>:
 8008b8c:	4b02      	ldr	r3, [pc, #8]	; (8008b98 <_getpid+0xc>)
 8008b8e:	2258      	movs	r2, #88	; 0x58
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b96:	4770      	bx	lr
 8008b98:	20003e68 	.word	0x20003e68

08008b9c <_kill>:
 8008b9c:	4b02      	ldr	r3, [pc, #8]	; (8008ba8 <_kill+0xc>)
 8008b9e:	2258      	movs	r2, #88	; 0x58
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba6:	4770      	bx	lr
 8008ba8:	20003e68 	.word	0x20003e68

08008bac <_sbrk>:
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <_sbrk+0x14>)
 8008bae:	6819      	ldr	r1, [r3, #0]
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	b909      	cbnz	r1, 8008bb8 <_sbrk+0xc>
 8008bb4:	4903      	ldr	r1, [pc, #12]	; (8008bc4 <_sbrk+0x18>)
 8008bb6:	6019      	str	r1, [r3, #0]
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	4402      	add	r2, r0
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	4770      	bx	lr
 8008bc0:	20003e58 	.word	0x20003e58
 8008bc4:	20003e6c 	.word	0x20003e6c

08008bc8 <_exit>:
 8008bc8:	e7fe      	b.n	8008bc8 <_exit>
	...

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr
